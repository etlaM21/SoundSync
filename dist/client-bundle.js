/*! For license information please see client-bundle.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={11:(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var r=n(354),a=n.n(r),l=n(314),o=n.n(l)()(a());o.push([e.id,':root{--semi-grey: #1d1d1d;--dark-grey: #0e0e0e;--light-grey: #303030;--dark: #000000;--light: #b0b0b0;--lightest: #d0d0d0;--highlight: #4096f3}html,body,#root,#root>div{height:100%}body{background-color:rgba(0,0,0,0);font-family:"Source Sans Pro",Arial,Helvetica,sans-serif;color:var(--light);font-size:1rem}button,input,label,select{margin-right:3px}button,input,select,svg{cursor:pointer}button,input,select,option,label{border-radius:3px;border:solid 1.5px var(--light-grey);background-color:var(--dark-grey);padding:1.5px 3px;text-transform:uppercase;color:var(--light)}svg{height:calc(1rem - 1px);width:auto;margin-right:4.5px;fill:var(--light);transform:translateY(2px)}svg:hover,svg:focus{fill:var(--lightest)}svg.active{fill:var(--highlight)}button:hover,button:focus,input:hover,input:focus,select:hover,select:focus,option:hover,option:focus{background-color:var(--dark);color:var(--lightest)}button:focus,input:focus,select:focus,option:focus{outline:solid 1.5px var(--highlight)}hr{border:1px solid var(--dark)}label{font-size:calc(1rem - 2.5px);padding-bottom:.5px;padding-top:.5px;padding-right:6px;margin-right:-3px}main{display:flex;flex-direction:column;flex-wrap:wrap;width:100%;height:100%}#loader{position:fixed;z-index:10000;text-align:center;top:0;left:0;width:100vw;height:100vh;background-color:var(--dark);opacity:.9}#loader h1,#loader p{animation-name:loadingOpacity;animation-duration:.75s;animation-iteration-count:infinite;animation-direction:alternate}#loader p{animation-delay:.5s}@keyframes loadingOpacity{from{opacity:.5}to{opacity:1}}#toolbar{width:100%;flex:0;margin-top:-3px;margin-bottom:6px;display:flex}#toolbar menu{margin:0;padding:0;display:block;flex-shrink:1;flex-basis:auto;align-self:auto}#toolbar menu#main{flex-grow:1}#toolbar menu #filter-dropdown{position:absolute;z-index:100;left:.5rem;top:2rem;background-color:var(--light);border-radius:3px;border:solid 1.5px var(--light-grey);color:var(--dark-grey)}#toolbar menu #filter-dropdown ul{list-style-type:none;margin:0;padding:0}#toolbar menu #filter-dropdown ul li{padding:.25rem .5rem;transition:background-color .1s ease-in-out,color .1s ease-in-out;font-size:.9rem;cursor:pointer}#toolbar menu #filter-dropdown ul li:not(:last-child){border-bottom:solid 1.5px var(--light-grey)}#toolbar menu #filter-dropdown ul li.active{background-color:var(--highlight);color:var(--light-grey)}#toolbar menu #filter-dropdown ul li:hover{background-color:var(--dark-grey);color:var(--light)}#information{width:100%;flex:0}#information p:has(small){margin-top:0}#timeline{width:100%;height:100%;flex:1;display:block;position:relative;min-width:100%;min-height:50px;border-radius:3px;border:solid 3px var(--light-grey);background-color:rgba(0,0,0,0);overflow-x:auto}#timeline .grid-timeline,#timeline .grid-bar,#timeline .grid-layers{column-gap:3px;min-width:100%}#timeline .grid-bar,#timeline .grid-beat{height:100%}#timeline .grid-timeline{position:sticky;top:0;left:0;z-index:-10;height:100%;display:grid;grid-template:100%/repeat(3, 1fr);background-color:var(--light-grey)}#timeline .grid-timeline .grid-bar{display:grid;grid-template:repeat(1, 1fr)/repeat(4, 1fr);background-color:var(--semi-grey)}#timeline .grid-timeline .grid-bar .grid-beat{background-color:var(--dark-grey)}#timeline .grid-layers{display:grid;grid-template:repeat(1, 1fr)/repeat(12, 1fr);background-color:rgba(0,0,0,0);height:0;overflow-x:clip}#timeline .grid-layers .timeline-layer{position:relative;background-color:#9932cc;border-radius:3px;padding:3px;margin-top:6px;margin-bottom:6px;grid-column-start:3;grid-column-end:6;font-size:.9rem;white-space:nowrap;cursor:ew-resize;-webkit-touch-callout:none !important;-webkit-user-select:none !important;-webkit-user-drag:none !important;-khtml-user-select:none !important;-moz-user-select:none !important;-ms-user-select:none !important;user-select:none !important}#timeline .grid-layers .timeline-layer .timeline-layer-button{position:absolute;top:0;width:50%;height:100%}#timeline .grid-layers .timeline-layer .timeline-layer-button.left{left:0}#timeline .grid-layers .timeline-layer .timeline-layer-button.right{right:0}#timeline .grid-layers .timeline-layer span{color:#fff;mix-blend-mode:difference;pointer-events:none;transform-origin:left}#timeline .grid-layers .timeline-layer.ghost{background-color:rgba(0,0,0,0);outline-style:solid;outline-width:3px;outline-offset:2px}',"",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAAA,MACI,oBAAA,CACA,oBAAA,CACA,qBAAA,CACA,eAAA,CACA,gBAAA,CACA,mBAAA,CACA,oBAAA,CAGJ,0BACI,WAAA,CAGJ,KACI,8BAAA,CACA,wDAAA,CACA,kBAAA,CACA,cAAA,CAGJ,0BACI,gBAAA,CAGJ,wBACI,cAAA,CAGJ,iCACI,iBAAA,CACA,oCAAA,CACA,iCAAA,CACA,iBAAA,CACA,wBAAA,CACA,kBAAA,CAGJ,IACI,uBAAA,CACA,UAAA,CACA,kBAAA,CACA,iBAAA,CACA,yBAAA,CACA,oBACI,oBAAA,CAEJ,WACI,qBAAA,CAKJ,sGACI,4BAAA,CACA,qBAAA,CAEJ,mDACI,oCAAA,CAIR,GACI,4BAAA,CAGJ,MACI,4BAAA,CACA,mBAAA,CACA,gBAAA,CACA,iBAAA,CACA,iBAAA,CAGJ,KACI,YAAA,CACA,qBAAA,CACA,cAAA,CACA,UAAA,CACA,WAAA,CAGJ,QACI,cAAA,CACA,aAAA,CACA,iBAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,YAAA,CACA,4BAAA,CACA,UAAA,CACA,qBACI,6BAAA,CACA,uBAAA,CACA,kCAAA,CACA,6BAAA,CAEJ,UACI,mBAAA,CAIR,0BACI,KAAA,UAAA,CACA,GAAA,SAAA,CAAA,CAGJ,SACI,UAAA,CACA,MAAA,CACA,eAAA,CACA,iBAAA,CACA,YAAA,CACA,cACI,QAAA,CACA,SAAA,CACA,aAAA,CACA,aAAA,CACA,eAAA,CACA,eAAA,CACA,mBACI,WAAA,CAEJ,+BACI,iBAAA,CACA,WAAA,CACA,UAAA,CACA,QAAA,CACA,6BAAA,CACA,iBAAA,CACA,oCAAA,CACA,sBAAA,CACA,kCACI,oBAAA,CACA,QAAA,CACA,SAAA,CACA,qCACI,oBAAA,CACA,iEAAA,CACA,eAAA,CACA,cAAA,CACA,sDACI,2CAAA,CAEJ,4CACI,iCAAA,CACA,uBAAA,CAEJ,2CACI,iCAAA,CACA,kBAAA,CAQxB,aACI,UAAA,CACA,MAAA,CAEI,0BACI,YAAA,CAKZ,UACI,UAAA,CACA,WAAA,CACA,MAAA,CACA,aAAA,CACA,iBAAA,CACA,cAAA,CACA,eAAA,CACA,iBAAA,CACA,kCAAA,CACA,8BAAA,CACA,eAAA,CACA,oEACI,cAAA,CACA,cAAA,CAEJ,yCACI,WAAA,CAEJ,yBACI,eAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,WAAA,CACA,YAAA,CACA,iCAAA,CACA,kCAAA,CACA,mCACI,YAAA,CACA,2CAAA,CACA,iCAAA,CACA,8CACI,iCAAA,CAIZ,uBACI,YAAA,CACA,4CAAA,CACA,8BAAA,CACA,QAAA,CACA,eAAA,CACA,uCACI,iBAAA,CACA,wBAAA,CACA,iBAAA,CACA,WAAA,CACA,cAAA,CACA,iBAAA,CACA,mBAAA,CACA,iBAAA,CACA,eAAA,CACA,kBAAA,CACA,gBAAA,CACA,qCAAA,CACA,mCAAA,CACA,iCAAA,CACA,kCAAA,CACA,gCAAA,CACA,+BAAA,CACA,2BAAA,CACA,8DACI,iBAAA,CACA,KAAA,CACA,SAAA,CACA,WAAA,CACA,mEACI,MAAA,CAEJ,oEACI,OAAA,CAGR,4CACI,UAAA,CACA,yBAAA,CACA,mBAAA,CACA,qBAAA,CAEJ,6CACI,8BAAA,CACA,mBAAA,CACA,iBAAA,CACA,kBAAA",sourcesContent:[":root {\r\n    --semi-grey: #1d1d1d;\r\n    --dark-grey: #0e0e0e;\r\n    --light-grey: #303030;\r\n    --dark: #000000;\r\n    --light: #b0b0b0;\r\n    --lightest: #d0d0d0;\r\n    --highlight: #4096f3;\r\n}\r\n\r\nhtml, body, #root, #root>div {\r\n    height: 100%;\r\n}\r\n\r\nbody {\r\n    background-color: transparent;\r\n    font-family: 'Source Sans Pro', Arial, Helvetica, sans-serif;\r\n    color: var(--light);\r\n    font-size: 1rem;\r\n}\r\n\r\nbutton, input, label, select {\r\n    margin-right: 3px;\r\n}\r\n\r\nbutton, input, select, svg {\r\n    cursor: pointer;\r\n}\r\n\r\nbutton, input, select, option, label {\r\n    border-radius: 3px;\r\n    border: solid 1.5px var(--light-grey);\r\n    background-color: var(--dark-grey);\r\n    padding: 1.5px 3px;\r\n    text-transform: uppercase;\r\n    color: var(--light);\r\n}\r\n\r\nsvg {\r\n    height: calc(1rem - 1px);\r\n    width: auto;\r\n    margin-right: 4.5px;\r\n    fill: var(--light);\r\n    transform: translateY(2px);\r\n    &:hover, &:focus {\r\n        fill: var(--lightest);\r\n    }\r\n    &.active {\r\n        fill: var(--highlight);\r\n    }\r\n}\r\n\r\nbutton, input, select, option {\r\n    &:hover, &:focus {\r\n        background-color: var(--dark);\r\n        color: var(--lightest);\r\n    }\r\n    &:focus {\r\n        outline: solid 1.5px var(--highlight);\r\n    }\r\n}\r\n\r\nhr {\r\n    border: 1px solid var(--dark);\r\n}\r\n\r\nlabel {\r\n    font-size: calc(1rem - 2.5px);\r\n    padding-bottom: 0.5px;\r\n    padding-top: 0.5px;\r\n    padding-right: 6px;\r\n    margin-right: -3px;\r\n}\r\n\r\nmain {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n#loader {\r\n    position: fixed;\r\n    z-index: 10000;\r\n    text-align: center;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-color: var(--dark);\r\n    opacity: 0.9;\r\n    h1, p {\r\n        animation-name: loadingOpacity;\r\n        animation-duration: 0.75s;\r\n        animation-iteration-count: infinite;\r\n        animation-direction: alternate;\r\n    }\r\n    p {\r\n        animation-delay: 0.5s;\r\n    }\r\n}\r\n\r\n@keyframes loadingOpacity {\r\n    from {opacity: 0.5;}\r\n    to {opacity: 1;}\r\n  }\r\n\r\n#toolbar {\r\n    width: 100%;\r\n    flex: 0;\r\n    margin-top: -3px;\r\n    margin-bottom: 6px;\r\n    display: flex;\r\n    menu {\r\n        margin: 0;\r\n        padding: 0;\r\n        display: block;\r\n        flex-shrink: 1;\r\n        flex-basis: auto;\r\n        align-self: auto;\r\n        &#main {   \r\n            flex-grow: 1;\r\n        }\r\n        #filter-dropdown {\r\n            position: absolute;\r\n            z-index: 100;\r\n            left: 0.5rem;\r\n            top: 2rem;\r\n            background-color: var(--light);\r\n            border-radius: 3px;\r\n            border: solid 1.5px var(--light-grey);\r\n            color: var(--dark-grey);\r\n            ul {\r\n                list-style-type: none;\r\n                margin: 0;\r\n                padding: 0;\r\n                li {\r\n                    padding: 0.25rem 0.5rem;\r\n                    transition: background-color 0.1s ease-in-out, color 0.1s ease-in-out;\r\n                    font-size: 0.9rem;\r\n                    cursor: pointer;\r\n                    &:not(:last-child) {\r\n                        border-bottom: solid 1.5px var(--light-grey);\r\n                    }\r\n                    &.active {\r\n                        background-color: var(--highlight);\r\n                        color: var(--light-grey);\r\n                    }\r\n                    &:hover {\r\n                        background-color: var(--dark-grey);\r\n                        color: var(--light);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n#information {\r\n    width: 100%;\r\n    flex: 0;\r\n    p {\r\n        &:has(small) {\r\n            margin-top: 0;\r\n        }\r\n    }\r\n}\r\n\r\n#timeline {\r\n    width: 100%;\r\n    height: 100%;\r\n    flex: 1;\r\n    display: block;\r\n    position: relative;\r\n    min-width: 100%;\r\n    min-height: 50px;\r\n    border-radius: 3px;\r\n    border: solid 3px var(--light-grey);\r\n    background-color: transparent;\r\n    overflow-x: auto;\r\n    .grid-timeline, .grid-bar, .grid-layers {\r\n        column-gap: 3px;\r\n        min-width: 100%;\r\n    }\r\n    .grid-bar, .grid-beat {\r\n        height: 100%;\r\n    }\r\n    .grid-timeline {\r\n        position: sticky;\r\n        top: 0;\r\n        left: 0;\r\n        z-index: -10;\r\n        height: 100%;\r\n        display: grid;\r\n        grid-template: 100% / repeat(3, 1fr);\r\n        background-color: var(--light-grey); /* Color of bar vertical lines */\r\n        .grid-bar {\r\n            display: grid;\r\n            grid-template: repeat(1, 1fr) / repeat(4, 1fr);\r\n            background-color: var(--semi-grey); /* Color of beat vertical lines */\r\n            .grid-beat {\r\n                background-color: var(--dark-grey);\r\n            }\r\n        }\r\n    }\r\n    .grid-layers {\r\n        display: grid;\r\n        grid-template: repeat(1, 1fr) / repeat(12, 1fr);\r\n        background-color: transparent;\r\n        height: 0;\r\n        overflow-x: clip;\r\n        .timeline-layer {\r\n            position: relative;\r\n            background-color: darkorchid;\r\n            border-radius: 3px;\r\n            padding: 3px;\r\n            margin-top: 6px;\r\n            margin-bottom: 6px;\r\n            grid-column-start: 3;\r\n            grid-column-end: 6;\r\n            font-size: 0.9rem;\r\n            white-space: nowrap;\r\n            cursor: ew-resize;\r\n            -webkit-touch-callout: none !important;\r\n            -webkit-user-select: none !important;\r\n            -webkit-user-drag: none !important;\r\n            -khtml-user-select: none !important;\r\n            -moz-user-select: none !important;\r\n            -ms-user-select: none !important;\r\n            user-select: none !important;\r\n            .timeline-layer-button {\r\n                position: absolute;\r\n                top: 0;\r\n                width: 50%;\r\n                height: 100%;\r\n                &.left {\r\n                    left: 0;\r\n                }\r\n                &.right {\r\n                    right: 0;\r\n                }\r\n            }\r\n            span {\r\n                color: #ffffff;\r\n                mix-blend-mode: difference;\r\n                pointer-events: none;\r\n                transform-origin: left;\r\n            }\r\n            &.ghost {\r\n                background-color: transparent;\r\n                outline-style: solid;\r\n                outline-width: 3px;\r\n                outline-offset: 2px;\r\n            }\r\n        }\r\n    }\r\n}"],sourceRoot:""}]);const i=o},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var l={},o=[],i=0;i<e.length;i++){var u=e[i],c=r.base?u[0]+r.base:u[0],s=l[c]||0,f="".concat(c," ").concat(s);l[c]=s+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=a(p,r);r.byIndex=i,t.splice(i,0,{identifier:f,updater:h,references:1})}o.push(f)}return o}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var l=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<l.length;o++){var i=n(l[o]);t[i].references--}for(var u=r(e,a),c=0;c<l.length;c++){var s=n(l[c]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}l=u}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},159:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},221:(e,t,n)=>{var r=n(540);function a(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function l(){}var o={d:{f:l,r:function(){throw Error(a(522))},D:l,C:l,L:l,m:l,X:l,S:l,M:l},p:0,findDOMNode:null},i=Symbol.for("react.portal"),u=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function c(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=o,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(a(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:i,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=u.T,n=o.p;try{if(u.T=null,o.p=2,e)return e()}finally{u.T=t,o.p=n,o.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,o.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&o.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=c(n,t.crossOrigin),a="string"==typeof t.integrity?t.integrity:void 0,l="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?o.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:a,fetchPriority:l}):"script"===n&&o.d.X(e,{crossOrigin:r,integrity:a,fetchPriority:l,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=c(t.as,t.crossOrigin);o.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&o.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=c(n,t.crossOrigin);o.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=c(t.as,t.crossOrigin);o.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else o.d.m(e)},t.requestFormReset=function(e){o.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return u.H.useFormState(e,t,n)},t.useFormStatus=function(){return u.H.useHostTransitionStatus()},t.version="19.0.0"},247:(e,t,n)=>{var r=n(982),a=n(540),l=n(961);function o(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=Symbol.for("react.element"),u=Symbol.for("react.transitional.element"),c=Symbol.for("react.portal"),s=Symbol.for("react.fragment"),f=Symbol.for("react.strict_mode"),d=Symbol.for("react.profiler"),p=Symbol.for("react.provider"),h=Symbol.for("react.consumer"),m=Symbol.for("react.context"),g=Symbol.for("react.forward_ref"),v=Symbol.for("react.suspense"),y=Symbol.for("react.suspense_list"),b=Symbol.for("react.memo"),A=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var w=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var k=Symbol.for("react.memo_cache_sentinel"),S=Symbol.iterator;function C(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=S&&e[S]||e["@@iterator"])?e:null}var E=Symbol.for("react.client.reference");function x(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===E?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case s:return"Fragment";case c:return"Portal";case d:return"Profiler";case f:return"StrictMode";case v:return"Suspense";case y:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case m:return(e.displayName||"Context")+".Provider";case h:return(e._context.displayName||"Context")+".Consumer";case g:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case b:return null!==(t=e.displayName||null)?t:x(e.type)||"Memo";case A:t=e._payload,e=e._init;try{return x(e(t))}catch(e){}}return null}var P,_,L=a.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,z=Object.assign;function N(e){if(void 0===P)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);P=t&&t[1]||"",_=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+P+e+_}var O=!1;function T(e,t){if(!e||O)return"";O=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var a=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");a&&a.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var l=r.DetermineComponentFrameRoot(),o=l[0],i=l[1];if(o&&i){var u=o.split("\n"),c=i.split("\n");for(a=r=0;r<u.length&&!u[r].includes("DetermineComponentFrameRoot");)r++;for(;a<c.length&&!c[a].includes("DetermineComponentFrameRoot");)a++;if(r===u.length||a===c.length)for(r=u.length-1,a=c.length-1;1<=r&&0<=a&&u[r]!==c[a];)a--;for(;1<=r&&0<=a;r--,a--)if(u[r]!==c[a]){if(1!==r||1!==a)do{if(r--,0>--a||u[r]!==c[a]){var s="\n"+u[r].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=r&&0<=a);break}}}finally{O=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?N(n):""}function I(e){switch(e.tag){case 26:case 27:case 5:return N(e.type);case 16:return N("Lazy");case 13:return N("Suspense");case 19:return N("SuspenseList");case 0:case 15:return T(e.type,!1);case 11:return T(e.type.render,!1);case 1:return T(e.type,!0);default:return""}}function D(e){try{var t="";do{t+=I(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function M(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function R(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function j(e){if(M(e)!==e)throw Error(o(188))}function F(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=F(e)))return t;e=e.sibling}return null}var B=Array.isArray,U=l.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,H={pending:!1,data:null,method:null,action:null},V=[],$=-1;function G(e){return{current:e}}function q(e){0>$||(e.current=V[$],V[$]=null,$--)}function W(e,t){$++,V[$]=e.current,e.current=t}var Q=G(null),X=G(null),K=G(null),Y=G(null);function J(e,t){switch(W(K,t),W(X,e),W(Q,null),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)&&(t=t.namespaceURI)?Xs(t):0;break;default:if(t=(e=8===e?t.parentNode:t).tagName,e=e.namespaceURI)t=Ks(e=Xs(e),t);else switch(t){case"svg":t=1;break;case"math":t=2;break;default:t=0}}q(Q),W(Q,t)}function Z(){q(Q),q(X),q(K)}function ee(e){null!==e.memoizedState&&W(Y,e);var t=Q.current,n=Ks(t,e.type);t!==n&&(W(X,e),W(Q,n))}function te(e){X.current===e&&(q(Q),q(X)),Y.current===e&&(q(Y),Mf._currentValue=H)}var ne=Object.prototype.hasOwnProperty,re=r.unstable_scheduleCallback,ae=r.unstable_cancelCallback,le=r.unstable_shouldYield,oe=r.unstable_requestPaint,ie=r.unstable_now,ue=r.unstable_getCurrentPriorityLevel,ce=r.unstable_ImmediatePriority,se=r.unstable_UserBlockingPriority,fe=r.unstable_NormalPriority,de=r.unstable_LowPriority,pe=r.unstable_IdlePriority,he=r.log,me=r.unstable_setDisableYieldValue,ge=null,ve=null;function ye(e){if("function"==typeof he&&me(e),ve&&"function"==typeof ve.setStrictMode)try{ve.setStrictMode(ge,e)}catch(e){}}var be=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(Ae(e)/we|0)|0},Ae=Math.log,we=Math.LN2,ke=128,Se=4194304;function Ce(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194176&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function Ee(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,l=e.pingedLanes,o=e.warmLanes;e=0!==e.finishedLanes;var i=134217727&n;return 0!==i?0!=(n=i&~a)?r=Ce(n):0!=(l&=i)?r=Ce(l):e||0!=(o=i&~o)&&(r=Ce(o)):0!=(i=n&~a)?r=Ce(i):0!==l?r=Ce(l):e||0!=(o=n&~o)&&(r=Ce(o)),0===r?0:0===t||t===r||t&a||!((a=r&-r)>=(o=t&-t)||32===a&&4194176&o)?r:t}function xe(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function Pe(e,t){switch(e){case 1:case 2:case 4:case 8:return t+250;case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function _e(){var e=ke;return!(4194176&(ke<<=1))&&(ke=128),e}function Le(){var e=Se;return!(62914560&(Se<<=1))&&(Se=4194304),e}function ze(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ne(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Oe(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-be(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194218&n}function Te(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-be(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}function Ie(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function De(){var e=U.p;return 0!==e?e:void 0===(e=window.event)?32:Xf(e.type)}var Me=Math.random().toString(36).slice(2),Re="__reactFiber$"+Me,je="__reactProps$"+Me,Fe="__reactContainer$"+Me,Be="__reactEvents$"+Me,Ue="__reactListeners$"+Me,He="__reactHandles$"+Me,Ve="__reactResources$"+Me,$e="__reactMarker$"+Me;function Ge(e){delete e[Re],delete e[je],delete e[Be],delete e[Ue],delete e[He]}function qe(e){var t=e[Re];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Fe]||n[Re]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=uf(e);null!==e;){if(n=e[Re])return n;e=uf(e)}return t}n=(e=n).parentNode}return null}function We(e){if(e=e[Re]||e[Fe]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function Qe(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(o(33))}function Xe(e){var t=e[Ve];return t||(t=e[Ve]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function Ke(e){e[$e]=!0}var Ye=new Set,Je={};function Ze(e,t){et(e,t),et(e+"Capture",t)}function et(e,t){for(Je[e]=t,e=0;e<t.length;e++)Ye.add(t[e])}var tt=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),nt=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),rt={},at={};function lt(e,t,n){if(a=t,ne.call(at,a)||!ne.call(rt,a)&&(nt.test(a)?at[a]=!0:(rt[a]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var a}function ot(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function it(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function ut(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ct(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function st(e){e._valueTracker||(e._valueTracker=function(e){var t=ct(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,l=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,l.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ft(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ct(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function dt(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var pt=/[\n"\\]/g;function ht(e){return e.replace(pt,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function mt(e,t,n,r,a,l,o,i){e.name="",null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o?e.type=o:e.removeAttribute("type"),null!=t?"number"===o?(0===t&&""===e.value||e.value!=t)&&(e.value=""+ut(t)):e.value!==""+ut(t)&&(e.value=""+ut(t)):"submit"!==o&&"reset"!==o||e.removeAttribute("value"),null!=t?vt(e,o,ut(t)):null!=n?vt(e,o,ut(n)):null!=r&&e.removeAttribute("value"),null==a&&null!=l&&(e.defaultChecked=!!l),null!=a&&(e.checked=a&&"function"!=typeof a&&"symbol"!=typeof a),null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.name=""+ut(i):e.removeAttribute("name")}function gt(e,t,n,r,a,l,o,i){if(null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l&&(e.type=l),null!=t||null!=n){if(("submit"===l||"reset"===l)&&null==t)return;n=null!=n?""+ut(n):"",t=null!=t?""+ut(t):n,i||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:a)&&"symbol"!=typeof r&&!!r,e.checked=i?e.checked:!!r,e.defaultChecked=!!r,null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o&&(e.name=o)}function vt(e,t,n){"number"===t&&dt(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function yt(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ut(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function bt(e,t,n){null==t||((t=""+ut(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+ut(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function At(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(o(92));if(B(r)){if(1<r.length)throw Error(o(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=ut(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function wt(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var kt=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function St(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||kt.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function Ct(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(o(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var a in t)r=t[a],t.hasOwnProperty(a)&&n[a]!==r&&St(e,a,r)}else for(var l in t)t.hasOwnProperty(l)&&St(e,l,t[l])}function Et(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var xt=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Pt=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function _t(e){return Pt.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Lt=null;function zt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Nt=null,Ot=null;function Tt(e){var t=We(e);if(t&&(e=t.stateNode)){var n=e[je]||null;e:switch(e=t.stateNode,t.type){case"input":if(mt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+ht(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=r[je]||null;if(!a)throw Error(o(90));mt(r,a.value,a.defaultValue,a.defaultValue,a.checked,a.defaultChecked,a.type,a.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&ft(r)}break e;case"textarea":bt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&yt(e,!!n.multiple,t,!1)}}}var It=!1;function Dt(e,t,n){if(It)return e(t,n);It=!0;try{return e(t)}finally{if(It=!1,(null!==Nt||null!==Ot)&&(Rc(),Nt&&(t=Nt,e=Ot,Ot=Nt=null,Tt(t),e)))for(t=0;t<e.length;t++)Tt(e[t])}}function Mt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[je]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Rt=!1;if(tt)try{var jt={};Object.defineProperty(jt,"passive",{get:function(){Rt=!0}}),window.addEventListener("test",jt,jt),window.removeEventListener("test",jt,jt)}catch(e){Rt=!1}var Ft=null,Bt=null,Ut=null;function Ht(){if(Ut)return Ut;var e,t,n=Bt,r=n.length,a="value"in Ft?Ft.value:Ft.textContent,l=a.length;for(e=0;e<r&&n[e]===a[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===a[l-t];t++);return Ut=a.slice(e,1<t?1-t:void 0)}function Vt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function $t(){return!0}function Gt(){return!1}function qt(e){function t(t,n,r,a,l){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=l,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(a):a[o]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?$t:Gt,this.isPropagationStopped=Gt,this}return z(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=$t)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=$t)},persist:function(){},isPersistent:$t}),t}var Wt,Qt,Xt,Kt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Yt=qt(Kt),Jt=z({},Kt,{view:0,detail:0}),Zt=qt(Jt),en=z({},Jt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:dn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Xt&&(Xt&&"mousemove"===e.type?(Wt=e.screenX-Xt.screenX,Qt=e.screenY-Xt.screenY):Qt=Wt=0,Xt=e),Wt)},movementY:function(e){return"movementY"in e?e.movementY:Qt}}),tn=qt(en),nn=qt(z({},en,{dataTransfer:0})),rn=qt(z({},Jt,{relatedTarget:0})),an=qt(z({},Kt,{animationName:0,elapsedTime:0,pseudoElement:0})),ln=qt(z({},Kt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),on=qt(z({},Kt,{data:0})),un={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function fn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=sn[e])&&!!t[e]}function dn(){return fn}var pn=qt(z({},Jt,{key:function(e){if(e.key){var t=un[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Vt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:dn,charCode:function(e){return"keypress"===e.type?Vt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Vt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),hn=qt(z({},en,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),mn=qt(z({},Jt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:dn})),gn=qt(z({},Kt,{propertyName:0,elapsedTime:0,pseudoElement:0})),vn=qt(z({},en,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),yn=qt(z({},Kt,{newState:0,oldState:0})),bn=[9,13,27,32],An=tt&&"CompositionEvent"in window,wn=null;tt&&"documentMode"in document&&(wn=document.documentMode);var kn=tt&&"TextEvent"in window&&!wn,Sn=tt&&(!An||wn&&8<wn&&11>=wn),Cn=String.fromCharCode(32),En=!1;function xn(e,t){switch(e){case"keyup":return-1!==bn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Pn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var _n=!1,Ln={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ln[e.type]:"textarea"===t}function Nn(e,t,n,r){Nt?Ot?Ot.push(r):Ot=[r]:Nt=r,0<(t=Ds(t,"onChange")).length&&(n=new Yt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var On=null,Tn=null;function In(e){Ps(e,0)}function Dn(e){if(ft(Qe(e)))return e}function Mn(e,t){if("change"===e)return t}var Rn=!1;if(tt){var jn;if(tt){var Fn="oninput"in document;if(!Fn){var Bn=document.createElement("div");Bn.setAttribute("oninput","return;"),Fn="function"==typeof Bn.oninput}jn=Fn}else jn=!1;Rn=jn&&(!document.documentMode||9<document.documentMode)}function Un(){On&&(On.detachEvent("onpropertychange",Hn),Tn=On=null)}function Hn(e){if("value"===e.propertyName&&Dn(Tn)){var t=[];Nn(t,Tn,e,zt(e)),Dt(In,t)}}function Vn(e,t,n){"focusin"===e?(Un(),Tn=n,(On=t).attachEvent("onpropertychange",Hn)):"focusout"===e&&Un()}function $n(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Dn(Tn)}function Gn(e,t){if("click"===e)return Dn(t)}function qn(e,t){if("input"===e||"change"===e)return Dn(t)}var Wn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Qn(e,t){if(Wn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!ne.call(t,a)||!Wn(e[a],t[a]))return!1}return!0}function Xn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Kn(e,t){var n,r=Xn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Xn(r)}}function Yn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Yn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Jn(e){for(var t=dt((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=dt((e=t.contentWindow).document)}return t}function Zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function er(e,t){var n=Jn(t);t=e.focusedElem;var r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&Yn(t.ownerDocument.documentElement,t)){if(null!==r&&Zn(t))if(e=r.start,void 0===(n=r.end)&&(n=e),"selectionStart"in t)t.selectionStart=e,t.selectionEnd=Math.min(n,t.value.length);else if((n=(e=t.ownerDocument||document)&&e.defaultView||window).getSelection){n=n.getSelection();var a=t.textContent.length,l=Math.min(r.start,a);r=void 0===r.end?l:Math.min(r.end,a),!n.extend&&l>r&&(a=r,r=l,l=a),a=Kn(t,l);var o=Kn(t,r);a&&o&&(1!==n.rangeCount||n.anchorNode!==a.node||n.anchorOffset!==a.offset||n.focusNode!==o.node||n.focusOffset!==o.offset)&&((e=e.createRange()).setStart(a.node,a.offset),n.removeAllRanges(),l>r?(n.addRange(e),n.extend(o.node,o.offset)):(e.setEnd(o.node,o.offset),n.addRange(e)))}for(e=[],n=t;n=n.parentNode;)1===n.nodeType&&e.push({element:n,left:n.scrollLeft,top:n.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<e.length;t++)(n=e[t]).element.scrollLeft=n.left,n.element.scrollTop=n.top}}var tr=tt&&"documentMode"in document&&11>=document.documentMode,nr=null,rr=null,ar=null,lr=!1;function or(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;lr||null==nr||nr!==dt(r)||(r="selectionStart"in(r=nr)&&Zn(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},ar&&Qn(ar,r)||(ar=r,0<(r=Ds(rr,"onSelect")).length&&(t=new Yt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=nr)))}function ir(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var ur={animationend:ir("Animation","AnimationEnd"),animationiteration:ir("Animation","AnimationIteration"),animationstart:ir("Animation","AnimationStart"),transitionrun:ir("Transition","TransitionRun"),transitionstart:ir("Transition","TransitionStart"),transitioncancel:ir("Transition","TransitionCancel"),transitionend:ir("Transition","TransitionEnd")},cr={},sr={};function fr(e){if(cr[e])return cr[e];if(!ur[e])return e;var t,n=ur[e];for(t in n)if(n.hasOwnProperty(t)&&t in sr)return cr[e]=n[t];return e}tt&&(sr=document.createElement("div").style,"AnimationEvent"in window||(delete ur.animationend.animation,delete ur.animationiteration.animation,delete ur.animationstart.animation),"TransitionEvent"in window||delete ur.transitionend.transition);var dr=fr("animationend"),pr=fr("animationiteration"),hr=fr("animationstart"),mr=fr("transitionrun"),gr=fr("transitionstart"),vr=fr("transitioncancel"),yr=fr("transitionend"),br=new Map,Ar="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(" ");function wr(e,t){br.set(e,t),Ze(t,[e])}var kr=[],Sr=0,Cr=0;function Er(){for(var e=Sr,t=Cr=Sr=0;t<e;){var n=kr[t];kr[t++]=null;var r=kr[t];kr[t++]=null;var a=kr[t];kr[t++]=null;var l=kr[t];if(kr[t++]=null,null!==r&&null!==a){var o=r.pending;null===o?a.next=a:(a.next=o.next,o.next=a),r.pending=a}0!==l&&Lr(n,a,l)}}function xr(e,t,n,r){kr[Sr++]=e,kr[Sr++]=t,kr[Sr++]=n,kr[Sr++]=r,Cr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Pr(e,t,n,r){return xr(e,t,n,r),zr(e)}function _r(e,t){return xr(e,null,null,t),zr(e)}function Lr(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var a=!1,l=e.return;null!==l;)l.childLanes|=n,null!==(r=l.alternate)&&(r.childLanes|=n),22===l.tag&&(null===(e=l.stateNode)||1&e._visibility||(a=!0)),e=l,l=l.return;a&&null!==t&&3===e.tag&&(l=e.stateNode,a=31-be(n),null===(e=(l=l.hiddenUpdates)[a])?l[a]=[t]:e.push(t),t.lane=536870912|n)}function zr(e){if(50<Pc)throw Pc=0,_c=null,Error(o(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var Nr={},Or=new WeakMap;function Tr(e,t){if("object"==typeof e&&null!==e){var n=Or.get(e);return void 0!==n?n:(t={value:e,source:t,stack:D(t)},Or.set(e,t),t)}return{value:e,source:t,stack:D(t)}}var Ir=[],Dr=0,Mr=null,Rr=0,jr=[],Fr=0,Br=null,Ur=1,Hr="";function Vr(e,t){Ir[Dr++]=Rr,Ir[Dr++]=Mr,Mr=e,Rr=t}function $r(e,t,n){jr[Fr++]=Ur,jr[Fr++]=Hr,jr[Fr++]=Br,Br=e;var r=Ur;e=Hr;var a=32-be(r)-1;r&=~(1<<a),n+=1;var l=32-be(t)+a;if(30<l){var o=a-a%5;l=(r&(1<<o)-1).toString(32),r>>=o,a-=o,Ur=1<<32-be(t)+a|n<<a|r,Hr=l+e}else Ur=1<<l|n<<a|r,Hr=e}function Gr(e){null!==e.return&&(Vr(e,1),$r(e,1,0))}function qr(e){for(;e===Mr;)Mr=Ir[--Dr],Ir[Dr]=null,Rr=Ir[--Dr],Ir[Dr]=null;for(;e===Br;)Br=jr[--Fr],jr[Fr]=null,Hr=jr[--Fr],jr[Fr]=null,Ur=jr[--Fr],jr[Fr]=null}var Wr=null,Qr=null,Xr=!1,Kr=null,Yr=!1,Jr=Error(o(519));function Zr(e){throw aa(Tr(Error(o(418,"")),e)),Jr}function ea(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Re]=e,t[je]=r,n){case"dialog":_s("cancel",t),_s("close",t);break;case"iframe":case"object":case"embed":_s("load",t);break;case"video":case"audio":for(n=0;n<Es.length;n++)_s(Es[n],t);break;case"source":_s("error",t);break;case"img":case"image":case"link":_s("error",t),_s("load",t);break;case"details":_s("toggle",t);break;case"input":_s("invalid",t),gt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),st(t);break;case"select":_s("invalid",t);break;case"textarea":_s("invalid",t),At(t,r.value,r.defaultValue,r.children),st(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Us(t.textContent,n)?(null!=r.popover&&(_s("beforetoggle",t),_s("toggle",t)),null!=r.onScroll&&_s("scroll",t),null!=r.onScrollEnd&&_s("scrollend",t),null!=r.onClick&&(t.onclick=Hs),t=!0):t=!1,t||Zr(e)}function ta(e){for(Wr=e.return;Wr;)switch(Wr.tag){case 3:case 27:return void(Yr=!0);case 5:case 13:return void(Yr=!1);default:Wr=Wr.return}}function na(e){if(e!==Wr)return!1;if(!Xr)return ta(e),Xr=!0,!1;var t,n=!1;if((t=3!==e.tag&&27!==e.tag)&&((t=5===e.tag)&&(t=!("form"!==(t=e.type)&&"button"!==t)||Ys(e.type,e.memoizedProps)),t=!t),t&&(n=!0),n&&Qr&&Zr(e),ta(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){Qr=of(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}Qr=null}}else Qr=Wr?of(e.stateNode.nextSibling):null;return!0}function ra(){Qr=Wr=null,Xr=!1}function aa(e){null===Kr?Kr=[e]:Kr.push(e)}var la=Error(o(460)),oa=Error(o(474)),ia={then:function(){}};function ua(e){return"fulfilled"===(e=e.status)||"rejected"===e}function ca(){}function sa(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(ca,ca),t=n),t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===la)throw Error(o(483));throw e;default:if("string"==typeof t.status)t.then(ca,ca);else{if(null!==(e=ec)&&100<e.shellSuspendCounter)throw Error(o(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===la)throw Error(o(483));throw e}throw fa=t,la}}var fa=null;function da(){if(null===fa)throw Error(o(459));var e=fa;return fa=null,e}var pa=null,ha=0;function ma(e){var t=ha;return ha+=1,null===pa&&(pa=[]),sa(pa,e,t)}function ga(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function va(e,t){if(t.$$typeof===i)throw Error(o(525));throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ya(e){return(0,e._init)(e._payload)}function ba(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function a(e,t){return(e=Mu(e,t)).index=0,e.sibling=null,e}function l(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=33554434,n):r:(t.flags|=33554434,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=33554434),t}function f(e,t,n,r){return null===t||6!==t.tag?((t=Uu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n,r){var l=n.type;return l===s?h(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===A&&ya(l)===t.type)?(ga(t=a(t,n.props),n),t.return=e,t):(ga(t=ju(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function p(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hu(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function h(e,t,n,r,l){return null===t||7!==t.tag?((t=Fu(n,e.mode,r,l)).return=e,t):((t=a(t,n)).return=e,t)}function g(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Uu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case u:return ga(n=ju(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case c:return(t=Hu(t,e.mode,n)).return=e,t;case A:return g(e,t=(0,t._init)(t._payload),n)}if(B(t)||C(t))return(t=Fu(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return g(e,ma(t),n);if(t.$$typeof===m)return g(e,Ei(e,t),n);va(e,t)}return null}function v(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==a?null:f(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case u:return n.key===a?d(e,t,n,r):null;case c:return n.key===a?p(e,t,n,r):null;case A:return v(e,t,n=(a=n._init)(n._payload),r)}if(B(n)||C(n))return null!==a?null:h(e,t,n,r,null);if("function"==typeof n.then)return v(e,t,ma(n),r);if(n.$$typeof===m)return v(e,t,Ei(e,n),r);va(e,n)}return null}function y(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return f(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case u:return d(t,e=e.get(null===r.key?n:r.key)||null,r,a);case c:return p(t,e=e.get(null===r.key?n:r.key)||null,r,a);case A:return y(e,t,n,r=(0,r._init)(r._payload),a)}if(B(r)||C(r))return h(t,e=e.get(n)||null,r,a,null);if("function"==typeof r.then)return y(e,t,n,ma(r),a);if(r.$$typeof===m)return y(e,t,n,Ei(t,r),a);va(t,r)}return null}function b(f,d,p,h){if("object"==typeof p&&null!==p&&p.type===s&&null===p.key&&(p=p.props.children),"object"==typeof p&&null!==p){switch(p.$$typeof){case u:e:{for(var w=p.key;null!==d;){if(d.key===w){if((w=p.type)===s){if(7===d.tag){n(f,d.sibling),(h=a(d,p.props.children)).return=f,f=h;break e}}else if(d.elementType===w||"object"==typeof w&&null!==w&&w.$$typeof===A&&ya(w)===d.type){n(f,d.sibling),ga(h=a(d,p.props),p),h.return=f,f=h;break e}n(f,d);break}t(f,d),d=d.sibling}p.type===s?((h=Fu(p.props.children,f.mode,h,p.key)).return=f,f=h):(ga(h=ju(p.type,p.key,p.props,null,f.mode,h),p),h.return=f,f=h)}return i(f);case c:e:{for(w=p.key;null!==d;){if(d.key===w){if(4===d.tag&&d.stateNode.containerInfo===p.containerInfo&&d.stateNode.implementation===p.implementation){n(f,d.sibling),(h=a(d,p.children||[])).return=f,f=h;break e}n(f,d);break}t(f,d),d=d.sibling}(h=Hu(p,f.mode,h)).return=f,f=h}return i(f);case A:return b(f,d,p=(w=p._init)(p._payload),h)}if(B(p))return function(a,o,i,u){for(var c=null,s=null,f=o,d=o=0,p=null;null!==f&&d<i.length;d++){f.index>d?(p=f,f=null):p=f.sibling;var h=v(a,f,i[d],u);if(null===h){null===f&&(f=p);break}e&&f&&null===h.alternate&&t(a,f),o=l(h,o,d),null===s?c=h:s.sibling=h,s=h,f=p}if(d===i.length)return n(a,f),Xr&&Vr(a,d),c;if(null===f){for(;d<i.length;d++)null!==(f=g(a,i[d],u))&&(o=l(f,o,d),null===s?c=f:s.sibling=f,s=f);return Xr&&Vr(a,d),c}for(f=r(f);d<i.length;d++)null!==(p=y(f,a,d,i[d],u))&&(e&&null!==p.alternate&&f.delete(null===p.key?d:p.key),o=l(p,o,d),null===s?c=p:s.sibling=p,s=p);return e&&f.forEach((function(e){return t(a,e)})),Xr&&Vr(a,d),c}(f,d,p,h);if(C(p)){if("function"!=typeof(w=C(p)))throw Error(o(150));return function(a,i,u,c){if(null==u)throw Error(o(151));for(var s=null,f=null,d=i,p=i=0,h=null,m=u.next();null!==d&&!m.done;p++,m=u.next()){d.index>p?(h=d,d=null):h=d.sibling;var b=v(a,d,m.value,c);if(null===b){null===d&&(d=h);break}e&&d&&null===b.alternate&&t(a,d),i=l(b,i,p),null===f?s=b:f.sibling=b,f=b,d=h}if(m.done)return n(a,d),Xr&&Vr(a,p),s;if(null===d){for(;!m.done;p++,m=u.next())null!==(m=g(a,m.value,c))&&(i=l(m,i,p),null===f?s=m:f.sibling=m,f=m);return Xr&&Vr(a,p),s}for(d=r(d);!m.done;p++,m=u.next())null!==(m=y(d,a,p,m.value,c))&&(e&&null!==m.alternate&&d.delete(null===m.key?p:m.key),i=l(m,i,p),null===f?s=m:f.sibling=m,f=m);return e&&d.forEach((function(e){return t(a,e)})),Xr&&Vr(a,p),s}(f,d,p=w.call(p),h)}if("function"==typeof p.then)return b(f,d,ma(p),h);if(p.$$typeof===m)return b(f,d,Ei(f,p),h);va(f,p)}return"string"==typeof p&&""!==p||"number"==typeof p||"bigint"==typeof p?(p=""+p,null!==d&&6===d.tag?(n(f,d.sibling),(h=a(d,p)).return=f,f=h):(n(f,d),(h=Uu(p,f.mode,h)).return=f,f=h),i(f)):n(f,d)}return function(e,t,n,r){try{ha=0;var a=b(e,t,n,r);return pa=null,a}catch(t){if(t===la)throw t;var l=Iu(29,t,null,e.mode);return l.lanes=r,l.return=e,l}}}var Aa=ba(!0),wa=ba(!1),ka=G(null),Sa=G(0);function Ca(e,t){W(Sa,e=uc),W(ka,t),uc=e|t.baseLanes}function Ea(){W(Sa,uc),W(ka,ka.current)}function xa(){uc=Sa.current,q(ka),q(Sa)}var Pa=G(null),_a=null;function La(e){var t=e.alternate;W(Ta,1&Ta.current),W(Pa,e),null===_a&&(null===t||null!==ka.current||null!==t.memoizedState)&&(_a=e)}function za(e){if(22===e.tag){if(W(Ta,Ta.current),W(Pa,e),null===_a){var t=e.alternate;null!==t&&null!==t.memoizedState&&(_a=e)}}else Na()}function Na(){W(Ta,Ta.current),W(Pa,Pa.current)}function Oa(e){q(Pa),_a===e&&(_a=null),q(Ta)}var Ta=G(0);function Ia(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Da="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Ma=r.unstable_scheduleCallback,Ra=r.unstable_NormalPriority,ja={$$typeof:m,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Fa(){return{controller:new Da,data:new Map,refCount:0}}function Ba(e){e.refCount--,0===e.refCount&&Ma(Ra,(function(){e.controller.abort()}))}var Ua=null,Ha=0,Va=0,$a=null;function Ga(){if(0==--Ha&&null!==Ua){null!==$a&&($a.status="fulfilled");var e=Ua;Ua=null,Va=0,$a=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var qa=L.S;L.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Ua){var n=Ua=[];Ha=0,Va=As(),$a={status:"pending",value:void 0,then:function(e){n.push(e)}}}Ha++,t.then(Ga,Ga)}(0,t),null!==qa&&qa(e,t)};var Wa=G(null);function Qa(){var e=Wa.current;return null!==e?e:ec.pooledCache}function Xa(e,t){W(Wa,null===t?Wa.current:t.pool)}function Ka(){var e=Qa();return null===e?null:{parent:ja._currentValue,pool:e}}var Ya=0,Ja=null,Za=null,el=null,tl=!1,nl=!1,rl=!1,al=0,ll=0,ol=null,il=0;function ul(){throw Error(o(321))}function cl(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Wn(e[n],t[n]))return!1;return!0}function sl(e,t,n,r,a,l){return Ya=l,Ja=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,L.H=null===e||null===e.memoizedState?Eo:xo,rl=!1,l=n(r,a),rl=!1,nl&&(l=dl(t,n,r,a)),fl(e),l}function fl(e){L.H=Co;var t=null!==Za&&null!==Za.next;if(Ya=0,el=Za=Ja=null,tl=!1,ll=0,ol=null,t)throw Error(o(300));null===e||Vo||null!==(e=e.dependencies)&&ki(e)&&(Vo=!0)}function dl(e,t,n,r){Ja=e;var a=0;do{if(nl&&(ol=null),ll=0,nl=!1,25<=a)throw Error(o(301));if(a+=1,el=Za=null,null!=e.updateQueue){var l=e.updateQueue;l.lastEffect=null,l.events=null,l.stores=null,null!=l.memoCache&&(l.memoCache.index=0)}L.H=Po,l=t(n,r)}while(nl);return l}function pl(){var e=L.H,t=e.useState()[0];return t="function"==typeof t.then?bl(t):t,e=e.useState()[0],(null!==Za?Za.memoizedState:null)!==e&&(Ja.flags|=1024),t}function hl(){var e=0!==al;return al=0,e}function ml(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function gl(e){if(tl){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}tl=!1}Ya=0,el=Za=Ja=null,nl=!1,ll=al=0,ol=null}function vl(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===el?Ja.memoizedState=el=e:el=el.next=e,el}function yl(){if(null===Za){var e=Ja.alternate;e=null!==e?e.memoizedState:null}else e=Za.next;var t=null===el?Ja.memoizedState:el.next;if(null!==t)el=t,Za=e;else{if(null===e){if(null===Ja.alternate)throw Error(o(467));throw Error(o(310))}e={memoizedState:(Za=e).memoizedState,baseState:Za.baseState,baseQueue:Za.baseQueue,queue:Za.queue,next:null},null===el?Ja.memoizedState=el=e:el=el.next=e}return el}function bl(e){var t=ll;return ll+=1,null===ol&&(ol=[]),e=sa(ol,e,t),t=Ja,null===(null===el?t.memoizedState:el.next)&&(t=t.alternate,L.H=null===t||null===t.memoizedState?Eo:xo),e}function Al(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return bl(e);if(e.$$typeof===m)return Ci(e)}throw Error(o(438,String(e)))}function wl(e){var t=null,n=Ja.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=Ja.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},Ja.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=k;return t.index++,n}function kl(e,t){return"function"==typeof t?t(e):t}function Sl(e){return Cl(yl(),Za,e)}function Cl(e,t,n){var r=e.queue;if(null===r)throw Error(o(311));r.lastRenderedReducer=n;var a=e.baseQueue,l=r.pending;if(null!==l){if(null!==a){var i=a.next;a.next=l.next,l.next=i}t.baseQueue=a=l,r.pending=null}if(l=e.baseState,null===a)e.memoizedState=l;else{var u=i=null,c=null,s=t=a.next,f=!1;do{var d=-536870913&s.lane;if(d!==s.lane?(nc&d)===d:(Ya&d)===d){var p=s.revertLane;if(0===p)null!==c&&(c=c.next={lane:0,revertLane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),d===Va&&(f=!0);else{if((Ya&p)===p){s=s.next,p===Va&&(f=!0);continue}d={lane:0,revertLane:s.revertLane,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null},null===c?(u=c=d,i=l):c=c.next=d,Ja.lanes|=p,sc|=p}d=s.action,rl&&n(l,d),l=s.hasEagerState?s.eagerState:n(l,d)}else p={lane:d,revertLane:s.revertLane,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null},null===c?(u=c=p,i=l):c=c.next=p,Ja.lanes|=d,sc|=d;s=s.next}while(null!==s&&s!==t);if(null===c?i=l:c.next=u,!Wn(l,e.memoizedState)&&(Vo=!0,f&&null!==(n=$a)))throw n;e.memoizedState=l,e.baseState=i,e.baseQueue=c,r.lastRenderedState=l}return null===a&&(r.lanes=0),[e.memoizedState,r.dispatch]}function El(e){var t=yl(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,l=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{l=e(l,i.action),i=i.next}while(i!==a);Wn(l,t.memoizedState)||(Vo=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),n.lastRenderedState=l}return[l,r]}function xl(e,t,n){var r=Ja,a=yl(),l=Xr;if(l){if(void 0===n)throw Error(o(407));n=n()}else n=t();var i=!Wn((Za||a).memoizedState,n);if(i&&(a.memoizedState=n,Vo=!0),a=a.queue,Yl(Ll.bind(null,r,a,e),[e]),a.getSnapshot!==t||i||null!==el&&1&el.memoizedState.tag){if(r.flags|=2048,ql(9,_l.bind(null,r,a,n,t),{destroy:void 0},null),null===ec)throw Error(o(349));l||60&Ya||Pl(r,t,n)}return n}function Pl(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=Ja.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},Ja.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function _l(e,t,n,r){t.value=n,t.getSnapshot=r,zl(t)&&Nl(e)}function Ll(e,t,n){return n((function(){zl(t)&&Nl(e)}))}function zl(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Wn(e,n)}catch(e){return!0}}function Nl(e){var t=_r(e,2);null!==t&&Nc(t,0,2)}function Ol(e){var t=vl();if("function"==typeof e){var n=e;if(e=n(),rl){ye(!0);try{n()}finally{ye(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:kl,lastRenderedState:e},t}function Tl(e,t,n,r){return e.baseState=n,Cl(e,Za,"function"==typeof r?r:kl)}function Il(e,t,n,r,a){if(wo(e))throw Error(o(485));if(null!==(e=t.action)){var l={payload:a,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){l.listeners.push(e)}};null!==L.T?n(!0):l.isTransition=!1,r(l),null===(n=t.pending)?(l.next=t.pending=l,Dl(t,l)):(l.next=n.next,t.pending=n.next=l)}}function Dl(e,t){var n=t.action,r=t.payload,a=e.state;if(t.isTransition){var l=L.T,o={};L.T=o;try{var i=n(a,r),u=L.S;null!==u&&u(o,i),Ml(e,t,i)}catch(n){jl(e,t,n)}finally{L.T=l}}else try{Ml(e,t,l=n(a,r))}catch(n){jl(e,t,n)}}function Ml(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){Rl(e,t,n)}),(function(n){return jl(e,t,n)})):Rl(e,t,n)}function Rl(e,t,n){t.status="fulfilled",t.value=n,Fl(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,Dl(e,n)))}function jl(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,Fl(t),t=t.next}while(t!==r)}e.action=null}function Fl(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function Bl(e,t){return t}function Ul(e,t){if(Xr){var n=ec.formState;if(null!==n){e:{var r=Ja;if(Xr){if(Qr){t:{for(var a=Qr,l=Yr;8!==a.nodeType;){if(!l){a=null;break t}if(null===(a=of(a.nextSibling))){a=null;break t}}a="F!"===(l=a.data)||"F"===l?a:null}if(a){Qr=of(a.nextSibling),r="F!"===a.data;break e}}Zr(r)}r=!1}r&&(t=n[0])}}return(n=vl()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Bl,lastRenderedState:t},n.queue=r,n=yo.bind(null,Ja,r),r.dispatch=n,r=Ol(!1),l=Ao.bind(null,Ja,!1,r.queue),a={state:t,dispatch:null,action:e,pending:null},(r=vl()).queue=a,n=Il.bind(null,Ja,a,l,n),a.dispatch=n,r.memoizedState=e,[t,n,!1]}function Hl(e){return Vl(yl(),Za,e)}function Vl(e,t,n){t=Cl(e,t,Bl)[0],e=Sl(kl)[0],t="object"==typeof t&&null!==t&&"function"==typeof t.then?bl(t):t;var r=yl(),a=r.queue,l=a.dispatch;return n!==r.memoizedState&&(Ja.flags|=2048,ql(9,$l.bind(null,a,n),{destroy:void 0},null)),[t,l,e]}function $l(e,t){e.action=t}function Gl(e){var t=yl(),n=Za;if(null!==n)return Vl(t,n,e);yl(),t=t.memoizedState;var r=(n=yl()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function ql(e,t,n,r){return e={tag:e,create:t,inst:n,deps:r,next:null},null===(t=Ja.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},Ja.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Wl(){return yl().memoizedState}function Ql(e,t,n,r){var a=vl();Ja.flags|=e,a.memoizedState=ql(1|t,n,{destroy:void 0},void 0===r?null:r)}function Xl(e,t,n,r){var a=yl();r=void 0===r?null:r;var l=a.memoizedState.inst;null!==Za&&null!==r&&cl(r,Za.memoizedState.deps)?a.memoizedState=ql(t,n,l,r):(Ja.flags|=e,a.memoizedState=ql(1|t,n,l,r))}function Kl(e,t){Ql(8390656,8,e,t)}function Yl(e,t){Xl(2048,8,e,t)}function Jl(e,t){return Xl(4,2,e,t)}function Zl(e,t){return Xl(4,4,e,t)}function eo(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function to(e,t,n){n=null!=n?n.concat([e]):null,Xl(4,4,eo.bind(null,t,e),n)}function no(){}function ro(e,t){var n=yl();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&cl(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function ao(e,t){var n=yl();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&cl(t,r[1]))return r[0];if(r=e(),rl){ye(!0);try{e()}finally{ye(!1)}}return n.memoizedState=[r,t],r}function lo(e,t,n){return void 0===n||1073741824&Ya?e.memoizedState=t:(e.memoizedState=n,e=zc(),Ja.lanes|=e,sc|=e,n)}function oo(e,t,n,r){return Wn(n,t)?n:null!==ka.current?(e=lo(e,n,r),Wn(e,t)||(Vo=!0),e):42&Ya?(e=zc(),Ja.lanes|=e,sc|=e,t):(Vo=!0,e.memoizedState=n)}function io(e,t,n,r,a){var l=U.p;U.p=0!==l&&8>l?l:8;var o,i,u,c=L.T,s={};L.T=s,Ao(e,!1,t,n);try{var f=a(),d=L.S;null!==d&&d(s,f),null!==f&&"object"==typeof f&&"function"==typeof f.then?bo(e,t,(o=r,i=[],u={status:"pending",value:null,reason:null,then:function(e){i.push(e)}},f.then((function(){u.status="fulfilled",u.value=o;for(var e=0;e<i.length;e++)(0,i[e])(o)}),(function(e){for(u.status="rejected",u.reason=e,e=0;e<i.length;e++)(0,i[e])(void 0)})),u),Lc()):bo(e,t,r,Lc())}catch(n){bo(e,t,{then:function(){},status:"rejected",reason:n},Lc())}finally{U.p=l,L.T=c}}function uo(){}function co(e,t,n,r){if(5!==e.tag)throw Error(o(476));var a=so(e).queue;io(e,a,t,H,null===n?uo:function(){return fo(e),n(r)})}function so(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:H,baseState:H,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:kl,lastRenderedState:H},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:kl,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function fo(e){bo(e,so(e).next.queue,{},Lc())}function po(){return Ci(Mf)}function ho(){return yl().memoizedState}function mo(){return yl().memoizedState}function go(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Lc(),r=Ni(t,e=zi(n),n);return null!==r&&(Nc(r,0,n),Oi(r,t,n)),t={cache:Fa()},void(e.payload=t)}t=t.return}}function vo(e,t,n){var r=Lc();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},wo(e)?ko(t,n):null!==(n=Pr(e,t,n,r))&&(Nc(n,0,r),So(n,t,r))}function yo(e,t,n){bo(e,t,n,Lc())}function bo(e,t,n,r){var a={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(wo(e))ko(t,a);else{var l=e.alternate;if(0===e.lanes&&(null===l||0===l.lanes)&&null!==(l=t.lastRenderedReducer))try{var o=t.lastRenderedState,i=l(o,n);if(a.hasEagerState=!0,a.eagerState=i,Wn(i,o))return xr(e,t,a,0),null===ec&&Er(),!1}catch(e){}if(null!==(n=Pr(e,t,a,r)))return Nc(n,0,r),So(n,t,r),!0}return!1}function Ao(e,t,n,r){if(r={lane:2,revertLane:As(),action:r,hasEagerState:!1,eagerState:null,next:null},wo(e)){if(t)throw Error(o(479))}else null!==(t=Pr(e,n,r,2))&&Nc(t,0,2)}function wo(e){var t=e.alternate;return e===Ja||null!==t&&t===Ja}function ko(e,t){nl=tl=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function So(e,t,n){if(4194176&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Te(e,n)}}var Co={readContext:Ci,use:Al,useCallback:ul,useContext:ul,useEffect:ul,useImperativeHandle:ul,useLayoutEffect:ul,useInsertionEffect:ul,useMemo:ul,useReducer:ul,useRef:ul,useState:ul,useDebugValue:ul,useDeferredValue:ul,useTransition:ul,useSyncExternalStore:ul,useId:ul};Co.useCacheRefresh=ul,Co.useMemoCache=ul,Co.useHostTransitionStatus=ul,Co.useFormState=ul,Co.useActionState=ul,Co.useOptimistic=ul;var Eo={readContext:Ci,use:Al,useCallback:function(e,t){return vl().memoizedState=[e,void 0===t?null:t],e},useContext:Ci,useEffect:Kl,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,Ql(4194308,4,eo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ql(4194308,4,e,t)},useInsertionEffect:function(e,t){Ql(4,2,e,t)},useMemo:function(e,t){var n=vl();t=void 0===t?null:t;var r=e();if(rl){ye(!0);try{e()}finally{ye(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=vl();if(void 0!==n){var a=n(t);if(rl){ye(!0);try{n(t)}finally{ye(!1)}}}else a=t;return r.memoizedState=r.baseState=a,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:a},r.queue=e,e=e.dispatch=vo.bind(null,Ja,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},vl().memoizedState=e},useState:function(e){var t=(e=Ol(e)).queue,n=yo.bind(null,Ja,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:no,useDeferredValue:function(e,t){return lo(vl(),e,t)},useTransition:function(){var e=Ol(!1);return e=io.bind(null,Ja,e.queue,!0,!1),vl().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=Ja,a=vl();if(Xr){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===ec)throw Error(o(349));60&nc||Pl(r,t,n)}a.memoizedState=n;var l={value:n,getSnapshot:t};return a.queue=l,Kl(Ll.bind(null,r,l,e),[e]),r.flags|=2048,ql(9,_l.bind(null,r,l,n,t),{destroy:void 0},null),n},useId:function(){var e=vl(),t=ec.identifierPrefix;if(Xr){var n=Hr;t=":"+t+"R"+(n=(Ur&~(1<<32-be(Ur)-1)).toString(32)+n),0<(n=al++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=il++).toString(32)+":";return e.memoizedState=t},useCacheRefresh:function(){return vl().memoizedState=go.bind(null,Ja)}};Eo.useMemoCache=wl,Eo.useHostTransitionStatus=po,Eo.useFormState=Ul,Eo.useActionState=Ul,Eo.useOptimistic=function(e){var t=vl();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=Ao.bind(null,Ja,!0,n),n.dispatch=t,[e,t]};var xo={readContext:Ci,use:Al,useCallback:ro,useContext:Ci,useEffect:Yl,useImperativeHandle:to,useInsertionEffect:Jl,useLayoutEffect:Zl,useMemo:ao,useReducer:Sl,useRef:Wl,useState:function(){return Sl(kl)},useDebugValue:no,useDeferredValue:function(e,t){return oo(yl(),Za.memoizedState,e,t)},useTransition:function(){var e=Sl(kl)[0],t=yl().memoizedState;return["boolean"==typeof e?e:bl(e),t]},useSyncExternalStore:xl,useId:ho};xo.useCacheRefresh=mo,xo.useMemoCache=wl,xo.useHostTransitionStatus=po,xo.useFormState=Hl,xo.useActionState=Hl,xo.useOptimistic=function(e,t){return Tl(yl(),0,e,t)};var Po={readContext:Ci,use:Al,useCallback:ro,useContext:Ci,useEffect:Yl,useImperativeHandle:to,useInsertionEffect:Jl,useLayoutEffect:Zl,useMemo:ao,useReducer:El,useRef:Wl,useState:function(){return El(kl)},useDebugValue:no,useDeferredValue:function(e,t){var n=yl();return null===Za?lo(n,e,t):oo(n,Za.memoizedState,e,t)},useTransition:function(){var e=El(kl)[0],t=yl().memoizedState;return["boolean"==typeof e?e:bl(e),t]},useSyncExternalStore:xl,useId:ho};function _o(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:z({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}Po.useCacheRefresh=mo,Po.useMemoCache=wl,Po.useHostTransitionStatus=po,Po.useFormState=Gl,Po.useActionState=Gl,Po.useOptimistic=function(e,t){var n=yl();return null!==Za?Tl(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])};var Lo={isMounted:function(e){return!!(e=e._reactInternals)&&M(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Lc(),a=zi(r);a.payload=t,null!=n&&(a.callback=n),null!==(t=Ni(e,a,r))&&(Nc(t,0,r),Oi(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Lc(),a=zi(r);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Ni(e,a,r))&&(Nc(t,0,r),Oi(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Lc(),r=zi(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=Ni(e,r,n))&&(Nc(t,0,n),Oi(t,e,n))}};function zo(e,t,n,r,a,l,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,l,o):!(t.prototype&&t.prototype.isPureReactComponent&&Qn(n,r)&&Qn(a,l))}function No(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Lo.enqueueReplaceState(t,t.state,null)}function Oo(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var a in n===t&&(n=z({},n)),e)void 0===n[a]&&(n[a]=e[a]);return n}var To="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function Io(e){To(e)}function Do(e){console.error(e)}function Mo(e){To(e)}function Ro(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function jo(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function Fo(e,t,n){return(n=zi(n)).tag=3,n.payload={element:null},n.callback=function(){Ro(e,t)},n}function Bo(e){return(e=zi(e)).tag=3,e}function Uo(e,t,n,r){var a=n.type.getDerivedStateFromError;if("function"==typeof a){var l=r.value;e.payload=function(){return a(l)},e.callback=function(){jo(t,n,r)}}var o=n.stateNode;null!==o&&"function"==typeof o.componentDidCatch&&(e.callback=function(){jo(t,n,r),"function"!=typeof a&&(null===wc?wc=new Set([this]):wc.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Ho=Error(o(461)),Vo=!1;function $o(e,t,n,r){t.child=null===e?wa(t,null,n,r):Aa(t,e.child,n,r)}function Go(e,t,n,r,a){n=n.render;var l=t.ref;if("ref"in r){var o={};for(var i in r)"ref"!==i&&(o[i]=r[i])}else o=r;return Si(t),r=sl(e,t,n,o,l,a),i=hl(),null===e||Vo?(Xr&&i&&Gr(t),t.flags|=1,$o(e,t,r,a),t.child):(ml(e,t,a),fi(e,t,a))}function qo(e,t,n,r,a){if(null===e){var l=n.type;return"function"!=typeof l||Du(l)||void 0!==l.defaultProps||null!==n.compare?((e=ju(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=l,Wo(e,t,l,r,a))}if(l=e.child,!di(e,a)){var o=l.memoizedProps;if((n=null!==(n=n.compare)?n:Qn)(o,r)&&e.ref===t.ref)return fi(e,t,a)}return t.flags|=1,(e=Mu(l,r)).ref=t.ref,e.return=t,t.child=e}function Wo(e,t,n,r,a){if(null!==e){var l=e.memoizedProps;if(Qn(l,r)&&e.ref===t.ref){if(Vo=!1,t.pendingProps=r=l,!di(e,a))return t.lanes=e.lanes,fi(e,t,a);131072&e.flags&&(Vo=!0)}}return Yo(e,t,n,r,a)}function Qo(e,t,n){var r=t.pendingProps,a=r.children,l=!!(2&t.stateNode._pendingVisibility),o=null!==e?e.memoizedState:null;if(Ko(e,t),"hidden"===r.mode||l){if(128&t.flags){if(r=null!==o?o.baseLanes|n:n,null!==e){for(a=t.child=e.child,l=0;null!==a;)l=l|a.lanes|a.childLanes,a=a.sibling;t.childLanes=l&~r}else t.childLanes=0,t.child=null;return Xo(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Xo(e,t,null!==o?o.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Xa(0,null!==o?o.cachePool:null),null!==o?Ca(t,o):Ea(),za(t)}else null!==o?(Xa(0,o.cachePool),Ca(t,o),Na(),t.memoizedState=null):(null!==e&&Xa(0,null),Ea(),Na());return $o(e,t,a,n),t.child}function Xo(e,t,n,r){var a=Qa();return a=null===a?null:{parent:ja._currentValue,pool:a},t.memoizedState={baseLanes:n,cachePool:a},null!==e&&Xa(0,null),Ea(),za(t),null!==e&&wi(e,t,r,!0),null}function Ko(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=2097664);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(o(284));null!==e&&e.ref===n||(t.flags|=2097664)}}function Yo(e,t,n,r,a){return Si(t),n=sl(e,t,n,r,void 0,a),r=hl(),null===e||Vo?(Xr&&r&&Gr(t),t.flags|=1,$o(e,t,n,a),t.child):(ml(e,t,a),fi(e,t,a))}function Jo(e,t,n,r,a,l){return Si(t),t.updateQueue=null,n=dl(t,r,n,a),fl(e),r=hl(),null===e||Vo?(Xr&&r&&Gr(t),t.flags|=1,$o(e,t,n,l),t.child):(ml(e,t,l),fi(e,t,l))}function Zo(e,t,n,r,a){if(Si(t),null===t.stateNode){var l=Nr,o=n.contextType;"object"==typeof o&&null!==o&&(l=Ci(o)),l=new n(r,l),t.memoizedState=null!==l.state&&void 0!==l.state?l.state:null,l.updater=Lo,t.stateNode=l,l._reactInternals=t,(l=t.stateNode).props=r,l.state=t.memoizedState,l.refs={},_i(t),o=n.contextType,l.context="object"==typeof o&&null!==o?Ci(o):Nr,l.state=t.memoizedState,"function"==typeof(o=n.getDerivedStateFromProps)&&(_o(t,n,o,r),l.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||(o=l.state,"function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount(),o!==l.state&&Lo.enqueueReplaceState(l,l.state,null),Mi(t,r,l,a),Di(),l.state=t.memoizedState),"function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){l=t.stateNode;var i=t.memoizedProps,u=Oo(n,i);l.props=u;var c=l.context,s=n.contextType;o=Nr,"object"==typeof s&&null!==s&&(o=Ci(s));var f=n.getDerivedStateFromProps;s="function"==typeof f||"function"==typeof l.getSnapshotBeforeUpdate,i=t.pendingProps!==i,s||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i||c!==o)&&No(t,l,r,o),Pi=!1;var d=t.memoizedState;l.state=d,Mi(t,r,l,a),Di(),c=t.memoizedState,i||d!==c||Pi?("function"==typeof f&&(_o(t,n,f,r),c=t.memoizedState),(u=Pi||zo(t,n,u,r,d,c,o))?(s||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4194308)):("function"==typeof l.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=c),l.props=r,l.state=c,l.context=o,r=u):("function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!1)}else{l=t.stateNode,Li(e,t),s=Oo(n,o=t.memoizedProps),l.props=s,f=t.pendingProps,d=l.context,c=n.contextType,u=Nr,"object"==typeof c&&null!==c&&(u=Ci(c)),(c="function"==typeof(i=n.getDerivedStateFromProps)||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(o!==f||d!==u)&&No(t,l,r,u),Pi=!1,d=t.memoizedState,l.state=d,Mi(t,r,l,a),Di();var p=t.memoizedState;o!==f||d!==p||Pi||null!==e&&null!==e.dependencies&&ki(e.dependencies)?("function"==typeof i&&(_o(t,n,i,r),p=t.memoizedState),(s=Pi||zo(t,n,s,r,d,p,u)||null!==e&&null!==e.dependencies&&ki(e.dependencies))?(c||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,p,u),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof l.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),l.props=r,l.state=p,l.context=u,r=s):("function"!=typeof l.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return l=r,Ko(e,t),r=!!(128&t.flags),l||r?(l=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:l.render(),t.flags|=1,null!==e&&r?(t.child=Aa(t,e.child,null,a),t.child=Aa(t,null,n,a)):$o(e,t,n,a),t.memoizedState=l.state,e=t.child):e=fi(e,t,a),e}function ei(e,t,n,r){return ra(),t.flags|=256,$o(e,t,n,r),t.child}var ti={dehydrated:null,treeContext:null,retryLane:0};function ni(e){return{baseLanes:e,cachePool:Ka()}}function ri(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=pc),e}function ai(e,t,n){var r,a=t.pendingProps,l=!1,i=!!(128&t.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&!!(2&Ta.current)),r&&(l=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(Xr){if(l?La(t):Na(),Xr){var u,c=Qr;if(u=c){e:{for(u=c,c=Yr;8!==u.nodeType;){if(!c){c=null;break e}if(null===(u=of(u.nextSibling))){c=null;break e}}c=u}null!==c?(t.memoizedState={dehydrated:c,treeContext:null!==Br?{id:Ur,overflow:Hr}:null,retryLane:536870912},(u=Iu(18,null,null,0)).stateNode=c,u.return=t,t.child=u,Wr=t,Qr=null,u=!0):u=!1}u||Zr(t)}if(null!==(c=t.memoizedState)&&null!==(c=c.dehydrated))return"$!"===c.data?t.lanes=16:t.lanes=536870912,null;Oa(t)}return c=a.children,a=a.fallback,l?(Na(),c=oi({mode:"hidden",children:c},l=t.mode),a=Fu(a,l,n,null),c.return=t,a.return=t,c.sibling=a,t.child=c,(l=t.child).memoizedState=ni(n),l.childLanes=ri(e,r,n),t.memoizedState=ti,a):(La(t),li(t,c))}if(null!==(u=e.memoizedState)&&null!==(c=u.dehydrated)){if(i)256&t.flags?(La(t),t.flags&=-257,t=ii(e,t,n)):null!==t.memoizedState?(Na(),t.child=e.child,t.flags|=128,t=null):(Na(),l=a.fallback,c=t.mode,a=oi({mode:"visible",children:a.children},c),(l=Fu(l,c,n,null)).flags|=2,a.return=t,l.return=t,a.sibling=l,t.child=a,Aa(t,e.child,null,n),(a=t.child).memoizedState=ni(n),a.childLanes=ri(e,r,n),t.memoizedState=ti,t=l);else if(La(t),"$!"===c.data){if(r=c.nextSibling&&c.nextSibling.dataset)var s=r.dgst;r=s,(a=Error(o(419))).stack="",a.digest=r,aa({value:a,source:null,stack:null}),t=ii(e,t,n)}else if(Vo||wi(e,t,n,!1),r=!!(n&e.childLanes),Vo||r){if(null!==(r=ec)){if(42&(a=n&-n))a=1;else switch(a){case 2:a=1;break;case 8:a=4;break;case 32:a=16;break;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:a=64;break;case 268435456:a=134217728;break;default:a=0}if(0!==(a=a&(r.suspendedLanes|n)?0:a)&&a!==u.retryLane)throw u.retryLane=a,_r(e,a),Nc(r,0,a),Ho}"$?"===c.data||Vc(),t=ii(e,t,n)}else"$?"===c.data?(t.flags|=128,t.child=e.child,t=os.bind(null,e),c._reactRetry=t,t=null):(e=u.treeContext,Qr=of(c.nextSibling),Wr=t,Xr=!0,Kr=null,Yr=!1,null!==e&&(jr[Fr++]=Ur,jr[Fr++]=Hr,jr[Fr++]=Br,Ur=e.id,Hr=e.overflow,Br=t),(t=li(t,a.children)).flags|=4096);return t}return l?(Na(),l=a.fallback,c=t.mode,s=(u=e.child).sibling,(a=Mu(u,{mode:"hidden",children:a.children})).subtreeFlags=31457280&u.subtreeFlags,null!==s?l=Mu(s,l):(l=Fu(l,c,n,null)).flags|=2,l.return=t,a.return=t,a.sibling=l,t.child=a,a=l,l=t.child,null===(c=e.child.memoizedState)?c=ni(n):(null!==(u=c.cachePool)?(s=ja._currentValue,u=u.parent!==s?{parent:s,pool:s}:u):u=Ka(),c={baseLanes:c.baseLanes|n,cachePool:u}),l.memoizedState=c,l.childLanes=ri(e,r,n),t.memoizedState=ti,a):(La(t),e=(n=e.child).sibling,(n=Mu(n,{mode:"visible",children:a.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function li(e,t){return(t=oi({mode:"visible",children:t},e.mode)).return=e,e.child=t}function oi(e,t){return Bu(e,t,0,null)}function ii(e,t,n){return Aa(t,e.child,null,n),(e=li(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function ui(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),bi(e.return,t,n)}function ci(e,t,n,r,a){var l=e.memoizedState;null===l?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(l.isBackwards=t,l.rendering=null,l.renderingStartTime=0,l.last=r,l.tail=n,l.tailMode=a)}function si(e,t,n){var r=t.pendingProps,a=r.revealOrder,l=r.tail;if($o(e,t,r.children,n),2&(r=Ta.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ui(e,n,t);else if(19===e.tag)ui(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(W(Ta,r),a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Ia(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),ci(t,!1,a,n,l);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Ia(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}ci(t,!0,n,null,l);break;case"together":ci(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function fi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),sc|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(wi(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Mu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Mu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function di(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!ki(e))}function pi(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)Vo=!0;else{if(!(di(e,n)||128&t.flags))return Vo=!1,function(e,t,n){switch(t.tag){case 3:J(t,t.stateNode.containerInfo),vi(0,ja,e.memoizedState.cache),ra();break;case 27:case 5:ee(t);break;case 4:J(t,t.stateNode.containerInfo);break;case 10:vi(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(La(t),t.flags|=128,null):n&t.child.childLanes?ai(e,t,n):(La(t),null!==(e=fi(e,t,n))?e.sibling:null);La(t);break;case 19:var a=!!(128&e.flags);if((r=!!(n&t.childLanes))||(wi(e,t,n,!1),r=!!(n&t.childLanes)),a){if(r)return si(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),W(Ta,Ta.current),r)break;return null;case 22:case 23:return t.lanes=0,Qo(e,t,n);case 24:vi(0,ja,e.memoizedState.cache)}return fi(e,t,n)}(e,t,n);Vo=!!(131072&e.flags)}else Vo=!1,Xr&&1048576&t.flags&&$r(t,Rr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,a=r._init;if(r=a(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((a=r.$$typeof)===g){t.tag=11,t=Go(null,t,r,e,n);break e}if(a===b){t.tag=14,t=qo(null,t,r,e,n);break e}}throw t=x(r)||r,Error(o(306,t,""))}Du(r)?(e=Oo(r,e),t.tag=1,t=Zo(null,t,r,e,n)):(t.tag=0,t=Yo(null,t,r,e,n))}return t;case 0:return Yo(e,t,t.type,t.pendingProps,n);case 1:return Zo(e,t,r=t.type,a=Oo(r,t.pendingProps),n);case 3:e:{if(J(t,t.stateNode.containerInfo),null===e)throw Error(o(387));var l=t.pendingProps;r=(a=t.memoizedState).element,Li(e,t),Mi(t,l,null,n);var i=t.memoizedState;if(l=i.cache,vi(0,ja,l),l!==a.cache&&Ai(t,[ja],n,!0),Di(),l=i.element,a.isDehydrated){if(a={element:l,isDehydrated:!1,cache:i.cache},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=ei(e,t,l,n);break e}if(l!==r){aa(r=Tr(Error(o(424)),t)),t=ei(e,t,l,n);break e}for(Qr=of(t.stateNode.containerInfo.firstChild),Wr=t,Xr=!0,Kr=null,Yr=!0,n=wa(t,null,l,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ra(),l===r){t=fi(e,t,n);break e}$o(e,t,l,n)}t=t.child}return t;case 26:return Ko(e,t),null===e?(n=gf(t.type,null,t.pendingProps,null))?t.memoizedState=n:Xr||(n=t.type,e=t.pendingProps,(r=Qs(K.current).createElement(n))[Re]=t,r[je]=e,Gs(r,n,e),Ke(r),t.stateNode=r):t.memoizedState=gf(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return ee(t),null===e&&Xr&&(r=t.stateNode=cf(t.type,t.pendingProps,K.current),Wr=t,Yr=!0,Qr=of(r.firstChild)),r=t.pendingProps.children,null!==e||Xr?$o(e,t,r,n):t.child=Aa(t,null,r,n),Ko(e,t),t.child;case 5:return null===e&&Xr&&((a=r=Qr)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var a=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[$e])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(l=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(l!==a.rel||e.getAttribute("href")!==(null==a.href?null:a.href)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin)||e.getAttribute("title")!==(null==a.title?null:a.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((l=e.getAttribute("src"))!==(null==a.src?null:a.src)||e.getAttribute("type")!==(null==a.type?null:a.type)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin))&&l&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var l=null==a.name?null:""+a.name;if("hidden"===a.type&&e.getAttribute("name")===l)return e}if(null===(e=of(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,Yr))?(t.stateNode=r,Wr=t,Qr=of(r.firstChild),Yr=!1,a=!0):a=!1),a||Zr(t)),ee(t),a=t.type,l=t.pendingProps,i=null!==e?e.memoizedProps:null,r=l.children,Ys(a,l)?r=null:null!==i&&Ys(a,i)&&(t.flags|=32),null!==t.memoizedState&&(a=sl(e,t,pl,null,null,n),Mf._currentValue=a),Ko(e,t),$o(e,t,r,n),t.child;case 6:return null===e&&Xr&&((e=n=Qr)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=of(e.nextSibling)))return null}return e}(n,t.pendingProps,Yr))?(t.stateNode=n,Wr=t,Qr=null,e=!0):e=!1),e||Zr(t)),null;case 13:return ai(e,t,n);case 4:return J(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Aa(t,null,r,n):$o(e,t,r,n),t.child;case 11:return Go(e,t,t.type,t.pendingProps,n);case 7:return $o(e,t,t.pendingProps,n),t.child;case 8:case 12:return $o(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,vi(0,t.type,r.value),$o(e,t,r.children,n),t.child;case 9:return a=t.type._context,r=t.pendingProps.children,Si(t),r=r(a=Ci(a)),t.flags|=1,$o(e,t,r,n),t.child;case 14:return qo(e,t,t.type,t.pendingProps,n);case 15:return Wo(e,t,t.type,t.pendingProps,n);case 19:return si(e,t,n);case 22:return Qo(e,t,n);case 24:return Si(t),r=Ci(ja),null===e?(null===(a=Qa())&&(a=ec,l=Fa(),a.pooledCache=l,l.refCount++,null!==l&&(a.pooledCacheLanes|=n),a=l),t.memoizedState={parent:r,cache:a},_i(t),vi(0,ja,a)):(!!(e.lanes&n)&&(Li(e,t),Mi(t,null,null,n),Di()),a=e.memoizedState,l=t.memoizedState,a.parent!==r?(a={parent:r,cache:r},t.memoizedState=a,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=a),vi(0,ja,r)):(r=l.cache,vi(0,ja,r),r!==a.cache&&Ai(t,[ja],n,!0))),$o(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(o(156,t.tag))}var hi=G(null),mi=null,gi=null;function vi(e,t,n){W(hi,t._currentValue),t._currentValue=n}function yi(e){e._currentValue=hi.current,q(hi)}function bi(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ai(e,t,n,r){var a=e.child;for(null!==a&&(a.return=e);null!==a;){var l=a.dependencies;if(null!==l){var i=a.child;l=l.firstContext;e:for(;null!==l;){var u=l;l=a;for(var c=0;c<t.length;c++)if(u.context===t[c]){l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),bi(l.return,n,e),r||(i=null);break e}l=u.next}}else if(18===a.tag){if(null===(i=a.return))throw Error(o(341));i.lanes|=n,null!==(l=i.alternate)&&(l.lanes|=n),bi(i,n,e),i=null}else i=a.child;if(null!==i)i.return=a;else for(i=a;null!==i;){if(i===e){i=null;break}if(null!==(a=i.sibling)){a.return=i.return,i=a;break}i=i.return}a=i}}function wi(e,t,n,r){e=null;for(var a=t,l=!1;null!==a;){if(!l)if(524288&a.flags)l=!0;else if(262144&a.flags)break;if(10===a.tag){var i=a.alternate;if(null===i)throw Error(o(387));if(null!==(i=i.memoizedProps)){var u=a.type;Wn(a.pendingProps.value,i.value)||(null!==e?e.push(u):e=[u])}}else if(a===Y.current){if(null===(i=a.alternate))throw Error(o(387));i.memoizedState.memoizedState!==a.memoizedState.memoizedState&&(null!==e?e.push(Mf):e=[Mf])}a=a.return}null!==e&&Ai(t,e,n,r),t.flags|=262144}function ki(e){for(e=e.firstContext;null!==e;){if(!Wn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Si(e){mi=e,gi=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function Ci(e){return xi(mi,e)}function Ei(e,t){return null===mi&&Si(e),xi(e,t)}function xi(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===gi){if(null===e)throw Error(o(308));gi=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else gi=gi.next=t;return n}var Pi=!1;function _i(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function Li(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function zi(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function Ni(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Zu){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,t=zr(e),Lr(e,null,n),t}return xr(e,r,t,n),zr(e)}function Oi(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194176&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Te(e,n)}}function Ti(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,l=null;if(null!==(n=n.firstBaseUpdate)){do{var o={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===l?a=l=o:l=l.next=o,n=n.next}while(null!==n);null===l?a=l=t:l=l.next=t}else a=l=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:l,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var Ii=!1;function Di(){if(Ii&&null!==$a)throw $a}function Mi(e,t,n,r){Ii=!1;var a=e.updateQueue;Pi=!1;var l=a.firstBaseUpdate,o=a.lastBaseUpdate,i=a.shared.pending;if(null!==i){a.shared.pending=null;var u=i,c=u.next;u.next=null,null===o?l=c:o.next=c,o=u;var s=e.alternate;null!==s&&(i=(s=s.updateQueue).lastBaseUpdate)!==o&&(null===i?s.firstBaseUpdate=c:i.next=c,s.lastBaseUpdate=u)}if(null!==l){var f=a.baseState;for(o=0,s=c=u=null,i=l;;){var d=-536870913&i.lane,p=d!==i.lane;if(p?(nc&d)===d:(r&d)===d){0!==d&&d===Va&&(Ii=!0),null!==s&&(s=s.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});e:{var h=e,m=i;d=t;var g=n;switch(m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(g,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(g,f,d):h))break e;f=z({},f,d);break e;case 2:Pi=!0}}null!==(d=i.callback)&&(e.flags|=64,p&&(e.flags|=8192),null===(p=a.callbacks)?a.callbacks=[d]:p.push(d))}else p={lane:d,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===s?(c=s=p,u=f):s=s.next=p,o|=d;if(null===(i=i.next)){if(null===(i=a.shared.pending))break;i=(p=i).next,p.next=null,a.lastBaseUpdate=p,a.shared.pending=null}}null===s&&(u=f),a.baseState=u,a.firstBaseUpdate=c,a.lastBaseUpdate=s,null===l&&(a.shared.lanes=0),sc|=o,e.lanes=o,e.memoizedState=f}}function Ri(e,t){if("function"!=typeof e)throw Error(o(191,e));e.call(t)}function ji(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)Ri(n[e],t)}function Fi(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var a=r.next;n=a;do{if((n.tag&e)===e){r=void 0;var l=n.create,o=n.inst;r=l(),o.destroy=r}n=n.next}while(n!==a)}}catch(e){ns(t,t.return,e)}}function Bi(e,t,n){try{var r=t.updateQueue,a=null!==r?r.lastEffect:null;if(null!==a){var l=a.next;r=l;do{if((r.tag&e)===e){var o=r.inst,i=o.destroy;if(void 0!==i){o.destroy=void 0,a=t;var u=n;try{i()}catch(e){ns(a,u,e)}}}r=r.next}while(r!==l)}}catch(e){ns(t,t.return,e)}}function Ui(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{ji(t,n)}catch(t){ns(e,e.return,t)}}}function Hi(e,t,n){n.props=Oo(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){ns(e,t,n)}}function Vi(e,t){try{var n=e.ref;if(null!==n){var r=e.stateNode;switch(e.tag){case 26:case 27:case 5:var a=r;break;default:a=r}"function"==typeof n?e.refCleanup=n(a):n.current=a}}catch(n){ns(e,t,n)}}function $i(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){ns(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){ns(e,t,n)}else n.current=null}function Gi(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){ns(e,e.return,t)}}function qi(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var a=null,l=null,i=null,u=null,c=null,s=null,f=null;for(h in n){var d=n[h];if(n.hasOwnProperty(h)&&null!=d)switch(h){case"checked":case"value":break;case"defaultValue":c=d;default:r.hasOwnProperty(h)||Vs(e,t,h,null,r,d)}}for(var p in r){var h=r[p];if(d=n[p],r.hasOwnProperty(p)&&(null!=h||null!=d))switch(p){case"type":l=h;break;case"name":a=h;break;case"checked":s=h;break;case"defaultChecked":f=h;break;case"value":i=h;break;case"defaultValue":u=h;break;case"children":case"dangerouslySetInnerHTML":if(null!=h)throw Error(o(137,t));break;default:h!==d&&Vs(e,t,p,h,r,d)}}return void mt(e,i,u,c,s,f,l,a);case"select":for(l in h=i=u=p=null,n)if(c=n[l],n.hasOwnProperty(l)&&null!=c)switch(l){case"value":break;case"multiple":h=c;default:r.hasOwnProperty(l)||Vs(e,t,l,null,r,c)}for(a in r)if(l=r[a],c=n[a],r.hasOwnProperty(a)&&(null!=l||null!=c))switch(a){case"value":p=l;break;case"defaultValue":u=l;break;case"multiple":i=l;default:l!==c&&Vs(e,t,a,l,r,c)}return t=u,n=i,r=h,void(null!=p?yt(e,!!n,p,!1):!!r!=!!n&&(null!=t?yt(e,!!n,t,!0):yt(e,!!n,n?[]:"",!1)));case"textarea":for(u in h=p=null,n)if(a=n[u],n.hasOwnProperty(u)&&null!=a&&!r.hasOwnProperty(u))switch(u){case"value":case"children":break;default:Vs(e,t,u,null,r,a)}for(i in r)if(a=r[i],l=n[i],r.hasOwnProperty(i)&&(null!=a||null!=l))switch(i){case"value":p=a;break;case"defaultValue":h=a;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=a)throw Error(o(91));break;default:a!==l&&Vs(e,t,i,a,r,l)}return void bt(e,p,h);case"option":for(var m in n)p=n[m],n.hasOwnProperty(m)&&null!=p&&!r.hasOwnProperty(m)&&("selected"===m?e.selected=!1:Vs(e,t,m,null,r,p));for(c in r)p=r[c],h=n[c],!r.hasOwnProperty(c)||p===h||null==p&&null==h||("selected"===c?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Vs(e,t,c,p,r,h));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&Vs(e,t,g,null,r,p);for(s in r)if(p=r[s],h=n[s],r.hasOwnProperty(s)&&p!==h&&(null!=p||null!=h))switch(s){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(o(137,t));break;default:Vs(e,t,s,p,r,h)}return;default:if(Et(t)){for(var v in n)p=n[v],n.hasOwnProperty(v)&&void 0!==p&&!r.hasOwnProperty(v)&&$s(e,t,v,void 0,r,p);for(f in r)p=r[f],h=n[f],!r.hasOwnProperty(f)||p===h||void 0===p&&void 0===h||$s(e,t,f,p,r,h);return}}for(var y in n)p=n[y],n.hasOwnProperty(y)&&null!=p&&!r.hasOwnProperty(y)&&Vs(e,t,y,null,r,p);for(d in r)p=r[d],h=n[d],!r.hasOwnProperty(d)||p===h||null==p&&null==h||Vs(e,t,d,p,r,h)}(r,e.type,n,t),r[je]=t}catch(t){ns(e,e.return,t)}}function Wi(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag||4===e.tag}function Qi(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Wi(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&27!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Xi(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Hs));else if(4!==r&&27!==r&&null!==(e=e.child))for(Xi(e,t,n),e=e.sibling;null!==e;)Xi(e,t,n),e=e.sibling}function Ki(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&27!==r&&null!==(e=e.child))for(Ki(e,t,n),e=e.sibling;null!==e;)Ki(e,t,n),e=e.sibling}var Yi=!1,Ji=!1,Zi=!1,eu="function"==typeof WeakSet?WeakSet:Set,tu=null,nu=!1;function ru(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:gu(e,n),4&r&&Fi(5,n);break;case 1:if(gu(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){ns(n,n.return,e)}else{var a=Oo(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(a,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){ns(n,n.return,e)}}64&r&&Ui(n),512&r&&Vi(n,n.return);break;case 3:if(gu(e,n),64&r&&null!==(r=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:e=n.child.stateNode}try{ji(r,e)}catch(e){ns(n,n.return,e)}}break;case 26:gu(e,n),512&r&&Vi(n,n.return);break;case 27:case 5:gu(e,n),null===t&&4&r&&Gi(n),512&r&&Vi(n,n.return);break;case 12:default:gu(e,n);break;case 13:gu(e,n),4&r&&cu(e,n);break;case 22:if(!(a=null!==n.memoizedState||Yi)){t=null!==t&&null!==t.memoizedState||Ji;var l=Yi,o=Ji;Yi=a,(Ji=t)&&!o?yu(e,n,!!(8772&n.subtreeFlags)):gu(e,n),Yi=l,Ji=o}512&r&&("manual"===n.memoizedProps.mode?Vi(n,n.return):$i(n,n.return))}}function au(e){var t=e.alternate;null!==t&&(e.alternate=null,au(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&Ge(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var lu=null,ou=!1;function iu(e,t,n){for(n=n.child;null!==n;)uu(e,t,n),n=n.sibling}function uu(e,t,n){if(ve&&"function"==typeof ve.onCommitFiberUnmount)try{ve.onCommitFiberUnmount(ge,n)}catch(e){}switch(n.tag){case 26:Ji||$i(n,t),iu(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:Ji||$i(n,t);var r=lu,a=ou;for(lu=n.stateNode,iu(e,t,n),t=(n=n.stateNode).attributes;t.length;)n.removeAttributeNode(t[0]);Ge(n),lu=r,ou=a;break;case 5:Ji||$i(n,t);case 6:a=lu;var l=ou;if(lu=null,iu(e,t,n),ou=l,null!==(lu=a))if(ou)try{e=lu,r=n.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)}catch(e){ns(n,t,e)}else try{lu.removeChild(n.stateNode)}catch(e){ns(n,t,e)}break;case 18:null!==lu&&(ou?(t=lu,n=n.stateNode,8===t.nodeType?af(t.parentNode,n):1===t.nodeType&&af(t,n),pd(t)):af(lu,n.stateNode));break;case 4:r=lu,a=ou,lu=n.stateNode.containerInfo,ou=!0,iu(e,t,n),lu=r,ou=a;break;case 0:case 11:case 14:case 15:Ji||Bi(2,n,t),Ji||Bi(4,n,t),iu(e,t,n);break;case 1:Ji||($i(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&Hi(n,t,r)),iu(e,t,n);break;case 21:iu(e,t,n);break;case 22:Ji||$i(n,t),Ji=(r=Ji)||null!==n.memoizedState,iu(e,t,n),Ji=r;break;default:iu(e,t,n)}}function cu(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{pd(e)}catch(e){ns(t,t.return,e)}}function su(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new eu),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new eu),t;default:throw Error(o(435,e.tag))}}(e);t.forEach((function(t){var r=is.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function fu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r],l=e,i=t,u=i;e:for(;null!==u;){switch(u.tag){case 27:case 5:lu=u.stateNode,ou=!1;break e;case 3:case 4:lu=u.stateNode.containerInfo,ou=!0;break e}u=u.return}if(null===lu)throw Error(o(160));uu(l,i,a),lu=null,ou=!1,null!==(l=a.alternate)&&(l.return=null),a.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)pu(t,e),t=t.sibling}var du=null;function pu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:fu(t,e),hu(e),4&r&&(Bi(3,e,e.return),Fi(3,e),Bi(5,e,e.return));break;case 1:fu(t,e),hu(e),512&r&&(Ji||null===n||$i(n,n.return)),64&r&&Yi&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var a=du;if(fu(t,e),hu(e),512&r&&(Ji||null===n||$i(n,n.return)),4&r){var l=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,a=a.ownerDocument||a;t:switch(r){case"title":(!(l=a.getElementsByTagName("title")[0])||l[$e]||l[Re]||"http://www.w3.org/2000/svg"===l.namespaceURI||l.hasAttribute("itemprop"))&&(l=a.createElement(r),a.head.insertBefore(l,a.querySelector("head > title"))),Gs(l,r,n),l[Re]=e,Ke(l),r=l;break e;case"link":var i=Pf("link","href",a).get(r+(n.href||""));if(i)for(var u=0;u<i.length;u++)if((l=i[u]).getAttribute("href")===(null==n.href?null:n.href)&&l.getAttribute("rel")===(null==n.rel?null:n.rel)&&l.getAttribute("title")===(null==n.title?null:n.title)&&l.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){i.splice(u,1);break t}Gs(l=a.createElement(r),r,n),a.head.appendChild(l);break;case"meta":if(i=Pf("meta","content",a).get(r+(n.content||"")))for(u=0;u<i.length;u++)if((l=i[u]).getAttribute("content")===(null==n.content?null:""+n.content)&&l.getAttribute("name")===(null==n.name?null:n.name)&&l.getAttribute("property")===(null==n.property?null:n.property)&&l.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&l.getAttribute("charset")===(null==n.charSet?null:n.charSet)){i.splice(u,1);break t}Gs(l=a.createElement(r),r,n),a.head.appendChild(l);break;default:throw Error(o(468,r))}l[Re]=e,Ke(l),r=l}e.stateNode=r}else _f(a,e.type,e.stateNode);else e.stateNode=kf(a,r,e.memoizedProps);else l!==r?(null===l?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):l.count--,null===r?_f(a,e.type,e.stateNode):kf(a,r,e.memoizedProps)):null===r&&null!==e.stateNode&&qi(e,e.memoizedProps,n.memoizedProps)}break;case 27:if(4&r&&null===e.alternate){a=e.stateNode,l=e.memoizedProps;try{for(var c=a.firstChild;c;){var s=c.nextSibling,f=c.nodeName;c[$e]||"HEAD"===f||"BODY"===f||"SCRIPT"===f||"STYLE"===f||"LINK"===f&&"stylesheet"===c.rel.toLowerCase()||a.removeChild(c),c=s}for(var d=e.type,p=a.attributes;p.length;)a.removeAttributeNode(p[0]);Gs(a,d,l),a[Re]=e,a[je]=l}catch(t){ns(e,e.return,t)}}case 5:if(fu(t,e),hu(e),512&r&&(Ji||null===n||$i(n,n.return)),32&e.flags){a=e.stateNode;try{wt(a,"")}catch(t){ns(e,e.return,t)}}4&r&&null!=e.stateNode&&qi(e,a=e.memoizedProps,null!==n?n.memoizedProps:a),1024&r&&(Zi=!0);break;case 6:if(fu(t,e),hu(e),4&r){if(null===e.stateNode)throw Error(o(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){ns(e,e.return,t)}}break;case 3:if(xf=null,a=du,du=df(t.containerInfo),fu(t,e),du=a,hu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{pd(t.containerInfo)}catch(t){ns(e,e.return,t)}Zi&&(Zi=!1,mu(e));break;case 4:r=du,du=df(e.stateNode.containerInfo),fu(t,e),hu(e),du=r;break;case 12:fu(t,e),hu(e);break;case 13:fu(t,e),hu(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(yc=ie()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,su(e,r));break;case 22:if(512&r&&(Ji||null===n||$i(n,n.return)),c=null!==e.memoizedState,s=null!==n&&null!==n.memoizedState,Yi=(f=Yi)||c,Ji=(d=Ji)||s,fu(t,e),Ji=d,Yi=f,hu(e),(t=e.stateNode)._current=e,t._visibility&=-3,t._visibility|=2&t._pendingVisibility,8192&r&&(t._visibility=c?-2&t._visibility:1|t._visibility,c&&(t=Yi||Ji,null===n||s||t||vu(e)),null===e.memoizedProps||"manual"!==e.memoizedProps.mode))e:for(n=null,t=e;;){if(5===t.tag||26===t.tag||27===t.tag){if(null===n){s=n=t;try{if(a=s.stateNode,c)"function"==typeof(l=a.style).setProperty?l.setProperty("display","none","important"):l.display="none";else{i=s.stateNode;var h=null!=(u=s.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null;i.style.display=null==h||"boolean"==typeof h?"":(""+h).trim()}}catch(e){ns(s,s.return,e)}}}else if(6===t.tag){if(null===n){s=t;try{s.stateNode.nodeValue=c?"":s.memoizedProps}catch(e){ns(s,s.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,su(e,n));break;case 19:fu(t,e),hu(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,su(e,r));break;case 21:break;default:fu(t,e),hu(e)}}function hu(e){var t=e.flags;if(2&t){try{if(27!==e.tag){e:{for(var n=e.return;null!==n;){if(Wi(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 27:var a=r.stateNode;Ki(e,Qi(e),a);break;case 5:var l=r.stateNode;32&r.flags&&(wt(l,""),r.flags&=-33),Ki(e,Qi(e),l);break;case 3:case 4:var i=r.stateNode.containerInfo;Xi(e,Qi(e),i);break;default:throw Error(o(161))}}}catch(t){ns(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function mu(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;mu(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function gu(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)ru(e,t.alternate,t),t=t.sibling}function vu(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:Bi(4,t,t.return),vu(t);break;case 1:$i(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&Hi(t,t.return,n),vu(t);break;case 26:case 27:case 5:$i(t,t.return),vu(t);break;case 22:$i(t,t.return),null===t.memoizedState&&vu(t);break;default:vu(t)}e=e.sibling}}function yu(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,a=e,l=t,o=l.flags;switch(l.tag){case 0:case 11:case 15:yu(a,l,n),Fi(4,l);break;case 1:if(yu(a,l,n),"function"==typeof(a=(r=l).stateNode).componentDidMount)try{a.componentDidMount()}catch(e){ns(r,r.return,e)}if(null!==(a=(r=l).updateQueue)){var i=r.stateNode;try{var u=a.shared.hiddenCallbacks;if(null!==u)for(a.shared.hiddenCallbacks=null,a=0;a<u.length;a++)Ri(u[a],i)}catch(e){ns(r,r.return,e)}}n&&64&o&&Ui(l),Vi(l,l.return);break;case 26:case 27:case 5:yu(a,l,n),n&&null===r&&4&o&&Gi(l),Vi(l,l.return);break;case 12:default:yu(a,l,n);break;case 13:yu(a,l,n),n&&4&o&&cu(a,l);break;case 22:null===l.memoizedState&&yu(a,l,n),Vi(l,l.return)}t=t.sibling}}function bu(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&Ba(n))}function Au(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Ba(e))}function wu(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)ku(e,t,n,r),t=t.sibling}function ku(e,t,n,r){var a=t.flags;switch(t.tag){case 0:case 11:case 15:wu(e,t,n,r),2048&a&&Fi(9,t);break;case 3:wu(e,t,n,r),2048&a&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Ba(e)));break;case 12:if(2048&a){wu(e,t,n,r),e=t.stateNode;try{var l=t.memoizedProps,o=l.id,i=l.onPostCommit;"function"==typeof i&&i(o,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){ns(t,t.return,e)}}else wu(e,t,n,r);break;case 23:break;case 22:l=t.stateNode,null!==t.memoizedState?4&l._visibility?wu(e,t,n,r):Cu(e,t):4&l._visibility?wu(e,t,n,r):(l._visibility|=4,Su(e,t,n,r,!!(10256&t.subtreeFlags))),2048&a&&bu(t.alternate,t);break;case 24:wu(e,t,n,r),2048&a&&Au(t.alternate,t);break;default:wu(e,t,n,r)}}function Su(e,t,n,r,a){for(a=a&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var l=e,o=t,i=n,u=r,c=o.flags;switch(o.tag){case 0:case 11:case 15:Su(l,o,i,u,a),Fi(8,o);break;case 23:break;case 22:var s=o.stateNode;null!==o.memoizedState?4&s._visibility?Su(l,o,i,u,a):Cu(l,o):(s._visibility|=4,Su(l,o,i,u,a)),a&&2048&c&&bu(o.alternate,o);break;case 24:Su(l,o,i,u,a),a&&2048&c&&Au(o.alternate,o);break;default:Su(l,o,i,u,a)}t=t.sibling}}function Cu(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,a=r.flags;switch(r.tag){case 22:Cu(n,r),2048&a&&bu(r.alternate,r);break;case 24:Cu(n,r),2048&a&&Au(r.alternate,r);break;default:Cu(n,r)}t=t.sibling}}var Eu=8192;function xu(e){if(e.subtreeFlags&Eu)for(e=e.child;null!==e;)Pu(e),e=e.sibling}function Pu(e){switch(e.tag){case 26:xu(e),e.flags&Eu&&null!==e.memoizedState&&function(e,t,n){if(null===zf)throw Error(o(475));var r=zf;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var a=vf(n.href),l=e.querySelector(yf(a));if(l)return null!==(e=l._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Of.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=l,void Ke(l);l=e.ownerDocument||e,n=bf(n),(a=sf.get(a))&&Cf(n,a),Ke(l=l.createElement("link"));var i=l;i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),Gs(l,"link",n),t.instance=l}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=Of.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(du,e.memoizedState,e.memoizedProps);break;case 5:default:xu(e);break;case 3:case 4:var t=du;du=df(e.stateNode.containerInfo),xu(e),du=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=Eu,Eu=16777216,xu(e),Eu=t):xu(e))}}function _u(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Lu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];tu=r,Ou(r,e)}_u(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)zu(e),e=e.sibling}function zu(e){switch(e.tag){case 0:case 11:case 15:Lu(e),2048&e.flags&&Bi(9,e,e.return);break;case 3:case 12:default:Lu(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&4&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-5,Nu(e)):Lu(e)}}function Nu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];tu=r,Ou(r,e)}_u(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:Bi(8,t,t.return),Nu(t);break;case 22:4&(n=t.stateNode)._visibility&&(n._visibility&=-5,Nu(t));break;default:Nu(t)}e=e.sibling}}function Ou(e,t){for(;null!==tu;){var n=tu;switch(n.tag){case 0:case 11:case 15:Bi(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Ba(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,tu=r;else e:for(n=e;null!==tu;){var a=(r=tu).sibling,l=r.return;if(au(r),r===n){tu=null;break e}if(null!==a){a.return=l,tu=a;break e}tu=l}}}function Tu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Iu(e,t,n,r){return new Tu(e,t,n,r)}function Du(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Mu(e,t){var n=e.alternate;return null===n?((n=Iu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=31457280&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Ru(e,t){e.flags&=31457282;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function ju(e,t,n,r,a,l){var i=0;if(r=e,"function"==typeof e)Du(e)&&(i=1);else if("string"==typeof e)i=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,Q.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case s:return Fu(n.children,a,l,t);case f:i=8,a|=24;break;case d:return(e=Iu(12,n,t,2|a)).elementType=d,e.lanes=l,e;case v:return(e=Iu(13,n,t,a)).elementType=v,e.lanes=l,e;case y:return(e=Iu(19,n,t,a)).elementType=y,e.lanes=l,e;case w:return Bu(n,a,l,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case p:case m:i=10;break e;case h:i=9;break e;case g:i=11;break e;case b:i=14;break e;case A:i=16,r=null;break e}i=29,n=Error(o(130,null===e?"null":typeof e,"")),r=null}return(t=Iu(i,n,t,a)).elementType=e,t.type=r,t.lanes=l,t}function Fu(e,t,n,r){return(e=Iu(7,e,r,t)).lanes=n,e}function Bu(e,t,n,r){(e=Iu(22,e,r,t)).elementType=w,e.lanes=n;var a={_visibility:1,_pendingVisibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null,_current:null,detach:function(){var e=a._current;if(null===e)throw Error(o(456));if(!(2&a._pendingVisibility)){var t=_r(e,2);null!==t&&(a._pendingVisibility|=2,Nc(t,0,2))}},attach:function(){var e=a._current;if(null===e)throw Error(o(456));if(2&a._pendingVisibility){var t=_r(e,2);null!==t&&(a._pendingVisibility&=-3,Nc(t,0,2))}}};return e.stateNode=a,e}function Uu(e,t,n){return(e=Iu(6,e,null,t)).lanes=n,e}function Hu(e,t,n){return(t=Iu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Vu(e){e.flags|=4}function $u(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Lf(t)){if(null!==(t=Pa.current)&&((4194176&nc)===nc?null!==_a:(62914560&nc)!==nc&&!(536870912&nc)||t!==_a))throw fa=ia,oa;e.flags|=8192}}function Gu(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?Le():536870912,e.lanes|=t,hc|=t)}function qu(e,t){if(!Xr)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Wu(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=31457280&a.subtreeFlags,r|=31457280&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Qu(e,t,n){var r=t.pendingProps;switch(qr(t),t.tag){case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return Wu(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),yi(ja),Z(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(na(t)?Vu(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==Kr&&(Tc(Kr),Kr=null))),Wu(t),null;case 26:return n=t.memoizedState,null===e?(Vu(t),null!==n?(Wu(t),$u(t,n)):(Wu(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Vu(t),Wu(t),$u(t,n)):(Wu(t),t.flags&=-16777217):(e.memoizedProps!==r&&Vu(t),Wu(t),t.flags&=-16777217),null;case 27:te(t),n=K.current;var a=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Vu(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Wu(t),null}e=Q.current,na(t)?ea(t):(e=cf(a,r,n),t.stateNode=e,Vu(t))}return Wu(t),null;case 5:if(te(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Vu(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Wu(t),null}if(e=Q.current,na(t))ea(t);else{switch(a=Qs(K.current),e){case 1:e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=a.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?a.createElement("select",{is:r.is}):a.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?a.createElement(n,{is:r.is}):a.createElement(n)}}e[Re]=t,e[je]=r;e:for(a=t.child;null!==a;){if(5===a.tag||6===a.tag)e.appendChild(a.stateNode);else if(4!==a.tag&&27!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break e;for(;null===a.sibling;){if(null===a.return||a.return===t)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}t.stateNode=e;e:switch(Gs(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Vu(t)}}return Wu(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Vu(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(e=K.current,na(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(a=Wr))switch(a.tag){case 27:case 5:r=a.memoizedProps}e[Re]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Us(e.nodeValue,n)))||Zr(t)}else(e=Qs(e).createTextNode(r))[Re]=t,t.stateNode=e}return Wu(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(a=na(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(o(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(o(317));a[Re]=t}else ra(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Wu(t),a=!1}else null!==Kr&&(Tc(Kr),Kr=null),a=!0;if(!a)return 256&t.flags?(Oa(t),t):(Oa(t),null)}if(Oa(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){a=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(a=r.alternate.memoizedState.cachePool.pool);var l=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(l=r.memoizedState.cachePool.pool),l!==a&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),Gu(t,t.updateQueue),Wu(t),null;case 4:return Z(),null===e&&Ns(t.stateNode.containerInfo),Wu(t),null;case 10:return yi(t.type),Wu(t),null;case 19:if(q(Ta),null===(a=t.memoizedState))return Wu(t),null;if(r=!!(128&t.flags),null===(l=a.rendering))if(r)qu(a,!1);else{if(0!==cc||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(l=Ia(e))){for(t.flags|=128,qu(a,!1),e=l.updateQueue,t.updateQueue=e,Gu(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Ru(n,e),n=n.sibling;return W(Ta,1&Ta.current|2),t.child}e=e.sibling}null!==a.tail&&ie()>bc&&(t.flags|=128,r=!0,qu(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=Ia(l))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,Gu(t,e),qu(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!Xr)return Wu(t),null}else 2*ie()-a.renderingStartTime>bc&&536870912!==n&&(t.flags|=128,r=!0,qu(a,!1),t.lanes=4194304);a.isBackwards?(l.sibling=t.child,t.child=l):(null!==(e=a.last)?e.sibling=l:t.child=l,a.last=l)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=ie(),t.sibling=null,e=Ta.current,W(Ta,r?1&e|2:1&e),t):(Wu(t),null);case 22:case 23:return Oa(t),xa(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(Wu(t),6&t.subtreeFlags&&(t.flags|=8192)):Wu(t),null!==(n=t.updateQueue)&&Gu(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&q(Wa),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),yi(ja),Wu(t),null;case 25:return null}throw Error(o(156,t.tag))}function Xu(e,t){switch(qr(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return yi(ja),Z(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return te(t),null;case 13:if(Oa(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));ra()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return q(Ta),null;case 4:return Z(),null;case 10:return yi(t.type),null;case 22:case 23:return Oa(t),xa(),null!==e&&q(Wa),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return yi(ja),null;default:return null}}function Ku(e,t){switch(qr(t),t.tag){case 3:yi(ja),Z();break;case 26:case 27:case 5:te(t);break;case 4:Z();break;case 13:Oa(t);break;case 19:q(Ta);break;case 10:yi(t.type);break;case 22:case 23:Oa(t),xa(),null!==e&&q(Wa);break;case 24:yi(ja)}}var Yu={getCacheForType:function(e){var t=Ci(ja),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},Ju="function"==typeof WeakMap?WeakMap:Map,Zu=0,ec=null,tc=null,nc=0,rc=0,ac=null,lc=!1,oc=!1,ic=!1,uc=0,cc=0,sc=0,fc=0,dc=0,pc=0,hc=0,mc=null,gc=null,vc=!1,yc=0,bc=1/0,Ac=null,wc=null,kc=!1,Sc=null,Cc=0,Ec=0,xc=null,Pc=0,_c=null;function Lc(){return 2&Zu&&0!==nc?nc&-nc:null!==L.T?0!==Va?Va:As():De()}function zc(){0===pc&&(pc=536870912&nc&&!Xr?536870912:_e());var e=Pa.current;return null!==e&&(e.flags|=32),pc}function Nc(e,t,n){(e===ec&&2===rc||null!==e.cancelPendingCommit)&&(Fc(e,0),Mc(e,nc,pc,!1)),Ne(e,n),2&Zu&&e===ec||(e===ec&&(!(2&Zu)&&(fc|=n),4===cc&&Mc(e,nc,pc,!1)),hs(e))}function Oc(e,t,n){if(6&Zu)throw Error(o(327));for(var r=!n&&!(60&t)&&!(t&e.expiredLanes)||xe(e,t),a=r?function(e,t){var n=Zu;Zu|=2;var r=Uc(),a=Hc();ec!==e||nc!==t?(Ac=null,bc=ie()+500,Fc(e,t)):oc=xe(e,t);e:for(;;)try{if(0!==rc&&null!==tc){t=tc;var l=ac;t:switch(rc){case 1:rc=0,ac=null,Xc(e,t,l,1);break;case 2:if(ua(l)){rc=0,ac=null,Qc(t);break}t=function(){2===rc&&ec===e&&(rc=7),hs(e)},l.then(t,t);break e;case 3:rc=7;break e;case 4:rc=5;break e;case 7:ua(l)?(rc=0,ac=null,Qc(t)):(rc=0,ac=null,Xc(e,t,l,7));break;case 5:var i=null;switch(tc.tag){case 26:i=tc.memoizedState;case 5:case 27:var u=tc;if(!i||Lf(i)){rc=0,ac=null;var c=u.sibling;if(null!==c)tc=c;else{var s=u.return;null!==s?(tc=s,Kc(s)):tc=null}break t}}rc=0,ac=null,Xc(e,t,l,5);break;case 6:rc=0,ac=null,Xc(e,t,l,6);break;case 8:jc(),cc=6;break e;default:throw Error(o(462))}}qc();break}catch(t){Bc(e,t)}return gi=mi=null,L.H=r,L.A=a,Zu=n,null!==tc?0:(ec=null,nc=0,Er(),cc)}(e,t):$c(e,t,!0),l=r;;){if(0===a){oc&&!r&&Mc(e,t,0,!1);break}if(6===a)Mc(e,t,0,!lc);else{if(n=e.current.alternate,l&&!Dc(n)){a=$c(e,t,!1),l=!1;continue}if(2===a){if(l=t,e.errorRecoveryDisabledLanes&l)var i=0;else i=0!=(i=-536870913&e.pendingLanes)?i:536870912&i?536870912:0;if(0!==i){t=i;e:{var u=e;a=mc;var c=u.current.memoizedState.isDehydrated;if(c&&(Fc(u,i).flags|=256),2!==(i=$c(u,i,!1))){if(ic&&!c){u.errorRecoveryDisabledLanes|=l,fc|=l,a=4;break e}l=gc,gc=a,null!==l&&Tc(l)}a=i}if(l=!1,2!==a)continue}}if(1===a){Fc(e,0),Mc(e,t,0,!0);break}e:{switch(r=e,a){case 0:case 1:throw Error(o(345));case 4:if((4194176&t)===t){Mc(r,t,pc,!lc);break e}break;case 2:gc=null;break;case 3:case 5:break;default:throw Error(o(329))}if(r.finishedWork=n,r.finishedLanes=t,(62914560&t)===t&&10<(l=yc+300-ie())){if(Mc(r,t,pc,!lc),0!==Ee(r,0))break e;r.timeoutHandle=Zs(Ic.bind(null,r,n,gc,Ac,vc,t,pc,fc,hc,lc,2,-0,0),l)}else Ic(r,n,gc,Ac,vc,t,pc,fc,hc,lc,0,-0,0)}}break}hs(e)}function Tc(e){null===gc?gc=e:gc.push.apply(gc,e)}function Ic(e,t,n,r,a,l,i,u,c,s,f,d,p){var h=t.subtreeFlags;if((8192&h||!(16785408&~h))&&(zf={stylesheets:null,count:0,unsuspend:Nf},Pu(t),null!==(t=function(){if(null===zf)throw Error(o(475));var e=zf;return e.stylesheets&&0===e.count&&If(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&If(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=t(Jc.bind(null,e,n,r,a,i,u,c,1,d,p)),void Mc(e,l,i,!s);Jc(e,n,r,a,i,u,c)}function Dc(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],l=a.getSnapshot;a=a.value;try{if(!Wn(l(),a))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Mc(e,t,n,r){t&=~dc,t&=~fc,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var a=t;0<a;){var l=31-be(a),o=1<<l;r[l]=-1,a&=~o}0!==n&&Oe(e,n,t)}function Rc(){return!!(6&Zu)||(ms(0,!1),!1)}function jc(){if(null!==tc){if(0===rc)var e=tc.return;else gi=mi=null,gl(e=tc),pa=null,ha=0,e=tc;for(;null!==e;)Ku(e.alternate,e),e=e.return;tc=null}}function Fc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,ef(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),jc(),ec=e,tc=n=Mu(e.current,null),nc=t,rc=0,ac=null,lc=!1,oc=xe(e,t),ic=!1,hc=pc=dc=fc=sc=cc=0,gc=mc=null,vc=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var a=31-be(r),l=1<<a;t|=e[a],r&=~l}return uc=t,Er(),n}function Bc(e,t){Ja=null,L.H=Co,t===la?(t=da(),rc=3):t===oa?(t=da(),rc=4):rc=t===Ho?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,ac=t,null===tc&&(cc=1,Ro(e,Tr(t,e.current)))}function Uc(){var e=L.H;return L.H=Co,null===e?Co:e}function Hc(){var e=L.A;return L.A=Yu,e}function Vc(){cc=4,lc||(4194176&nc)!==nc&&null!==Pa.current||(oc=!0),!(134217727&sc)&&!(134217727&fc)||null===ec||Mc(ec,nc,pc,!1)}function $c(e,t,n){var r=Zu;Zu|=2;var a=Uc(),l=Hc();ec===e&&nc===t||(Ac=null,Fc(e,t)),t=!1;var o=cc;e:for(;;)try{if(0!==rc&&null!==tc){var i=tc,u=ac;switch(rc){case 8:jc(),o=6;break e;case 3:case 2:case 6:null===Pa.current&&(t=!0);var c=rc;if(rc=0,ac=null,Xc(e,i,u,c),n&&oc){o=0;break e}break;default:c=rc,rc=0,ac=null,Xc(e,i,u,c)}}Gc(),o=cc;break}catch(t){Bc(e,t)}return t&&e.shellSuspendCounter++,gi=mi=null,Zu=r,L.H=a,L.A=l,null===tc&&(ec=null,nc=0,Er()),o}function Gc(){for(;null!==tc;)Wc(tc)}function qc(){for(;null!==tc&&!le();)Wc(tc)}function Wc(e){var t=pi(e.alternate,e,uc);e.memoizedProps=e.pendingProps,null===t?Kc(e):tc=t}function Qc(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Jo(n,t,t.pendingProps,t.type,void 0,nc);break;case 11:t=Jo(n,t,t.pendingProps,t.type.render,t.ref,nc);break;case 5:gl(t);default:Ku(n,t),t=pi(n,t=tc=Ru(t,uc),uc)}e.memoizedProps=e.pendingProps,null===t?Kc(e):tc=t}function Xc(e,t,n,r){gi=mi=null,gl(t),pa=null,ha=0;var a=t.return;try{if(function(e,t,n,r,a){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&wi(t,n,a,!0),null!==(n=Pa.current)){switch(n.tag){case 13:return null===_a?Vc():null===n.alternate&&0===cc&&(cc=3),n.flags&=-257,n.flags|=65536,n.lanes=a,r===ia?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),rs(e,r,a)),!1;case 22:return n.flags|=65536,r===ia?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),rs(e,r,a)),!1}throw Error(o(435,n.tag))}return rs(e,r,a),Vc(),!1}if(Xr)return null!==(t=Pa.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=a,r!==Jr&&aa(Tr(e=Error(o(422),{cause:r}),n))):(r!==Jr&&aa(Tr(t=Error(o(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,a&=-a,e.lanes|=a,r=Tr(r,n),Ti(e,a=Fo(e.stateNode,r,a)),4!==cc&&(cc=2)),!1;var l=Error(o(520),{cause:r});if(l=Tr(l,n),null===mc?mc=[l]:mc.push(l),4!==cc&&(cc=2),null===t)return!0;r=Tr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=a&-a,n.lanes|=e,Ti(n,e=Fo(n.stateNode,r,e)),!1;case 1:if(t=n.type,l=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===l||"function"!=typeof l.componentDidCatch||null!==wc&&wc.has(l))))return n.flags|=65536,a&=-a,n.lanes|=a,Uo(a=Bo(a),e,n,r),Ti(n,a),!1}n=n.return}while(null!==n);return!1}(e,a,t,n,nc))return cc=1,Ro(e,Tr(n,e.current)),void(tc=null)}catch(t){if(null!==a)throw tc=a,t;return cc=1,Ro(e,Tr(n,e.current)),void(tc=null)}32768&t.flags?(Xr||1===r?e=!0:oc||536870912&nc?e=!1:(lc=e=!0,(2===r||3===r||6===r)&&null!==(r=Pa.current)&&13===r.tag&&(r.flags|=16384)),Yc(t,e)):Kc(t)}function Kc(e){var t=e;do{if(32768&t.flags)return void Yc(t,lc);e=t.return;var n=Qu(t.alternate,t,uc);if(null!==n)return void(tc=n);if(null!==(t=t.sibling))return void(tc=t);tc=t=e}while(null!==t);0===cc&&(cc=5)}function Yc(e,t){do{var n=Xu(e.alternate,e);if(null!==n)return n.flags&=32767,void(tc=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(tc=e);tc=e=n}while(null!==e);cc=6,tc=null}function Jc(e,t,n,r,a,l,i,u,c,s){var f=L.T,d=U.p;try{U.p=2,L.T=null,function(e,t,n,r,a,l,i,u){do{es()}while(null!==Sc);if(6&Zu)throw Error(o(327));var c=e.finishedWork;if(r=e.finishedLanes,null===c)return null;if(e.finishedWork=null,e.finishedLanes=0,c===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0,e.cancelPendingCommit=null;var s=c.lanes|c.childLanes;if(function(e,t,n,r,a,l){var o=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var i=e.entanglements,u=e.expirationTimes,c=e.hiddenUpdates;for(n=o&~n;0<n;){var s=31-be(n),f=1<<s;i[s]=0,u[s]=-1;var d=c[s];if(null!==d)for(c[s]=null,s=0;s<d.length;s++){var p=d[s];null!==p&&(p.lane&=-536870913)}n&=~f}0!==r&&Oe(e,r,0),0!==l&&0===a&&0!==e.tag&&(e.suspendedLanes|=l&~(o&~t))}(e,r,s|=Cr,l,i,u),e===ec&&(tc=ec=null,nc=0),!(10256&c.subtreeFlags)&&!(10256&c.flags)||kc||(kc=!0,Ec=s,xc=n,re(fe,(function(){return es(),null}))),n=!!(15990&c.flags),15990&c.subtreeFlags||n?(n=L.T,L.T=null,l=U.p,U.p=2,i=Zu,Zu|=4,function(e,t){if(e=e.containerInfo,qs=Hf,Zn(e=Jn(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,l=r.focusNode;r=r.focusOffset;try{n.nodeType,l.nodeType}catch(e){n=null;break e}var i=0,u=-1,c=-1,s=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==a&&3!==d.nodeType||(u=i+a),d!==l||0!==r&&3!==d.nodeType||(c=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++s===a&&(u=i),p===l&&++f===r&&(c=i),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===c?null:{start:u,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(Ws={focusedElem:e,selectionRange:n},Hf=!1,tu=t;null!==tu;)if(e=(t=tu).child,1028&t.subtreeFlags&&null!==e)e.return=t,tu=e;else for(;null!==tu;){switch(l=(t=tu).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==l){e=void 0,n=t,a=l.memoizedProps,l=l.memoizedState,r=n.stateNode;try{var m=Oo(n.type,a,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(m,l),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){ns(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))lf(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":lf(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(o(163))}if(null!==(e=t.sibling)){e.return=t.return,tu=e;break}tu=t.return}m=nu,nu=!1}(e,c),pu(c,e),er(Ws,e.containerInfo),Hf=!!qs,Ws=qs=null,e.current=c,ru(e,c.alternate,c),oe(),Zu=i,U.p=l,L.T=n):e.current=c,kc?(kc=!1,Sc=e,Cc=r):Zc(e,s),0===(s=e.pendingLanes)&&(wc=null),function(e){if(ve&&"function"==typeof ve.onCommitFiberRoot)try{ve.onCommitFiberRoot(ge,e,void 0,!(128&~e.current.flags))}catch(e){}}(c.stateNode),hs(e),null!==t)for(a=e.onRecoverableError,c=0;c<t.length;c++)a((s=t[c]).value,{componentStack:s.stack});!!(3&Cc)&&es(),s=e.pendingLanes,4194218&r&&42&s?e===_c?Pc++:(Pc=0,_c=e):Pc=0,ms(0,!1)}(e,t,n,r,d,a,l,i)}finally{L.T=f,U.p=d}}function Zc(e,t){0==(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,Ba(t))}function es(){if(null!==Sc){var e=Sc,t=Ec;Ec=0;var n=Ie(Cc),r=L.T,a=U.p;try{if(U.p=32>n?32:n,L.T=null,null===Sc)var l=!1;else{n=xc,xc=null;var i=Sc,u=Cc;if(Sc=null,Cc=0,6&Zu)throw Error(o(331));var c=Zu;if(Zu|=4,zu(i.current),ku(i,i.current,u,n),Zu=c,ms(0,!1),ve&&"function"==typeof ve.onPostCommitFiberRoot)try{ve.onPostCommitFiberRoot(ge,i)}catch(e){}l=!0}return l}finally{U.p=a,L.T=r,Zc(e,t)}}return!1}function ts(e,t,n){t=Tr(n,t),null!==(e=Ni(e,t=Fo(e.stateNode,t,2),2))&&(Ne(e,2),hs(e))}function ns(e,t,n){if(3===e.tag)ts(e,e,n);else for(;null!==t;){if(3===t.tag){ts(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===wc||!wc.has(r))){e=Tr(n,e),null!==(r=Ni(t,n=Bo(2),2))&&(Uo(n,r,t,e),Ne(r,2),hs(r));break}}t=t.return}}function rs(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new Ju;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(ic=!0,a.add(n),e=as.bind(null,e,t,n),t.then(e,e))}function as(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,ec===e&&(nc&n)===n&&(4===cc||3===cc&&(62914560&nc)===nc&&300>ie()-yc?!(2&Zu)&&Fc(e,0):dc|=n,hc===nc&&(hc=0)),hs(e)}function ls(e,t){0===t&&(t=Le()),null!==(e=_r(e,t))&&(Ne(e,t),hs(e))}function os(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),ls(e,n)}function is(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(o(314))}null!==r&&r.delete(t),ls(e,n)}var us=null,cs=null,ss=!1,fs=!1,ds=!1,ps=0;function hs(e){var t;e!==cs&&null===e.next&&(null===cs?us=cs=e:cs=cs.next=e),fs=!0,ss||(ss=!0,t=gs,nf((function(){6&Zu?re(ce,t):t()})))}function ms(e,t){if(!ds&&fs){ds=!0;do{for(var n=!1,r=us;null!==r;){if(!t)if(0!==e){var a=r.pendingLanes;if(0===a)var l=0;else{var o=r.suspendedLanes,i=r.pingedLanes;l=(1<<31-be(42|e)+1)-1,l=201326677&(l&=a&~(o&~i))?201326677&l|1:l?2|l:0}0!==l&&(n=!0,bs(r,l))}else l=nc,!(3&(l=Ee(r,r===ec?l:0)))||xe(r,l)||(n=!0,bs(r,l));r=r.next}}while(n);ds=!1}}function gs(){fs=ss=!1;var e,t=0;0!==ps&&(((e=window.event)&&"popstate"===e.type?e!==Js&&(Js=e,!0):(Js=null,!1))&&(t=ps),ps=0);for(var n=ie(),r=null,a=us;null!==a;){var l=a.next,o=vs(a,n);0===o?(a.next=null,null===r?us=l:r.next=l,null===l&&(cs=r)):(r=a,(0!==t||3&o)&&(fs=!0)),a=l}ms(t,!1)}function vs(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,l=-62914561&e.pendingLanes;0<l;){var o=31-be(l),i=1<<o,u=a[o];-1===u?i&n&&!(i&r)||(a[o]=Pe(i,t)):u<=t&&(e.expiredLanes|=i),l&=~i}if(n=nc,n=Ee(e,e===(t=ec)?n:0),r=e.callbackNode,0===n||e===t&&2===rc||null!==e.cancelPendingCommit)return null!==r&&null!==r&&ae(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||xe(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&ae(r),Ie(n)){case 2:case 8:n=se;break;case 32:default:n=fe;break;case 268435456:n=pe}return r=ys.bind(null,e),n=re(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&ae(r),e.callbackPriority=2,e.callbackNode=null,2}function ys(e,t){var n=e.callbackNode;if(es()&&e.callbackNode!==n)return null;var r=nc;return 0===(r=Ee(e,e===ec?r:0))?null:(Oc(e,r,t),vs(e,ie()),null!=e.callbackNode&&e.callbackNode===n?ys.bind(null,e):null)}function bs(e,t){if(es())return null;Oc(e,t,!0)}function As(){return 0===ps&&(ps=_e()),ps}function ws(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:_t(""+e)}function ks(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Ss=0;Ss<Ar.length;Ss++){var Cs=Ar[Ss];wr(Cs.toLowerCase(),"on"+(Cs[0].toUpperCase()+Cs.slice(1)))}wr(dr,"onAnimationEnd"),wr(pr,"onAnimationIteration"),wr(hr,"onAnimationStart"),wr("dblclick","onDoubleClick"),wr("focusin","onFocus"),wr("focusout","onBlur"),wr(mr,"onTransitionRun"),wr(gr,"onTransitionStart"),wr(vr,"onTransitionCancel"),wr(yr,"onTransitionEnd"),et("onMouseEnter",["mouseout","mouseover"]),et("onMouseLeave",["mouseout","mouseover"]),et("onPointerEnter",["pointerout","pointerover"]),et("onPointerLeave",["pointerout","pointerover"]),Ze("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Ze("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Ze("onBeforeInput",["compositionend","keypress","textInput","paste"]),Ze("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Ze("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Ze("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Es="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),xs=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Es));function Ps(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var l=void 0;if(t)for(var o=r.length-1;0<=o;o--){var i=r[o],u=i.instance,c=i.currentTarget;if(i=i.listener,u!==l&&a.isPropagationStopped())break e;l=i,a.currentTarget=c;try{l(a)}catch(e){To(e)}a.currentTarget=null,l=u}else for(o=0;o<r.length;o++){if(u=(i=r[o]).instance,c=i.currentTarget,i=i.listener,u!==l&&a.isPropagationStopped())break e;l=i,a.currentTarget=c;try{l(a)}catch(e){To(e)}a.currentTarget=null,l=u}}}}function _s(e,t){var n=t[Be];void 0===n&&(n=t[Be]=new Set);var r=e+"__bubble";n.has(r)||(Os(t,e,2,!1),n.add(r))}function Ls(e,t,n){var r=0;t&&(r|=4),Os(n,e,r,t)}var zs="_reactListening"+Math.random().toString(36).slice(2);function Ns(e){if(!e[zs]){e[zs]=!0,Ye.forEach((function(t){"selectionchange"!==t&&(xs.has(t)||Ls(t,!1,e),Ls(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[zs]||(t[zs]=!0,Ls("selectionchange",!1,t))}}function Os(e,t,n,r){switch(Xf(t)){case 2:var a=Vf;break;case 8:a=$f;break;default:a=Gf}n=a.bind(null,t,n,e),a=void 0,!Rt||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Ts(e,t,n,r,a){var l=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var i=r.stateNode.containerInfo;if(i===a||8===i.nodeType&&i.parentNode===a)break;if(4===o)for(o=r.return;null!==o;){var u=o.tag;if((3===u||4===u)&&((u=o.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;o=o.return}for(;null!==i;){if(null===(o=qe(i)))return;if(5===(u=o.tag)||6===u||26===u||27===u){r=l=o;continue e}i=i.parentNode}}r=r.return}Dt((function(){var r=l,a=zt(n),o=[];e:{var i=br.get(e);if(void 0!==i){var u=Yt,c=e;switch(e){case"keypress":if(0===Vt(n))break e;case"keydown":case"keyup":u=pn;break;case"focusin":c="focus",u=rn;break;case"focusout":c="blur",u=rn;break;case"beforeblur":case"afterblur":u=rn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=nn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=mn;break;case dr:case pr:case hr:u=an;break;case yr:u=gn;break;case"scroll":case"scrollend":u=Zt;break;case"wheel":u=vn;break;case"copy":case"cut":case"paste":u=ln;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=hn;break;case"toggle":case"beforetoggle":u=yn}var s=!!(4&t),f=!s&&("scroll"===e||"scrollend"===e),d=s?null!==i?i+"Capture":null:i;s=[];for(var p,h=r;null!==h;){var m=h;if(p=m.stateNode,5!==(m=m.tag)&&26!==m&&27!==m||null===p||null===d||null!=(m=Mt(h,d))&&s.push(Is(h,m,p)),f)break;h=h.return}0<s.length&&(i=new u(i,c,null,n,a),o.push({event:i,listeners:s}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===Lt||!(c=n.relatedTarget||n.fromElement)||!qe(c)&&!c[Fe])&&(u||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?qe(c):null)&&(f=M(c),s=c.tag,c!==f||5!==s&&27!==s&&6!==s)&&(c=null)):(u=null,c=r),u!==c)){if(s=tn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=hn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?i:Qe(u),p=null==c?i:Qe(c),(i=new s(m,h+"leave",u,n,a)).target=f,i.relatedTarget=p,m=null,qe(a)===r&&((s=new s(d,h+"enter",c,n,a)).target=p,s.relatedTarget=f,m=s),f=m,u&&c)e:{for(d=c,h=0,p=s=u;p;p=Ms(p))h++;for(p=0,m=d;m;m=Ms(m))p++;for(;0<h-p;)s=Ms(s),h--;for(;0<p-h;)d=Ms(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=Ms(s),d=Ms(d)}s=null}else s=null;null!==u&&Rs(o,i,u,s,!1),null!==c&&null!==f&&Rs(o,f,c,s,!0)}if("select"===(u=(i=r?Qe(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var g=Mn;else if(zn(i))if(Rn)g=qn;else{g=$n;var v=Vn}else!(u=i.nodeName)||"input"!==u.toLowerCase()||"checkbox"!==i.type&&"radio"!==i.type?r&&Et(r.elementType)&&(g=Mn):g=Gn;switch(g&&(g=g(e,r))?Nn(o,g,n,a):(v&&v(e,i,r),"focusout"===e&&r&&"number"===i.type&&null!=r.memoizedProps.value&&vt(i,"number",i.value)),v=r?Qe(r):window,e){case"focusin":(zn(v)||"true"===v.contentEditable)&&(nr=v,rr=r,ar=null);break;case"focusout":ar=rr=nr=null;break;case"mousedown":lr=!0;break;case"contextmenu":case"mouseup":case"dragend":lr=!1,or(o,n,a);break;case"selectionchange":if(tr)break;case"keydown":case"keyup":or(o,n,a)}var y;if(An)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else _n?xn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Sn&&"ko"!==n.locale&&(_n||"onCompositionStart"!==b?"onCompositionEnd"===b&&_n&&(y=Ht()):(Bt="value"in(Ft=a)?Ft.value:Ft.textContent,_n=!0)),0<(v=Ds(r,b)).length&&(b=new on(b,e,null,n,a),o.push({event:b,listeners:v}),(y||null!==(y=Pn(n)))&&(b.data=y))),(y=kn?function(e,t){switch(e){case"compositionend":return Pn(t);case"keypress":return 32!==t.which?null:(En=!0,Cn);case"textInput":return(e=t.data)===Cn&&En?null:e;default:return null}}(e,n):function(e,t){if(_n)return"compositionend"===e||!An&&xn(e,t)?(e=Ht(),Ut=Bt=Ft=null,_n=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Sn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(b=Ds(r,"onBeforeInput")).length&&(v=new on("onBeforeInput","beforeinput",null,n,a),o.push({event:v,listeners:b}),v.data=y),function(e,t,n,r,a){if("submit"===t&&n&&n.stateNode===a){var l=ws((a[je]||null).action),o=r.submitter;o&&null!==(t=(t=o[je]||null)?ws(t.formAction):o.getAttribute("formAction"))&&(l=t,o=null);var i=new Yt("action","action",null,r,a);e.push({event:i,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==ps){var e=o?ks(a,o):new FormData(a);co(n,{pending:!0,data:e,method:a.method,action:l},null,e)}}else"function"==typeof l&&(i.preventDefault(),e=o?ks(a,o):new FormData(a),co(n,{pending:!0,data:e,method:a.method,action:l},l,e))},currentTarget:a}]})}}(o,e,r,n,a)}Ps(o,t)}))}function Is(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ds(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,l=a.stateNode;5!==(a=a.tag)&&26!==a&&27!==a||null===l||(null!=(a=Mt(e,n))&&r.unshift(Is(e,a,l)),null!=(a=Mt(e,t))&&r.push(Is(e,a,l))),e=e.return}return r}function Ms(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Rs(e,t,n,r,a){for(var l=t._reactName,o=[];null!==n&&n!==r;){var i=n,u=i.alternate,c=i.stateNode;if(i=i.tag,null!==u&&u===r)break;5!==i&&26!==i&&27!==i||null===c||(u=c,a?null!=(c=Mt(n,l))&&o.unshift(Is(n,c,u)):a||null!=(c=Mt(n,l))&&o.push(Is(n,c,u))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var js=/\r\n?/g,Fs=/\u0000|\uFFFD/g;function Bs(e){return("string"==typeof e?e:""+e).replace(js,"\n").replace(Fs,"")}function Us(e,t){return t=Bs(t),Bs(e)===t}function Hs(){}function Vs(e,t,n,r,a,l){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||wt(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&wt(e,""+r);break;case"className":ot(e,"class",r);break;case"tabIndex":ot(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":ot(e,n,r);break;case"style":Ct(e,r,l);break;case"data":if("object"!==t){ot(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=_t(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof l&&("formAction"===n?("input"!==t&&Vs(e,t,"name",a.name,a,null),Vs(e,t,"formEncType",a.formEncType,a,null),Vs(e,t,"formMethod",a.formMethod,a,null),Vs(e,t,"formTarget",a.formTarget,a,null)):(Vs(e,t,"encType",a.encType,a,null),Vs(e,t,"method",a.method,a,null),Vs(e,t,"target",a.target,a,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=_t(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Hs);break;case"onScroll":null!=r&&_s("scroll",e);break;case"onScrollEnd":null!=r&&_s("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(o(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=_t(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":_s("beforetoggle",e),_s("toggle",e),lt(e,"popover",r);break;case"xlinkActuate":it(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":it(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":it(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":it(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":it(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":it(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":it(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":it(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":it(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":lt(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&lt(e,n=xt.get(n)||n,r)}}function $s(e,t,n,r,a,l){switch(n){case"style":Ct(e,r,l);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(o(60));e.innerHTML=n}}break;case"children":"string"==typeof r?wt(e,r):("number"==typeof r||"bigint"==typeof r)&&wt(e,""+r);break;case"onScroll":null!=r&&_s("scroll",e);break;case"onScrollEnd":null!=r&&_s("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Hs);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Je.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(a=n.endsWith("Capture"),t=n.slice(2,a?n.length-7:void 0),"function"==typeof(l=null!=(l=e[je]||null)?l[n]:null)&&e.removeEventListener(t,l,a),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):lt(e,n,r):("function"!=typeof l&&null!==l&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,a)))}}function Gs(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":_s("error",e),_s("load",e);var r,a=!1,l=!1;for(r in n)if(n.hasOwnProperty(r)){var i=n[r];if(null!=i)switch(r){case"src":a=!0;break;case"srcSet":l=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:Vs(e,t,r,i,n,null)}}return l&&Vs(e,t,"srcSet",n.srcSet,n,null),void(a&&Vs(e,t,"src",n.src,n,null));case"input":_s("invalid",e);var u=r=i=l=null,c=null,s=null;for(a in n)if(n.hasOwnProperty(a)){var f=n[a];if(null!=f)switch(a){case"name":l=f;break;case"type":i=f;break;case"checked":c=f;break;case"defaultChecked":s=f;break;case"value":r=f;break;case"defaultValue":u=f;break;case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(o(137,t));break;default:Vs(e,t,a,f,n,null)}}return gt(e,r,u,c,s,i,l,!1),void st(e);case"select":for(l in _s("invalid",e),a=i=r=null,n)if(n.hasOwnProperty(l)&&null!=(u=n[l]))switch(l){case"value":r=u;break;case"defaultValue":i=u;break;case"multiple":a=u;default:Vs(e,t,l,u,n,null)}return t=r,n=i,e.multiple=!!a,void(null!=t?yt(e,!!a,t,!1):null!=n&&yt(e,!!a,n,!0));case"textarea":for(i in _s("invalid",e),r=l=a=null,n)if(n.hasOwnProperty(i)&&null!=(u=n[i]))switch(i){case"value":a=u;break;case"defaultValue":l=u;break;case"children":r=u;break;case"dangerouslySetInnerHTML":if(null!=u)throw Error(o(91));break;default:Vs(e,t,i,u,n,null)}return At(e,a,l,r),void st(e);case"option":for(c in n)n.hasOwnProperty(c)&&null!=(a=n[c])&&("selected"===c?e.selected=a&&"function"!=typeof a&&"symbol"!=typeof a:Vs(e,t,c,a,n,null));return;case"dialog":_s("cancel",e),_s("close",e);break;case"iframe":case"object":_s("load",e);break;case"video":case"audio":for(a=0;a<Es.length;a++)_s(Es[a],e);break;case"image":_s("error",e),_s("load",e);break;case"details":_s("toggle",e);break;case"embed":case"source":case"link":_s("error",e),_s("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(s in n)if(n.hasOwnProperty(s)&&null!=(a=n[s]))switch(s){case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:Vs(e,t,s,a,n,null)}return;default:if(Et(t)){for(f in n)n.hasOwnProperty(f)&&void 0!==(a=n[f])&&$s(e,t,f,a,n,void 0);return}}for(u in n)n.hasOwnProperty(u)&&null!=(a=n[u])&&Vs(e,t,u,a,n,null)}var qs=null,Ws=null;function Qs(e){return 9===e.nodeType?e:e.ownerDocument}function Xs(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function Ks(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function Ys(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Js=null,Zs="function"==typeof setTimeout?setTimeout:void 0,ef="function"==typeof clearTimeout?clearTimeout:void 0,tf="function"==typeof Promise?Promise:void 0,nf="function"==typeof queueMicrotask?queueMicrotask:void 0!==tf?function(e){return tf.resolve(null).then(e).catch(rf)}:Zs;function rf(e){setTimeout((function(){throw e}))}function af(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void pd(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);pd(t)}function lf(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":lf(n),Ge(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function of(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}function uf(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function cf(e,t,n){switch(t=Qs(n),e){case"html":if(!(e=t.documentElement))throw Error(o(452));return e;case"head":if(!(e=t.head))throw Error(o(453));return e;case"body":if(!(e=t.body))throw Error(o(454));return e;default:throw Error(o(451))}}var sf=new Map,ff=new Set;function df(e){return"function"==typeof e.getRootNode?e.getRootNode():e.ownerDocument}var pf=U.d;U.d={f:function(){var e=pf.f(),t=Rc();return e||t},r:function(e){var t=We(e);null!==t&&5===t.tag&&"form"===t.type?fo(t):pf.r(e)},D:function(e){pf.D(e),mf("dns-prefetch",e,null)},C:function(e,t){pf.C(e,t),mf("preconnect",e,t)},L:function(e,t,n){pf.L(e,t,n);var r=hf;if(r&&e&&t){var a='link[rel="preload"][as="'+ht(t)+'"]';"image"===t&&n&&n.imageSrcSet?(a+='[imagesrcset="'+ht(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(a+='[imagesizes="'+ht(n.imageSizes)+'"]')):a+='[href="'+ht(e)+'"]';var l=a;switch(t){case"style":l=vf(e);break;case"script":l=Af(e)}sf.has(l)||(e=z({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),sf.set(l,e),null!==r.querySelector(a)||"style"===t&&r.querySelector(yf(l))||"script"===t&&r.querySelector(wf(l))||(Gs(t=r.createElement("link"),"link",e),Ke(t),r.head.appendChild(t)))}},m:function(e,t){pf.m(e,t);var n=hf;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",a='link[rel="modulepreload"][as="'+ht(r)+'"][href="'+ht(e)+'"]',l=a;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":l=Af(e)}if(!sf.has(l)&&(e=z({rel:"modulepreload",href:e},t),sf.set(l,e),null===n.querySelector(a))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(wf(l)))return}Gs(r=n.createElement("link"),"link",e),Ke(r),n.head.appendChild(r)}}},X:function(e,t){pf.X(e,t);var n=hf;if(n&&e){var r=Xe(n).hoistableScripts,a=Af(e),l=r.get(a);l||((l=n.querySelector(wf(a)))||(e=z({src:e,async:!0},t),(t=sf.get(a))&&Ef(e,t),Ke(l=n.createElement("script")),Gs(l,"link",e),n.head.appendChild(l)),l={type:"script",instance:l,count:1,state:null},r.set(a,l))}},S:function(e,t,n){pf.S(e,t,n);var r=hf;if(r&&e){var a=Xe(r).hoistableStyles,l=vf(e);t=t||"default";var o=a.get(l);if(!o){var i={loading:0,preload:null};if(o=r.querySelector(yf(l)))i.loading=5;else{e=z({rel:"stylesheet",href:e,"data-precedence":t},n),(n=sf.get(l))&&Cf(e,n);var u=o=r.createElement("link");Ke(u),Gs(u,"link",e),u._p=new Promise((function(e,t){u.onload=e,u.onerror=t})),u.addEventListener("load",(function(){i.loading|=1})),u.addEventListener("error",(function(){i.loading|=2})),i.loading|=4,Sf(o,t,r)}o={type:"stylesheet",instance:o,count:1,state:i},a.set(l,o)}}},M:function(e,t){pf.M(e,t);var n=hf;if(n&&e){var r=Xe(n).hoistableScripts,a=Af(e),l=r.get(a);l||((l=n.querySelector(wf(a)))||(e=z({src:e,async:!0,type:"module"},t),(t=sf.get(a))&&Ef(e,t),Ke(l=n.createElement("script")),Gs(l,"link",e),n.head.appendChild(l)),l={type:"script",instance:l,count:1,state:null},r.set(a,l))}}};var hf="undefined"==typeof document?null:document;function mf(e,t,n){var r=hf;if(r&&"string"==typeof t&&t){var a=ht(t);a='link[rel="'+e+'"][href="'+a+'"]',"string"==typeof n&&(a+='[crossorigin="'+n+'"]'),ff.has(a)||(ff.add(a),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(a)&&(Gs(t=r.createElement("link"),"link",e),Ke(t),r.head.appendChild(t)))}}function gf(e,t,n,r){var a,l,i,u,c=(c=K.current)?df(c):null;if(!c)throw Error(o(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=vf(n.href),(r=(n=Xe(c).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=vf(n.href);var s=Xe(c).hoistableStyles,f=s.get(e);if(f||(c=c.ownerDocument||c,f={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},s.set(e,f),(s=c.querySelector(yf(e)))&&!s._p&&(f.instance=s,f.state.loading=5),sf.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},sf.set(e,n),s||(a=c,l=e,i=n,u=f.state,a.querySelector('link[rel="preload"][as="style"]['+l+"]")?u.loading=1:(l=a.createElement("link"),u.preload=l,l.addEventListener("load",(function(){return u.loading|=1})),l.addEventListener("error",(function(){return u.loading|=2})),Gs(l,"link",i),Ke(l),a.head.appendChild(l))))),t&&null===r)throw Error(o(528,""));return f}if(t&&null!==r)throw Error(o(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=Af(n),(r=(n=Xe(c).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(o(444,e))}}function vf(e){return'href="'+ht(e)+'"'}function yf(e){return'link[rel="stylesheet"]['+e+"]"}function bf(e){return z({},e,{"data-precedence":e.precedence,precedence:null})}function Af(e){return'[src="'+ht(e)+'"]'}function wf(e){return"script[async]"+e}function kf(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+ht(n.href)+'"]');if(r)return t.instance=r,Ke(r),r;var a=z({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return Ke(r=(e.ownerDocument||e).createElement("style")),Gs(r,"style",a),Sf(r,n.precedence,e),t.instance=r;case"stylesheet":a=vf(n.href);var l=e.querySelector(yf(a));if(l)return t.state.loading|=4,t.instance=l,Ke(l),l;r=bf(n),(a=sf.get(a))&&Cf(r,a),Ke(l=(e.ownerDocument||e).createElement("link"));var i=l;return i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),Gs(l,"link",r),t.state.loading|=4,Sf(l,n.precedence,e),t.instance=l;case"script":return l=Af(n.src),(a=e.querySelector(wf(l)))?(t.instance=a,Ke(a),a):(r=n,(a=sf.get(l))&&Ef(r=z({},n),a),Ke(a=(e=e.ownerDocument||e).createElement("script")),Gs(a,"link",r),e.head.appendChild(a),t.instance=a);case"void":return null;default:throw Error(o(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Sf(r,n.precedence,e));return t.instance}function Sf(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),a=r.length?r[r.length-1]:null,l=a,o=0;o<r.length;o++){var i=r[o];if(i.dataset.precedence===t)l=i;else if(l!==a)break}l?l.parentNode.insertBefore(e,l.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Cf(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function Ef(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var xf=null;function Pf(e,t,n){if(null===xf){var r=new Map,a=xf=new Map;a.set(n,r)}else(r=(a=xf).get(n))||(r=new Map,a.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),a=0;a<n.length;a++){var l=n[a];if(!(l[$e]||l[Re]||"link"===e&&"stylesheet"===l.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==l.namespaceURI){var o=l.getAttribute(t)||"";o=e+o;var i=r.get(o);i?i.push(l):r.set(o,[l])}}return r}function _f(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Lf(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var zf=null;function Nf(){}function Of(){if(this.count--,0===this.count)if(this.stylesheets)If(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Tf=null;function If(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Tf=new Map,t.forEach(Df,e),Tf=null,Of.call(e))}function Df(e,t){if(!(4&t.state.loading)){var n=Tf.get(e);if(n)var r=n.get(null);else{n=new Map,Tf.set(e,n);for(var a=e.querySelectorAll("link[data-precedence],style[data-precedence]"),l=0;l<a.length;l++){var o=a[l];"LINK"!==o.nodeName&&"not all"===o.getAttribute("media")||(n.set(o.dataset.precedence,o),r=o)}r&&n.set(null,r)}o=(a=t.instance).getAttribute("data-precedence"),(l=n.get(o)||r)===r&&n.set(null,a),n.set(o,a),this.count++,r=Of.bind(this),a.addEventListener("load",r),a.addEventListener("error",r),l?l.parentNode.insertBefore(a,l.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(a,e.firstChild),t.state.loading|=4}}var Mf={$$typeof:m,Provider:null,Consumer:null,_currentValue:H,_currentValue2:H,_threadCount:0};function Rf(e,t,n,r,a,l,o,i){this.tag=1,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=ze(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.finishedLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ze(0),this.hiddenUpdates=ze(null),this.identifierPrefix=r,this.onUncaughtError=a,this.onCaughtError=l,this.onRecoverableError=o,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map}function jf(e,t,n,r,a,l){a=function(e){return e?e=Nr:Nr}(a),null===r.context?r.context=a:r.pendingContext=a,(r=zi(t)).payload={element:n},null!==(l=void 0===l?null:l)&&(r.callback=l),null!==(n=Ni(e,r,t))&&(Nc(n,0,t),Oi(n,e,t))}function Ff(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Bf(e,t){Ff(e,t),(e=e.alternate)&&Ff(e,t)}function Uf(e){if(13===e.tag){var t=_r(e,67108864);null!==t&&Nc(t,0,67108864),Bf(e,67108864)}}var Hf=!0;function Vf(e,t,n,r){var a=L.T;L.T=null;var l=U.p;try{U.p=2,Gf(e,t,n,r)}finally{U.p=l,L.T=a}}function $f(e,t,n,r){var a=L.T;L.T=null;var l=U.p;try{U.p=8,Gf(e,t,n,r)}finally{U.p=l,L.T=a}}function Gf(e,t,n,r){if(Hf){var a=qf(r);if(null===a)Ts(e,t,r,Wf,n),ad(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Yf=ld(Yf,e,t,n,r,a),!0;case"dragenter":return Jf=ld(Jf,e,t,n,r,a),!0;case"mouseover":return Zf=ld(Zf,e,t,n,r,a),!0;case"pointerover":var l=a.pointerId;return ed.set(l,ld(ed.get(l)||null,e,t,n,r,a)),!0;case"gotpointercapture":return l=a.pointerId,td.set(l,ld(td.get(l)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(ad(e,r),4&t&&-1<rd.indexOf(e)){for(;null!==a;){var l=We(a);if(null!==l)switch(l.tag){case 3:if((l=l.stateNode).current.memoizedState.isDehydrated){var o=Ce(l.pendingLanes);if(0!==o){var i=l;for(i.pendingLanes|=2,i.entangledLanes|=2;o;){var u=1<<31-be(o);i.entanglements[1]|=u,o&=~u}hs(l),!(6&Zu)&&(bc=ie()+500,ms(0,!1))}}break;case 13:null!==(i=_r(l,2))&&Nc(i,0,2),Rc(),Bf(l,2)}if(null===(l=qf(r))&&Ts(e,t,r,Wf,n),l===a)break;a=l}null!==a&&r.stopPropagation()}else Ts(e,t,r,null,n)}}function qf(e){return Qf(e=zt(e))}var Wf=null;function Qf(e){if(Wf=null,null!==(e=qe(e))){var t=M(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=R(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return Wf=e,null}function Xf(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(ue()){case ce:return 2;case se:return 8;case fe:case de:return 32;case pe:return 268435456;default:return 32}default:return 32}}var Kf=!1,Yf=null,Jf=null,Zf=null,ed=new Map,td=new Map,nd=[],rd="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function ad(e,t){switch(e){case"focusin":case"focusout":Yf=null;break;case"dragenter":case"dragleave":Jf=null;break;case"mouseover":case"mouseout":Zf=null;break;case"pointerover":case"pointerout":ed.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":td.delete(t.pointerId)}}function ld(e,t,n,r,a,l){return null===e||e.nativeEvent!==l?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:l,targetContainers:[a]},null!==t&&null!==(t=We(t))&&Uf(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function od(e){var t=qe(e.target);if(null!==t){var n=M(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=R(n)))return e.blockedOn=t,void function(e){var t=U.p;try{return U.p=e,function(){if(13===n.tag){var e=Lc(),t=_r(n,e);null!==t&&Nc(t,0,e),Bf(n,e)}}()}finally{U.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function id(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=qf(e.nativeEvent);if(null!==n)return null!==(t=We(n))&&Uf(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Lt=r,n.target.dispatchEvent(r),Lt=null,t.shift()}return!0}function ud(e,t,n){id(e)&&n.delete(t)}function cd(){Kf=!1,null!==Yf&&id(Yf)&&(Yf=null),null!==Jf&&id(Jf)&&(Jf=null),null!==Zf&&id(Zf)&&(Zf=null),ed.forEach(ud),td.forEach(ud)}function sd(e,t){e.blockedOn===t&&(e.blockedOn=null,Kf||(Kf=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,cd)))}var fd=null;function dd(e){fd!==e&&(fd=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){fd===e&&(fd=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],a=e[t+2];if("function"!=typeof r){if(null===Qf(r||n))continue;break}var l=We(n);null!==l&&(e.splice(t,3),t-=3,co(l,{pending:!0,data:a,method:n.method,action:r},r,a))}})))}function pd(e){function t(t){return sd(t,e)}null!==Yf&&sd(Yf,e),null!==Jf&&sd(Jf,e),null!==Zf&&sd(Zf,e),ed.forEach(t),td.forEach(t);for(var n=0;n<nd.length;n++){var r=nd[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<nd.length&&null===(n=nd[0]).blockedOn;)od(n),null===n.blockedOn&&nd.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var a=n[r],l=n[r+1],o=a[je]||null;if("function"==typeof l)o||dd(n);else if(o){var i=null;if(l&&l.hasAttribute("formAction")){if(a=l,o=l[je]||null)i=o.formAction;else if(null!==Qf(a))continue}else i=o.action;"function"==typeof i?n[r+1]=i:(n.splice(r,3),r-=3),dd(n)}}}function hd(e){this._internalRoot=e}function md(e){this._internalRoot=e}md.prototype.render=hd.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));jf(t.current,Lc(),e,t,null,null)},md.prototype.unmount=hd.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;0===e.tag&&es(),jf(e.current,2,null,e,null,null),Rc(),t[Fe]=null}},md.prototype.unstable_scheduleHydration=function(e){if(e){var t=De();e={blockedOn:null,target:e,priority:t};for(var n=0;n<nd.length&&0!==t&&t<nd[n].priority;n++);nd.splice(n,0,e),0===n&&od(e)}};var gd=a.version;if("19.0.0"!==gd)throw Error(o(527,gd,"19.0.0"));U.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=M(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var l=a.alternate;if(null===l){if(null!==(r=a.return)){n=r;continue}break}if(a.child===l.child){for(l=a.child;l;){if(l===n)return j(a),e;if(l===r)return j(a),t;l=l.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=l;else{for(var i=!1,u=a.child;u;){if(u===n){i=!0,n=a,r=l;break}if(u===r){i=!0,r=a,n=l;break}u=u.sibling}if(!i){for(u=l.child;u;){if(u===n){i=!0,n=l,r=a;break}if(u===r){i=!0,r=l,n=a;break}u=u.sibling}if(!i)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?F(e):null)?null:e.stateNode};var vd={bundleType:0,version:"19.0.0",rendererPackageName:"react-dom",currentDispatcherRef:L,findFiberByHostInstance:qe,reconcilerVersion:"19.0.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var yd=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!yd.isDisabled&&yd.supportsFiber)try{ge=yd.inject(vd),ve=yd}catch(e){}}t.createRoot=function(e,t){if(!(n=e)||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType)throw Error(o(299));var n,r=!1,a="",l=Io,i=Do,u=Mo;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(a=t.identifierPrefix),void 0!==t.onUncaughtError&&(l=t.onUncaughtError),void 0!==t.onCaughtError&&(i=t.onCaughtError),void 0!==t.onRecoverableError&&(u=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=function(e,t,n,r,a,l,o,i,u,c,s,f){return e=new Rf(e,t,n,o,i,u,c,f),t=1,!0===l&&(t|=24),l=Iu(3,null,null,t),e.current=l,l.stateNode=e,(t=Fa()).refCount++,e.pooledCache=t,t.refCount++,l.memoizedState={element:r,isDehydrated:n,cache:t},_i(l),e}(e,1,!1,null,0,r,a,l,i,u,0,null),e[Fe]=t.current,Ns(8===e.nodeType?e.parentNode:e),new hd(t)}},313:(e,t,n)=>{var r,a=n(540),l=n(338);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(null,arguments)}n(376);const i=function(e){return a.createElement("svg",o({xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1",viewBox:"0 0 119.4 122.88"},e),r||(r=a.createElement("path",{d:"M83.91 26.34a43.8 43.8 0 0 0-22.68-7 42 42 0 0 0-24.42 7 50 50 0 0 0-7.46 6.09 42.07 42.07 0 0 0-5.47 54.1A49 49 0 0 0 30 94a41.83 41.83 0 0 0 18.6 10.9 42.77 42.77 0 0 0 21.77.13 47.2 47.2 0 0 0 19.2-9.62 38 38 0 0 0 11.14-16 37 37 0 0 0 1.64-6.18 38.4 38.4 0 0 0 .61-6.69 8.24 8.24 0 1 1 16.47 0 55 55 0 0 1-.8 9.53A54.77 54.77 0 0 1 100.26 108a63.6 63.6 0 0 1-25.92 13.1 59.1 59.1 0 0 1-30.1-.25 58.45 58.45 0 0 1-26-15.17 66 66 0 0 1-8.1-9.86 58.56 58.56 0 0 1 7.54-75 65.7 65.7 0 0 1 9.92-8.09 58.4 58.4 0 0 1 33.95-9.85 60.5 60.5 0 0 1 32.5 10.42l-.47-4.11A8.25 8.25 0 1 1 110 7.32l2.64 22.77a8.24 8.24 0 0 1-6.73 9l-23.38 4.22a8.23 8.23 0 1 1-2.9-16.21z"})))};var u;function c(){return c=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c.apply(null,arguments)}const s=function(e){return a.createElement("svg",c({xmlns:"http://www.w3.org/2000/svg",fillRule:"evenodd",clipRule:"evenodd",imageRendering:"optimizeQuality",shapeRendering:"geometricPrecision",textRendering:"geometricPrecision",viewBox:"0 0 512 410.73"},e),u||(u=a.createElement("path",{d:"M335.62 410.73H164.96V239.89L13.31 59.96C7.33 52.52 3.19 44.79 1.29 37.65c-1.79-6.72-1.76-13.28.34-19.1 2.3-6.44 6.92-11.63 13.91-14.9C20.35 1.41 26.3.13 33.4.1L472.7.04c7.93-.29 14.95.96 20.74 3.44 7.02 2.97 12.28 7.87 15.44 14.17 3.05 6.1 3.93 13.27 2.34 21.06-1.5 7.24-5.17 15.11-11.32 23.16l-151.94 178.1v170.76zm95.61-347.71-69.16 81.05-18.67-16.01 69.16-81.05zm-84.8 99.39-24.45 28.66-18.68-16.01 24.45-28.66z"})))};var f;function d(){return d=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},d.apply(null,arguments)}const p=function(e){return a.createElement("svg",d({xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",viewBox:"0 0 122.879 119.801"},e),f||(f=a.createElement("path",{d:"M49.991 0h.015v.006C63.8.01 76.3 5.607 85.342 14.651c9.026 9.031 14.618 21.515 14.628 35.303h.006v.074h-.006a50 50 0 0 1-3.471 18.301v.007a50 50 0 0 1-5.548 10.307l29.08 26.14.018.015.157.146.012.012a8.6 8.6 0 0 1 2.648 5.779 8.6 8.6 0 0 1-1.976 5.971l-.011.016-.176.204-.039.046-.145.155-.011.011a8.6 8.6 0 0 1-5.782 2.651 8.6 8.6 0 0 1-5.975-1.978l-.012-.012-.203-.175-.029-.024-29.743-26.735a50 50 0 0 1-2.687 1.763 50 50 0 0 1-3.816 2.117c-6.699 3.342-14.266 5.223-22.27 5.223v.006h-.016v-.006c-13.797-.005-26.297-5.601-35.334-14.644l-.004.005C5.608 76.3.016 63.81.007 50.021H0v-.049h.007c.005-13.799 5.601-26.297 14.646-35.339C23.684 5.607 36.169.015 49.958.006V0zm17.796 43.397a6.56 6.56 0 0 1 3.322.872l-.002.002c.365.21.708.454 1.01.715.306.264.594.569.851.895h.004a6.52 6.52 0 0 1 1.394 4.053 6.63 6.63 0 0 1-.906 3.335 6.7 6.7 0 0 1-1.791 1.996 6.7 6.7 0 0 1-1.168.688v.002a6.6 6.6 0 0 1-2.722.6l-11.051.08-.08 11.062a6.5 6.5 0 0 1-1.366 3.96l-.006.007a6.646 6.646 0 0 1-5.247 2.568v-.007a6.6 6.6 0 0 1-1.743-.232 6.56 6.56 0 0 1-2.899-1.689 6.5 6.5 0 0 1-1.672-2.893v-.006a6.6 6.6 0 0 1-.215-1.728v-.005l.075-10.945-10.962.076a6.5 6.5 0 0 1-3.327-.873l.002-.002a6.3 6.3 0 0 1-1.86-1.613h-.004a6.52 6.52 0 0 1-1.393-4.053 6.6 6.6 0 0 1 .906-3.328l-.004-.002a6.8 6.8 0 0 1 1.442-1.714h.004a6.7 6.7 0 0 1 1.942-1.151 6.6 6.6 0 0 1 2.296-.423l11.051-.082.08-11.062a6.5 6.5 0 0 1 .921-3.309l.004.002c.224-.374.467-.715.727-1.003.264-.296.576-.584.908-.839l.005-.004v.002a6.62 6.62 0 0 1 4.055-1.375 6.6 6.6 0 0 1 3.317.897c.479.279.928.631 1.32 1.025l.004-.004a6.5 6.5 0 0 1 1.887 4.637l-.075 10.942zM50.006 11.212v.006h-.049v-.006c-10.683.007-20.367 4.348-27.376 11.354l.002.002c-7.019 7.018-11.365 16.711-11.368 27.404h.006v.049h-.006c.006 10.683 4.347 20.365 11.354 27.377l.002-.002c7.018 7.018 16.711 11.365 27.404 11.367v-.007h.049v.007c10.685-.007 20.367-4.348 27.381-11.359 7.012-7.009 11.359-16.702 11.361-27.401h-.006v-.049h.007c-.007-10.681-4.348-20.363-11.36-27.374v-.007c-7.009-7.011-16.702-11.359-27.401-11.361"})))};var h;function m(){return m=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},m.apply(null,arguments)}const g=function(e){return a.createElement("svg",m({xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",viewBox:"0 0 122.879 119.801"},e),h||(h=a.createElement("path",{fillRule:"evenodd",d:"M49.991 0h.015v.006C63.8.01 76.3 5.607 85.342 14.651c9.026 9.031 14.618 21.515 14.628 35.303h.006v.074h-.006a50 50 0 0 1-3.471 18.301v.007a50 50 0 0 1-5.548 10.307l29.08 26.14.018.015.157.146.012.012a8.6 8.6 0 0 1 2.648 5.779 8.6 8.6 0 0 1-1.976 5.971l-.011.016-.176.204-.039.046-.145.155-.011.011a8.6 8.6 0 0 1-5.782 2.651 8.6 8.6 0 0 1-5.975-1.978l-.012-.012-.203-.175-.029-.024-29.743-26.735a50 50 0 0 1-2.687 1.763 50 50 0 0 1-3.816 2.117c-6.699 3.342-14.266 5.223-22.27 5.223v.006h-.016v-.006c-13.797-.005-26.297-5.601-35.334-14.644l-.004.005C5.608 76.3.016 63.81.007 50.021H0v-.049h.007c.005-13.799 5.601-26.297 14.646-35.339C23.684 5.607 36.169.015 49.958.006V0zm17.796 43.397a6.56 6.56 0 0 1 3.322.872l-.002.002c.365.21.708.454 1.01.715.306.264.594.569.851.895h.004a6.52 6.52 0 0 1 1.394 4.053 6.63 6.63 0 0 1-.906 3.335 6.7 6.7 0 0 1-1.791 1.996 6.7 6.7 0 0 1-1.168.688v.002a6.6 6.6 0 0 1-2.722.6l-35.166.248a6.5 6.5 0 0 1-3.327-.873l.002-.002a6.3 6.3 0 0 1-1.86-1.613h-.004a6.52 6.52 0 0 1-1.393-4.053 6.6 6.6 0 0 1 .906-3.328l-.004-.002a6.8 6.8 0 0 1 1.442-1.714h.004a6.7 6.7 0 0 1 1.942-1.151 6.6 6.6 0 0 1 2.296-.423zM50.006 11.212v.006h-.049v-.006c-10.683.007-20.367 4.348-27.376 11.354l.002.002c-7.019 7.018-11.365 16.711-11.368 27.404h.006v.049h-.006c.006 10.683 4.347 20.365 11.354 27.377l.002-.002c7.018 7.018 16.711 11.365 27.404 11.367v-.007h.049v.007c10.685-.007 20.367-4.348 27.381-11.359 7.012-7.009 11.359-16.702 11.361-27.401h-.006v-.049h.007c-.007-10.681-4.348-20.363-11.36-27.374v-.007c-7.009-7.011-16.702-11.359-27.401-11.361",clipRule:"evenodd"})))};function v(){return v=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},v.apply(null,arguments)}const y=function(e){return a.createElement("svg",v({xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1",viewBox:"0 0 122.88 122.85"},e),a.createElement("path",{d:"m83.6 61.48.42-.42a1.1 1.1 0 0 1 1.54 0l15.65 15.64a1.1 1.1 0 0 1 0 1.54L89 90.45 71.81 73.27zm28.22 9.59a2.93 2.93 0 0 1-.86-5.8l8.56-1.27a2.93 2.93 0 1 1 .86 5.8zm-15.2-20.6a2.95 2.95 0 0 1-5.89 0v-9a2.95 2.95 0 1 1 5.89 0zm10.94 7.17a2.93 2.93 0 0 1-4.18-4.11l5.9-6a2.93 2.93 0 0 1 4.18 4.11zM73.28 32.53a2.93 2.93 0 1 1-.87-5.8L81 25.46a2.93 2.93 0 1 1 .86 5.8l-8.55 1.27Zm-15.2-20.61a2.95 2.95 0 1 1-5.89 0v-9a2.95 2.95 0 0 1 5.89 0zM69 19.1a2.93 2.93 0 0 1-4.16-4.1l5.47-5.57a2.93 2.93 0 1 1 4.17 4.11zm13.63 77.71-15.42 15.41A39.6 39.6 0 0 1 56.35 120a28.56 28.56 0 0 1-12.49 2.85 27.4 27.4 0 0 1-11.51-2.28c-8.75-4-19.49-15.31-25.39-22.82A32.6 32.6 0 0 1 1.2 87.47 28.6 28.6 0 0 1 .09 76.75a25 25 0 0 1 2.75-10.08 47 47 0 0 1 7.82-11l15.43-15.4 17.14 17.14-15.32 15.34q-4.56 4.57-4.61 9.63c0 6.86 10.3 17.23 17.15 17.23 3.34 0 6.59-1.56 9.67-4.64l15.33-15.34zM32.46 33.93l11.81-11.78.42-.42a1.1 1.1 0 0 1 1.54 0l15.56 15.55a1.08 1.08 0 0 1 0 1.53l-.41.42L49.57 51z",style:{fillRule:"evenodd"}}))};var b;function A(){return A=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},A.apply(null,arguments)}const w=function(e){return a.createElement("svg",A({xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",viewBox:"0 0 72.7 60"},e),b||(b=a.createElement("path",{d:"M72.4 28.5v-.2c-.1-.2-.3-.5-.5-.7L58.3 10.9c-1.3-1.6-3.6-1.9-5.2-.6s-1.9 3.6-.6 5.2l8.6 10.7H11.5l8.7-10.7c1.3-1.6 1-4-.6-5.2-1.6-1.3-4-1-5.2.6L.9 27.6c-.2.2-.3.4-.5.7v.2c-.3.4-.4.8-.4 1.3v.4c0 .4.1.9.3 1.3v.2c.1.2.3.5.5.7l13.5 16.7c1.3 1.6 3.6 1.9 5.2.6s1.9-3.6.6-5.2l-8.6-10.7h49.6l-8.7 10.7c-1.3 1.6-1 4 .6 5.2 1.6 1.3 4 1 5.2-.6l13.5-16.7c.2-.2.3-.4.5-.7v-.2c.2-.4.3-.8.3-1.3v-.4c.2-.5.1-.9-.1-1.3"})))};var k;function S(){return S=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},S.apply(null,arguments)}const C=function(e){return a.createElement("svg",S({xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",viewBox:"0 0 122.9 60"},e),k||(k=a.createElement("path",{d:"M48.5 0c-2.1 0-3.8 1.7-3.8 3.8v22.5H11.5l8.7-10.7c1.3-1.6 1-4-.6-5.2-1.6-1.3-4-1-5.2.6L.9 27.6c-.2.2-.3.4-.5.7v.2c-.3.4-.4.8-.4 1.3v.4c0 .4.1.9.3 1.3v.2c.1.2.3.5.5.7l13.5 16.7c1.3 1.6 3.6 1.9 5.2.6s1.9-3.6.6-5.2l-8.6-10.7h33.2v22.5c0 2.1 1.7 3.7 3.8 3.8 2.1 0 3.8-1.7 3.8-3.8V3.7c-.1-2-1.8-3.7-3.8-3.7M74.4 60c2.1 0 3.8-1.7 3.8-3.8V33.7h33.2l-8.7 10.7c-1.3 1.6-1 4 .6 5.2 1.6 1.3 4 1 5.2-.6L122 32.4c.2-.2.3-.4.5-.7v-.2c.2-.4.3-.9.3-1.3v-.4c0-.4-.1-.9-.3-1.3v-.2c-.1-.2-.3-.5-.5-.7l-13.5-16.7c-1.3-1.6-3.6-1.9-5.2-.6s-1.9 3.6-.6 5.2l8.6 10.7H78.1V3.7c0-2.1-1.7-3.7-3.8-3.8-2.1 0-3.8 1.7-3.8 3.8v52.5c.2 2.1 1.8 3.8 3.9 3.8"})))};function E(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function x(e){var t,n,r=e.bpm,l=e.setBpm,o=e.beatsPerBar,u=e.setBeatsPerBar,c=(e.zoomLevel,e.increaseZoom),f=e.decreaseZoom,d=e.showInactive,h=e.setShowInactive,m=e.showHidden,v=e.setShowHidden,b=e.updateView,A=e.modeSnap,k=e.setModeSnap,S=e.mode,x=e.setMode,P=e.saveCompDataJSON,_=e.loadCompDataJSON,L=(t=(0,a.useState)(!1),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,l,o,i=[],u=!0,c=!1;try{if(l=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=l.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){c=!0,a=e}finally{try{if(!u&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(c)throw a}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return E(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?E(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),z=L[0],N=L[1],O=function(){return N(!z)};return a.createElement("div",{id:"toolbar"},a.createElement("menu",{id:"main"},a.createElement(i,{onClick:b}),a.createElement(s,{onClick:O,className:"".concat(d&&m?"":"active")}),z&&a.createElement("div",{id:"filter-dropdown"},a.createElement("ul",null,a.createElement("li",{onClick:function(){h(!d),O()},className:"".concat(d?"":"active")},"Hide invisible / inaudible layers"),a.createElement("li",{onClick:function(){v(!m),O()},className:"".concat(m?"":"active")},"Hide hidden layers"))),a.createElement("label",{htmlFor:"bpm"},"BPM"),a.createElement("input",{name:"bpm",type:"number",size:"3",style:{width:"3rem"},value:r,onChange:function(e){return l(e.target.value)}}),a.createElement("select",{name:"beatsPerBar",id:"beatsPerBarSelect",value:o,onChange:function(e){return u(e.target.value)}},a.createElement("option",{value:"2"},"2"),a.createElement("option",{value:"4"},"4"),a.createElement("option",{value:"8"},"8"),a.createElement("option",{value:"16"},"16")),a.createElement(p,{onClick:c,style:{marginLeft:"1.5px"}}),a.createElement(g,{onClick:f,style:{marginLeft:"0"}}),a.createElement("div",{style:{display:"inline",height:"100%",borderLeft:"solid 3px var(--light-grey)",marginLeft:"1.5px",marginRight:"6px"}}),a.createElement(y,{onClick:function(){return k(!A)},className:"".concat(A?"active":""),style:{marginLeft:"0"}}),a.createElement(w,{onClick:function(){return x("move")},className:"".concat("move"===S?"active":""),style:{marginLeft:"0"}}),a.createElement(C,{onClick:function(){return x("scale")},className:"".concat("scale"===S?"active":""),style:{marginLeft:"0"}})),a.createElement("menu",{id:"second"},a.createElement("button",{onClick:function(){return P("soundsync")}},"SAVE JSON"),a.createElement("button",{onClick:_},"LOAD JSON")))}function P(e){return P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},P(e)}function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,L(r.key),r)}}function L(e){var t=function(e){if("object"!=P(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=P(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==P(t)?t:t+""}var z=function(){return e=function e(t,n,r,a,l,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.index=t.index,this.arrayIndex=n,this.name=t.name,this.color=t.color,this.shy=t.shy,this.visible=t.visible,this.audioActive=t.audioActive,this.inPoint=t.inPoint,this.outPoint=t.outPoint,this.duration=t.duration,this.compDuration=r.duration,this.totalBeats=a,this.gridStart=Math.floor(this.inPoint/this.compDuration*this.totalBeats)+1,this.gridStart<1&&(this.gridStart=1),this.closestGridStart=Math.round(this.inPoint/this.compDuration*this.totalBeats)+1,this.closestGridStart<1&&(this.closestGridStart=1),this.gridEnd=Math.ceil(this.outPoint/this.compDuration*this.totalBeats)+1,this.gridEnd>this.totalBeats&&(this.gridEnd=this.totalBeats),this.closestGridEnd=Math.round(this.outPoint/this.compDuration*this.totalBeats)+1,this.closestGridEnd>this.totalBeats&&(this.closestGridEnd=this.totalBeats),this.gridDuration=this.gridEnd-this.gridStart,this.scaling=this.duration/(this.gridDuration*(this.compDuration/this.totalBeats)),this.baseGridX=(this.gridStart-1)*l,this.trueX=this.inPoint/this.compDuration*o,this.translateX=this.trueX-this.baseGridX},(t=[{key:"rescaleLayer",value:function(e,t){this.gridDuration=this.gridEnd-this.gridStart,this.scaling=this.duration/(this.gridDuration*(this.compDuration/this.totalBeats)),this.baseGridX=(this.gridStart-1)*e,this.trueX=this.inPoint/this.compDuration*t,this.translateX=this.trueX-this.baseGridX}},{key:"moveLayer",value:function(e,t,n,r){var a=this.gridEnd-this.gridStart,l=this.closestGridEnd-this.closestGridStart;this.gridStart+=e,this.closestGridStart+=e,this.closestGridStart<1&&(this.closestGridStart=1),this.gridStart<1||t?(this.gridStart=1,this.gridStart=this.closestGridStart,this.gridEnd=this.gridStart+a,this.closestGridEnd=this.closestGridStart+l):(this.gridEnd+=e,this.gridEnd>this.totalBeats&&(this.gridEnd=this.totalBeats),this.closestGridEnd+=e,this.closestGridEnd>this.totalBeats&&(this.closestGridEnd=this.totalBeats)),this.inPoint=(this.gridStart-1)*this.compDuration/this.totalBeats,this.outPoint=(this.gridEnd-1)*this.compDuration/this.totalBeats,this.inPoint<0&&(this.inPoint=0),this.outPoint>this.compDuration&&(this.outPoint=this.compDuration),this.duration=this.outPoint-this.inPoint,this.rescaleLayer(n,r),console.log("moved new in:",this.inPoint,"new gridStart:",this.gridStart)}},{key:"scaleLayer",value:function(e,t,n,r,a){"in"===e&&(this.gridStart+=t,this.closestGridStart+=t,this.closestGridStart<1&&(this.closestGridStart=1),(this.gridStart<1||n)&&(this.gridStart=1,this.gridStart=this.closestGridStart)),"out"===e&&(this.gridEnd+=t,this.closestGridEnd+=t,this.closestGridEnd>this.totalBeats&&(this.closestGridEnd=1),(this.gridEnd>this.totalBeats||n)&&(this.gridEnd=1,this.gridEnd=this.closestGridEnd)),this.inPoint=(this.gridStart-1)*this.compDuration/this.totalBeats,this.outPoint=(this.gridEnd-1)*this.compDuration/this.totalBeats,this.inPoint<0&&(this.inPoint=0),this.outPoint>this.compDuration&&(this.outPoint=this.compDuration),this.duration=this.outPoint-this.inPoint,this.rescaleLayer(r,a),console.log("moved",e,"by",t,"beats")}}])&&_(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}();function N(e){return N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},N(e)}function O(){O=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},l="function"==typeof Symbol?Symbol:{},o=l.iterator||"@@iterator",i=l.asyncIterator||"@@asyncIterator",u=l.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var l=t&&t.prototype instanceof v?t:v,o=Object.create(l.prototype),i=new z(r||[]);return a(o,"_invoke",{value:x(e,n,i)}),o}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",g={};function v(){}function y(){}function b(){}var A={};c(A,o,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(T([])));k&&k!==n&&r.call(k,o)&&(A=k);var S=b.prototype=v.prototype=Object.create(A);function C(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,l,o,i){var u=f(e[a],e,l);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==N(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,o,i)}),(function(e){n("throw",e,o,i)})):t.resolve(s).then((function(e){c.value=e,o(c)}),(function(e){return n("throw",e,o,i)}))}i(u.arg)}var l;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return l=l?l.then(a,a):a()}})}function x(t,n,r){var a=d;return function(l,o){if(a===h)throw Error("Generator is already running");if(a===m){if("throw"===l)throw o;return{value:e,done:!0}}for(r.method=l,r.arg=o;;){var i=r.delegate;if(i){var u=P(i,r);if(u){if(u===g)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===d)throw a=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=h;var c=f(t,n,r);if("normal"===c.type){if(a=r.done?m:p,c.arg===g)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(a=m,r.method="throw",r.arg=c.arg)}}}function P(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,P(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var l=f(a,t.iterator,n.arg);if("throw"===l.type)return n.method="throw",n.arg=l.arg,n.delegate=null,g;var o=l.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function z(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function T(t){if(t||""===t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,l=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return l.next=l}}throw new TypeError(N(t)+" is not iterable")}return y.prototype=b,a(S,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},C(E.prototype),c(E.prototype,i,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,l){void 0===l&&(l=Promise);var o=new E(s(e,n,r,a),l);return t.isGeneratorFunction(n)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},C(S),c(S,u,"Generator"),c(S,o,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=T,z.prototype={constructor:z,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return i.type="throw",i.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var l=this.tryEntries.length-1;l>=0;--l){var o=this.tryEntries[l],i=o.completion;if("root"===o.tryLoc)return a("end");if(o.tryLoc<=this.prev){var u=r.call(o,"catchLoc"),c=r.call(o,"finallyLoc");if(u&&c){if(this.prev<o.catchLoc)return a(o.catchLoc,!0);if(this.prev<o.finallyLoc)return a(o.finallyLoc)}else if(u){if(this.prev<o.catchLoc)return a(o.catchLoc,!0)}else{if(!c)throw Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return a(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var l=a;break}}l&&("break"===e||"continue"===e)&&l.tryLoc<=t&&t<=l.finallyLoc&&(l=null);var o=l?l.completion:{};return o.type=e,o.arg=t,l?(this.method="next",this.next=l.finallyLoc,g):this.complete(o)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:T(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function T(e,t,n,r,a,l,o){try{var i=e[l](o),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,a)}function I(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var l=e.apply(t,n);function o(e){T(l,r,a,o,i,"next",e)}function i(e){T(l,r,a,o,i,"throw",e)}o(void 0)}))}}function D(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function M(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?D(Object(n),!0).forEach((function(t){R(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):D(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function R(e,t,n){return(t=function(e){var t=function(e){if("object"!=N(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=N(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==N(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function j(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,l,o,i=[],u=!0,c=!1;try{if(l=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=l.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){c=!0,a=e}finally{try{if(!u&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(c)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return F(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?F(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function F(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function B(e){var t=e.compData,n=e.bpm,r=e.beatsPerBar,l=e.zoomLevel,o=e.showInactive,i=e.showHidden,u=e.updateView,c=e.waitingForAERef,s=e.setLoading,f=e.setLoadingText,d=e.modeSnapRef,p=e.modeRef,h=(0,a.useMemo)((function(){return n/60*(r/4)}),[n,r]),m=n/60*1,g=(0,a.useMemo)((function(){return Math.floor(t.duration*h)}),[n,t.duration,r,h]),v=(0,a.useMemo)((function(){return Math.floor(t.duration*m)}),[n,t]),y=(0,a.useMemo)((function(){return Math.ceil(g/r)*r}),[g,r]),b=Math.ceil(v/4),A=(0,a.useRef)(null),w=j((0,a.useState)(0),2),k=w[0],S=w[1],C=j((0,a.useState)(0),2),E=C[0],x=C[1];(0,a.useEffect)((function(){var e=function(){A.current&&S(A.current.getBoundingClientRect().width)};return e(),window.addEventListener("resize",e),function(){return window.removeEventListener("resize",e)}}),[t,l]),(0,a.useEffect)((function(){k>0&&g>0&&x(k/g)}),[k,g]);var P=j((0,a.useState)([]),2),_=P[0],L=P[1];(0,a.useEffect)((function(){var e=t.layers.map((function(e,n){return new z(e,n,t,g,E,k)}));L(e)}),[t,g,E,k]);var N=j((0,a.useState)(null),2),T=N[0],D=N[1],R=(0,a.useRef)(null),F=(0,a.useRef)(0),B=(0,a.useRef)(0),U=(0,a.useRef)(!1),H=(0,a.useRef)(null),V=(0,a.useRef)(""),$=(0,a.useRef)(0);(0,a.useEffect)((function(){var e=function(e){if(U.current&&E>0&&(B.current=e.pageX,$.current=-Math.round((F.current-B.current)/E),R.current&&0!==$.current)){var n=new z(M({},H.current),H.current.arrayIndex,t,g,E,k);"move"===p.current?n.moveLayer($.current,d.current,E,k):"scale"===p.current&&n.scaleLayer(V.current,$.current,d.current,E,k),R.current=n,D(n)}};return window.addEventListener("mousemove",e),function(){return window.removeEventListener("mousemove",e)}}),[E]);var G=function(e,n){V.current=n,console.log("direction",V.current),F.current=B.current,U.current=!0,$.current=0,H.current=_.find((function(t){return t.index===e.index}));var r=new z(M({},H.current),H.current.arrayIndex,t,g,E,k);R.current=r,D(r)},q=function(){if(U.current&&0!==$.current){U.current=!1,R.current=null,D(null);var e=$.current;$.current=0;var t=V.current;V.current="",L((function(n){return n.map((function(n){if(n===H.current&&"move"===p.current){var r=n;return r.moveLayer(e,d.current,E,k),c.current||(c.current=!0,f("Moving Layer by ".concat(e," Beats")),s(!0),W(r.index,r.inPoint).then((function(){u(),c.current=!1,s(!1)})).catch((function(e){return console.error("Error moving AE layer:",e)}))),r}if(n===H.current&&"scale"===p.current){var a=n;return a.scaleLayer(t,e,d.current,E,k),c.current||(c.current=!0,f("Scaling Layer by ".concat(e," Beats")),s(!0),Q(a.index,a.inPoint,a.outPoint).then((function(){u(),c.current=!1,s(!1)})).catch((function(e){return console.error("Error moving AE layer:",e)}))),a}return n}))}))}},W=function(){var e=I(O().mark((function e(t,n){return O().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e,r){window.CSInterface?(new window.CSInterface).evalScript("moveLayer(".concat(t,", ").concat(n,")"),(function(t){"success"===t?e():r(t)})):r("CSInterface is not available. Make sure CSInterface.js is loaded.")})));case 1:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),Q=function(){var e=I(O().mark((function e(t,n,r){return O().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e,a){window.CSInterface?(new window.CSInterface).evalScript("scaleLayer(".concat(t,", ").concat(n,", ").concat(r,")"),(function(t){"success"===t?e():a(t)})):a("CSInterface is not available. Make sure CSInterface.js is loaded.")})));case 1:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}();return(0,a.useEffect)((function(){var e=function(){q()};return document.addEventListener("mouseup",e),function(){return document.removeEventListener("mouseup",e)}}),[]),a.createElement("div",{id:"timeline",onMouseMove:function(e){return B.current=e.pageX}},a.createElement("div",{className:"grid-layers",ref:A,style:{gridTemplate:"auto / repeat(".concat(y,", minmax(0, 1fr))"),width:"".concat(100*l,"%")}},_.filter((function(e){var t=o||e.visible||e.audioActive,n=i||!e.shy;return t&&n})).map((function(e,t){return a.createElement("div",{key:t,className:"timeline-layer",style:{gridColumnStart:e.closestGridStart,gridColumnEnd:e.closestGridEnd,gridRow:e.index,backgroundColor:"rgb(".concat(e.color[0],", ").concat(e.color[1],", ").concat(e.color[2],")"),transform:"scaleX(".concat(e.scaling,") translateX(").concat(e.translateX,"px)"),transformOrigin:"left"}},a.createElement("div",{className:"timeline-layer-button left",onMouseDown:function(){return G(e,"in")},onMouseUp:function(){return q()}}," "),a.createElement("div",{className:"timeline-layer-button right",onMouseDown:function(){return G(e,"out")},onMouseUp:function(){return q()}}," "),a.createElement("span",{style:{display:"inline-block",transform:"scaleX(".concat(1/e.scaling,")")}},e.name," Visible? ",e.visible.toString()," Shy? ",e.shy.toString(),"  audioActive? ",e.audioActive.toString()))})),T&&a.createElement("div",{className:"timeline-layer ghost",style:{gridColumnStart:T.closestGridStart,gridColumnEnd:T.closestGridEnd,gridRow:T.index,outlineColor:"rgb(".concat(T.color[0],", ").concat(T.color[1],", ").concat(T.color[2],")"),transform:"scaleX(".concat(T.scaling,") translateX(").concat(T.translateX,"px)"),transformOrigin:"left"}})),a.createElement("div",{className:"grid-timeline",style:{gridTemplate:"100% / repeat(".concat(b,", minmax(0, 1fr))"),width:"".concat(100*l,"%")}},Array.from({length:b}).map((function(e,t){return a.createElement("div",{key:t,className:"grid-bar",style:{gridTemplate:"100% / repeat(".concat(r,", minmax(0, 1fr))")}},Array.from({length:r}).map((function(e,t){return a.createElement("div",{key:t,className:"grid-beat"})})))}))))}function U(e){var t=e.text,n=void 0===t?"":t;return a.createElement("div",{id:"loader"},a.createElement("h1",null,"Loading ..."),a.createElement("p",null,n))}function H(e){return H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},H(e)}function V(){V=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},l="function"==typeof Symbol?Symbol:{},o=l.iterator||"@@iterator",i=l.asyncIterator||"@@asyncIterator",u=l.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var l=t&&t.prototype instanceof v?t:v,o=Object.create(l.prototype),i=new z(r||[]);return a(o,"_invoke",{value:x(e,n,i)}),o}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",g={};function v(){}function y(){}function b(){}var A={};c(A,o,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(N([])));k&&k!==n&&r.call(k,o)&&(A=k);var S=b.prototype=v.prototype=Object.create(A);function C(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,l,o,i){var u=f(e[a],e,l);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==H(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,o,i)}),(function(e){n("throw",e,o,i)})):t.resolve(s).then((function(e){c.value=e,o(c)}),(function(e){return n("throw",e,o,i)}))}i(u.arg)}var l;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return l=l?l.then(a,a):a()}})}function x(t,n,r){var a=d;return function(l,o){if(a===h)throw Error("Generator is already running");if(a===m){if("throw"===l)throw o;return{value:e,done:!0}}for(r.method=l,r.arg=o;;){var i=r.delegate;if(i){var u=P(i,r);if(u){if(u===g)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===d)throw a=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=h;var c=f(t,n,r);if("normal"===c.type){if(a=r.done?m:p,c.arg===g)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(a=m,r.method="throw",r.arg=c.arg)}}}function P(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,P(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var l=f(a,t.iterator,n.arg);if("throw"===l.type)return n.method="throw",n.arg=l.arg,n.delegate=null,g;var o=l.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function z(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function N(t){if(t||""===t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,l=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return l.next=l}}throw new TypeError(H(t)+" is not iterable")}return y.prototype=b,a(S,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},C(E.prototype),c(E.prototype,i,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,l){void 0===l&&(l=Promise);var o=new E(s(e,n,r,a),l);return t.isGeneratorFunction(n)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},C(S),c(S,u,"Generator"),c(S,o,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=N,z.prototype={constructor:z,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return i.type="throw",i.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var l=this.tryEntries.length-1;l>=0;--l){var o=this.tryEntries[l],i=o.completion;if("root"===o.tryLoc)return a("end");if(o.tryLoc<=this.prev){var u=r.call(o,"catchLoc"),c=r.call(o,"finallyLoc");if(u&&c){if(this.prev<o.catchLoc)return a(o.catchLoc,!0);if(this.prev<o.finallyLoc)return a(o.finallyLoc)}else if(u){if(this.prev<o.catchLoc)return a(o.catchLoc,!0)}else{if(!c)throw Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return a(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var l=a;break}}l&&("break"===e||"continue"===e)&&l.tryLoc<=t&&t<=l.finallyLoc&&(l=null);var o=l?l.completion:{};return o.type=e,o.arg=t,l?(this.method="next",this.next=l.finallyLoc,g):this.complete(o)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:N(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function $(e,t,n,r,a,l,o){try{var i=e[l](o),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,a)}function G(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,l,o,i=[],u=!0,c=!1;try{if(l=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=l.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){c=!0,a=e}finally{try{if(!u&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(c)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return q(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?q(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function q(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const W=function(){var e=G((0,a.useState)(!1),2),t=e[0],n=e[1],r=G((0,a.useState)(""),2),l=r[0],o=r[1],i=G((0,a.useState)(120),2),u=i[0],c=i[1],s=G((0,a.useState)(4),2),f=s[0],d=s[1],p=G((0,a.useState)(1),2),h=p[0],m=p[1],g=G((0,a.useState)(!1),2),v=g[0],y=g[1],b=G((0,a.useState)(!1),2),A=b[0],w=b[1],k=G((0,a.useState)(!1),2),S=k[0],C=(k[1],(0,a.useRef)(S)),E=G((0,a.useState)(!0),2),P=E[0],_=E[1],L=(0,a.useRef)(P);(0,a.useEffect)((function(){L.current=P}),[P]);var z=G((0,a.useState)("move"),2),N=z[0],O=z[1],T=(0,a.useRef)(N);(0,a.useEffect)((function(){T.current=N}),[N]);var I=G((0,a.useState)({name:"Placeholder Comp",duration:0,frameRate:0,width:0,height:0,layers:[]}),2),D=I[0],M=I[1],R=function(){var e,t=(e=V().mark((function e(){return V().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e,t){window.CSInterface?(new window.CSInterface).evalScript("getCompData()",(function(n){try{var r=JSON.parse(n);r.error?t(r.error):e(r)}catch(e){t("Invalid JSON response from ExtendScript.")}})):t("CSInterface is not available. Make sure CSInterface.js is loaded.")})));case 1:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,a){var l=e.apply(t,n);function o(e){$(l,r,a,o,i,"next",e)}function i(e){$(l,r,a,o,i,"throw",e)}o(void 0)}))});return function(){return t.apply(this,arguments)}}(),j=function(){C.current||(C.current=!0,o("Fetching Composition Data"),n(!0),R().then((function(e){console.log("Updating View with Comp Data",e),M(e),C.current=!1,n(!1)})).catch((function(e){return console.error("Error fetching comp data:",e)})))};return window.addEventListener("focus",j),a.createElement("main",null,t&&a.createElement(U,{text:l}),a.createElement(x,{bpm:u,setBpm:c,beatsPerBar:f,setBeatsPerBar:d,zoomLevel:h,increaseZoom:function(){return m(h+.25)},decreaseZoom:function(){return h-.25>=1?m(h-.25):null},showInactive:v,setShowInactive:y,showHidden:A,setShowHidden:w,updateView:j,modeSnap:P,setModeSnap:_,mode:N,setMode:O,saveCompDataJSON:function(e){var t=new Blob([JSON.stringify(D,null,2)],{type:"application/json"}),n=URL.createObjectURL(t),r=document.createElement("a");r.href=n,r.download="".concat(e,".json"),r.click(),URL.revokeObjectURL(n),console.log(JSON.stringify(D))},loadCompDataJSON:function(){var e=document.createElement("input");e.type="file",e.style.display="none",e.onchange=function(t){var n=t.target.files[0];if(n){var r=new FileReader;r.onload=function(t){var n=t.target.result;e.func(n),document.body.removeChild(e)},r.readAsText(n)}},e.func=function(e){return M(JSON.parse(e))},document.body.appendChild(e),e.click()}}),a.createElement(B,{compData:D,bpm:u,beatsPerBar:f,zoomLevel:h,showInactive:v,showHidden:A,updateView:j,waitingForAERef:C,setLoading:n,setLoadingText:o,modeSnapRef:L,modeRef:T}),a.createElement("div",{id:"information"},a.createElement("hr",null),a.createElement("p",null,a.createElement("small",null,"comp duration: ",D.duration," seconds | total beats: ",Math.floor(D.duration*(u/60*(f/4)))," | total bars: ",Math.ceil(Math.floor(D.duration*(u/60*1))/4)," | beats per second: ",u/60*(f/4)))))};(0,l.createRoot)(document.getElementById("root")).render(a.createElement(W,null))},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,l){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(o[u]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);r&&o[s[0]]||(void 0!==l&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=l),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),a&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=a):s[4]="".concat(a)),t.push(s))}},t}},338:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),l="/*# ".concat(a," */");return[t].concat([l]).join("\n")}return[t].join("\n")}},376:(e,t,n)=>{var r=n(72),a=n.n(r),l=n(825),o=n.n(l),i=n(659),u=n.n(i),c=n(56),s=n.n(c),f=n(159),d=n.n(f),p=n(113),h=n.n(p),m=n(11),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=d();var v=a()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,b=y?m:m.default.locals;e.hot.accept(11,(t=>{m=n(11),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(b,y?m:m.default.locals,y)?(b=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},477:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<l(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,o=a>>>1;r<o;){var i=2*(r+1)-1,u=e[i],c=i+1,s=e[c];if(0>l(u,n))c<a&&0>l(s,u)?(e[r]=s,e[c]=n,r=c):(e[r]=u,e[i]=n,r=i);else{if(!(c<a&&0>l(s,n)))break e;e[r]=s,e[c]=n,r=c}}}return t}function l(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var c=[],s=[],f=1,d=null,p=3,h=!1,m=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function A(e){for(var t=r(s);null!==t;){if(null===t.callback)a(s);else{if(!(t.startTime<=e))break;a(s),t.sortIndex=t.expirationTime,n(c,t)}t=r(s)}}function w(e){if(g=!1,A(e),!m)if(null!==r(c))m=!0,N();else{var t=r(s);null!==t&&O(w,t.startTime-e)}}var k,S=!1,C=-1,E=5,x=-1;function P(){return!(t.unstable_now()-x<E)}function _(){if(S){var e=t.unstable_now();x=e;var n=!0;try{e:{m=!1,g&&(g=!1,y(C),C=-1),h=!0;var l=p;try{t:{for(A(e),d=r(c);null!==d&&!(d.expirationTime>e&&P());){var o=d.callback;if("function"==typeof o){d.callback=null,p=d.priorityLevel;var i=o(d.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof i){d.callback=i,A(e),n=!0;break t}d===r(c)&&a(c),A(e)}else a(c);d=r(c)}if(null!==d)n=!0;else{var u=r(s);null!==u&&O(w,u.startTime-e),n=!1}}break e}finally{d=null,p=l,h=!1}n=void 0}}finally{n?k():S=!1}}}if("function"==typeof b)k=function(){b(_)};else if("undefined"!=typeof MessageChannel){var L=new MessageChannel,z=L.port2;L.port1.onmessage=_,k=function(){z.postMessage(null)}}else k=function(){v(_,0)};function N(){S||(S=!0,k())}function O(e,n){C=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,N())},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):E=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,l){var o=t.unstable_now();switch(l="object"==typeof l&&null!==l&&"number"==typeof(l=l.delay)&&0<l?o+l:o,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:l,expirationTime:i=l+i,sortIndex:-1},l>o?(e.sortIndex=l,n(s,e),null===r(c)&&e===r(s)&&(g?(y(C),C=-1):g=!0,O(w,l-o))):(e.sortIndex=i,n(c,e),m||h||(m=!0,N())),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},540:(e,t,n)=>{e.exports=n(869)},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var l=n.sourceMap;l&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(l))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},869:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),l=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),i=Symbol.for("react.consumer"),u=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var A=b.prototype=new y;A.constructor=b,m(A,v.prototype),A.isPureReactComponent=!0;var w=Array.isArray,k={H:null,A:null,T:null,S:null},S=Object.prototype.hasOwnProperty;function C(e,t,r,a,l,o){return r=o.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:o}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var x=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function _(){}function L(e,t,a,l,o){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u,c,s=!1;if(null===e)s=!0;else switch(i){case"bigint":case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case r:s=!0;break;case d:return L((s=e._init)(e._payload),t,a,l,o)}}if(s)return o=o(e),s=""===l?"."+P(e,0):l,w(o)?(a="",null!=s&&(a=s.replace(x,"$&/")+"/"),L(o,t,a,"",(function(e){return e}))):null!=o&&(E(o)&&(u=o,c=a+(null==o.key||e&&e.key===o.key?"":(""+o.key).replace(x,"$&/")+"/")+s,o=C(u.type,c,void 0,0,0,u.props)),t.push(o)),1;s=0;var f,h=""===l?".":l+":";if(w(e))for(var m=0;m<e.length;m++)s+=L(l=e[m],t,a,i=h+P(l,m),o);else if("function"==typeof(m=null===(f=e)||"object"!=typeof f?null:"function"==typeof(f=p&&f[p]||f["@@iterator"])?f:null))for(e=m.call(e),m=0;!(l=e.next()).done;)s+=L(l=l.value,t,a,i=h+P(l,m++),o);else if("object"===i){if("function"==typeof e.then)return L(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(_,_):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,a,l,o);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return s}function z(e,t,n){if(null==e)return e;var r=[],a=0;return L(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function N(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var O="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function T(){}t.Children={map:z,forEach:function(e,t,n){z(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return z(e,(function(){t++})),t},toArray:function(e){return z(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=o,t.PureComponent=b,t.StrictMode=l,t.Suspense=s,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=k,t.act=function(){throw Error("act(...) is not supported in production builds of React.")},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=m({},e.props),a=e.key;if(null!=t)for(l in t.ref,void 0!==t.key&&(a=""+t.key),t)!S.call(t,l)||"key"===l||"__self"===l||"__source"===l||"ref"===l&&void 0===t.ref||(r[l]=t[l]);var l=arguments.length-2;if(1===l)r.children=n;else if(1<l){for(var o=Array(l),i=0;i<l;i++)o[i]=arguments[i+2];r.children=o}return C(e.type,a,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:i,_context:e},e},t.createElement=function(e,t,n){var r,a={},l=null;if(null!=t)for(r in void 0!==t.key&&(l=""+t.key),t)S.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(a[r]=t[r]);var o=arguments.length-2;if(1===o)a.children=n;else if(1<o){for(var i=Array(o),u=0;u<o;u++)i[u]=arguments[u+2];a.children=i}if(e&&e.defaultProps)for(r in o=e.defaultProps)void 0===a[r]&&(a[r]=o[r]);return C(e,l,void 0,0,0,a)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:N}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=k.T,n={};k.T=n;try{var r=e(),a=k.S;null!==a&&a(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(T,O)}catch(e){O(e)}finally{k.T=t}},t.unstable_useCacheRefresh=function(){return k.H.useCacheRefresh()},t.use=function(e){return k.H.use(e)},t.useActionState=function(e,t,n){return k.H.useActionState(e,t,n)},t.useCallback=function(e,t){return k.H.useCallback(e,t)},t.useContext=function(e){return k.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return k.H.useDeferredValue(e,t)},t.useEffect=function(e,t){return k.H.useEffect(e,t)},t.useId=function(){return k.H.useId()},t.useImperativeHandle=function(e,t,n){return k.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return k.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return k.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return k.H.useMemo(e,t)},t.useOptimistic=function(e,t){return k.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return k.H.useReducer(e,t,n)},t.useRef=function(e){return k.H.useRef(e)},t.useState=function(e){return k.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return k.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return k.H.useTransition()},t.version="19.0.0"},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},982:(e,t,n)=>{e.exports=n(477)}},r={};function a(e){var t=r[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var l=r[e]={id:e,exports:{}};try{var o={id:e,module:l,factory:n[e],require:a};a.i.forEach((function(e){e(o)})),l=o.module,o.factory.call(l.exports,l,l.exports,o.require)}catch(e){throw l.error=e,e}return l.exports}a.m=n,a.c=r,a.i=[],a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.hu=e=>e+"."+a.h()+".hot-update.js",a.hmrF=()=>"client-bundle."+a.h()+".hot-update.json",a.h=()=>"bd796041c9e693c3e7b7",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="soundsync:",a.l=(n,r,l,o)=>{if(e[n])e[n].push(r);else{var i,u;if(void 0!==l)for(var c=document.getElementsByTagName("script"),s=0;s<c.length;s++){var f=c[s];if(f.getAttribute("src")==n||f.getAttribute("data-webpack")==t+l){i=f;break}}i||(u=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,a.nc&&i.setAttribute("nonce",a.nc),i.setAttribute("data-webpack",t+l),i.src=n),e[n]=[r];var d=(t,r)=>{i.onerror=i.onload=null,clearTimeout(p);var a=e[n];if(delete e[n],i.parentNode&&i.parentNode.removeChild(i),a&&a.forEach((e=>e(r))),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=d.bind(null,i.onerror),i.onload=d.bind(null,i.onload),u&&document.head.appendChild(i)}},a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e,t,n,r={},l=a.c,o=[],i=[],u="idle",c=0,s=[];function f(e){u=e;for(var t=[],n=0;n<i.length;n++)t[n]=i[n].call(null,e);return Promise.all(t).then((function(){}))}function d(){0==--c&&f("ready").then((function(){if(0===c){var e=s;s=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return f("check").then(a.hmrM).then((function(n){return n?f("prepare").then((function(){var r=[];return t=[],Promise.all(Object.keys(a.hmrC).reduce((function(e,l){return a.hmrC[l](n.c,n.r,n.m,e,t,r),e}),[])).then((function(){return t=function(){return e?m(e):f("ready").then((function(){return r}))},0===c?t():new Promise((function(e){s.push((function(){e(t())}))}));var t}))})):f(g()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==u?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+u+")")})):m(e)}function m(e){e=e||{},g();var r=t.map((function(t){return t(e)}));t=void 0;var a=r.map((function(e){return e.error})).filter(Boolean);if(a.length>0)return f("abort").then((function(){throw a[0]}));var l=f("dispose");r.forEach((function(e){e.dispose&&e.dispose()}));var o,i=f("apply"),u=function(e){o||(o=e)},c=[];return r.forEach((function(e){if(e.apply){var t=e.apply(u);if(t)for(var n=0;n<t.length;n++)c.push(t[n])}})),Promise.all([l,i]).then((function(){return o?f("fail").then((function(){throw o})):n?m(e).then((function(e){return c.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):f("idle").then((function(){return c}))}))}function g(){if(n)return t||(t=[]),Object.keys(a.hmrI).forEach((function(e){n.forEach((function(n){a.hmrI[e](n,t)}))})),n=void 0,!0}a.hmrD=r,a.i.push((function(s){var m,g,v,y,b=s.module,A=function(t,n){var r=l[n];if(!r)return t;var a=function(a){if(r.hot.active){if(l[a]){var i=l[a].parents;-1===i.indexOf(n)&&i.push(n)}else o=[n],e=a;-1===r.children.indexOf(a)&&r.children.push(a)}else console.warn("[HMR] unexpected require("+a+") from disposed module "+n),o=[];return t(a)},i=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(n){t[e]=n}}};for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&"e"!==s&&Object.defineProperty(a,s,i(s));return a.e=function(e,n){return function(e){switch(u){case"ready":f("prepare");case"prepare":return c++,e.then(d,d),e;default:return e}}(t.e(e,n))},a}(s.require,s.id);b.hot=(m=s.id,g=b,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:v=e!==m,_requireSelf:function(){o=g.parents.slice(),e=v?void 0:m,a(m)},active:!0,accept:function(e,t,n){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._acceptedDependencies[e[r]]=t||function(){},y._acceptedErrorHandlers[e[r]]=n;else y._acceptedDependencies[e]=t||function(){},y._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":t=[],Object.keys(a.hmrI).forEach((function(e){a.hmrI[e](m,t)})),f("ready");break;case"ready":Object.keys(a.hmrI).forEach((function(e){a.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(m)}},check:p,apply:h,status:function(e){if(!e)return u;i.push(e)},addStatusHandler:function(e){i.push(e)},removeStatusHandler:function(e){var t=i.indexOf(e);t>=0&&i.splice(t,1)},data:r[m]},e=void 0,y),b.parents=o,b.children=[],o=[],s.require=A})),a.hmrC={},a.hmrI={}})(),(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),(()=>{var e,t,n,r,l,o=a.hmrS_jsonp=a.hmrS_jsonp||{275:0},i={};function u(t,n){return e=n,new Promise(((e,n)=>{i[t]=e;var r=a.p+a.hu(t),l=new Error;a.l(r,(e=>{if(i[t]){i[t]=void 0;var r=e&&("load"===e.type?"missing":e.type),a=e&&e.target&&e.target.src;l.message="Loading hot update chunk "+t+" failed.\n("+r+": "+a+")",l.name="ChunkLoadError",l.type=r,l.request=a,n(l)}}))}))}function c(e){function i(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var l=r.pop(),o=l.id,i=l.chain,c=a.c[o];if(c&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:o};if(c.hot._main)return{type:"unaccepted",chain:i,moduleId:o};for(var s=0;s<c.parents.length;s++){var f=c.parents[s],d=a.c[f];if(d){if(d.hot._declinedDependencies[o])return{type:"declined",chain:i.concat([f]),moduleId:o,parentId:f};-1===t.indexOf(f)&&(d.hot._acceptedDependencies[o]?(n[f]||(n[f]=[]),u(n[f],[o])):(delete n[f],t.push(f),r.push({chain:i.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}a.f&&delete a.f.jsonpHmr,t=void 0;var c={},s=[],f={},d=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in n)if(a.o(n,p)){var h=n[p],m=h?i(p):{type:"disposed",moduleId:p},g=!1,v=!1,y=!1,b="";switch(m.chain&&(b="\nUpdate propagation: "+m.chain.join(" -> ")),m.type){case"self-declined":e.onDeclined&&e.onDeclined(m),e.ignoreDeclined||(g=new Error("Aborted because of self decline: "+m.moduleId+b));break;case"declined":e.onDeclined&&e.onDeclined(m),e.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+m.moduleId+" in "+m.parentId+b));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(m),e.ignoreUnaccepted||(g=new Error("Aborted because "+p+" is not accepted"+b));break;case"accepted":e.onAccepted&&e.onAccepted(m),v=!0;break;case"disposed":e.onDisposed&&e.onDisposed(m),y=!0;break;default:throw new Error("Unexception type "+m.type)}if(g)return{error:g};if(v)for(p in f[p]=h,u(s,m.outdatedModules),m.outdatedDependencies)a.o(m.outdatedDependencies,p)&&(c[p]||(c[p]=[]),u(c[p],m.outdatedDependencies[p]));y&&(u(s,[m.moduleId]),f[p]=d)}n=void 0;for(var A,w=[],k=0;k<s.length;k++){var S=s[k],C=a.c[S];C&&(C.hot._selfAccepted||C.hot._main)&&f[S]!==d&&!C.hot._selfInvalidated&&w.push({module:S,require:C.hot._requireSelf,errorHandler:C.hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete o[e]})),r=void 0;for(var t,n=s.slice();n.length>0;){var l=n.pop(),i=a.c[l];if(i){var u={},f=i.hot._disposeHandlers;for(k=0;k<f.length;k++)f[k].call(null,u);for(a.hmrD[l]=u,i.hot.active=!1,delete a.c[l],delete c[l],k=0;k<i.children.length;k++){var d=a.c[i.children[k]];d&&(e=d.parents.indexOf(l))>=0&&d.parents.splice(e,1)}}}for(var p in c)if(a.o(c,p)&&(i=a.c[p]))for(A=c[p],k=0;k<A.length;k++)t=A[k],(e=i.children.indexOf(t))>=0&&i.children.splice(e,1)},apply:function(t){for(var n in f)a.o(f,n)&&(a.m[n]=f[n]);for(var r=0;r<l.length;r++)l[r](a);for(var o in c)if(a.o(c,o)){var i=a.c[o];if(i){A=c[o];for(var u=[],d=[],p=[],h=0;h<A.length;h++){var m=A[h],g=i.hot._acceptedDependencies[m],v=i.hot._acceptedErrorHandlers[m];if(g){if(-1!==u.indexOf(g))continue;u.push(g),d.push(v),p.push(m)}}for(var y=0;y<u.length;y++)try{u[y].call(null,A)}catch(n){if("function"==typeof d[y])try{d[y](n,{moduleId:o,dependencyId:p[y]})}catch(r){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:o,dependencyId:p[y],error:r,originalError:n}),e.ignoreErrored||(t(r),t(n))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:o,dependencyId:p[y],error:n}),e.ignoreErrored||t(n)}}}for(var b=0;b<w.length;b++){var k=w[b],S=k.module;try{k.require(S)}catch(n){if("function"==typeof k.errorHandler)try{k.errorHandler(n,{moduleId:S,module:a.c[S]})}catch(r){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:S,error:r,originalError:n}),e.ignoreErrored||(t(r),t(n))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:S,error:n}),e.ignoreErrored||t(n)}}return s}}}self.webpackHotUpdatesoundsync=(t,r,o)=>{for(var u in r)a.o(r,u)&&(n[u]=r[u],e&&e.push(u));o&&l.push(o),i[t]&&(i[t](),i[t]=void 0)},a.hmrI.jsonp=function(e,t){n||(n={},l=[],r=[],t.push(c)),a.o(n,e)||(n[e]=a.m[e])},a.hmrC.jsonp=function(e,i,s,f,d,p){d.push(c),t={},r=i,n=s.reduce((function(e,t){return e[t]=!1,e}),{}),l=[],e.forEach((function(e){a.o(o,e)&&void 0!==o[e]?(f.push(u(e,p)),t[e]=!0):t[e]=!1})),a.f&&(a.f.jsonpHmr=function(e,n){t&&a.o(t,e)&&!t[e]&&(n.push(u(e)),t[e]=!0)})},a.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(a.p+a.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),a.nc=void 0,a(313)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,