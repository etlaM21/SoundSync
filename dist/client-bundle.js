/*! For license information please see client-bundle.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={11:(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var r=n(354),a=n.n(r),l=n(314),o=n.n(l)()(a());o.push([e.id,':root{--semi-grey: #1d1d1d;--dark-grey: #0e0e0e;--light-grey: #303030;--dark: #000000;--light: #b0b0b0;--lightest: #d0d0d0;--highlight: #4096f3}html,body,#root,#root>div{height:100%}body{background-color:rgba(0,0,0,0);font-family:"Source Sans Pro",Arial,Helvetica,sans-serif;color:var(--light);font-size:1rem}button,input,label,select{margin-right:3px}button,input,select,svg{cursor:pointer}button,input,select,option,label{border-radius:3px;border:solid 1.5px var(--light-grey);background-color:var(--dark-grey);padding:1.5px 3px;text-transform:uppercase;color:var(--light)}svg{height:calc(1rem - 1px);width:auto;margin-right:4.5px;fill:var(--light);transform:translateY(2px)}svg:hover,svg:focus{fill:var(--lightest)}svg.active{fill:var(--highlight)}button:hover,button:focus,input:hover,input:focus,select:hover,select:focus,option:hover,option:focus{background-color:var(--dark);color:var(--lightest)}button:focus,input:focus,select:focus,option:focus{outline:solid 1.5px var(--highlight)}hr{border:1px solid var(--dark)}label{font-size:calc(1rem - 2.5px);padding-bottom:.5px;padding-top:.5px;padding-right:6px;margin-right:-3px}main{display:flex;flex-direction:column;flex-wrap:wrap;width:100%;height:100%}#loader{position:fixed;z-index:10000;text-align:center;top:0;left:0;width:100vw;height:100vh;background-color:var(--dark);opacity:.9}#loader h1,#loader p{animation-name:loadingOpacity;animation-duration:.75s;animation-iteration-count:infinite;animation-direction:alternate}#loader p{animation-delay:.5s}@keyframes loadingOpacity{from{opacity:.5}to{opacity:1}}#toolbar{width:100%;flex:0;margin-top:-3px;margin-bottom:6px;display:flex}#toolbar menu{margin:0;padding:0;display:block;flex-shrink:1;flex-basis:auto;align-self:auto}#toolbar menu#main{flex-grow:1}#information{width:100%;flex:0}#information p:has(small){margin-top:0}#timeline{width:100%;height:100%;flex:1;display:block;position:relative;min-width:100%;min-height:50px;border-radius:3px;border:solid 3px var(--light-grey);background-color:rgba(0,0,0,0);overflow-x:auto}#timeline .grid-timeline,#timeline .grid-bar,#timeline .grid-layers{column-gap:3px;min-width:100%}#timeline .grid-bar,#timeline .grid-beat{height:100%}#timeline .grid-timeline{position:sticky;top:0;left:0;z-index:-10;height:100%;display:grid;grid-template:100%/repeat(3, 1fr);background-color:var(--light-grey)}#timeline .grid-timeline .grid-bar{display:grid;grid-template:repeat(1, 1fr)/repeat(4, 1fr);background-color:var(--semi-grey)}#timeline .grid-timeline .grid-bar .grid-beat{background-color:var(--dark-grey)}#timeline .grid-layers{display:grid;grid-template:repeat(1, 1fr)/repeat(12, 1fr);background-color:rgba(0,0,0,0);height:0;overflow-x:clip}#timeline .grid-layers .timeline-layer{position:relative;background-color:#9932cc;border-radius:3px;padding:3px;margin-top:6px;margin-bottom:6px;grid-column-start:3;grid-column-end:6;font-size:.9rem;white-space:nowrap;cursor:ew-resize;-webkit-touch-callout:none !important;-webkit-user-select:none !important;-webkit-user-drag:none !important;-khtml-user-select:none !important;-moz-user-select:none !important;-ms-user-select:none !important;user-select:none !important}#timeline .grid-layers .timeline-layer .timeline-layer-button{position:absolute;top:0;width:50%;height:100%}#timeline .grid-layers .timeline-layer .timeline-layer-button.left{left:0}#timeline .grid-layers .timeline-layer .timeline-layer-button.right{right:0}#timeline .grid-layers .timeline-layer span{color:#fff;mix-blend-mode:difference;pointer-events:none}#timeline .grid-layers .timeline-layer.ghost{background-color:rgba(0,0,0,0);outline-style:solid;outline-width:3px;outline-offset:2px}',"",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAAA,MACI,oBAAA,CACA,oBAAA,CACA,qBAAA,CACA,eAAA,CACA,gBAAA,CACA,mBAAA,CACA,oBAAA,CAGJ,0BACI,WAAA,CAGJ,KACI,8BAAA,CACA,wDAAA,CACA,kBAAA,CACA,cAAA,CAGJ,0BACI,gBAAA,CAGJ,wBACI,cAAA,CAGJ,iCACI,iBAAA,CACA,oCAAA,CACA,iCAAA,CACA,iBAAA,CACA,wBAAA,CACA,kBAAA,CAGJ,IACI,uBAAA,CACA,UAAA,CACA,kBAAA,CACA,iBAAA,CACA,yBAAA,CACA,oBACI,oBAAA,CAEJ,WACI,qBAAA,CAKJ,sGACI,4BAAA,CACA,qBAAA,CAEJ,mDACI,oCAAA,CAIR,GACI,4BAAA,CAGJ,MACI,4BAAA,CACA,mBAAA,CACA,gBAAA,CACA,iBAAA,CACA,iBAAA,CAGJ,KACI,YAAA,CACA,qBAAA,CACA,cAAA,CACA,UAAA,CACA,WAAA,CAGJ,QACI,cAAA,CACA,aAAA,CACA,iBAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,YAAA,CACA,4BAAA,CACA,UAAA,CACA,qBACI,6BAAA,CACA,uBAAA,CACA,kCAAA,CACA,6BAAA,CAEJ,UACI,mBAAA,CAIR,0BACI,KAAA,UAAA,CACA,GAAA,SAAA,CAAA,CAGJ,SACI,UAAA,CACA,MAAA,CACA,eAAA,CACA,iBAAA,CACA,YAAA,CACA,cACI,QAAA,CACA,SAAA,CACA,aAAA,CACA,aAAA,CACA,eAAA,CACA,eAAA,CACA,mBACI,WAAA,CAKZ,aACI,UAAA,CACA,MAAA,CAEI,0BACI,YAAA,CAKZ,UACI,UAAA,CACA,WAAA,CACA,MAAA,CACA,aAAA,CACA,iBAAA,CACA,cAAA,CACA,eAAA,CACA,iBAAA,CACA,kCAAA,CACA,8BAAA,CACA,eAAA,CACA,oEACI,cAAA,CACA,cAAA,CAEJ,yCACI,WAAA,CAEJ,yBACI,eAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,WAAA,CACA,YAAA,CACA,iCAAA,CACA,kCAAA,CACA,mCACI,YAAA,CACA,2CAAA,CACA,iCAAA,CACA,8CACI,iCAAA,CAIZ,uBACI,YAAA,CACA,4CAAA,CACA,8BAAA,CACA,QAAA,CACA,eAAA,CACA,uCACI,iBAAA,CACA,wBAAA,CACA,iBAAA,CACA,WAAA,CACA,cAAA,CACA,iBAAA,CACA,mBAAA,CACA,iBAAA,CACA,eAAA,CACA,kBAAA,CACA,gBAAA,CACA,qCAAA,CACA,mCAAA,CACA,iCAAA,CACA,kCAAA,CACA,gCAAA,CACA,+BAAA,CACA,2BAAA,CACA,8DACI,iBAAA,CACA,KAAA,CACA,SAAA,CACA,WAAA,CACA,mEACI,MAAA,CAEJ,oEACI,OAAA,CAGR,4CACI,UAAA,CACA,yBAAA,CACA,mBAAA,CAEJ,6CACI,8BAAA,CACA,mBAAA,CACA,iBAAA,CACA,kBAAA",sourcesContent:[":root {\r\n    --semi-grey: #1d1d1d;\r\n    --dark-grey: #0e0e0e;\r\n    --light-grey: #303030;\r\n    --dark: #000000;\r\n    --light: #b0b0b0;\r\n    --lightest: #d0d0d0;\r\n    --highlight: #4096f3;\r\n}\r\n\r\nhtml, body, #root, #root>div {\r\n    height: 100%;\r\n}\r\n\r\nbody {\r\n    background-color: transparent;\r\n    font-family: 'Source Sans Pro', Arial, Helvetica, sans-serif;\r\n    color: var(--light);\r\n    font-size: 1rem;\r\n}\r\n\r\nbutton, input, label, select {\r\n    margin-right: 3px;\r\n}\r\n\r\nbutton, input, select, svg {\r\n    cursor: pointer;\r\n}\r\n\r\nbutton, input, select, option, label {\r\n    border-radius: 3px;\r\n    border: solid 1.5px var(--light-grey);\r\n    background-color: var(--dark-grey);\r\n    padding: 1.5px 3px;\r\n    text-transform: uppercase;\r\n    color: var(--light);\r\n}\r\n\r\nsvg {\r\n    height: calc(1rem - 1px);\r\n    width: auto;\r\n    margin-right: 4.5px;\r\n    fill: var(--light);\r\n    transform: translateY(2px);\r\n    &:hover, &:focus {\r\n        fill: var(--lightest);\r\n    }\r\n    &.active {\r\n        fill: var(--highlight);\r\n    }\r\n}\r\n\r\nbutton, input, select, option {\r\n    &:hover, &:focus {\r\n        background-color: var(--dark);\r\n        color: var(--lightest);\r\n    }\r\n    &:focus {\r\n        outline: solid 1.5px var(--highlight);\r\n    }\r\n}\r\n\r\nhr {\r\n    border: 1px solid var(--dark);\r\n}\r\n\r\nlabel {\r\n    font-size: calc(1rem - 2.5px);\r\n    padding-bottom: 0.5px;\r\n    padding-top: 0.5px;\r\n    padding-right: 6px;\r\n    margin-right: -3px;\r\n}\r\n\r\nmain {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n#loader {\r\n    position: fixed;\r\n    z-index: 10000;\r\n    text-align: center;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-color: var(--dark);\r\n    opacity: 0.9;\r\n    h1, p {\r\n        animation-name: loadingOpacity;\r\n        animation-duration: 0.75s;\r\n        animation-iteration-count: infinite;\r\n        animation-direction: alternate;\r\n    }\r\n    p {\r\n        animation-delay: 0.5s;\r\n    }\r\n}\r\n\r\n@keyframes loadingOpacity {\r\n    from {opacity: 0.5;}\r\n    to {opacity: 1;}\r\n  }\r\n\r\n#toolbar {\r\n    width: 100%;\r\n    flex: 0;\r\n    margin-top: -3px;\r\n    margin-bottom: 6px;\r\n    display: flex;\r\n    menu {\r\n        margin: 0;\r\n        padding: 0;\r\n        display: block;\r\n        flex-shrink: 1;\r\n        flex-basis: auto;\r\n        align-self: auto;\r\n        &#main {   \r\n            flex-grow: 1;\r\n        }\r\n    }\r\n}\r\n\r\n#information {\r\n    width: 100%;\r\n    flex: 0;\r\n    p {\r\n        &:has(small) {\r\n            margin-top: 0;\r\n        }\r\n    }\r\n}\r\n\r\n#timeline {\r\n    width: 100%;\r\n    height: 100%;\r\n    flex: 1;\r\n    display: block;\r\n    position: relative;\r\n    min-width: 100%;\r\n    min-height: 50px;\r\n    border-radius: 3px;\r\n    border: solid 3px var(--light-grey);\r\n    background-color: transparent;\r\n    overflow-x: auto;\r\n    .grid-timeline, .grid-bar, .grid-layers {\r\n        column-gap: 3px;\r\n        min-width: 100%;\r\n    }\r\n    .grid-bar, .grid-beat {\r\n        height: 100%;\r\n    }\r\n    .grid-timeline {\r\n        position: sticky;\r\n        top: 0;\r\n        left: 0;\r\n        z-index: -10;\r\n        height: 100%;\r\n        display: grid;\r\n        grid-template: 100% / repeat(3, 1fr);\r\n        background-color: var(--light-grey); /* Color of bar vertical lines */\r\n        .grid-bar {\r\n            display: grid;\r\n            grid-template: repeat(1, 1fr) / repeat(4, 1fr);\r\n            background-color: var(--semi-grey); /* Color of beat vertical lines */\r\n            .grid-beat {\r\n                background-color: var(--dark-grey);\r\n            }\r\n        }\r\n    }\r\n    .grid-layers {\r\n        display: grid;\r\n        grid-template: repeat(1, 1fr) / repeat(12, 1fr);\r\n        background-color: transparent;\r\n        height: 0;\r\n        overflow-x: clip;\r\n        .timeline-layer {\r\n            position: relative;\r\n            background-color: darkorchid;\r\n            border-radius: 3px;\r\n            padding: 3px;\r\n            margin-top: 6px;\r\n            margin-bottom: 6px;\r\n            grid-column-start: 3;\r\n            grid-column-end: 6;\r\n            font-size: 0.9rem;\r\n            white-space: nowrap;\r\n            cursor: ew-resize;\r\n            -webkit-touch-callout: none !important;\r\n            -webkit-user-select: none !important;\r\n            -webkit-user-drag: none !important;\r\n            -khtml-user-select: none !important;\r\n            -moz-user-select: none !important;\r\n            -ms-user-select: none !important;\r\n            user-select: none !important;\r\n            .timeline-layer-button {\r\n                position: absolute;\r\n                top: 0;\r\n                width: 50%;\r\n                height: 100%;\r\n                &.left {\r\n                    left: 0;\r\n                }\r\n                &.right {\r\n                    right: 0;\r\n                }\r\n            }\r\n            span {\r\n                color: #ffffff;\r\n                mix-blend-mode: difference;\r\n                pointer-events: none;\r\n            }\r\n            &.ghost {\r\n                background-color: transparent;\r\n                outline-style: solid;\r\n                outline-width: 3px;\r\n                outline-offset: 2px;\r\n            }\r\n        }\r\n    }\r\n}"],sourceRoot:""}]);const i=o},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var l={},o=[],i=0;i<e.length;i++){var u=e[i],c=r.base?u[0]+r.base:u[0],s=l[c]||0,f="".concat(c," ").concat(s);l[c]=s+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=a(p,r);r.byIndex=i,t.splice(i,0,{identifier:f,updater:h,references:1})}o.push(f)}return o}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var l=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<l.length;o++){var i=n(l[o]);t[i].references--}for(var u=r(e,a),c=0;c<l.length;c++){var s=n(l[c]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}l=u}}},75:(e,t,n)=>{var r,a=n(540),l=n(338);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(null,arguments)}n(376);const i=function(e){return a.createElement("svg",o({xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",viewBox:"0 0 122.879 119.801"},e),r||(r=a.createElement("path",{d:"M49.991 0h.015v.006C63.8.01 76.3 5.607 85.342 14.651c9.026 9.031 14.618 21.515 14.628 35.303h.006v.074h-.006a50 50 0 0 1-3.471 18.301v.007a50 50 0 0 1-5.548 10.307l29.08 26.14.018.015.157.146.012.012a8.6 8.6 0 0 1 2.648 5.779 8.6 8.6 0 0 1-1.976 5.971l-.011.016-.176.204-.039.046-.145.155-.011.011a8.6 8.6 0 0 1-5.782 2.651 8.6 8.6 0 0 1-5.975-1.978l-.012-.012-.203-.175-.029-.024-29.743-26.735a50 50 0 0 1-2.687 1.763 50 50 0 0 1-3.816 2.117c-6.699 3.342-14.266 5.223-22.27 5.223v.006h-.016v-.006c-13.797-.005-26.297-5.601-35.334-14.644l-.004.005C5.608 76.3.016 63.81.007 50.021H0v-.049h.007c.005-13.799 5.601-26.297 14.646-35.339C23.684 5.607 36.169.015 49.958.006V0zm17.796 43.397a6.56 6.56 0 0 1 3.322.872l-.002.002c.365.21.708.454 1.01.715.306.264.594.569.851.895h.004a6.52 6.52 0 0 1 1.394 4.053 6.63 6.63 0 0 1-.906 3.335 6.7 6.7 0 0 1-1.791 1.996 6.7 6.7 0 0 1-1.168.688v.002a6.6 6.6 0 0 1-2.722.6l-11.051.08-.08 11.062a6.5 6.5 0 0 1-1.366 3.96l-.006.007a6.646 6.646 0 0 1-5.247 2.568v-.007a6.6 6.6 0 0 1-1.743-.232 6.56 6.56 0 0 1-2.899-1.689 6.5 6.5 0 0 1-1.672-2.893v-.006a6.6 6.6 0 0 1-.215-1.728v-.005l.075-10.945-10.962.076a6.5 6.5 0 0 1-3.327-.873l.002-.002a6.3 6.3 0 0 1-1.86-1.613h-.004a6.52 6.52 0 0 1-1.393-4.053 6.6 6.6 0 0 1 .906-3.328l-.004-.002a6.8 6.8 0 0 1 1.442-1.714h.004a6.7 6.7 0 0 1 1.942-1.151 6.6 6.6 0 0 1 2.296-.423l11.051-.082.08-11.062a6.5 6.5 0 0 1 .921-3.309l.004.002c.224-.374.467-.715.727-1.003.264-.296.576-.584.908-.839l.005-.004v.002a6.62 6.62 0 0 1 4.055-1.375 6.6 6.6 0 0 1 3.317.897c.479.279.928.631 1.32 1.025l.004-.004a6.5 6.5 0 0 1 1.887 4.637l-.075 10.942zM50.006 11.212v.006h-.049v-.006c-10.683.007-20.367 4.348-27.376 11.354l.002.002c-7.019 7.018-11.365 16.711-11.368 27.404h.006v.049h-.006c.006 10.683 4.347 20.365 11.354 27.377l.002-.002c7.018 7.018 16.711 11.365 27.404 11.367v-.007h.049v.007c10.685-.007 20.367-4.348 27.381-11.359 7.012-7.009 11.359-16.702 11.361-27.401h-.006v-.049h.007c-.007-10.681-4.348-20.363-11.36-27.374v-.007c-7.009-7.011-16.702-11.359-27.401-11.361"})))};var u;function c(){return c=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c.apply(null,arguments)}const s=function(e){return a.createElement("svg",c({xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",viewBox:"0 0 122.879 119.801"},e),u||(u=a.createElement("path",{fillRule:"evenodd",d:"M49.991 0h.015v.006C63.8.01 76.3 5.607 85.342 14.651c9.026 9.031 14.618 21.515 14.628 35.303h.006v.074h-.006a50 50 0 0 1-3.471 18.301v.007a50 50 0 0 1-5.548 10.307l29.08 26.14.018.015.157.146.012.012a8.6 8.6 0 0 1 2.648 5.779 8.6 8.6 0 0 1-1.976 5.971l-.011.016-.176.204-.039.046-.145.155-.011.011a8.6 8.6 0 0 1-5.782 2.651 8.6 8.6 0 0 1-5.975-1.978l-.012-.012-.203-.175-.029-.024-29.743-26.735a50 50 0 0 1-2.687 1.763 50 50 0 0 1-3.816 2.117c-6.699 3.342-14.266 5.223-22.27 5.223v.006h-.016v-.006c-13.797-.005-26.297-5.601-35.334-14.644l-.004.005C5.608 76.3.016 63.81.007 50.021H0v-.049h.007c.005-13.799 5.601-26.297 14.646-35.339C23.684 5.607 36.169.015 49.958.006V0zm17.796 43.397a6.56 6.56 0 0 1 3.322.872l-.002.002c.365.21.708.454 1.01.715.306.264.594.569.851.895h.004a6.52 6.52 0 0 1 1.394 4.053 6.63 6.63 0 0 1-.906 3.335 6.7 6.7 0 0 1-1.791 1.996 6.7 6.7 0 0 1-1.168.688v.002a6.6 6.6 0 0 1-2.722.6l-35.166.248a6.5 6.5 0 0 1-3.327-.873l.002-.002a6.3 6.3 0 0 1-1.86-1.613h-.004a6.52 6.52 0 0 1-1.393-4.053 6.6 6.6 0 0 1 .906-3.328l-.004-.002a6.8 6.8 0 0 1 1.442-1.714h.004a6.7 6.7 0 0 1 1.942-1.151 6.6 6.6 0 0 1 2.296-.423zM50.006 11.212v.006h-.049v-.006c-10.683.007-20.367 4.348-27.376 11.354l.002.002c-7.019 7.018-11.365 16.711-11.368 27.404h.006v.049h-.006c.006 10.683 4.347 20.365 11.354 27.377l.002-.002c7.018 7.018 16.711 11.365 27.404 11.367v-.007h.049v.007c10.685-.007 20.367-4.348 27.381-11.359 7.012-7.009 11.359-16.702 11.361-27.401h-.006v-.049h.007c-.007-10.681-4.348-20.363-11.36-27.374v-.007c-7.009-7.011-16.702-11.359-27.401-11.361",clipRule:"evenodd"})))};var f;function d(){return d=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},d.apply(null,arguments)}const p=function(e){return a.createElement("svg",d({xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1",viewBox:"0 0 119.4 122.88"},e),f||(f=a.createElement("path",{d:"M83.91 26.34a43.8 43.8 0 0 0-22.68-7 42 42 0 0 0-24.42 7 50 50 0 0 0-7.46 6.09 42.07 42.07 0 0 0-5.47 54.1A49 49 0 0 0 30 94a41.83 41.83 0 0 0 18.6 10.9 42.77 42.77 0 0 0 21.77.13 47.2 47.2 0 0 0 19.2-9.62 38 38 0 0 0 11.14-16 37 37 0 0 0 1.64-6.18 38.4 38.4 0 0 0 .61-6.69 8.24 8.24 0 1 1 16.47 0 55 55 0 0 1-.8 9.53A54.77 54.77 0 0 1 100.26 108a63.6 63.6 0 0 1-25.92 13.1 59.1 59.1 0 0 1-30.1-.25 58.45 58.45 0 0 1-26-15.17 66 66 0 0 1-8.1-9.86 58.56 58.56 0 0 1 7.54-75 65.7 65.7 0 0 1 9.92-8.09 58.4 58.4 0 0 1 33.95-9.85 60.5 60.5 0 0 1 32.5 10.42l-.47-4.11A8.25 8.25 0 1 1 110 7.32l2.64 22.77a8.24 8.24 0 0 1-6.73 9l-23.38 4.22a8.23 8.23 0 1 1-2.9-16.21z"})))};function h(){return h=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},h.apply(null,arguments)}const m=function(e){return a.createElement("svg",h({xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1",viewBox:"0 0 122.88 122.85"},e),a.createElement("path",{d:"m83.6 61.48.42-.42a1.1 1.1 0 0 1 1.54 0l15.65 15.64a1.1 1.1 0 0 1 0 1.54L89 90.45 71.81 73.27zm28.22 9.59a2.93 2.93 0 0 1-.86-5.8l8.56-1.27a2.93 2.93 0 1 1 .86 5.8zm-15.2-20.6a2.95 2.95 0 0 1-5.89 0v-9a2.95 2.95 0 1 1 5.89 0zm10.94 7.17a2.93 2.93 0 0 1-4.18-4.11l5.9-6a2.93 2.93 0 0 1 4.18 4.11zM73.28 32.53a2.93 2.93 0 1 1-.87-5.8L81 25.46a2.93 2.93 0 1 1 .86 5.8l-8.55 1.27Zm-15.2-20.61a2.95 2.95 0 1 1-5.89 0v-9a2.95 2.95 0 0 1 5.89 0zM69 19.1a2.93 2.93 0 0 1-4.16-4.1l5.47-5.57a2.93 2.93 0 1 1 4.17 4.11zm13.63 77.71-15.42 15.41A39.6 39.6 0 0 1 56.35 120a28.56 28.56 0 0 1-12.49 2.85 27.4 27.4 0 0 1-11.51-2.28c-8.75-4-19.49-15.31-25.39-22.82A32.6 32.6 0 0 1 1.2 87.47 28.6 28.6 0 0 1 .09 76.75a25 25 0 0 1 2.75-10.08 47 47 0 0 1 7.82-11l15.43-15.4 17.14 17.14-15.32 15.34q-4.56 4.57-4.61 9.63c0 6.86 10.3 17.23 17.15 17.23 3.34 0 6.59-1.56 9.67-4.64l15.33-15.34zM32.46 33.93l11.81-11.78.42-.42a1.1 1.1 0 0 1 1.54 0l15.56 15.55a1.08 1.08 0 0 1 0 1.53l-.41.42L49.57 51z",style:{fillRule:"evenodd"}}))};var g;function v(){return v=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},v.apply(null,arguments)}const y=function(e){return a.createElement("svg",v({xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",viewBox:"0 0 72.7 60"},e),g||(g=a.createElement("path",{d:"M72.4 28.5v-.2c-.1-.2-.3-.5-.5-.7L58.3 10.9c-1.3-1.6-3.6-1.9-5.2-.6s-1.9 3.6-.6 5.2l8.6 10.7H11.5l8.7-10.7c1.3-1.6 1-4-.6-5.2-1.6-1.3-4-1-5.2.6L.9 27.6c-.2.2-.3.4-.5.7v.2c-.3.4-.4.8-.4 1.3v.4c0 .4.1.9.3 1.3v.2c.1.2.3.5.5.7l13.5 16.7c1.3 1.6 3.6 1.9 5.2.6s1.9-3.6.6-5.2l-8.6-10.7h49.6l-8.7 10.7c-1.3 1.6-1 4 .6 5.2 1.6 1.3 4 1 5.2-.6l13.5-16.7c.2-.2.3-.4.5-.7v-.2c.2-.4.3-.8.3-1.3v-.4c.2-.5.1-.9-.1-1.3"})))};var b;function w(){return w=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},w.apply(null,arguments)}const A=function(e){return a.createElement("svg",w({xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",viewBox:"0 0 122.9 60"},e),b||(b=a.createElement("path",{d:"M48.5 0c-2.1 0-3.8 1.7-3.8 3.8v22.5H11.5l8.7-10.7c1.3-1.6 1-4-.6-5.2-1.6-1.3-4-1-5.2.6L.9 27.6c-.2.2-.3.4-.5.7v.2c-.3.4-.4.8-.4 1.3v.4c0 .4.1.9.3 1.3v.2c.1.2.3.5.5.7l13.5 16.7c1.3 1.6 3.6 1.9 5.2.6s1.9-3.6.6-5.2l-8.6-10.7h33.2v22.5c0 2.1 1.7 3.7 3.8 3.8 2.1 0 3.8-1.7 3.8-3.8V3.7c-.1-2-1.8-3.7-3.8-3.7M74.4 60c2.1 0 3.8-1.7 3.8-3.8V33.7h33.2l-8.7 10.7c-1.3 1.6-1 4 .6 5.2 1.6 1.3 4 1 5.2-.6L122 32.4c.2-.2.3-.4.5-.7v-.2c.2-.4.3-.9.3-1.3v-.4c0-.4-.1-.9-.3-1.3v-.2c-.1-.2-.3-.5-.5-.7l-13.5-16.7c-1.3-1.6-3.6-1.9-5.2-.6s-1.9 3.6-.6 5.2l8.6 10.7H78.1V3.7c0-2.1-1.7-3.7-3.8-3.8-2.1 0-3.8 1.7-3.8 3.8v52.5c.2 2.1 1.8 3.8 3.9 3.8"})))};function k(e){var t=e.bpm,n=e.setBpm,r=e.beatsPerBar,l=e.setBeatsPerBar,o=(e.zoomLevel,e.increaseZoom),u=e.decreaseZoom,c=e.updateView,f=e.modeSnap,d=e.setModeSnap,h=e.mode,g=e.setMode,v=e.saveCompDataJSON,b=e.loadCompDataJSON;return a.createElement("div",{id:"toolbar"},a.createElement("menu",{id:"main"},a.createElement(p,{onClick:c}),a.createElement("label",{htmlFor:"bpm"},"BPM"),a.createElement("input",{name:"bpm",type:"number",size:"3",style:{width:"3rem"},value:t,onChange:function(e){return n(e.target.value)}}),a.createElement("select",{name:"beatsPerBar",id:"beatsPerBarSelect",value:r,onChange:function(e){return l(e.target.value)}},a.createElement("option",{value:"2"},"2"),a.createElement("option",{value:"4"},"4"),a.createElement("option",{value:"8"},"8"),a.createElement("option",{value:"16"},"16")),a.createElement(i,{onClick:o,style:{marginLeft:"1.5px"}}),a.createElement(s,{onClick:u,style:{marginLeft:"0"}}),a.createElement("div",{style:{display:"inline",height:"100%",borderLeft:"solid 3px var(--light-grey)",marginLeft:"1.5px",marginRight:"6px"}}),a.createElement(m,{onClick:function(){return d(!f)},className:"".concat(f?"active":""),style:{marginLeft:"0"}}),a.createElement(y,{onClick:function(){return g("move")},className:"".concat("move"===h?"active":""),style:{marginLeft:"0"}}),a.createElement(A,{onClick:function(){return g("scale")},className:"".concat("scale"===h?"active":""),style:{marginLeft:"0"}})),a.createElement("menu",{id:"second"},a.createElement("button",{onClick:function(){return v("soundsync")}},"SAVE JSON"),a.createElement("button",{onClick:b},"LOAD JSON")))}function S(e){return S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},S(e)}function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,E(r.key),r)}}function E(e){var t=function(e){if("object"!=S(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=S(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==S(t)?t:t+""}var x=function(){return e=function e(t,n,r,a,l,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.index=t.index,this.arrayIndex=n,this.name=t.name,this.color=t.color,this.inPoint=t.inPoint,this.outPoint=t.outPoint,this.duration=t.duration,this.compDuration=r.duration,this.totalBeats=a,this.gridStart=Math.floor(this.inPoint/this.compDuration*this.totalBeats)+1,this.gridStart<1&&(this.gridStart=1),this.closestGridStart=Math.round(this.inPoint/this.compDuration*this.totalBeats)+1,this.closestGridStart<1&&(this.closestGridStart=1),this.gridEnd=Math.ceil(this.outPoint/this.compDuration*this.totalBeats)+1,this.gridEnd>this.totalBeats&&(this.gridEnd=this.totalBeats),this.closestGridEnd=Math.round(this.outPoint/this.compDuration*this.totalBeats)+1,this.closestGridEnd>this.totalBeats&&(this.closestGridEnd=this.totalBeats),this.gridDuration=this.gridEnd-this.gridStart,this.scaling=this.duration/(this.gridDuration*(this.compDuration/this.totalBeats)),this.baseGridX=(this.gridStart-1)*l,this.trueX=this.inPoint/this.compDuration*o,this.translateX=this.trueX-this.baseGridX},(t=[{key:"rescaleLayer",value:function(e,t){this.gridDuration=this.gridEnd-this.gridStart,this.scaling=this.duration/(this.gridDuration*(this.compDuration/this.totalBeats)),this.baseGridX=(this.gridStart-1)*e,this.trueX=this.inPoint/this.compDuration*t,this.translateX=this.trueX-this.baseGridX}},{key:"moveLayer",value:function(e,t,n,r){var a=this.gridEnd-this.gridStart,l=this.closestGridEnd-this.closestGridStart;this.gridStart+=e,this.closestGridStart+=e,this.closestGridStart<1&&(this.closestGridStart=1),this.gridStart<1||t?(this.gridStart=1,this.gridStart=this.closestGridStart,this.gridEnd=this.gridStart+a,this.closestGridEnd=this.closestGridStart+l):(this.gridEnd+=e,this.gridEnd>this.totalBeats&&(this.gridEnd=this.totalBeats),this.closestGridEnd+=e,this.closestGridEnd>this.totalBeats&&(this.closestGridEnd=this.totalBeats)),this.inPoint=(this.gridStart-1)*this.compDuration/this.totalBeats,this.outPoint=(this.gridEnd-1)*this.compDuration/this.totalBeats,this.inPoint<0&&(this.inPoint=0),this.outPoint>this.compDuration&&(this.outPoint=this.compDuration),this.duration=this.outPoint-this.inPoint,this.rescaleLayer(n,r),console.log("moved new in:",this.inPoint,"new gridStart:",this.gridStart)}},{key:"scaleLayer",value:function(e,t,n,r,a){"in"===e&&(this.gridStart+=t,this.closestGridStart+=t,this.closestGridStart<1&&(this.closestGridStart=1),(this.gridStart<1||n)&&(this.gridStart=1,this.gridStart=this.closestGridStart)),"out"===e&&(this.gridEnd+=t,this.closestGridEnd+=t,this.closestGridEnd>this.totalBeats&&(this.closestGridEnd=1),(this.gridEnd>this.totalBeats||n)&&(this.gridEnd=1,this.gridEnd=this.closestGridEnd)),this.inPoint=(this.gridStart-1)*this.compDuration/this.totalBeats,this.outPoint=(this.gridEnd-1)*this.compDuration/this.totalBeats,this.inPoint<0&&(this.inPoint=0),this.outPoint>this.compDuration&&(this.outPoint=this.compDuration),this.duration=this.outPoint-this.inPoint,this.rescaleLayer(r,a),console.log("moved",e,"by",t,"beats")}}])&&C(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t}();function _(e){return _="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_(e)}function P(){P=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},l="function"==typeof Symbol?Symbol:{},o=l.iterator||"@@iterator",i=l.asyncIterator||"@@asyncIterator",u=l.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var l=t&&t.prototype instanceof v?t:v,o=Object.create(l.prototype),i=new O(r||[]);return a(o,"_invoke",{value:x(e,n,i)}),o}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",g={};function v(){}function y(){}function b(){}var w={};c(w,o,(function(){return this}));var A=Object.getPrototypeOf,k=A&&A(A(T([])));k&&k!==n&&r.call(k,o)&&(w=k);var S=b.prototype=v.prototype=Object.create(w);function C(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,l,o,i){var u=f(e[a],e,l);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==_(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,o,i)}),(function(e){n("throw",e,o,i)})):t.resolve(s).then((function(e){c.value=e,o(c)}),(function(e){return n("throw",e,o,i)}))}i(u.arg)}var l;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return l=l?l.then(a,a):a()}})}function x(t,n,r){var a=d;return function(l,o){if(a===h)throw Error("Generator is already running");if(a===m){if("throw"===l)throw o;return{value:e,done:!0}}for(r.method=l,r.arg=o;;){var i=r.delegate;if(i){var u=L(i,r);if(u){if(u===g)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===d)throw a=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=h;var c=f(t,n,r);if("normal"===c.type){if(a=r.done?m:p,c.arg===g)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(a=m,r.method="throw",r.arg=c.arg)}}}function L(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var l=f(a,t.iterator,n.arg);if("throw"===l.type)return n.method="throw",n.arg=l.arg,n.delegate=null,g;var o=l.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function z(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function N(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(z,this),this.reset(!0)}function T(t){if(t||""===t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,l=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return l.next=l}}throw new TypeError(_(t)+" is not iterable")}return y.prototype=b,a(S,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},C(E.prototype),c(E.prototype,i,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,l){void 0===l&&(l=Promise);var o=new E(s(e,n,r,a),l);return t.isGeneratorFunction(n)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},C(S),c(S,u,"Generator"),c(S,o,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=T,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(N),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return i.type="throw",i.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var l=this.tryEntries.length-1;l>=0;--l){var o=this.tryEntries[l],i=o.completion;if("root"===o.tryLoc)return a("end");if(o.tryLoc<=this.prev){var u=r.call(o,"catchLoc"),c=r.call(o,"finallyLoc");if(u&&c){if(this.prev<o.catchLoc)return a(o.catchLoc,!0);if(this.prev<o.finallyLoc)return a(o.finallyLoc)}else if(u){if(this.prev<o.catchLoc)return a(o.catchLoc,!0)}else{if(!c)throw Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return a(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var l=a;break}}l&&("break"===e||"continue"===e)&&l.tryLoc<=t&&t<=l.finallyLoc&&(l=null);var o=l?l.completion:{};return o.type=e,o.arg=t,l?(this.method="next",this.next=l.finallyLoc,g):this.complete(o)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),N(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;N(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:T(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function L(e,t,n,r,a,l,o){try{var i=e[l](o),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,a)}function z(e){return function(){var t=this,n=arguments;return new Promise((function(r,a){var l=e.apply(t,n);function o(e){L(l,r,a,o,i,"next",e)}function i(e){L(l,r,a,o,i,"throw",e)}o(void 0)}))}}function N(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function O(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?N(Object(n),!0).forEach((function(t){T(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):N(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function T(e,t,n){return(t=function(e){var t=function(e){if("object"!=_(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=_(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==_(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function D(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,l,o,i=[],u=!0,c=!1;try{if(l=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=l.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){c=!0,a=e}finally{try{if(!u&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(c)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return I(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?I(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function I(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function M(e){var t=e.compData,n=e.bpm,r=e.beatsPerBar,l=e.zoomLevel,o=e.updateView,i=e.waitingForAERef,u=e.setLoading,c=e.setLoadingText,s=e.modeSnapRef,f=e.modeRef,d=(0,a.useMemo)((function(){return n/60*(r/4)}),[n,r]),p=n/60*1,h=(0,a.useMemo)((function(){return Math.floor(t.duration*d)}),[n,t.duration,r,d]),m=(0,a.useMemo)((function(){return Math.floor(t.duration*p)}),[n,t]),g=(0,a.useMemo)((function(){return Math.ceil(h/r)*r}),[h,r]),v=Math.ceil(m/4),y=(0,a.useRef)(null),b=D((0,a.useState)(0),2),w=b[0],A=b[1],k=D((0,a.useState)(0),2),S=k[0],C=k[1];(0,a.useEffect)((function(){var e=function(){y.current&&A(y.current.getBoundingClientRect().width)};return e(),window.addEventListener("resize",e),function(){return window.removeEventListener("resize",e)}}),[t,l]),(0,a.useEffect)((function(){w>0&&h>0&&C(w/h)}),[w,h]);var E=D((0,a.useState)([]),2),_=E[0],L=E[1];(0,a.useEffect)((function(){var e=t.layers.map((function(e,n){return new x(e,n,t,h,S,w)}));L(e)}),[t,h,S,w]);var N=D((0,a.useState)(null),2),T=N[0],I=N[1],M=(0,a.useRef)(null),R=(0,a.useRef)(0),F=(0,a.useRef)(0),j=(0,a.useRef)(!1),B=(0,a.useRef)(null),U=(0,a.useRef)(""),H=(0,a.useRef)(0);(0,a.useEffect)((function(){var e=function(e){if(j.current&&S>0&&(F.current=e.pageX,H.current=-Math.round((R.current-F.current)/S),M.current&&0!==H.current)){var n=new x(O({},B.current),B.current.arrayIndex,t,h,S,w);"move"===f.current?n.moveLayer(H.current,s.current,S,w):"scale"===f.current&&n.scaleLayer(U.current,H.current,s.current,S,w),M.current=n,I(n)}};return window.addEventListener("mousemove",e),function(){return window.removeEventListener("mousemove",e)}}),[S]);var V=function(e,n){U.current=n,console.log("direction",U.current),R.current=F.current,j.current=!0,H.current=0,B.current=_.find((function(t){return t.index===e.index}));var r=new x(O({},B.current),B.current.arrayIndex,t,h,S,w);M.current=r,I(r)},$=function(){if(j.current&&0!==H.current){j.current=!1,M.current=null,I(null);var e=H.current;H.current=0;var t=U.current;U.current="",L((function(n){return n.map((function(n){if(n===B.current&&"move"===f.current){var r=n;return r.moveLayer(e,s.current,S,w),i.current||(i.current=!0,c("Moving Layer by ".concat(e," Beats")),u(!0),G(r.index,r.inPoint).then((function(){o(),i.current=!1,u(!1)})).catch((function(e){return console.error("Error moving AE layer:",e)}))),r}if(n===B.current&&"scale"===f.current){var a=n;return a.scaleLayer(t,e,s.current,S,w),i.current||(i.current=!0,c("Scaling Layer by ".concat(e," Beats")),u(!0),q(a.index,a.inPoint,a.outPoint).then((function(){o(),i.current=!1,u(!1)})).catch((function(e){return console.error("Error moving AE layer:",e)}))),a}return n}))}))}},G=function(){var e=z(P().mark((function e(t,n){return P().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e,r){window.CSInterface?(new window.CSInterface).evalScript("moveLayer(".concat(t,", ").concat(n,")"),(function(t){"success"===t?e():r(t)})):r("CSInterface is not available. Make sure CSInterface.js is loaded.")})));case 1:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),q=function(){var e=z(P().mark((function e(t,n,r){return P().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e,a){window.CSInterface?(new window.CSInterface).evalScript("scaleLayer(".concat(t,", ").concat(n,", ").concat(r,")"),(function(t){"success"===t?e():a(t)})):a("CSInterface is not available. Make sure CSInterface.js is loaded.")})));case 1:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}();return(0,a.useEffect)((function(){var e=function(){$()};return document.addEventListener("mouseup",e),function(){return document.removeEventListener("mouseup",e)}}),[]),a.createElement("div",{id:"timeline",onMouseMove:function(e){return F.current=e.pageX}},a.createElement("div",{className:"grid-layers",ref:y,style:{gridTemplate:"auto / repeat(".concat(g,", minmax(0, 1fr))"),width:"".concat(100*l,"%")}},_.map((function(e,t){return a.createElement("div",{key:t,className:"timeline-layer",style:{gridColumnStart:e.closestGridStart,gridColumnEnd:e.closestGridEnd,gridRow:e.index,backgroundColor:"rgb(".concat(e.color[0],", ").concat(e.color[1],", ").concat(e.color[2],")"),transform:"scaleX(".concat(e.scaling,") translateX(").concat(e.translateX,"px)"),transformOrigin:"left"}},a.createElement("div",{className:"timeline-layer-button left",onMouseDown:function(){return V(e,"in")},onMouseUp:function(){return $()}}," "),a.createElement("div",{className:"timeline-layer-button right",onMouseDown:function(){return V(e,"out")},onMouseUp:function(){return $()}}," "),a.createElement("span",{style:{display:"inline-block",transform:"scaleX(1)"}},e.name))})),T&&a.createElement("div",{className:"timeline-layer ghost",style:{gridColumnStart:T.closestGridStart,gridColumnEnd:T.closestGridEnd,gridRow:T.index,outlineColor:"rgb(".concat(T.color[0],", ").concat(T.color[1],", ").concat(T.color[2],")"),transform:"scaleX(".concat(T.scaling,") translateX(").concat(T.translateX,"px)"),transformOrigin:"left"}})),a.createElement("div",{className:"grid-timeline",style:{gridTemplate:"100% / repeat(".concat(v,", minmax(0, 1fr))"),width:"".concat(100*l,"%")}},Array.from({length:v}).map((function(e,t){return a.createElement("div",{key:t,className:"grid-bar",style:{gridTemplate:"100% / repeat(".concat(r,", minmax(0, 1fr))")}},Array.from({length:r}).map((function(e,t){return a.createElement("div",{key:t,className:"grid-beat"})})))}))))}function R(e){var t=e.text,n=void 0===t?"":t;return a.createElement("div",{id:"loader"},a.createElement("h1",null,"Loading ..."),a.createElement("p",null,n))}function F(e){return F="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},F(e)}function j(){j=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,a=Object.defineProperty||function(e,t,n){e[t]=n.value},l="function"==typeof Symbol?Symbol:{},o=l.iterator||"@@iterator",i=l.asyncIterator||"@@asyncIterator",u=l.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var l=t&&t.prototype instanceof v?t:v,o=Object.create(l.prototype),i=new z(r||[]);return a(o,"_invoke",{value:x(e,n,i)}),o}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",g={};function v(){}function y(){}function b(){}var w={};c(w,o,(function(){return this}));var A=Object.getPrototypeOf,k=A&&A(A(N([])));k&&k!==n&&r.call(k,o)&&(w=k);var S=b.prototype=v.prototype=Object.create(w);function C(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(a,l,o,i){var u=f(e[a],e,l);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==F(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,o,i)}),(function(e){n("throw",e,o,i)})):t.resolve(s).then((function(e){c.value=e,o(c)}),(function(e){return n("throw",e,o,i)}))}i(u.arg)}var l;a(this,"_invoke",{value:function(e,r){function a(){return new t((function(t,a){n(e,r,t,a)}))}return l=l?l.then(a,a):a()}})}function x(t,n,r){var a=d;return function(l,o){if(a===h)throw Error("Generator is already running");if(a===m){if("throw"===l)throw o;return{value:e,done:!0}}for(r.method=l,r.arg=o;;){var i=r.delegate;if(i){var u=_(i,r);if(u){if(u===g)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(a===d)throw a=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);a=h;var c=f(t,n,r);if("normal"===c.type){if(a=r.done?m:p,c.arg===g)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(a=m,r.method="throw",r.arg=c.arg)}}}function _(t,n){var r=n.method,a=t.iterator[r];if(a===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,_(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var l=f(a,t.iterator,n.arg);if("throw"===l.type)return n.method="throw",n.arg=l.arg,n.delegate=null,g;var o=l.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function z(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function N(t){if(t||""===t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var a=-1,l=function n(){for(;++a<t.length;)if(r.call(t,a))return n.value=t[a],n.done=!1,n;return n.value=e,n.done=!0,n};return l.next=l}}throw new TypeError(F(t)+" is not iterable")}return y.prototype=b,a(S,"constructor",{value:b,configurable:!0}),a(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(S),e},t.awrap=function(e){return{__await:e}},C(E.prototype),c(E.prototype,i,(function(){return this})),t.AsyncIterator=E,t.async=function(e,n,r,a,l){void 0===l&&(l=Promise);var o=new E(s(e,n,r,a),l);return t.isGeneratorFunction(n)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},C(S),c(S,u,"Generator"),c(S,o,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=N,z.prototype={constructor:z,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(L),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function a(r,a){return i.type="throw",i.arg=t,n.next=r,a&&(n.method="next",n.arg=e),!!a}for(var l=this.tryEntries.length-1;l>=0;--l){var o=this.tryEntries[l],i=o.completion;if("root"===o.tryLoc)return a("end");if(o.tryLoc<=this.prev){var u=r.call(o,"catchLoc"),c=r.call(o,"finallyLoc");if(u&&c){if(this.prev<o.catchLoc)return a(o.catchLoc,!0);if(this.prev<o.finallyLoc)return a(o.finallyLoc)}else if(u){if(this.prev<o.catchLoc)return a(o.catchLoc,!0)}else{if(!c)throw Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return a(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&r.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var l=a;break}}l&&("break"===e||"continue"===e)&&l.tryLoc<=t&&t<=l.finallyLoc&&(l=null);var o=l?l.completion:{};return o.type=e,o.arg=t,l?(this.method="next",this.next=l.finallyLoc,g):this.complete(o)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var a=r.arg;L(n)}return a}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:N(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function B(e,t,n,r,a,l,o){try{var i=e[l](o),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,a)}function U(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,l,o,i=[],u=!0,c=!1;try{if(l=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=l.call(n)).done)&&(i.push(r.value),i.length!==t);u=!0);}catch(e){c=!0,a=e}finally{try{if(!u&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(c)throw a}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return H(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?H(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function H(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const V=function(){var e=U((0,a.useState)(!1),2),t=e[0],n=e[1],r=U((0,a.useState)(""),2),l=r[0],o=r[1],i=U((0,a.useState)(120),2),u=i[0],c=i[1],s=U((0,a.useState)(4),2),f=s[0],d=s[1],p=U((0,a.useState)(1),2),h=p[0],m=p[1],g=U((0,a.useState)(!1),2),v=g[0],y=(g[1],(0,a.useRef)(v)),b=U((0,a.useState)(!0),2),w=b[0],A=b[1],S=(0,a.useRef)(w);(0,a.useEffect)((function(){S.current=w}),[w]);var C=U((0,a.useState)("move"),2),E=C[0],x=C[1],_=(0,a.useRef)(E);(0,a.useEffect)((function(){_.current=E}),[E]);var P=U((0,a.useState)({name:"Placeholder Comp",duration:0,frameRate:0,width:0,height:0,layers:[]}),2),L=P[0],z=P[1],N=function(){var e,t=(e=j().mark((function e(){return j().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e,t){window.CSInterface?(new window.CSInterface).evalScript("getCompData()",(function(n){try{var r=JSON.parse(n);r.error?t(r.error):e(r)}catch(e){t("Invalid JSON response from ExtendScript.")}})):t("CSInterface is not available. Make sure CSInterface.js is loaded.")})));case 1:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,a){var l=e.apply(t,n);function o(e){B(l,r,a,o,i,"next",e)}function i(e){B(l,r,a,o,i,"throw",e)}o(void 0)}))});return function(){return t.apply(this,arguments)}}(),O=function(){y.current||(y.current=!0,o("Fetching Composition Data"),n(!0),N().then((function(e){z(e),y.current=!1,n(!1)})).catch((function(e){return console.error("Error fetching comp data:",e)})))};return window.addEventListener("focus",O),a.createElement("main",null,t&&a.createElement(R,{text:l}),a.createElement(k,{bpm:u,setBpm:c,beatsPerBar:f,setBeatsPerBar:d,zoomLevel:h,increaseZoom:function(){return m(h+.25)},decreaseZoom:function(){return h-.25>=1?m(h-.25):null},updateView:O,modeSnap:w,setModeSnap:A,mode:E,setMode:x,saveCompDataJSON:function(e){var t=new Blob([JSON.stringify(L,null,2)],{type:"application/json"}),n=URL.createObjectURL(t),r=document.createElement("a");r.href=n,r.download="".concat(e,".json"),r.click(),URL.revokeObjectURL(n),console.log(JSON.stringify(L))},loadCompDataJSON:function(){var e=document.createElement("input");e.type="file",e.style.display="none",e.onchange=function(t){var n=t.target.files[0];if(n){var r=new FileReader;r.onload=function(t){var n=t.target.result;e.func(n),document.body.removeChild(e)},r.readAsText(n)}},e.func=function(e){return z(JSON.parse(e))},document.body.appendChild(e),e.click()}}),a.createElement(M,{compData:L,bpm:u,beatsPerBar:f,zoomLevel:h,updateView:O,waitingForAERef:y,setLoading:n,setLoadingText:o,modeSnapRef:S,modeRef:_}),a.createElement("div",{id:"information"},a.createElement("hr",null),a.createElement("p",null,a.createElement("small",null,"comp duration: ",L.duration," seconds | total beats: ",Math.floor(L.duration*(u/60*(f/4)))," | total bars: ",Math.ceil(Math.floor(L.duration*(u/60*1))/4)," | beats per second: ",u/60*(f/4)))))};(0,l.createRoot)(document.getElementById("root")).render(a.createElement(V,null))},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},159:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},221:(e,t,n)=>{var r=n(540);function a(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function l(){}var o={d:{f:l,r:function(){throw Error(a(522))},D:l,C:l,L:l,m:l,X:l,S:l,M:l},p:0,findDOMNode:null},i=Symbol.for("react.portal"),u=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function c(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=o,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(a(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:i,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=u.T,n=o.p;try{if(u.T=null,o.p=2,e)return e()}finally{u.T=t,o.p=n,o.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,o.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&o.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=c(n,t.crossOrigin),a="string"==typeof t.integrity?t.integrity:void 0,l="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?o.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:a,fetchPriority:l}):"script"===n&&o.d.X(e,{crossOrigin:r,integrity:a,fetchPriority:l,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=c(t.as,t.crossOrigin);o.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&o.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=c(n,t.crossOrigin);o.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=c(t.as,t.crossOrigin);o.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else o.d.m(e)},t.requestFormReset=function(e){o.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return u.H.useFormState(e,t,n)},t.useFormStatus=function(){return u.H.useHostTransitionStatus()},t.version="19.0.0"},247:(e,t,n)=>{var r=n(982),a=n(540),l=n(961);function o(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=Symbol.for("react.element"),u=Symbol.for("react.transitional.element"),c=Symbol.for("react.portal"),s=Symbol.for("react.fragment"),f=Symbol.for("react.strict_mode"),d=Symbol.for("react.profiler"),p=Symbol.for("react.provider"),h=Symbol.for("react.consumer"),m=Symbol.for("react.context"),g=Symbol.for("react.forward_ref"),v=Symbol.for("react.suspense"),y=Symbol.for("react.suspense_list"),b=Symbol.for("react.memo"),w=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var A=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var k=Symbol.for("react.memo_cache_sentinel"),S=Symbol.iterator;function C(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=S&&e[S]||e["@@iterator"])?e:null}var E=Symbol.for("react.client.reference");function x(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===E?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case s:return"Fragment";case c:return"Portal";case d:return"Profiler";case f:return"StrictMode";case v:return"Suspense";case y:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case m:return(e.displayName||"Context")+".Provider";case h:return(e._context.displayName||"Context")+".Consumer";case g:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case b:return null!==(t=e.displayName||null)?t:x(e.type)||"Memo";case w:t=e._payload,e=e._init;try{return x(e(t))}catch(e){}}return null}var _,P,L=a.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,z=Object.assign;function N(e){if(void 0===_)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);_=t&&t[1]||"",P=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+_+e+P}var O=!1;function T(e,t){if(!e||O)return"";O=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var a=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");a&&a.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var l=r.DetermineComponentFrameRoot(),o=l[0],i=l[1];if(o&&i){var u=o.split("\n"),c=i.split("\n");for(a=r=0;r<u.length&&!u[r].includes("DetermineComponentFrameRoot");)r++;for(;a<c.length&&!c[a].includes("DetermineComponentFrameRoot");)a++;if(r===u.length||a===c.length)for(r=u.length-1,a=c.length-1;1<=r&&0<=a&&u[r]!==c[a];)a--;for(;1<=r&&0<=a;r--,a--)if(u[r]!==c[a]){if(1!==r||1!==a)do{if(r--,0>--a||u[r]!==c[a]){var s="\n"+u[r].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=r&&0<=a);break}}}finally{O=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?N(n):""}function D(e){switch(e.tag){case 26:case 27:case 5:return N(e.type);case 16:return N("Lazy");case 13:return N("Suspense");case 19:return N("SuspenseList");case 0:case 15:return T(e.type,!1);case 11:return T(e.type.render,!1);case 1:return T(e.type,!0);default:return""}}function I(e){try{var t="";do{t+=D(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function M(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function R(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function F(e){if(M(e)!==e)throw Error(o(188))}function j(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=j(e)))return t;e=e.sibling}return null}var B=Array.isArray,U=l.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,H={pending:!1,data:null,method:null,action:null},V=[],$=-1;function G(e){return{current:e}}function q(e){0>$||(e.current=V[$],V[$]=null,$--)}function W(e,t){$++,V[$]=e.current,e.current=t}var Q=G(null),X=G(null),K=G(null),Y=G(null);function J(e,t){switch(W(K,t),W(X,e),W(Q,null),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)&&(t=t.namespaceURI)?Xs(t):0;break;default:if(t=(e=8===e?t.parentNode:t).tagName,e=e.namespaceURI)t=Ks(e=Xs(e),t);else switch(t){case"svg":t=1;break;case"math":t=2;break;default:t=0}}q(Q),W(Q,t)}function Z(){q(Q),q(X),q(K)}function ee(e){null!==e.memoizedState&&W(Y,e);var t=Q.current,n=Ks(t,e.type);t!==n&&(W(X,e),W(Q,n))}function te(e){X.current===e&&(q(Q),q(X)),Y.current===e&&(q(Y),Mf._currentValue=H)}var ne=Object.prototype.hasOwnProperty,re=r.unstable_scheduleCallback,ae=r.unstable_cancelCallback,le=r.unstable_shouldYield,oe=r.unstable_requestPaint,ie=r.unstable_now,ue=r.unstable_getCurrentPriorityLevel,ce=r.unstable_ImmediatePriority,se=r.unstable_UserBlockingPriority,fe=r.unstable_NormalPriority,de=r.unstable_LowPriority,pe=r.unstable_IdlePriority,he=r.log,me=r.unstable_setDisableYieldValue,ge=null,ve=null;function ye(e){if("function"==typeof he&&me(e),ve&&"function"==typeof ve.setStrictMode)try{ve.setStrictMode(ge,e)}catch(e){}}var be=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(we(e)/Ae|0)|0},we=Math.log,Ae=Math.LN2,ke=128,Se=4194304;function Ce(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194176&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function Ee(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,l=e.pingedLanes,o=e.warmLanes;e=0!==e.finishedLanes;var i=134217727&n;return 0!==i?0!=(n=i&~a)?r=Ce(n):0!=(l&=i)?r=Ce(l):e||0!=(o=i&~o)&&(r=Ce(o)):0!=(i=n&~a)?r=Ce(i):0!==l?r=Ce(l):e||0!=(o=n&~o)&&(r=Ce(o)),0===r?0:0===t||t===r||t&a||!((a=r&-r)>=(o=t&-t)||32===a&&4194176&o)?r:t}function xe(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function _e(e,t){switch(e){case 1:case 2:case 4:case 8:return t+250;case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function Pe(){var e=ke;return!(4194176&(ke<<=1))&&(ke=128),e}function Le(){var e=Se;return!(62914560&(Se<<=1))&&(Se=4194304),e}function ze(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ne(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Oe(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-be(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194218&n}function Te(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-be(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}function De(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Ie(){var e=U.p;return 0!==e?e:void 0===(e=window.event)?32:Xf(e.type)}var Me=Math.random().toString(36).slice(2),Re="__reactFiber$"+Me,Fe="__reactProps$"+Me,je="__reactContainer$"+Me,Be="__reactEvents$"+Me,Ue="__reactListeners$"+Me,He="__reactHandles$"+Me,Ve="__reactResources$"+Me,$e="__reactMarker$"+Me;function Ge(e){delete e[Re],delete e[Fe],delete e[Be],delete e[Ue],delete e[He]}function qe(e){var t=e[Re];if(t)return t;for(var n=e.parentNode;n;){if(t=n[je]||n[Re]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=uf(e);null!==e;){if(n=e[Re])return n;e=uf(e)}return t}n=(e=n).parentNode}return null}function We(e){if(e=e[Re]||e[je]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function Qe(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(o(33))}function Xe(e){var t=e[Ve];return t||(t=e[Ve]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function Ke(e){e[$e]=!0}var Ye=new Set,Je={};function Ze(e,t){et(e,t),et(e+"Capture",t)}function et(e,t){for(Je[e]=t,e=0;e<t.length;e++)Ye.add(t[e])}var tt=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),nt=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),rt={},at={};function lt(e,t,n){if(a=t,ne.call(at,a)||!ne.call(rt,a)&&(nt.test(a)?at[a]=!0:(rt[a]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var a}function ot(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function it(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function ut(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ct(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function st(e){e._valueTracker||(e._valueTracker=function(e){var t=ct(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,l=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,l.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ft(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ct(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function dt(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var pt=/[\n"\\]/g;function ht(e){return e.replace(pt,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function mt(e,t,n,r,a,l,o,i){e.name="",null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o?e.type=o:e.removeAttribute("type"),null!=t?"number"===o?(0===t&&""===e.value||e.value!=t)&&(e.value=""+ut(t)):e.value!==""+ut(t)&&(e.value=""+ut(t)):"submit"!==o&&"reset"!==o||e.removeAttribute("value"),null!=t?vt(e,o,ut(t)):null!=n?vt(e,o,ut(n)):null!=r&&e.removeAttribute("value"),null==a&&null!=l&&(e.defaultChecked=!!l),null!=a&&(e.checked=a&&"function"!=typeof a&&"symbol"!=typeof a),null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i?e.name=""+ut(i):e.removeAttribute("name")}function gt(e,t,n,r,a,l,o,i){if(null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l&&(e.type=l),null!=t||null!=n){if(("submit"===l||"reset"===l)&&null==t)return;n=null!=n?""+ut(n):"",t=null!=t?""+ut(t):n,i||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:a)&&"symbol"!=typeof r&&!!r,e.checked=i?e.checked:!!r,e.defaultChecked=!!r,null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o&&(e.name=o)}function vt(e,t,n){"number"===t&&dt(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function yt(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ut(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function bt(e,t,n){null==t||((t=""+ut(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+ut(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function wt(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(o(92));if(B(r)){if(1<r.length)throw Error(o(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=ut(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function At(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var kt=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function St(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||kt.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function Ct(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(o(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var a in t)r=t[a],t.hasOwnProperty(a)&&n[a]!==r&&St(e,a,r)}else for(var l in t)t.hasOwnProperty(l)&&St(e,l,t[l])}function Et(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var xt=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),_t=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Pt(e){return _t.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Lt=null;function zt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Nt=null,Ot=null;function Tt(e){var t=We(e);if(t&&(e=t.stateNode)){var n=e[Fe]||null;e:switch(e=t.stateNode,t.type){case"input":if(mt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+ht(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=r[Fe]||null;if(!a)throw Error(o(90));mt(r,a.value,a.defaultValue,a.defaultValue,a.checked,a.defaultChecked,a.type,a.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&ft(r)}break e;case"textarea":bt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&yt(e,!!n.multiple,t,!1)}}}var Dt=!1;function It(e,t,n){if(Dt)return e(t,n);Dt=!0;try{return e(t)}finally{if(Dt=!1,(null!==Nt||null!==Ot)&&(Rc(),Nt&&(t=Nt,e=Ot,Ot=Nt=null,Tt(t),e)))for(t=0;t<e.length;t++)Tt(e[t])}}function Mt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Fe]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}var Rt=!1;if(tt)try{var Ft={};Object.defineProperty(Ft,"passive",{get:function(){Rt=!0}}),window.addEventListener("test",Ft,Ft),window.removeEventListener("test",Ft,Ft)}catch(e){Rt=!1}var jt=null,Bt=null,Ut=null;function Ht(){if(Ut)return Ut;var e,t,n=Bt,r=n.length,a="value"in jt?jt.value:jt.textContent,l=a.length;for(e=0;e<r&&n[e]===a[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===a[l-t];t++);return Ut=a.slice(e,1<t?1-t:void 0)}function Vt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function $t(){return!0}function Gt(){return!1}function qt(e){function t(t,n,r,a,l){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=l,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(a):a[o]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?$t:Gt,this.isPropagationStopped=Gt,this}return z(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=$t)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=$t)},persist:function(){},isPersistent:$t}),t}var Wt,Qt,Xt,Kt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Yt=qt(Kt),Jt=z({},Kt,{view:0,detail:0}),Zt=qt(Jt),en=z({},Jt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:dn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Xt&&(Xt&&"mousemove"===e.type?(Wt=e.screenX-Xt.screenX,Qt=e.screenY-Xt.screenY):Qt=Wt=0,Xt=e),Wt)},movementY:function(e){return"movementY"in e?e.movementY:Qt}}),tn=qt(en),nn=qt(z({},en,{dataTransfer:0})),rn=qt(z({},Jt,{relatedTarget:0})),an=qt(z({},Kt,{animationName:0,elapsedTime:0,pseudoElement:0})),ln=qt(z({},Kt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),on=qt(z({},Kt,{data:0})),un={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function fn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=sn[e])&&!!t[e]}function dn(){return fn}var pn=qt(z({},Jt,{key:function(e){if(e.key){var t=un[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Vt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:dn,charCode:function(e){return"keypress"===e.type?Vt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Vt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),hn=qt(z({},en,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),mn=qt(z({},Jt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:dn})),gn=qt(z({},Kt,{propertyName:0,elapsedTime:0,pseudoElement:0})),vn=qt(z({},en,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),yn=qt(z({},Kt,{newState:0,oldState:0})),bn=[9,13,27,32],wn=tt&&"CompositionEvent"in window,An=null;tt&&"documentMode"in document&&(An=document.documentMode);var kn=tt&&"TextEvent"in window&&!An,Sn=tt&&(!wn||An&&8<An&&11>=An),Cn=String.fromCharCode(32),En=!1;function xn(e,t){switch(e){case"keyup":return-1!==bn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function _n(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Pn=!1,Ln={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Ln[e.type]:"textarea"===t}function Nn(e,t,n,r){Nt?Ot?Ot.push(r):Ot=[r]:Nt=r,0<(t=Is(t,"onChange")).length&&(n=new Yt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var On=null,Tn=null;function Dn(e){_s(e,0)}function In(e){if(ft(Qe(e)))return e}function Mn(e,t){if("change"===e)return t}var Rn=!1;if(tt){var Fn;if(tt){var jn="oninput"in document;if(!jn){var Bn=document.createElement("div");Bn.setAttribute("oninput","return;"),jn="function"==typeof Bn.oninput}Fn=jn}else Fn=!1;Rn=Fn&&(!document.documentMode||9<document.documentMode)}function Un(){On&&(On.detachEvent("onpropertychange",Hn),Tn=On=null)}function Hn(e){if("value"===e.propertyName&&In(Tn)){var t=[];Nn(t,Tn,e,zt(e)),It(Dn,t)}}function Vn(e,t,n){"focusin"===e?(Un(),Tn=n,(On=t).attachEvent("onpropertychange",Hn)):"focusout"===e&&Un()}function $n(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return In(Tn)}function Gn(e,t){if("click"===e)return In(t)}function qn(e,t){if("input"===e||"change"===e)return In(t)}var Wn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Qn(e,t){if(Wn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!ne.call(t,a)||!Wn(e[a],t[a]))return!1}return!0}function Xn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Kn(e,t){var n,r=Xn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Xn(r)}}function Yn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Yn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Jn(e){for(var t=dt((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=dt((e=t.contentWindow).document)}return t}function Zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function er(e,t){var n=Jn(t);t=e.focusedElem;var r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&Yn(t.ownerDocument.documentElement,t)){if(null!==r&&Zn(t))if(e=r.start,void 0===(n=r.end)&&(n=e),"selectionStart"in t)t.selectionStart=e,t.selectionEnd=Math.min(n,t.value.length);else if((n=(e=t.ownerDocument||document)&&e.defaultView||window).getSelection){n=n.getSelection();var a=t.textContent.length,l=Math.min(r.start,a);r=void 0===r.end?l:Math.min(r.end,a),!n.extend&&l>r&&(a=r,r=l,l=a),a=Kn(t,l);var o=Kn(t,r);a&&o&&(1!==n.rangeCount||n.anchorNode!==a.node||n.anchorOffset!==a.offset||n.focusNode!==o.node||n.focusOffset!==o.offset)&&((e=e.createRange()).setStart(a.node,a.offset),n.removeAllRanges(),l>r?(n.addRange(e),n.extend(o.node,o.offset)):(e.setEnd(o.node,o.offset),n.addRange(e)))}for(e=[],n=t;n=n.parentNode;)1===n.nodeType&&e.push({element:n,left:n.scrollLeft,top:n.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<e.length;t++)(n=e[t]).element.scrollLeft=n.left,n.element.scrollTop=n.top}}var tr=tt&&"documentMode"in document&&11>=document.documentMode,nr=null,rr=null,ar=null,lr=!1;function or(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;lr||null==nr||nr!==dt(r)||(r="selectionStart"in(r=nr)&&Zn(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},ar&&Qn(ar,r)||(ar=r,0<(r=Is(rr,"onSelect")).length&&(t=new Yt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=nr)))}function ir(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var ur={animationend:ir("Animation","AnimationEnd"),animationiteration:ir("Animation","AnimationIteration"),animationstart:ir("Animation","AnimationStart"),transitionrun:ir("Transition","TransitionRun"),transitionstart:ir("Transition","TransitionStart"),transitioncancel:ir("Transition","TransitionCancel"),transitionend:ir("Transition","TransitionEnd")},cr={},sr={};function fr(e){if(cr[e])return cr[e];if(!ur[e])return e;var t,n=ur[e];for(t in n)if(n.hasOwnProperty(t)&&t in sr)return cr[e]=n[t];return e}tt&&(sr=document.createElement("div").style,"AnimationEvent"in window||(delete ur.animationend.animation,delete ur.animationiteration.animation,delete ur.animationstart.animation),"TransitionEvent"in window||delete ur.transitionend.transition);var dr=fr("animationend"),pr=fr("animationiteration"),hr=fr("animationstart"),mr=fr("transitionrun"),gr=fr("transitionstart"),vr=fr("transitioncancel"),yr=fr("transitionend"),br=new Map,wr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(" ");function Ar(e,t){br.set(e,t),Ze(t,[e])}var kr=[],Sr=0,Cr=0;function Er(){for(var e=Sr,t=Cr=Sr=0;t<e;){var n=kr[t];kr[t++]=null;var r=kr[t];kr[t++]=null;var a=kr[t];kr[t++]=null;var l=kr[t];if(kr[t++]=null,null!==r&&null!==a){var o=r.pending;null===o?a.next=a:(a.next=o.next,o.next=a),r.pending=a}0!==l&&Lr(n,a,l)}}function xr(e,t,n,r){kr[Sr++]=e,kr[Sr++]=t,kr[Sr++]=n,kr[Sr++]=r,Cr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function _r(e,t,n,r){return xr(e,t,n,r),zr(e)}function Pr(e,t){return xr(e,null,null,t),zr(e)}function Lr(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var a=!1,l=e.return;null!==l;)l.childLanes|=n,null!==(r=l.alternate)&&(r.childLanes|=n),22===l.tag&&(null===(e=l.stateNode)||1&e._visibility||(a=!0)),e=l,l=l.return;a&&null!==t&&3===e.tag&&(l=e.stateNode,a=31-be(n),null===(e=(l=l.hiddenUpdates)[a])?l[a]=[t]:e.push(t),t.lane=536870912|n)}function zr(e){if(50<_c)throw _c=0,Pc=null,Error(o(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var Nr={},Or=new WeakMap;function Tr(e,t){if("object"==typeof e&&null!==e){var n=Or.get(e);return void 0!==n?n:(t={value:e,source:t,stack:I(t)},Or.set(e,t),t)}return{value:e,source:t,stack:I(t)}}var Dr=[],Ir=0,Mr=null,Rr=0,Fr=[],jr=0,Br=null,Ur=1,Hr="";function Vr(e,t){Dr[Ir++]=Rr,Dr[Ir++]=Mr,Mr=e,Rr=t}function $r(e,t,n){Fr[jr++]=Ur,Fr[jr++]=Hr,Fr[jr++]=Br,Br=e;var r=Ur;e=Hr;var a=32-be(r)-1;r&=~(1<<a),n+=1;var l=32-be(t)+a;if(30<l){var o=a-a%5;l=(r&(1<<o)-1).toString(32),r>>=o,a-=o,Ur=1<<32-be(t)+a|n<<a|r,Hr=l+e}else Ur=1<<l|n<<a|r,Hr=e}function Gr(e){null!==e.return&&(Vr(e,1),$r(e,1,0))}function qr(e){for(;e===Mr;)Mr=Dr[--Ir],Dr[Ir]=null,Rr=Dr[--Ir],Dr[Ir]=null;for(;e===Br;)Br=Fr[--jr],Fr[jr]=null,Hr=Fr[--jr],Fr[jr]=null,Ur=Fr[--jr],Fr[jr]=null}var Wr=null,Qr=null,Xr=!1,Kr=null,Yr=!1,Jr=Error(o(519));function Zr(e){throw aa(Tr(Error(o(418,"")),e)),Jr}function ea(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Re]=e,t[Fe]=r,n){case"dialog":Ps("cancel",t),Ps("close",t);break;case"iframe":case"object":case"embed":Ps("load",t);break;case"video":case"audio":for(n=0;n<Es.length;n++)Ps(Es[n],t);break;case"source":Ps("error",t);break;case"img":case"image":case"link":Ps("error",t),Ps("load",t);break;case"details":Ps("toggle",t);break;case"input":Ps("invalid",t),gt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),st(t);break;case"select":Ps("invalid",t);break;case"textarea":Ps("invalid",t),wt(t,r.value,r.defaultValue,r.children),st(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Us(t.textContent,n)?(null!=r.popover&&(Ps("beforetoggle",t),Ps("toggle",t)),null!=r.onScroll&&Ps("scroll",t),null!=r.onScrollEnd&&Ps("scrollend",t),null!=r.onClick&&(t.onclick=Hs),t=!0):t=!1,t||Zr(e)}function ta(e){for(Wr=e.return;Wr;)switch(Wr.tag){case 3:case 27:return void(Yr=!0);case 5:case 13:return void(Yr=!1);default:Wr=Wr.return}}function na(e){if(e!==Wr)return!1;if(!Xr)return ta(e),Xr=!0,!1;var t,n=!1;if((t=3!==e.tag&&27!==e.tag)&&((t=5===e.tag)&&(t=!("form"!==(t=e.type)&&"button"!==t)||Ys(e.type,e.memoizedProps)),t=!t),t&&(n=!0),n&&Qr&&Zr(e),ta(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){Qr=of(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}Qr=null}}else Qr=Wr?of(e.stateNode.nextSibling):null;return!0}function ra(){Qr=Wr=null,Xr=!1}function aa(e){null===Kr?Kr=[e]:Kr.push(e)}var la=Error(o(460)),oa=Error(o(474)),ia={then:function(){}};function ua(e){return"fulfilled"===(e=e.status)||"rejected"===e}function ca(){}function sa(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(ca,ca),t=n),t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===la)throw Error(o(483));throw e;default:if("string"==typeof t.status)t.then(ca,ca);else{if(null!==(e=ec)&&100<e.shellSuspendCounter)throw Error(o(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===la)throw Error(o(483));throw e}throw fa=t,la}}var fa=null;function da(){if(null===fa)throw Error(o(459));var e=fa;return fa=null,e}var pa=null,ha=0;function ma(e){var t=ha;return ha+=1,null===pa&&(pa=[]),sa(pa,e,t)}function ga(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function va(e,t){if(t.$$typeof===i)throw Error(o(525));throw e=Object.prototype.toString.call(t),Error(o(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ya(e){return(0,e._init)(e._payload)}function ba(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function a(e,t){return(e=Mu(e,t)).index=0,e.sibling=null,e}function l(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=33554434,n):r:(t.flags|=33554434,n):(t.flags|=1048576,n)}function i(t){return e&&null===t.alternate&&(t.flags|=33554434),t}function f(e,t,n,r){return null===t||6!==t.tag?((t=Uu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function d(e,t,n,r){var l=n.type;return l===s?h(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===w&&ya(l)===t.type)?(ga(t=a(t,n.props),n),t.return=e,t):(ga(t=Fu(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function p(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hu(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function h(e,t,n,r,l){return null===t||7!==t.tag?((t=ju(n,e.mode,r,l)).return=e,t):((t=a(t,n)).return=e,t)}function g(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Uu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case u:return ga(n=Fu(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case c:return(t=Hu(t,e.mode,n)).return=e,t;case w:return g(e,t=(0,t._init)(t._payload),n)}if(B(t)||C(t))return(t=ju(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return g(e,ma(t),n);if(t.$$typeof===m)return g(e,Ei(e,t),n);va(e,t)}return null}function v(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==a?null:f(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case u:return n.key===a?d(e,t,n,r):null;case c:return n.key===a?p(e,t,n,r):null;case w:return v(e,t,n=(a=n._init)(n._payload),r)}if(B(n)||C(n))return null!==a?null:h(e,t,n,r,null);if("function"==typeof n.then)return v(e,t,ma(n),r);if(n.$$typeof===m)return v(e,t,Ei(e,n),r);va(e,n)}return null}function y(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return f(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case u:return d(t,e=e.get(null===r.key?n:r.key)||null,r,a);case c:return p(t,e=e.get(null===r.key?n:r.key)||null,r,a);case w:return y(e,t,n,r=(0,r._init)(r._payload),a)}if(B(r)||C(r))return h(t,e=e.get(n)||null,r,a,null);if("function"==typeof r.then)return y(e,t,n,ma(r),a);if(r.$$typeof===m)return y(e,t,n,Ei(t,r),a);va(t,r)}return null}function b(f,d,p,h){if("object"==typeof p&&null!==p&&p.type===s&&null===p.key&&(p=p.props.children),"object"==typeof p&&null!==p){switch(p.$$typeof){case u:e:{for(var A=p.key;null!==d;){if(d.key===A){if((A=p.type)===s){if(7===d.tag){n(f,d.sibling),(h=a(d,p.props.children)).return=f,f=h;break e}}else if(d.elementType===A||"object"==typeof A&&null!==A&&A.$$typeof===w&&ya(A)===d.type){n(f,d.sibling),ga(h=a(d,p.props),p),h.return=f,f=h;break e}n(f,d);break}t(f,d),d=d.sibling}p.type===s?((h=ju(p.props.children,f.mode,h,p.key)).return=f,f=h):(ga(h=Fu(p.type,p.key,p.props,null,f.mode,h),p),h.return=f,f=h)}return i(f);case c:e:{for(A=p.key;null!==d;){if(d.key===A){if(4===d.tag&&d.stateNode.containerInfo===p.containerInfo&&d.stateNode.implementation===p.implementation){n(f,d.sibling),(h=a(d,p.children||[])).return=f,f=h;break e}n(f,d);break}t(f,d),d=d.sibling}(h=Hu(p,f.mode,h)).return=f,f=h}return i(f);case w:return b(f,d,p=(A=p._init)(p._payload),h)}if(B(p))return function(a,o,i,u){for(var c=null,s=null,f=o,d=o=0,p=null;null!==f&&d<i.length;d++){f.index>d?(p=f,f=null):p=f.sibling;var h=v(a,f,i[d],u);if(null===h){null===f&&(f=p);break}e&&f&&null===h.alternate&&t(a,f),o=l(h,o,d),null===s?c=h:s.sibling=h,s=h,f=p}if(d===i.length)return n(a,f),Xr&&Vr(a,d),c;if(null===f){for(;d<i.length;d++)null!==(f=g(a,i[d],u))&&(o=l(f,o,d),null===s?c=f:s.sibling=f,s=f);return Xr&&Vr(a,d),c}for(f=r(f);d<i.length;d++)null!==(p=y(f,a,d,i[d],u))&&(e&&null!==p.alternate&&f.delete(null===p.key?d:p.key),o=l(p,o,d),null===s?c=p:s.sibling=p,s=p);return e&&f.forEach((function(e){return t(a,e)})),Xr&&Vr(a,d),c}(f,d,p,h);if(C(p)){if("function"!=typeof(A=C(p)))throw Error(o(150));return function(a,i,u,c){if(null==u)throw Error(o(151));for(var s=null,f=null,d=i,p=i=0,h=null,m=u.next();null!==d&&!m.done;p++,m=u.next()){d.index>p?(h=d,d=null):h=d.sibling;var b=v(a,d,m.value,c);if(null===b){null===d&&(d=h);break}e&&d&&null===b.alternate&&t(a,d),i=l(b,i,p),null===f?s=b:f.sibling=b,f=b,d=h}if(m.done)return n(a,d),Xr&&Vr(a,p),s;if(null===d){for(;!m.done;p++,m=u.next())null!==(m=g(a,m.value,c))&&(i=l(m,i,p),null===f?s=m:f.sibling=m,f=m);return Xr&&Vr(a,p),s}for(d=r(d);!m.done;p++,m=u.next())null!==(m=y(d,a,p,m.value,c))&&(e&&null!==m.alternate&&d.delete(null===m.key?p:m.key),i=l(m,i,p),null===f?s=m:f.sibling=m,f=m);return e&&d.forEach((function(e){return t(a,e)})),Xr&&Vr(a,p),s}(f,d,p=A.call(p),h)}if("function"==typeof p.then)return b(f,d,ma(p),h);if(p.$$typeof===m)return b(f,d,Ei(f,p),h);va(f,p)}return"string"==typeof p&&""!==p||"number"==typeof p||"bigint"==typeof p?(p=""+p,null!==d&&6===d.tag?(n(f,d.sibling),(h=a(d,p)).return=f,f=h):(n(f,d),(h=Uu(p,f.mode,h)).return=f,f=h),i(f)):n(f,d)}return function(e,t,n,r){try{ha=0;var a=b(e,t,n,r);return pa=null,a}catch(t){if(t===la)throw t;var l=Du(29,t,null,e.mode);return l.lanes=r,l.return=e,l}}}var wa=ba(!0),Aa=ba(!1),ka=G(null),Sa=G(0);function Ca(e,t){W(Sa,e=uc),W(ka,t),uc=e|t.baseLanes}function Ea(){W(Sa,uc),W(ka,ka.current)}function xa(){uc=Sa.current,q(ka),q(Sa)}var _a=G(null),Pa=null;function La(e){var t=e.alternate;W(Ta,1&Ta.current),W(_a,e),null===Pa&&(null===t||null!==ka.current||null!==t.memoizedState)&&(Pa=e)}function za(e){if(22===e.tag){if(W(Ta,Ta.current),W(_a,e),null===Pa){var t=e.alternate;null!==t&&null!==t.memoizedState&&(Pa=e)}}else Na()}function Na(){W(Ta,Ta.current),W(_a,_a.current)}function Oa(e){q(_a),Pa===e&&(Pa=null),q(Ta)}var Ta=G(0);function Da(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ia="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Ma=r.unstable_scheduleCallback,Ra=r.unstable_NormalPriority,Fa={$$typeof:m,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function ja(){return{controller:new Ia,data:new Map,refCount:0}}function Ba(e){e.refCount--,0===e.refCount&&Ma(Ra,(function(){e.controller.abort()}))}var Ua=null,Ha=0,Va=0,$a=null;function Ga(){if(0==--Ha&&null!==Ua){null!==$a&&($a.status="fulfilled");var e=Ua;Ua=null,Va=0,$a=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var qa=L.S;L.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Ua){var n=Ua=[];Ha=0,Va=ws(),$a={status:"pending",value:void 0,then:function(e){n.push(e)}}}Ha++,t.then(Ga,Ga)}(0,t),null!==qa&&qa(e,t)};var Wa=G(null);function Qa(){var e=Wa.current;return null!==e?e:ec.pooledCache}function Xa(e,t){W(Wa,null===t?Wa.current:t.pool)}function Ka(){var e=Qa();return null===e?null:{parent:Fa._currentValue,pool:e}}var Ya=0,Ja=null,Za=null,el=null,tl=!1,nl=!1,rl=!1,al=0,ll=0,ol=null,il=0;function ul(){throw Error(o(321))}function cl(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Wn(e[n],t[n]))return!1;return!0}function sl(e,t,n,r,a,l){return Ya=l,Ja=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,L.H=null===e||null===e.memoizedState?Eo:xo,rl=!1,l=n(r,a),rl=!1,nl&&(l=dl(t,n,r,a)),fl(e),l}function fl(e){L.H=Co;var t=null!==Za&&null!==Za.next;if(Ya=0,el=Za=Ja=null,tl=!1,ll=0,ol=null,t)throw Error(o(300));null===e||Vo||null!==(e=e.dependencies)&&ki(e)&&(Vo=!0)}function dl(e,t,n,r){Ja=e;var a=0;do{if(nl&&(ol=null),ll=0,nl=!1,25<=a)throw Error(o(301));if(a+=1,el=Za=null,null!=e.updateQueue){var l=e.updateQueue;l.lastEffect=null,l.events=null,l.stores=null,null!=l.memoCache&&(l.memoCache.index=0)}L.H=_o,l=t(n,r)}while(nl);return l}function pl(){var e=L.H,t=e.useState()[0];return t="function"==typeof t.then?bl(t):t,e=e.useState()[0],(null!==Za?Za.memoizedState:null)!==e&&(Ja.flags|=1024),t}function hl(){var e=0!==al;return al=0,e}function ml(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function gl(e){if(tl){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}tl=!1}Ya=0,el=Za=Ja=null,nl=!1,ll=al=0,ol=null}function vl(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===el?Ja.memoizedState=el=e:el=el.next=e,el}function yl(){if(null===Za){var e=Ja.alternate;e=null!==e?e.memoizedState:null}else e=Za.next;var t=null===el?Ja.memoizedState:el.next;if(null!==t)el=t,Za=e;else{if(null===e){if(null===Ja.alternate)throw Error(o(467));throw Error(o(310))}e={memoizedState:(Za=e).memoizedState,baseState:Za.baseState,baseQueue:Za.baseQueue,queue:Za.queue,next:null},null===el?Ja.memoizedState=el=e:el=el.next=e}return el}function bl(e){var t=ll;return ll+=1,null===ol&&(ol=[]),e=sa(ol,e,t),t=Ja,null===(null===el?t.memoizedState:el.next)&&(t=t.alternate,L.H=null===t||null===t.memoizedState?Eo:xo),e}function wl(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return bl(e);if(e.$$typeof===m)return Ci(e)}throw Error(o(438,String(e)))}function Al(e){var t=null,n=Ja.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=Ja.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},Ja.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=k;return t.index++,n}function kl(e,t){return"function"==typeof t?t(e):t}function Sl(e){return Cl(yl(),Za,e)}function Cl(e,t,n){var r=e.queue;if(null===r)throw Error(o(311));r.lastRenderedReducer=n;var a=e.baseQueue,l=r.pending;if(null!==l){if(null!==a){var i=a.next;a.next=l.next,l.next=i}t.baseQueue=a=l,r.pending=null}if(l=e.baseState,null===a)e.memoizedState=l;else{var u=i=null,c=null,s=t=a.next,f=!1;do{var d=-536870913&s.lane;if(d!==s.lane?(nc&d)===d:(Ya&d)===d){var p=s.revertLane;if(0===p)null!==c&&(c=c.next={lane:0,revertLane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),d===Va&&(f=!0);else{if((Ya&p)===p){s=s.next,p===Va&&(f=!0);continue}d={lane:0,revertLane:s.revertLane,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null},null===c?(u=c=d,i=l):c=c.next=d,Ja.lanes|=p,sc|=p}d=s.action,rl&&n(l,d),l=s.hasEagerState?s.eagerState:n(l,d)}else p={lane:d,revertLane:s.revertLane,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null},null===c?(u=c=p,i=l):c=c.next=p,Ja.lanes|=d,sc|=d;s=s.next}while(null!==s&&s!==t);if(null===c?i=l:c.next=u,!Wn(l,e.memoizedState)&&(Vo=!0,f&&null!==(n=$a)))throw n;e.memoizedState=l,e.baseState=i,e.baseQueue=c,r.lastRenderedState=l}return null===a&&(r.lanes=0),[e.memoizedState,r.dispatch]}function El(e){var t=yl(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,l=t.memoizedState;if(null!==a){n.pending=null;var i=a=a.next;do{l=e(l,i.action),i=i.next}while(i!==a);Wn(l,t.memoizedState)||(Vo=!0),t.memoizedState=l,null===t.baseQueue&&(t.baseState=l),n.lastRenderedState=l}return[l,r]}function xl(e,t,n){var r=Ja,a=yl(),l=Xr;if(l){if(void 0===n)throw Error(o(407));n=n()}else n=t();var i=!Wn((Za||a).memoizedState,n);if(i&&(a.memoizedState=n,Vo=!0),a=a.queue,Yl(Ll.bind(null,r,a,e),[e]),a.getSnapshot!==t||i||null!==el&&1&el.memoizedState.tag){if(r.flags|=2048,ql(9,Pl.bind(null,r,a,n,t),{destroy:void 0},null),null===ec)throw Error(o(349));l||60&Ya||_l(r,t,n)}return n}function _l(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=Ja.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},Ja.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Pl(e,t,n,r){t.value=n,t.getSnapshot=r,zl(t)&&Nl(e)}function Ll(e,t,n){return n((function(){zl(t)&&Nl(e)}))}function zl(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Wn(e,n)}catch(e){return!0}}function Nl(e){var t=Pr(e,2);null!==t&&Nc(t,0,2)}function Ol(e){var t=vl();if("function"==typeof e){var n=e;if(e=n(),rl){ye(!0);try{n()}finally{ye(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:kl,lastRenderedState:e},t}function Tl(e,t,n,r){return e.baseState=n,Cl(e,Za,"function"==typeof r?r:kl)}function Dl(e,t,n,r,a){if(Ao(e))throw Error(o(485));if(null!==(e=t.action)){var l={payload:a,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){l.listeners.push(e)}};null!==L.T?n(!0):l.isTransition=!1,r(l),null===(n=t.pending)?(l.next=t.pending=l,Il(t,l)):(l.next=n.next,t.pending=n.next=l)}}function Il(e,t){var n=t.action,r=t.payload,a=e.state;if(t.isTransition){var l=L.T,o={};L.T=o;try{var i=n(a,r),u=L.S;null!==u&&u(o,i),Ml(e,t,i)}catch(n){Fl(e,t,n)}finally{L.T=l}}else try{Ml(e,t,l=n(a,r))}catch(n){Fl(e,t,n)}}function Ml(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){Rl(e,t,n)}),(function(n){return Fl(e,t,n)})):Rl(e,t,n)}function Rl(e,t,n){t.status="fulfilled",t.value=n,jl(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,Il(e,n)))}function Fl(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,jl(t),t=t.next}while(t!==r)}e.action=null}function jl(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function Bl(e,t){return t}function Ul(e,t){if(Xr){var n=ec.formState;if(null!==n){e:{var r=Ja;if(Xr){if(Qr){t:{for(var a=Qr,l=Yr;8!==a.nodeType;){if(!l){a=null;break t}if(null===(a=of(a.nextSibling))){a=null;break t}}a="F!"===(l=a.data)||"F"===l?a:null}if(a){Qr=of(a.nextSibling),r="F!"===a.data;break e}}Zr(r)}r=!1}r&&(t=n[0])}}return(n=vl()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Bl,lastRenderedState:t},n.queue=r,n=yo.bind(null,Ja,r),r.dispatch=n,r=Ol(!1),l=wo.bind(null,Ja,!1,r.queue),a={state:t,dispatch:null,action:e,pending:null},(r=vl()).queue=a,n=Dl.bind(null,Ja,a,l,n),a.dispatch=n,r.memoizedState=e,[t,n,!1]}function Hl(e){return Vl(yl(),Za,e)}function Vl(e,t,n){t=Cl(e,t,Bl)[0],e=Sl(kl)[0],t="object"==typeof t&&null!==t&&"function"==typeof t.then?bl(t):t;var r=yl(),a=r.queue,l=a.dispatch;return n!==r.memoizedState&&(Ja.flags|=2048,ql(9,$l.bind(null,a,n),{destroy:void 0},null)),[t,l,e]}function $l(e,t){e.action=t}function Gl(e){var t=yl(),n=Za;if(null!==n)return Vl(t,n,e);yl(),t=t.memoizedState;var r=(n=yl()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function ql(e,t,n,r){return e={tag:e,create:t,inst:n,deps:r,next:null},null===(t=Ja.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},Ja.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Wl(){return yl().memoizedState}function Ql(e,t,n,r){var a=vl();Ja.flags|=e,a.memoizedState=ql(1|t,n,{destroy:void 0},void 0===r?null:r)}function Xl(e,t,n,r){var a=yl();r=void 0===r?null:r;var l=a.memoizedState.inst;null!==Za&&null!==r&&cl(r,Za.memoizedState.deps)?a.memoizedState=ql(t,n,l,r):(Ja.flags|=e,a.memoizedState=ql(1|t,n,l,r))}function Kl(e,t){Ql(8390656,8,e,t)}function Yl(e,t){Xl(2048,8,e,t)}function Jl(e,t){return Xl(4,2,e,t)}function Zl(e,t){return Xl(4,4,e,t)}function eo(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function to(e,t,n){n=null!=n?n.concat([e]):null,Xl(4,4,eo.bind(null,t,e),n)}function no(){}function ro(e,t){var n=yl();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&cl(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function ao(e,t){var n=yl();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&cl(t,r[1]))return r[0];if(r=e(),rl){ye(!0);try{e()}finally{ye(!1)}}return n.memoizedState=[r,t],r}function lo(e,t,n){return void 0===n||1073741824&Ya?e.memoizedState=t:(e.memoizedState=n,e=zc(),Ja.lanes|=e,sc|=e,n)}function oo(e,t,n,r){return Wn(n,t)?n:null!==ka.current?(e=lo(e,n,r),Wn(e,t)||(Vo=!0),e):42&Ya?(e=zc(),Ja.lanes|=e,sc|=e,t):(Vo=!0,e.memoizedState=n)}function io(e,t,n,r,a){var l=U.p;U.p=0!==l&&8>l?l:8;var o,i,u,c=L.T,s={};L.T=s,wo(e,!1,t,n);try{var f=a(),d=L.S;null!==d&&d(s,f),null!==f&&"object"==typeof f&&"function"==typeof f.then?bo(e,t,(o=r,i=[],u={status:"pending",value:null,reason:null,then:function(e){i.push(e)}},f.then((function(){u.status="fulfilled",u.value=o;for(var e=0;e<i.length;e++)(0,i[e])(o)}),(function(e){for(u.status="rejected",u.reason=e,e=0;e<i.length;e++)(0,i[e])(void 0)})),u),Lc()):bo(e,t,r,Lc())}catch(n){bo(e,t,{then:function(){},status:"rejected",reason:n},Lc())}finally{U.p=l,L.T=c}}function uo(){}function co(e,t,n,r){if(5!==e.tag)throw Error(o(476));var a=so(e).queue;io(e,a,t,H,null===n?uo:function(){return fo(e),n(r)})}function so(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:H,baseState:H,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:kl,lastRenderedState:H},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:kl,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function fo(e){bo(e,so(e).next.queue,{},Lc())}function po(){return Ci(Mf)}function ho(){return yl().memoizedState}function mo(){return yl().memoizedState}function go(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Lc(),r=Ni(t,e=zi(n),n);return null!==r&&(Nc(r,0,n),Oi(r,t,n)),t={cache:ja()},void(e.payload=t)}t=t.return}}function vo(e,t,n){var r=Lc();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},Ao(e)?ko(t,n):null!==(n=_r(e,t,n,r))&&(Nc(n,0,r),So(n,t,r))}function yo(e,t,n){bo(e,t,n,Lc())}function bo(e,t,n,r){var a={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(Ao(e))ko(t,a);else{var l=e.alternate;if(0===e.lanes&&(null===l||0===l.lanes)&&null!==(l=t.lastRenderedReducer))try{var o=t.lastRenderedState,i=l(o,n);if(a.hasEagerState=!0,a.eagerState=i,Wn(i,o))return xr(e,t,a,0),null===ec&&Er(),!1}catch(e){}if(null!==(n=_r(e,t,a,r)))return Nc(n,0,r),So(n,t,r),!0}return!1}function wo(e,t,n,r){if(r={lane:2,revertLane:ws(),action:r,hasEagerState:!1,eagerState:null,next:null},Ao(e)){if(t)throw Error(o(479))}else null!==(t=_r(e,n,r,2))&&Nc(t,0,2)}function Ao(e){var t=e.alternate;return e===Ja||null!==t&&t===Ja}function ko(e,t){nl=tl=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function So(e,t,n){if(4194176&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Te(e,n)}}var Co={readContext:Ci,use:wl,useCallback:ul,useContext:ul,useEffect:ul,useImperativeHandle:ul,useLayoutEffect:ul,useInsertionEffect:ul,useMemo:ul,useReducer:ul,useRef:ul,useState:ul,useDebugValue:ul,useDeferredValue:ul,useTransition:ul,useSyncExternalStore:ul,useId:ul};Co.useCacheRefresh=ul,Co.useMemoCache=ul,Co.useHostTransitionStatus=ul,Co.useFormState=ul,Co.useActionState=ul,Co.useOptimistic=ul;var Eo={readContext:Ci,use:wl,useCallback:function(e,t){return vl().memoizedState=[e,void 0===t?null:t],e},useContext:Ci,useEffect:Kl,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,Ql(4194308,4,eo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ql(4194308,4,e,t)},useInsertionEffect:function(e,t){Ql(4,2,e,t)},useMemo:function(e,t){var n=vl();t=void 0===t?null:t;var r=e();if(rl){ye(!0);try{e()}finally{ye(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=vl();if(void 0!==n){var a=n(t);if(rl){ye(!0);try{n(t)}finally{ye(!1)}}}else a=t;return r.memoizedState=r.baseState=a,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:a},r.queue=e,e=e.dispatch=vo.bind(null,Ja,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},vl().memoizedState=e},useState:function(e){var t=(e=Ol(e)).queue,n=yo.bind(null,Ja,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:no,useDeferredValue:function(e,t){return lo(vl(),e,t)},useTransition:function(){var e=Ol(!1);return e=io.bind(null,Ja,e.queue,!0,!1),vl().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=Ja,a=vl();if(Xr){if(void 0===n)throw Error(o(407));n=n()}else{if(n=t(),null===ec)throw Error(o(349));60&nc||_l(r,t,n)}a.memoizedState=n;var l={value:n,getSnapshot:t};return a.queue=l,Kl(Ll.bind(null,r,l,e),[e]),r.flags|=2048,ql(9,Pl.bind(null,r,l,n,t),{destroy:void 0},null),n},useId:function(){var e=vl(),t=ec.identifierPrefix;if(Xr){var n=Hr;t=":"+t+"R"+(n=(Ur&~(1<<32-be(Ur)-1)).toString(32)+n),0<(n=al++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=il++).toString(32)+":";return e.memoizedState=t},useCacheRefresh:function(){return vl().memoizedState=go.bind(null,Ja)}};Eo.useMemoCache=Al,Eo.useHostTransitionStatus=po,Eo.useFormState=Ul,Eo.useActionState=Ul,Eo.useOptimistic=function(e){var t=vl();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=wo.bind(null,Ja,!0,n),n.dispatch=t,[e,t]};var xo={readContext:Ci,use:wl,useCallback:ro,useContext:Ci,useEffect:Yl,useImperativeHandle:to,useInsertionEffect:Jl,useLayoutEffect:Zl,useMemo:ao,useReducer:Sl,useRef:Wl,useState:function(){return Sl(kl)},useDebugValue:no,useDeferredValue:function(e,t){return oo(yl(),Za.memoizedState,e,t)},useTransition:function(){var e=Sl(kl)[0],t=yl().memoizedState;return["boolean"==typeof e?e:bl(e),t]},useSyncExternalStore:xl,useId:ho};xo.useCacheRefresh=mo,xo.useMemoCache=Al,xo.useHostTransitionStatus=po,xo.useFormState=Hl,xo.useActionState=Hl,xo.useOptimistic=function(e,t){return Tl(yl(),0,e,t)};var _o={readContext:Ci,use:wl,useCallback:ro,useContext:Ci,useEffect:Yl,useImperativeHandle:to,useInsertionEffect:Jl,useLayoutEffect:Zl,useMemo:ao,useReducer:El,useRef:Wl,useState:function(){return El(kl)},useDebugValue:no,useDeferredValue:function(e,t){var n=yl();return null===Za?lo(n,e,t):oo(n,Za.memoizedState,e,t)},useTransition:function(){var e=El(kl)[0],t=yl().memoizedState;return["boolean"==typeof e?e:bl(e),t]},useSyncExternalStore:xl,useId:ho};function Po(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:z({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}_o.useCacheRefresh=mo,_o.useMemoCache=Al,_o.useHostTransitionStatus=po,_o.useFormState=Gl,_o.useActionState=Gl,_o.useOptimistic=function(e,t){var n=yl();return null!==Za?Tl(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])};var Lo={isMounted:function(e){return!!(e=e._reactInternals)&&M(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Lc(),a=zi(r);a.payload=t,null!=n&&(a.callback=n),null!==(t=Ni(e,a,r))&&(Nc(t,0,r),Oi(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Lc(),a=zi(r);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Ni(e,a,r))&&(Nc(t,0,r),Oi(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Lc(),r=zi(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=Ni(e,r,n))&&(Nc(t,0,n),Oi(t,e,n))}};function zo(e,t,n,r,a,l,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,l,o):!(t.prototype&&t.prototype.isPureReactComponent&&Qn(n,r)&&Qn(a,l))}function No(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Lo.enqueueReplaceState(t,t.state,null)}function Oo(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var a in n===t&&(n=z({},n)),e)void 0===n[a]&&(n[a]=e[a]);return n}var To="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function Do(e){To(e)}function Io(e){console.error(e)}function Mo(e){To(e)}function Ro(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function Fo(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function jo(e,t,n){return(n=zi(n)).tag=3,n.payload={element:null},n.callback=function(){Ro(e,t)},n}function Bo(e){return(e=zi(e)).tag=3,e}function Uo(e,t,n,r){var a=n.type.getDerivedStateFromError;if("function"==typeof a){var l=r.value;e.payload=function(){return a(l)},e.callback=function(){Fo(t,n,r)}}var o=n.stateNode;null!==o&&"function"==typeof o.componentDidCatch&&(e.callback=function(){Fo(t,n,r),"function"!=typeof a&&(null===Ac?Ac=new Set([this]):Ac.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Ho=Error(o(461)),Vo=!1;function $o(e,t,n,r){t.child=null===e?Aa(t,null,n,r):wa(t,e.child,n,r)}function Go(e,t,n,r,a){n=n.render;var l=t.ref;if("ref"in r){var o={};for(var i in r)"ref"!==i&&(o[i]=r[i])}else o=r;return Si(t),r=sl(e,t,n,o,l,a),i=hl(),null===e||Vo?(Xr&&i&&Gr(t),t.flags|=1,$o(e,t,r,a),t.child):(ml(e,t,a),fi(e,t,a))}function qo(e,t,n,r,a){if(null===e){var l=n.type;return"function"!=typeof l||Iu(l)||void 0!==l.defaultProps||null!==n.compare?((e=Fu(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=l,Wo(e,t,l,r,a))}if(l=e.child,!di(e,a)){var o=l.memoizedProps;if((n=null!==(n=n.compare)?n:Qn)(o,r)&&e.ref===t.ref)return fi(e,t,a)}return t.flags|=1,(e=Mu(l,r)).ref=t.ref,e.return=t,t.child=e}function Wo(e,t,n,r,a){if(null!==e){var l=e.memoizedProps;if(Qn(l,r)&&e.ref===t.ref){if(Vo=!1,t.pendingProps=r=l,!di(e,a))return t.lanes=e.lanes,fi(e,t,a);131072&e.flags&&(Vo=!0)}}return Yo(e,t,n,r,a)}function Qo(e,t,n){var r=t.pendingProps,a=r.children,l=!!(2&t.stateNode._pendingVisibility),o=null!==e?e.memoizedState:null;if(Ko(e,t),"hidden"===r.mode||l){if(128&t.flags){if(r=null!==o?o.baseLanes|n:n,null!==e){for(a=t.child=e.child,l=0;null!==a;)l=l|a.lanes|a.childLanes,a=a.sibling;t.childLanes=l&~r}else t.childLanes=0,t.child=null;return Xo(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Xo(e,t,null!==o?o.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Xa(0,null!==o?o.cachePool:null),null!==o?Ca(t,o):Ea(),za(t)}else null!==o?(Xa(0,o.cachePool),Ca(t,o),Na(),t.memoizedState=null):(null!==e&&Xa(0,null),Ea(),Na());return $o(e,t,a,n),t.child}function Xo(e,t,n,r){var a=Qa();return a=null===a?null:{parent:Fa._currentValue,pool:a},t.memoizedState={baseLanes:n,cachePool:a},null!==e&&Xa(0,null),Ea(),za(t),null!==e&&Ai(e,t,r,!0),null}function Ko(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=2097664);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(o(284));null!==e&&e.ref===n||(t.flags|=2097664)}}function Yo(e,t,n,r,a){return Si(t),n=sl(e,t,n,r,void 0,a),r=hl(),null===e||Vo?(Xr&&r&&Gr(t),t.flags|=1,$o(e,t,n,a),t.child):(ml(e,t,a),fi(e,t,a))}function Jo(e,t,n,r,a,l){return Si(t),t.updateQueue=null,n=dl(t,r,n,a),fl(e),r=hl(),null===e||Vo?(Xr&&r&&Gr(t),t.flags|=1,$o(e,t,n,l),t.child):(ml(e,t,l),fi(e,t,l))}function Zo(e,t,n,r,a){if(Si(t),null===t.stateNode){var l=Nr,o=n.contextType;"object"==typeof o&&null!==o&&(l=Ci(o)),l=new n(r,l),t.memoizedState=null!==l.state&&void 0!==l.state?l.state:null,l.updater=Lo,t.stateNode=l,l._reactInternals=t,(l=t.stateNode).props=r,l.state=t.memoizedState,l.refs={},Pi(t),o=n.contextType,l.context="object"==typeof o&&null!==o?Ci(o):Nr,l.state=t.memoizedState,"function"==typeof(o=n.getDerivedStateFromProps)&&(Po(t,n,o,r),l.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||(o=l.state,"function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount(),o!==l.state&&Lo.enqueueReplaceState(l,l.state,null),Mi(t,r,l,a),Ii(),l.state=t.memoizedState),"function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){l=t.stateNode;var i=t.memoizedProps,u=Oo(n,i);l.props=u;var c=l.context,s=n.contextType;o=Nr,"object"==typeof s&&null!==s&&(o=Ci(s));var f=n.getDerivedStateFromProps;s="function"==typeof f||"function"==typeof l.getSnapshotBeforeUpdate,i=t.pendingProps!==i,s||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(i||c!==o)&&No(t,l,r,o),_i=!1;var d=t.memoizedState;l.state=d,Mi(t,r,l,a),Ii(),c=t.memoizedState,i||d!==c||_i?("function"==typeof f&&(Po(t,n,f,r),c=t.memoizedState),(u=_i||zo(t,n,u,r,d,c,o))?(s||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4194308)):("function"==typeof l.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=c),l.props=r,l.state=c,l.context=o,r=u):("function"==typeof l.componentDidMount&&(t.flags|=4194308),r=!1)}else{l=t.stateNode,Li(e,t),s=Oo(n,o=t.memoizedProps),l.props=s,f=t.pendingProps,d=l.context,c=n.contextType,u=Nr,"object"==typeof c&&null!==c&&(u=Ci(c)),(c="function"==typeof(i=n.getDerivedStateFromProps)||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(o!==f||d!==u)&&No(t,l,r,u),_i=!1,d=t.memoizedState,l.state=d,Mi(t,r,l,a),Ii();var p=t.memoizedState;o!==f||d!==p||_i||null!==e&&null!==e.dependencies&&ki(e.dependencies)?("function"==typeof i&&(Po(t,n,i,r),p=t.memoizedState),(s=_i||zo(t,n,s,r,d,p,u)||null!==e&&null!==e.dependencies&&ki(e.dependencies))?(c||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(r,p,u),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(r,p,u)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof l.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),l.props=r,l.state=p,l.context=u,r=s):("function"!=typeof l.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return l=r,Ko(e,t),r=!!(128&t.flags),l||r?(l=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:l.render(),t.flags|=1,null!==e&&r?(t.child=wa(t,e.child,null,a),t.child=wa(t,null,n,a)):$o(e,t,n,a),t.memoizedState=l.state,e=t.child):e=fi(e,t,a),e}function ei(e,t,n,r){return ra(),t.flags|=256,$o(e,t,n,r),t.child}var ti={dehydrated:null,treeContext:null,retryLane:0};function ni(e){return{baseLanes:e,cachePool:Ka()}}function ri(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=pc),e}function ai(e,t,n){var r,a=t.pendingProps,l=!1,i=!!(128&t.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&!!(2&Ta.current)),r&&(l=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(Xr){if(l?La(t):Na(),Xr){var u,c=Qr;if(u=c){e:{for(u=c,c=Yr;8!==u.nodeType;){if(!c){c=null;break e}if(null===(u=of(u.nextSibling))){c=null;break e}}c=u}null!==c?(t.memoizedState={dehydrated:c,treeContext:null!==Br?{id:Ur,overflow:Hr}:null,retryLane:536870912},(u=Du(18,null,null,0)).stateNode=c,u.return=t,t.child=u,Wr=t,Qr=null,u=!0):u=!1}u||Zr(t)}if(null!==(c=t.memoizedState)&&null!==(c=c.dehydrated))return"$!"===c.data?t.lanes=16:t.lanes=536870912,null;Oa(t)}return c=a.children,a=a.fallback,l?(Na(),c=oi({mode:"hidden",children:c},l=t.mode),a=ju(a,l,n,null),c.return=t,a.return=t,c.sibling=a,t.child=c,(l=t.child).memoizedState=ni(n),l.childLanes=ri(e,r,n),t.memoizedState=ti,a):(La(t),li(t,c))}if(null!==(u=e.memoizedState)&&null!==(c=u.dehydrated)){if(i)256&t.flags?(La(t),t.flags&=-257,t=ii(e,t,n)):null!==t.memoizedState?(Na(),t.child=e.child,t.flags|=128,t=null):(Na(),l=a.fallback,c=t.mode,a=oi({mode:"visible",children:a.children},c),(l=ju(l,c,n,null)).flags|=2,a.return=t,l.return=t,a.sibling=l,t.child=a,wa(t,e.child,null,n),(a=t.child).memoizedState=ni(n),a.childLanes=ri(e,r,n),t.memoizedState=ti,t=l);else if(La(t),"$!"===c.data){if(r=c.nextSibling&&c.nextSibling.dataset)var s=r.dgst;r=s,(a=Error(o(419))).stack="",a.digest=r,aa({value:a,source:null,stack:null}),t=ii(e,t,n)}else if(Vo||Ai(e,t,n,!1),r=!!(n&e.childLanes),Vo||r){if(null!==(r=ec)){if(42&(a=n&-n))a=1;else switch(a){case 2:a=1;break;case 8:a=4;break;case 32:a=16;break;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:a=64;break;case 268435456:a=134217728;break;default:a=0}if(0!==(a=a&(r.suspendedLanes|n)?0:a)&&a!==u.retryLane)throw u.retryLane=a,Pr(e,a),Nc(r,0,a),Ho}"$?"===c.data||Vc(),t=ii(e,t,n)}else"$?"===c.data?(t.flags|=128,t.child=e.child,t=os.bind(null,e),c._reactRetry=t,t=null):(e=u.treeContext,Qr=of(c.nextSibling),Wr=t,Xr=!0,Kr=null,Yr=!1,null!==e&&(Fr[jr++]=Ur,Fr[jr++]=Hr,Fr[jr++]=Br,Ur=e.id,Hr=e.overflow,Br=t),(t=li(t,a.children)).flags|=4096);return t}return l?(Na(),l=a.fallback,c=t.mode,s=(u=e.child).sibling,(a=Mu(u,{mode:"hidden",children:a.children})).subtreeFlags=31457280&u.subtreeFlags,null!==s?l=Mu(s,l):(l=ju(l,c,n,null)).flags|=2,l.return=t,a.return=t,a.sibling=l,t.child=a,a=l,l=t.child,null===(c=e.child.memoizedState)?c=ni(n):(null!==(u=c.cachePool)?(s=Fa._currentValue,u=u.parent!==s?{parent:s,pool:s}:u):u=Ka(),c={baseLanes:c.baseLanes|n,cachePool:u}),l.memoizedState=c,l.childLanes=ri(e,r,n),t.memoizedState=ti,a):(La(t),e=(n=e.child).sibling,(n=Mu(n,{mode:"visible",children:a.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function li(e,t){return(t=oi({mode:"visible",children:t},e.mode)).return=e,e.child=t}function oi(e,t){return Bu(e,t,0,null)}function ii(e,t,n){return wa(t,e.child,null,n),(e=li(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function ui(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),bi(e.return,t,n)}function ci(e,t,n,r,a){var l=e.memoizedState;null===l?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(l.isBackwards=t,l.rendering=null,l.renderingStartTime=0,l.last=r,l.tail=n,l.tailMode=a)}function si(e,t,n){var r=t.pendingProps,a=r.revealOrder,l=r.tail;if($o(e,t,r.children,n),2&(r=Ta.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ui(e,n,t);else if(19===e.tag)ui(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(W(Ta,r),a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Da(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),ci(t,!1,a,n,l);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Da(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}ci(t,!0,n,null,l);break;case"together":ci(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function fi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),sc|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(Ai(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=Mu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Mu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function di(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!ki(e))}function pi(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)Vo=!0;else{if(!(di(e,n)||128&t.flags))return Vo=!1,function(e,t,n){switch(t.tag){case 3:J(t,t.stateNode.containerInfo),vi(0,Fa,e.memoizedState.cache),ra();break;case 27:case 5:ee(t);break;case 4:J(t,t.stateNode.containerInfo);break;case 10:vi(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(La(t),t.flags|=128,null):n&t.child.childLanes?ai(e,t,n):(La(t),null!==(e=fi(e,t,n))?e.sibling:null);La(t);break;case 19:var a=!!(128&e.flags);if((r=!!(n&t.childLanes))||(Ai(e,t,n,!1),r=!!(n&t.childLanes)),a){if(r)return si(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),W(Ta,Ta.current),r)break;return null;case 22:case 23:return t.lanes=0,Qo(e,t,n);case 24:vi(0,Fa,e.memoizedState.cache)}return fi(e,t,n)}(e,t,n);Vo=!!(131072&e.flags)}else Vo=!1,Xr&&1048576&t.flags&&$r(t,Rr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,a=r._init;if(r=a(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((a=r.$$typeof)===g){t.tag=11,t=Go(null,t,r,e,n);break e}if(a===b){t.tag=14,t=qo(null,t,r,e,n);break e}}throw t=x(r)||r,Error(o(306,t,""))}Iu(r)?(e=Oo(r,e),t.tag=1,t=Zo(null,t,r,e,n)):(t.tag=0,t=Yo(null,t,r,e,n))}return t;case 0:return Yo(e,t,t.type,t.pendingProps,n);case 1:return Zo(e,t,r=t.type,a=Oo(r,t.pendingProps),n);case 3:e:{if(J(t,t.stateNode.containerInfo),null===e)throw Error(o(387));var l=t.pendingProps;r=(a=t.memoizedState).element,Li(e,t),Mi(t,l,null,n);var i=t.memoizedState;if(l=i.cache,vi(0,Fa,l),l!==a.cache&&wi(t,[Fa],n,!0),Ii(),l=i.element,a.isDehydrated){if(a={element:l,isDehydrated:!1,cache:i.cache},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=ei(e,t,l,n);break e}if(l!==r){aa(r=Tr(Error(o(424)),t)),t=ei(e,t,l,n);break e}for(Qr=of(t.stateNode.containerInfo.firstChild),Wr=t,Xr=!0,Kr=null,Yr=!0,n=Aa(t,null,l,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ra(),l===r){t=fi(e,t,n);break e}$o(e,t,l,n)}t=t.child}return t;case 26:return Ko(e,t),null===e?(n=gf(t.type,null,t.pendingProps,null))?t.memoizedState=n:Xr||(n=t.type,e=t.pendingProps,(r=Qs(K.current).createElement(n))[Re]=t,r[Fe]=e,Gs(r,n,e),Ke(r),t.stateNode=r):t.memoizedState=gf(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return ee(t),null===e&&Xr&&(r=t.stateNode=cf(t.type,t.pendingProps,K.current),Wr=t,Yr=!0,Qr=of(r.firstChild)),r=t.pendingProps.children,null!==e||Xr?$o(e,t,r,n):t.child=wa(t,null,r,n),Ko(e,t),t.child;case 5:return null===e&&Xr&&((a=r=Qr)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var a=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[$e])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(l=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(l!==a.rel||e.getAttribute("href")!==(null==a.href?null:a.href)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin)||e.getAttribute("title")!==(null==a.title?null:a.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((l=e.getAttribute("src"))!==(null==a.src?null:a.src)||e.getAttribute("type")!==(null==a.type?null:a.type)||e.getAttribute("crossorigin")!==(null==a.crossOrigin?null:a.crossOrigin))&&l&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var l=null==a.name?null:""+a.name;if("hidden"===a.type&&e.getAttribute("name")===l)return e}if(null===(e=of(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,Yr))?(t.stateNode=r,Wr=t,Qr=of(r.firstChild),Yr=!1,a=!0):a=!1),a||Zr(t)),ee(t),a=t.type,l=t.pendingProps,i=null!==e?e.memoizedProps:null,r=l.children,Ys(a,l)?r=null:null!==i&&Ys(a,i)&&(t.flags|=32),null!==t.memoizedState&&(a=sl(e,t,pl,null,null,n),Mf._currentValue=a),Ko(e,t),$o(e,t,r,n),t.child;case 6:return null===e&&Xr&&((e=n=Qr)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=of(e.nextSibling)))return null}return e}(n,t.pendingProps,Yr))?(t.stateNode=n,Wr=t,Qr=null,e=!0):e=!1),e||Zr(t)),null;case 13:return ai(e,t,n);case 4:return J(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=wa(t,null,r,n):$o(e,t,r,n),t.child;case 11:return Go(e,t,t.type,t.pendingProps,n);case 7:return $o(e,t,t.pendingProps,n),t.child;case 8:case 12:return $o(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,vi(0,t.type,r.value),$o(e,t,r.children,n),t.child;case 9:return a=t.type._context,r=t.pendingProps.children,Si(t),r=r(a=Ci(a)),t.flags|=1,$o(e,t,r,n),t.child;case 14:return qo(e,t,t.type,t.pendingProps,n);case 15:return Wo(e,t,t.type,t.pendingProps,n);case 19:return si(e,t,n);case 22:return Qo(e,t,n);case 24:return Si(t),r=Ci(Fa),null===e?(null===(a=Qa())&&(a=ec,l=ja(),a.pooledCache=l,l.refCount++,null!==l&&(a.pooledCacheLanes|=n),a=l),t.memoizedState={parent:r,cache:a},Pi(t),vi(0,Fa,a)):(!!(e.lanes&n)&&(Li(e,t),Mi(t,null,null,n),Ii()),a=e.memoizedState,l=t.memoizedState,a.parent!==r?(a={parent:r,cache:r},t.memoizedState=a,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=a),vi(0,Fa,r)):(r=l.cache,vi(0,Fa,r),r!==a.cache&&wi(t,[Fa],n,!0))),$o(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(o(156,t.tag))}var hi=G(null),mi=null,gi=null;function vi(e,t,n){W(hi,t._currentValue),t._currentValue=n}function yi(e){e._currentValue=hi.current,q(hi)}function bi(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function wi(e,t,n,r){var a=e.child;for(null!==a&&(a.return=e);null!==a;){var l=a.dependencies;if(null!==l){var i=a.child;l=l.firstContext;e:for(;null!==l;){var u=l;l=a;for(var c=0;c<t.length;c++)if(u.context===t[c]){l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),bi(l.return,n,e),r||(i=null);break e}l=u.next}}else if(18===a.tag){if(null===(i=a.return))throw Error(o(341));i.lanes|=n,null!==(l=i.alternate)&&(l.lanes|=n),bi(i,n,e),i=null}else i=a.child;if(null!==i)i.return=a;else for(i=a;null!==i;){if(i===e){i=null;break}if(null!==(a=i.sibling)){a.return=i.return,i=a;break}i=i.return}a=i}}function Ai(e,t,n,r){e=null;for(var a=t,l=!1;null!==a;){if(!l)if(524288&a.flags)l=!0;else if(262144&a.flags)break;if(10===a.tag){var i=a.alternate;if(null===i)throw Error(o(387));if(null!==(i=i.memoizedProps)){var u=a.type;Wn(a.pendingProps.value,i.value)||(null!==e?e.push(u):e=[u])}}else if(a===Y.current){if(null===(i=a.alternate))throw Error(o(387));i.memoizedState.memoizedState!==a.memoizedState.memoizedState&&(null!==e?e.push(Mf):e=[Mf])}a=a.return}null!==e&&wi(t,e,n,r),t.flags|=262144}function ki(e){for(e=e.firstContext;null!==e;){if(!Wn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Si(e){mi=e,gi=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function Ci(e){return xi(mi,e)}function Ei(e,t){return null===mi&&Si(e),xi(e,t)}function xi(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===gi){if(null===e)throw Error(o(308));gi=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else gi=gi.next=t;return n}var _i=!1;function Pi(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function Li(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function zi(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function Ni(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Zu){var a=r.pending;return null===a?t.next=t:(t.next=a.next,a.next=t),r.pending=t,t=zr(e),Lr(e,null,n),t}return xr(e,r,t,n),zr(e)}function Oi(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194176&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Te(e,n)}}function Ti(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,l=null;if(null!==(n=n.firstBaseUpdate)){do{var o={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===l?a=l=o:l=l.next=o,n=n.next}while(null!==n);null===l?a=l=t:l=l.next=t}else a=l=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:l,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var Di=!1;function Ii(){if(Di&&null!==$a)throw $a}function Mi(e,t,n,r){Di=!1;var a=e.updateQueue;_i=!1;var l=a.firstBaseUpdate,o=a.lastBaseUpdate,i=a.shared.pending;if(null!==i){a.shared.pending=null;var u=i,c=u.next;u.next=null,null===o?l=c:o.next=c,o=u;var s=e.alternate;null!==s&&(i=(s=s.updateQueue).lastBaseUpdate)!==o&&(null===i?s.firstBaseUpdate=c:i.next=c,s.lastBaseUpdate=u)}if(null!==l){var f=a.baseState;for(o=0,s=c=u=null,i=l;;){var d=-536870913&i.lane,p=d!==i.lane;if(p?(nc&d)===d:(r&d)===d){0!==d&&d===Va&&(Di=!0),null!==s&&(s=s.next={lane:0,tag:i.tag,payload:i.payload,callback:null,next:null});e:{var h=e,m=i;d=t;var g=n;switch(m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(g,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(g,f,d):h))break e;f=z({},f,d);break e;case 2:_i=!0}}null!==(d=i.callback)&&(e.flags|=64,p&&(e.flags|=8192),null===(p=a.callbacks)?a.callbacks=[d]:p.push(d))}else p={lane:d,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===s?(c=s=p,u=f):s=s.next=p,o|=d;if(null===(i=i.next)){if(null===(i=a.shared.pending))break;i=(p=i).next,p.next=null,a.lastBaseUpdate=p,a.shared.pending=null}}null===s&&(u=f),a.baseState=u,a.firstBaseUpdate=c,a.lastBaseUpdate=s,null===l&&(a.shared.lanes=0),sc|=o,e.lanes=o,e.memoizedState=f}}function Ri(e,t){if("function"!=typeof e)throw Error(o(191,e));e.call(t)}function Fi(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)Ri(n[e],t)}function ji(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var a=r.next;n=a;do{if((n.tag&e)===e){r=void 0;var l=n.create,o=n.inst;r=l(),o.destroy=r}n=n.next}while(n!==a)}}catch(e){ns(t,t.return,e)}}function Bi(e,t,n){try{var r=t.updateQueue,a=null!==r?r.lastEffect:null;if(null!==a){var l=a.next;r=l;do{if((r.tag&e)===e){var o=r.inst,i=o.destroy;if(void 0!==i){o.destroy=void 0,a=t;var u=n;try{i()}catch(e){ns(a,u,e)}}}r=r.next}while(r!==l)}}catch(e){ns(t,t.return,e)}}function Ui(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{Fi(t,n)}catch(t){ns(e,e.return,t)}}}function Hi(e,t,n){n.props=Oo(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){ns(e,t,n)}}function Vi(e,t){try{var n=e.ref;if(null!==n){var r=e.stateNode;switch(e.tag){case 26:case 27:case 5:var a=r;break;default:a=r}"function"==typeof n?e.refCleanup=n(a):n.current=a}}catch(n){ns(e,t,n)}}function $i(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){ns(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){ns(e,t,n)}else n.current=null}function Gi(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){ns(e,e.return,t)}}function qi(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var a=null,l=null,i=null,u=null,c=null,s=null,f=null;for(h in n){var d=n[h];if(n.hasOwnProperty(h)&&null!=d)switch(h){case"checked":case"value":break;case"defaultValue":c=d;default:r.hasOwnProperty(h)||Vs(e,t,h,null,r,d)}}for(var p in r){var h=r[p];if(d=n[p],r.hasOwnProperty(p)&&(null!=h||null!=d))switch(p){case"type":l=h;break;case"name":a=h;break;case"checked":s=h;break;case"defaultChecked":f=h;break;case"value":i=h;break;case"defaultValue":u=h;break;case"children":case"dangerouslySetInnerHTML":if(null!=h)throw Error(o(137,t));break;default:h!==d&&Vs(e,t,p,h,r,d)}}return void mt(e,i,u,c,s,f,l,a);case"select":for(l in h=i=u=p=null,n)if(c=n[l],n.hasOwnProperty(l)&&null!=c)switch(l){case"value":break;case"multiple":h=c;default:r.hasOwnProperty(l)||Vs(e,t,l,null,r,c)}for(a in r)if(l=r[a],c=n[a],r.hasOwnProperty(a)&&(null!=l||null!=c))switch(a){case"value":p=l;break;case"defaultValue":u=l;break;case"multiple":i=l;default:l!==c&&Vs(e,t,a,l,r,c)}return t=u,n=i,r=h,void(null!=p?yt(e,!!n,p,!1):!!r!=!!n&&(null!=t?yt(e,!!n,t,!0):yt(e,!!n,n?[]:"",!1)));case"textarea":for(u in h=p=null,n)if(a=n[u],n.hasOwnProperty(u)&&null!=a&&!r.hasOwnProperty(u))switch(u){case"value":case"children":break;default:Vs(e,t,u,null,r,a)}for(i in r)if(a=r[i],l=n[i],r.hasOwnProperty(i)&&(null!=a||null!=l))switch(i){case"value":p=a;break;case"defaultValue":h=a;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=a)throw Error(o(91));break;default:a!==l&&Vs(e,t,i,a,r,l)}return void bt(e,p,h);case"option":for(var m in n)p=n[m],n.hasOwnProperty(m)&&null!=p&&!r.hasOwnProperty(m)&&("selected"===m?e.selected=!1:Vs(e,t,m,null,r,p));for(c in r)p=r[c],h=n[c],!r.hasOwnProperty(c)||p===h||null==p&&null==h||("selected"===c?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Vs(e,t,c,p,r,h));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&Vs(e,t,g,null,r,p);for(s in r)if(p=r[s],h=n[s],r.hasOwnProperty(s)&&p!==h&&(null!=p||null!=h))switch(s){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(o(137,t));break;default:Vs(e,t,s,p,r,h)}return;default:if(Et(t)){for(var v in n)p=n[v],n.hasOwnProperty(v)&&void 0!==p&&!r.hasOwnProperty(v)&&$s(e,t,v,void 0,r,p);for(f in r)p=r[f],h=n[f],!r.hasOwnProperty(f)||p===h||void 0===p&&void 0===h||$s(e,t,f,p,r,h);return}}for(var y in n)p=n[y],n.hasOwnProperty(y)&&null!=p&&!r.hasOwnProperty(y)&&Vs(e,t,y,null,r,p);for(d in r)p=r[d],h=n[d],!r.hasOwnProperty(d)||p===h||null==p&&null==h||Vs(e,t,d,p,r,h)}(r,e.type,n,t),r[Fe]=t}catch(t){ns(e,e.return,t)}}function Wi(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag||4===e.tag}function Qi(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Wi(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&27!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Xi(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Hs));else if(4!==r&&27!==r&&null!==(e=e.child))for(Xi(e,t,n),e=e.sibling;null!==e;)Xi(e,t,n),e=e.sibling}function Ki(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&27!==r&&null!==(e=e.child))for(Ki(e,t,n),e=e.sibling;null!==e;)Ki(e,t,n),e=e.sibling}var Yi=!1,Ji=!1,Zi=!1,eu="function"==typeof WeakSet?WeakSet:Set,tu=null,nu=!1;function ru(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:gu(e,n),4&r&&ji(5,n);break;case 1:if(gu(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){ns(n,n.return,e)}else{var a=Oo(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(a,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){ns(n,n.return,e)}}64&r&&Ui(n),512&r&&Vi(n,n.return);break;case 3:if(gu(e,n),64&r&&null!==(r=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:e=n.child.stateNode}try{Fi(r,e)}catch(e){ns(n,n.return,e)}}break;case 26:gu(e,n),512&r&&Vi(n,n.return);break;case 27:case 5:gu(e,n),null===t&&4&r&&Gi(n),512&r&&Vi(n,n.return);break;case 12:default:gu(e,n);break;case 13:gu(e,n),4&r&&cu(e,n);break;case 22:if(!(a=null!==n.memoizedState||Yi)){t=null!==t&&null!==t.memoizedState||Ji;var l=Yi,o=Ji;Yi=a,(Ji=t)&&!o?yu(e,n,!!(8772&n.subtreeFlags)):gu(e,n),Yi=l,Ji=o}512&r&&("manual"===n.memoizedProps.mode?Vi(n,n.return):$i(n,n.return))}}function au(e){var t=e.alternate;null!==t&&(e.alternate=null,au(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&Ge(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var lu=null,ou=!1;function iu(e,t,n){for(n=n.child;null!==n;)uu(e,t,n),n=n.sibling}function uu(e,t,n){if(ve&&"function"==typeof ve.onCommitFiberUnmount)try{ve.onCommitFiberUnmount(ge,n)}catch(e){}switch(n.tag){case 26:Ji||$i(n,t),iu(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:Ji||$i(n,t);var r=lu,a=ou;for(lu=n.stateNode,iu(e,t,n),t=(n=n.stateNode).attributes;t.length;)n.removeAttributeNode(t[0]);Ge(n),lu=r,ou=a;break;case 5:Ji||$i(n,t);case 6:a=lu;var l=ou;if(lu=null,iu(e,t,n),ou=l,null!==(lu=a))if(ou)try{e=lu,r=n.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)}catch(e){ns(n,t,e)}else try{lu.removeChild(n.stateNode)}catch(e){ns(n,t,e)}break;case 18:null!==lu&&(ou?(t=lu,n=n.stateNode,8===t.nodeType?af(t.parentNode,n):1===t.nodeType&&af(t,n),pd(t)):af(lu,n.stateNode));break;case 4:r=lu,a=ou,lu=n.stateNode.containerInfo,ou=!0,iu(e,t,n),lu=r,ou=a;break;case 0:case 11:case 14:case 15:Ji||Bi(2,n,t),Ji||Bi(4,n,t),iu(e,t,n);break;case 1:Ji||($i(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&Hi(n,t,r)),iu(e,t,n);break;case 21:iu(e,t,n);break;case 22:Ji||$i(n,t),Ji=(r=Ji)||null!==n.memoizedState,iu(e,t,n),Ji=r;break;default:iu(e,t,n)}}function cu(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{pd(e)}catch(e){ns(t,t.return,e)}}function su(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new eu),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new eu),t;default:throw Error(o(435,e.tag))}}(e);t.forEach((function(t){var r=is.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function fu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r],l=e,i=t,u=i;e:for(;null!==u;){switch(u.tag){case 27:case 5:lu=u.stateNode,ou=!1;break e;case 3:case 4:lu=u.stateNode.containerInfo,ou=!0;break e}u=u.return}if(null===lu)throw Error(o(160));uu(l,i,a),lu=null,ou=!1,null!==(l=a.alternate)&&(l.return=null),a.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)pu(t,e),t=t.sibling}var du=null;function pu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:fu(t,e),hu(e),4&r&&(Bi(3,e,e.return),ji(3,e),Bi(5,e,e.return));break;case 1:fu(t,e),hu(e),512&r&&(Ji||null===n||$i(n,n.return)),64&r&&Yi&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var a=du;if(fu(t,e),hu(e),512&r&&(Ji||null===n||$i(n,n.return)),4&r){var l=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,a=a.ownerDocument||a;t:switch(r){case"title":(!(l=a.getElementsByTagName("title")[0])||l[$e]||l[Re]||"http://www.w3.org/2000/svg"===l.namespaceURI||l.hasAttribute("itemprop"))&&(l=a.createElement(r),a.head.insertBefore(l,a.querySelector("head > title"))),Gs(l,r,n),l[Re]=e,Ke(l),r=l;break e;case"link":var i=_f("link","href",a).get(r+(n.href||""));if(i)for(var u=0;u<i.length;u++)if((l=i[u]).getAttribute("href")===(null==n.href?null:n.href)&&l.getAttribute("rel")===(null==n.rel?null:n.rel)&&l.getAttribute("title")===(null==n.title?null:n.title)&&l.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){i.splice(u,1);break t}Gs(l=a.createElement(r),r,n),a.head.appendChild(l);break;case"meta":if(i=_f("meta","content",a).get(r+(n.content||"")))for(u=0;u<i.length;u++)if((l=i[u]).getAttribute("content")===(null==n.content?null:""+n.content)&&l.getAttribute("name")===(null==n.name?null:n.name)&&l.getAttribute("property")===(null==n.property?null:n.property)&&l.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&l.getAttribute("charset")===(null==n.charSet?null:n.charSet)){i.splice(u,1);break t}Gs(l=a.createElement(r),r,n),a.head.appendChild(l);break;default:throw Error(o(468,r))}l[Re]=e,Ke(l),r=l}e.stateNode=r}else Pf(a,e.type,e.stateNode);else e.stateNode=kf(a,r,e.memoizedProps);else l!==r?(null===l?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):l.count--,null===r?Pf(a,e.type,e.stateNode):kf(a,r,e.memoizedProps)):null===r&&null!==e.stateNode&&qi(e,e.memoizedProps,n.memoizedProps)}break;case 27:if(4&r&&null===e.alternate){a=e.stateNode,l=e.memoizedProps;try{for(var c=a.firstChild;c;){var s=c.nextSibling,f=c.nodeName;c[$e]||"HEAD"===f||"BODY"===f||"SCRIPT"===f||"STYLE"===f||"LINK"===f&&"stylesheet"===c.rel.toLowerCase()||a.removeChild(c),c=s}for(var d=e.type,p=a.attributes;p.length;)a.removeAttributeNode(p[0]);Gs(a,d,l),a[Re]=e,a[Fe]=l}catch(t){ns(e,e.return,t)}}case 5:if(fu(t,e),hu(e),512&r&&(Ji||null===n||$i(n,n.return)),32&e.flags){a=e.stateNode;try{At(a,"")}catch(t){ns(e,e.return,t)}}4&r&&null!=e.stateNode&&qi(e,a=e.memoizedProps,null!==n?n.memoizedProps:a),1024&r&&(Zi=!0);break;case 6:if(fu(t,e),hu(e),4&r){if(null===e.stateNode)throw Error(o(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){ns(e,e.return,t)}}break;case 3:if(xf=null,a=du,du=df(t.containerInfo),fu(t,e),du=a,hu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{pd(t.containerInfo)}catch(t){ns(e,e.return,t)}Zi&&(Zi=!1,mu(e));break;case 4:r=du,du=df(e.stateNode.containerInfo),fu(t,e),hu(e),du=r;break;case 12:fu(t,e),hu(e);break;case 13:fu(t,e),hu(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(yc=ie()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,su(e,r));break;case 22:if(512&r&&(Ji||null===n||$i(n,n.return)),c=null!==e.memoizedState,s=null!==n&&null!==n.memoizedState,Yi=(f=Yi)||c,Ji=(d=Ji)||s,fu(t,e),Ji=d,Yi=f,hu(e),(t=e.stateNode)._current=e,t._visibility&=-3,t._visibility|=2&t._pendingVisibility,8192&r&&(t._visibility=c?-2&t._visibility:1|t._visibility,c&&(t=Yi||Ji,null===n||s||t||vu(e)),null===e.memoizedProps||"manual"!==e.memoizedProps.mode))e:for(n=null,t=e;;){if(5===t.tag||26===t.tag||27===t.tag){if(null===n){s=n=t;try{if(a=s.stateNode,c)"function"==typeof(l=a.style).setProperty?l.setProperty("display","none","important"):l.display="none";else{i=s.stateNode;var h=null!=(u=s.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null;i.style.display=null==h||"boolean"==typeof h?"":(""+h).trim()}}catch(e){ns(s,s.return,e)}}}else if(6===t.tag){if(null===n){s=t;try{s.stateNode.nodeValue=c?"":s.memoizedProps}catch(e){ns(s,s.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,su(e,n));break;case 19:fu(t,e),hu(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,su(e,r));break;case 21:break;default:fu(t,e),hu(e)}}function hu(e){var t=e.flags;if(2&t){try{if(27!==e.tag){e:{for(var n=e.return;null!==n;){if(Wi(n)){var r=n;break e}n=n.return}throw Error(o(160))}switch(r.tag){case 27:var a=r.stateNode;Ki(e,Qi(e),a);break;case 5:var l=r.stateNode;32&r.flags&&(At(l,""),r.flags&=-33),Ki(e,Qi(e),l);break;case 3:case 4:var i=r.stateNode.containerInfo;Xi(e,Qi(e),i);break;default:throw Error(o(161))}}}catch(t){ns(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function mu(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;mu(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function gu(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)ru(e,t.alternate,t),t=t.sibling}function vu(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:Bi(4,t,t.return),vu(t);break;case 1:$i(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&Hi(t,t.return,n),vu(t);break;case 26:case 27:case 5:$i(t,t.return),vu(t);break;case 22:$i(t,t.return),null===t.memoizedState&&vu(t);break;default:vu(t)}e=e.sibling}}function yu(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,a=e,l=t,o=l.flags;switch(l.tag){case 0:case 11:case 15:yu(a,l,n),ji(4,l);break;case 1:if(yu(a,l,n),"function"==typeof(a=(r=l).stateNode).componentDidMount)try{a.componentDidMount()}catch(e){ns(r,r.return,e)}if(null!==(a=(r=l).updateQueue)){var i=r.stateNode;try{var u=a.shared.hiddenCallbacks;if(null!==u)for(a.shared.hiddenCallbacks=null,a=0;a<u.length;a++)Ri(u[a],i)}catch(e){ns(r,r.return,e)}}n&&64&o&&Ui(l),Vi(l,l.return);break;case 26:case 27:case 5:yu(a,l,n),n&&null===r&&4&o&&Gi(l),Vi(l,l.return);break;case 12:default:yu(a,l,n);break;case 13:yu(a,l,n),n&&4&o&&cu(a,l);break;case 22:null===l.memoizedState&&yu(a,l,n),Vi(l,l.return)}t=t.sibling}}function bu(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&Ba(n))}function wu(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Ba(e))}function Au(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)ku(e,t,n,r),t=t.sibling}function ku(e,t,n,r){var a=t.flags;switch(t.tag){case 0:case 11:case 15:Au(e,t,n,r),2048&a&&ji(9,t);break;case 3:Au(e,t,n,r),2048&a&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Ba(e)));break;case 12:if(2048&a){Au(e,t,n,r),e=t.stateNode;try{var l=t.memoizedProps,o=l.id,i=l.onPostCommit;"function"==typeof i&&i(o,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){ns(t,t.return,e)}}else Au(e,t,n,r);break;case 23:break;case 22:l=t.stateNode,null!==t.memoizedState?4&l._visibility?Au(e,t,n,r):Cu(e,t):4&l._visibility?Au(e,t,n,r):(l._visibility|=4,Su(e,t,n,r,!!(10256&t.subtreeFlags))),2048&a&&bu(t.alternate,t);break;case 24:Au(e,t,n,r),2048&a&&wu(t.alternate,t);break;default:Au(e,t,n,r)}}function Su(e,t,n,r,a){for(a=a&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var l=e,o=t,i=n,u=r,c=o.flags;switch(o.tag){case 0:case 11:case 15:Su(l,o,i,u,a),ji(8,o);break;case 23:break;case 22:var s=o.stateNode;null!==o.memoizedState?4&s._visibility?Su(l,o,i,u,a):Cu(l,o):(s._visibility|=4,Su(l,o,i,u,a)),a&&2048&c&&bu(o.alternate,o);break;case 24:Su(l,o,i,u,a),a&&2048&c&&wu(o.alternate,o);break;default:Su(l,o,i,u,a)}t=t.sibling}}function Cu(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,a=r.flags;switch(r.tag){case 22:Cu(n,r),2048&a&&bu(r.alternate,r);break;case 24:Cu(n,r),2048&a&&wu(r.alternate,r);break;default:Cu(n,r)}t=t.sibling}}var Eu=8192;function xu(e){if(e.subtreeFlags&Eu)for(e=e.child;null!==e;)_u(e),e=e.sibling}function _u(e){switch(e.tag){case 26:xu(e),e.flags&Eu&&null!==e.memoizedState&&function(e,t,n){if(null===zf)throw Error(o(475));var r=zf;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var a=vf(n.href),l=e.querySelector(yf(a));if(l)return null!==(e=l._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Of.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=l,void Ke(l);l=e.ownerDocument||e,n=bf(n),(a=sf.get(a))&&Cf(n,a),Ke(l=l.createElement("link"));var i=l;i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),Gs(l,"link",n),t.instance=l}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=Of.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(du,e.memoizedState,e.memoizedProps);break;case 5:default:xu(e);break;case 3:case 4:var t=du;du=df(e.stateNode.containerInfo),xu(e),du=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=Eu,Eu=16777216,xu(e),Eu=t):xu(e))}}function Pu(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Lu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];tu=r,Ou(r,e)}Pu(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)zu(e),e=e.sibling}function zu(e){switch(e.tag){case 0:case 11:case 15:Lu(e),2048&e.flags&&Bi(9,e,e.return);break;case 3:case 12:default:Lu(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&4&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-5,Nu(e)):Lu(e)}}function Nu(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];tu=r,Ou(r,e)}Pu(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:Bi(8,t,t.return),Nu(t);break;case 22:4&(n=t.stateNode)._visibility&&(n._visibility&=-5,Nu(t));break;default:Nu(t)}e=e.sibling}}function Ou(e,t){for(;null!==tu;){var n=tu;switch(n.tag){case 0:case 11:case 15:Bi(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Ba(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,tu=r;else e:for(n=e;null!==tu;){var a=(r=tu).sibling,l=r.return;if(au(r),r===n){tu=null;break e}if(null!==a){a.return=l,tu=a;break e}tu=l}}}function Tu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Du(e,t,n,r){return new Tu(e,t,n,r)}function Iu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Mu(e,t){var n=e.alternate;return null===n?((n=Du(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=31457280&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Ru(e,t){e.flags&=31457282;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function Fu(e,t,n,r,a,l){var i=0;if(r=e,"function"==typeof e)Iu(e)&&(i=1);else if("string"==typeof e)i=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,Q.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case s:return ju(n.children,a,l,t);case f:i=8,a|=24;break;case d:return(e=Du(12,n,t,2|a)).elementType=d,e.lanes=l,e;case v:return(e=Du(13,n,t,a)).elementType=v,e.lanes=l,e;case y:return(e=Du(19,n,t,a)).elementType=y,e.lanes=l,e;case A:return Bu(n,a,l,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case p:case m:i=10;break e;case h:i=9;break e;case g:i=11;break e;case b:i=14;break e;case w:i=16,r=null;break e}i=29,n=Error(o(130,null===e?"null":typeof e,"")),r=null}return(t=Du(i,n,t,a)).elementType=e,t.type=r,t.lanes=l,t}function ju(e,t,n,r){return(e=Du(7,e,r,t)).lanes=n,e}function Bu(e,t,n,r){(e=Du(22,e,r,t)).elementType=A,e.lanes=n;var a={_visibility:1,_pendingVisibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null,_current:null,detach:function(){var e=a._current;if(null===e)throw Error(o(456));if(!(2&a._pendingVisibility)){var t=Pr(e,2);null!==t&&(a._pendingVisibility|=2,Nc(t,0,2))}},attach:function(){var e=a._current;if(null===e)throw Error(o(456));if(2&a._pendingVisibility){var t=Pr(e,2);null!==t&&(a._pendingVisibility&=-3,Nc(t,0,2))}}};return e.stateNode=a,e}function Uu(e,t,n){return(e=Du(6,e,null,t)).lanes=n,e}function Hu(e,t,n){return(t=Du(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Vu(e){e.flags|=4}function $u(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Lf(t)){if(null!==(t=_a.current)&&((4194176&nc)===nc?null!==Pa:(62914560&nc)!==nc&&!(536870912&nc)||t!==Pa))throw fa=ia,oa;e.flags|=8192}}function Gu(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?Le():536870912,e.lanes|=t,hc|=t)}function qu(e,t){if(!Xr)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Wu(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=31457280&a.subtreeFlags,r|=31457280&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Qu(e,t,n){var r=t.pendingProps;switch(qr(t),t.tag){case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return Wu(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),yi(Fa),Z(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(na(t)?Vu(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==Kr&&(Tc(Kr),Kr=null))),Wu(t),null;case 26:return n=t.memoizedState,null===e?(Vu(t),null!==n?(Wu(t),$u(t,n)):(Wu(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Vu(t),Wu(t),$u(t,n)):(Wu(t),t.flags&=-16777217):(e.memoizedProps!==r&&Vu(t),Wu(t),t.flags&=-16777217),null;case 27:te(t),n=K.current;var a=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Vu(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Wu(t),null}e=Q.current,na(t)?ea(t):(e=cf(a,r,n),t.stateNode=e,Vu(t))}return Wu(t),null;case 5:if(te(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Vu(t);else{if(!r){if(null===t.stateNode)throw Error(o(166));return Wu(t),null}if(e=Q.current,na(t))ea(t);else{switch(a=Qs(K.current),e){case 1:e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=a.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=a.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=a.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?a.createElement("select",{is:r.is}):a.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?a.createElement(n,{is:r.is}):a.createElement(n)}}e[Re]=t,e[Fe]=r;e:for(a=t.child;null!==a;){if(5===a.tag||6===a.tag)e.appendChild(a.stateNode);else if(4!==a.tag&&27!==a.tag&&null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break e;for(;null===a.sibling;){if(null===a.return||a.return===t)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}t.stateNode=e;e:switch(Gs(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Vu(t)}}return Wu(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Vu(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));if(e=K.current,na(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(a=Wr))switch(a.tag){case 27:case 5:r=a.memoizedProps}e[Re]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Us(e.nodeValue,n)))||Zr(t)}else(e=Qs(e).createTextNode(r))[Re]=t,t.stateNode=e}return Wu(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(a=na(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(o(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(o(317));a[Re]=t}else ra(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Wu(t),a=!1}else null!==Kr&&(Tc(Kr),Kr=null),a=!0;if(!a)return 256&t.flags?(Oa(t),t):(Oa(t),null)}if(Oa(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){a=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(a=r.alternate.memoizedState.cachePool.pool);var l=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(l=r.memoizedState.cachePool.pool),l!==a&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),Gu(t,t.updateQueue),Wu(t),null;case 4:return Z(),null===e&&Ns(t.stateNode.containerInfo),Wu(t),null;case 10:return yi(t.type),Wu(t),null;case 19:if(q(Ta),null===(a=t.memoizedState))return Wu(t),null;if(r=!!(128&t.flags),null===(l=a.rendering))if(r)qu(a,!1);else{if(0!==cc||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(l=Da(e))){for(t.flags|=128,qu(a,!1),e=l.updateQueue,t.updateQueue=e,Gu(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Ru(n,e),n=n.sibling;return W(Ta,1&Ta.current|2),t.child}e=e.sibling}null!==a.tail&&ie()>bc&&(t.flags|=128,r=!0,qu(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=Da(l))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,Gu(t,e),qu(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!Xr)return Wu(t),null}else 2*ie()-a.renderingStartTime>bc&&536870912!==n&&(t.flags|=128,r=!0,qu(a,!1),t.lanes=4194304);a.isBackwards?(l.sibling=t.child,t.child=l):(null!==(e=a.last)?e.sibling=l:t.child=l,a.last=l)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=ie(),t.sibling=null,e=Ta.current,W(Ta,r?1&e|2:1&e),t):(Wu(t),null);case 22:case 23:return Oa(t),xa(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(Wu(t),6&t.subtreeFlags&&(t.flags|=8192)):Wu(t),null!==(n=t.updateQueue)&&Gu(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&q(Wa),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),yi(Fa),Wu(t),null;case 25:return null}throw Error(o(156,t.tag))}function Xu(e,t){switch(qr(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return yi(Fa),Z(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return te(t),null;case 13:if(Oa(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(o(340));ra()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return q(Ta),null;case 4:return Z(),null;case 10:return yi(t.type),null;case 22:case 23:return Oa(t),xa(),null!==e&&q(Wa),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return yi(Fa),null;default:return null}}function Ku(e,t){switch(qr(t),t.tag){case 3:yi(Fa),Z();break;case 26:case 27:case 5:te(t);break;case 4:Z();break;case 13:Oa(t);break;case 19:q(Ta);break;case 10:yi(t.type);break;case 22:case 23:Oa(t),xa(),null!==e&&q(Wa);break;case 24:yi(Fa)}}var Yu={getCacheForType:function(e){var t=Ci(Fa),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},Ju="function"==typeof WeakMap?WeakMap:Map,Zu=0,ec=null,tc=null,nc=0,rc=0,ac=null,lc=!1,oc=!1,ic=!1,uc=0,cc=0,sc=0,fc=0,dc=0,pc=0,hc=0,mc=null,gc=null,vc=!1,yc=0,bc=1/0,wc=null,Ac=null,kc=!1,Sc=null,Cc=0,Ec=0,xc=null,_c=0,Pc=null;function Lc(){return 2&Zu&&0!==nc?nc&-nc:null!==L.T?0!==Va?Va:ws():Ie()}function zc(){0===pc&&(pc=536870912&nc&&!Xr?536870912:Pe());var e=_a.current;return null!==e&&(e.flags|=32),pc}function Nc(e,t,n){(e===ec&&2===rc||null!==e.cancelPendingCommit)&&(jc(e,0),Mc(e,nc,pc,!1)),Ne(e,n),2&Zu&&e===ec||(e===ec&&(!(2&Zu)&&(fc|=n),4===cc&&Mc(e,nc,pc,!1)),hs(e))}function Oc(e,t,n){if(6&Zu)throw Error(o(327));for(var r=!n&&!(60&t)&&!(t&e.expiredLanes)||xe(e,t),a=r?function(e,t){var n=Zu;Zu|=2;var r=Uc(),a=Hc();ec!==e||nc!==t?(wc=null,bc=ie()+500,jc(e,t)):oc=xe(e,t);e:for(;;)try{if(0!==rc&&null!==tc){t=tc;var l=ac;t:switch(rc){case 1:rc=0,ac=null,Xc(e,t,l,1);break;case 2:if(ua(l)){rc=0,ac=null,Qc(t);break}t=function(){2===rc&&ec===e&&(rc=7),hs(e)},l.then(t,t);break e;case 3:rc=7;break e;case 4:rc=5;break e;case 7:ua(l)?(rc=0,ac=null,Qc(t)):(rc=0,ac=null,Xc(e,t,l,7));break;case 5:var i=null;switch(tc.tag){case 26:i=tc.memoizedState;case 5:case 27:var u=tc;if(!i||Lf(i)){rc=0,ac=null;var c=u.sibling;if(null!==c)tc=c;else{var s=u.return;null!==s?(tc=s,Kc(s)):tc=null}break t}}rc=0,ac=null,Xc(e,t,l,5);break;case 6:rc=0,ac=null,Xc(e,t,l,6);break;case 8:Fc(),cc=6;break e;default:throw Error(o(462))}}qc();break}catch(t){Bc(e,t)}return gi=mi=null,L.H=r,L.A=a,Zu=n,null!==tc?0:(ec=null,nc=0,Er(),cc)}(e,t):$c(e,t,!0),l=r;;){if(0===a){oc&&!r&&Mc(e,t,0,!1);break}if(6===a)Mc(e,t,0,!lc);else{if(n=e.current.alternate,l&&!Ic(n)){a=$c(e,t,!1),l=!1;continue}if(2===a){if(l=t,e.errorRecoveryDisabledLanes&l)var i=0;else i=0!=(i=-536870913&e.pendingLanes)?i:536870912&i?536870912:0;if(0!==i){t=i;e:{var u=e;a=mc;var c=u.current.memoizedState.isDehydrated;if(c&&(jc(u,i).flags|=256),2!==(i=$c(u,i,!1))){if(ic&&!c){u.errorRecoveryDisabledLanes|=l,fc|=l,a=4;break e}l=gc,gc=a,null!==l&&Tc(l)}a=i}if(l=!1,2!==a)continue}}if(1===a){jc(e,0),Mc(e,t,0,!0);break}e:{switch(r=e,a){case 0:case 1:throw Error(o(345));case 4:if((4194176&t)===t){Mc(r,t,pc,!lc);break e}break;case 2:gc=null;break;case 3:case 5:break;default:throw Error(o(329))}if(r.finishedWork=n,r.finishedLanes=t,(62914560&t)===t&&10<(l=yc+300-ie())){if(Mc(r,t,pc,!lc),0!==Ee(r,0))break e;r.timeoutHandle=Zs(Dc.bind(null,r,n,gc,wc,vc,t,pc,fc,hc,lc,2,-0,0),l)}else Dc(r,n,gc,wc,vc,t,pc,fc,hc,lc,0,-0,0)}}break}hs(e)}function Tc(e){null===gc?gc=e:gc.push.apply(gc,e)}function Dc(e,t,n,r,a,l,i,u,c,s,f,d,p){var h=t.subtreeFlags;if((8192&h||!(16785408&~h))&&(zf={stylesheets:null,count:0,unsuspend:Nf},_u(t),null!==(t=function(){if(null===zf)throw Error(o(475));var e=zf;return e.stylesheets&&0===e.count&&Df(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&Df(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=t(Jc.bind(null,e,n,r,a,i,u,c,1,d,p)),void Mc(e,l,i,!s);Jc(e,n,r,a,i,u,c)}function Ic(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],l=a.getSnapshot;a=a.value;try{if(!Wn(l(),a))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Mc(e,t,n,r){t&=~dc,t&=~fc,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var a=t;0<a;){var l=31-be(a),o=1<<l;r[l]=-1,a&=~o}0!==n&&Oe(e,n,t)}function Rc(){return!!(6&Zu)||(ms(0,!1),!1)}function Fc(){if(null!==tc){if(0===rc)var e=tc.return;else gi=mi=null,gl(e=tc),pa=null,ha=0,e=tc;for(;null!==e;)Ku(e.alternate,e),e=e.return;tc=null}}function jc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,ef(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),Fc(),ec=e,tc=n=Mu(e.current,null),nc=t,rc=0,ac=null,lc=!1,oc=xe(e,t),ic=!1,hc=pc=dc=fc=sc=cc=0,gc=mc=null,vc=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var a=31-be(r),l=1<<a;t|=e[a],r&=~l}return uc=t,Er(),n}function Bc(e,t){Ja=null,L.H=Co,t===la?(t=da(),rc=3):t===oa?(t=da(),rc=4):rc=t===Ho?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,ac=t,null===tc&&(cc=1,Ro(e,Tr(t,e.current)))}function Uc(){var e=L.H;return L.H=Co,null===e?Co:e}function Hc(){var e=L.A;return L.A=Yu,e}function Vc(){cc=4,lc||(4194176&nc)!==nc&&null!==_a.current||(oc=!0),!(134217727&sc)&&!(134217727&fc)||null===ec||Mc(ec,nc,pc,!1)}function $c(e,t,n){var r=Zu;Zu|=2;var a=Uc(),l=Hc();ec===e&&nc===t||(wc=null,jc(e,t)),t=!1;var o=cc;e:for(;;)try{if(0!==rc&&null!==tc){var i=tc,u=ac;switch(rc){case 8:Fc(),o=6;break e;case 3:case 2:case 6:null===_a.current&&(t=!0);var c=rc;if(rc=0,ac=null,Xc(e,i,u,c),n&&oc){o=0;break e}break;default:c=rc,rc=0,ac=null,Xc(e,i,u,c)}}Gc(),o=cc;break}catch(t){Bc(e,t)}return t&&e.shellSuspendCounter++,gi=mi=null,Zu=r,L.H=a,L.A=l,null===tc&&(ec=null,nc=0,Er()),o}function Gc(){for(;null!==tc;)Wc(tc)}function qc(){for(;null!==tc&&!le();)Wc(tc)}function Wc(e){var t=pi(e.alternate,e,uc);e.memoizedProps=e.pendingProps,null===t?Kc(e):tc=t}function Qc(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Jo(n,t,t.pendingProps,t.type,void 0,nc);break;case 11:t=Jo(n,t,t.pendingProps,t.type.render,t.ref,nc);break;case 5:gl(t);default:Ku(n,t),t=pi(n,t=tc=Ru(t,uc),uc)}e.memoizedProps=e.pendingProps,null===t?Kc(e):tc=t}function Xc(e,t,n,r){gi=mi=null,gl(t),pa=null,ha=0;var a=t.return;try{if(function(e,t,n,r,a){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&Ai(t,n,a,!0),null!==(n=_a.current)){switch(n.tag){case 13:return null===Pa?Vc():null===n.alternate&&0===cc&&(cc=3),n.flags&=-257,n.flags|=65536,n.lanes=a,r===ia?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),rs(e,r,a)),!1;case 22:return n.flags|=65536,r===ia?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),rs(e,r,a)),!1}throw Error(o(435,n.tag))}return rs(e,r,a),Vc(),!1}if(Xr)return null!==(t=_a.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=a,r!==Jr&&aa(Tr(e=Error(o(422),{cause:r}),n))):(r!==Jr&&aa(Tr(t=Error(o(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,a&=-a,e.lanes|=a,r=Tr(r,n),Ti(e,a=jo(e.stateNode,r,a)),4!==cc&&(cc=2)),!1;var l=Error(o(520),{cause:r});if(l=Tr(l,n),null===mc?mc=[l]:mc.push(l),4!==cc&&(cc=2),null===t)return!0;r=Tr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=a&-a,n.lanes|=e,Ti(n,e=jo(n.stateNode,r,e)),!1;case 1:if(t=n.type,l=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===l||"function"!=typeof l.componentDidCatch||null!==Ac&&Ac.has(l))))return n.flags|=65536,a&=-a,n.lanes|=a,Uo(a=Bo(a),e,n,r),Ti(n,a),!1}n=n.return}while(null!==n);return!1}(e,a,t,n,nc))return cc=1,Ro(e,Tr(n,e.current)),void(tc=null)}catch(t){if(null!==a)throw tc=a,t;return cc=1,Ro(e,Tr(n,e.current)),void(tc=null)}32768&t.flags?(Xr||1===r?e=!0:oc||536870912&nc?e=!1:(lc=e=!0,(2===r||3===r||6===r)&&null!==(r=_a.current)&&13===r.tag&&(r.flags|=16384)),Yc(t,e)):Kc(t)}function Kc(e){var t=e;do{if(32768&t.flags)return void Yc(t,lc);e=t.return;var n=Qu(t.alternate,t,uc);if(null!==n)return void(tc=n);if(null!==(t=t.sibling))return void(tc=t);tc=t=e}while(null!==t);0===cc&&(cc=5)}function Yc(e,t){do{var n=Xu(e.alternate,e);if(null!==n)return n.flags&=32767,void(tc=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(tc=e);tc=e=n}while(null!==e);cc=6,tc=null}function Jc(e,t,n,r,a,l,i,u,c,s){var f=L.T,d=U.p;try{U.p=2,L.T=null,function(e,t,n,r,a,l,i,u){do{es()}while(null!==Sc);if(6&Zu)throw Error(o(327));var c=e.finishedWork;if(r=e.finishedLanes,null===c)return null;if(e.finishedWork=null,e.finishedLanes=0,c===e.current)throw Error(o(177));e.callbackNode=null,e.callbackPriority=0,e.cancelPendingCommit=null;var s=c.lanes|c.childLanes;if(function(e,t,n,r,a,l){var o=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var i=e.entanglements,u=e.expirationTimes,c=e.hiddenUpdates;for(n=o&~n;0<n;){var s=31-be(n),f=1<<s;i[s]=0,u[s]=-1;var d=c[s];if(null!==d)for(c[s]=null,s=0;s<d.length;s++){var p=d[s];null!==p&&(p.lane&=-536870913)}n&=~f}0!==r&&Oe(e,r,0),0!==l&&0===a&&0!==e.tag&&(e.suspendedLanes|=l&~(o&~t))}(e,r,s|=Cr,l,i,u),e===ec&&(tc=ec=null,nc=0),!(10256&c.subtreeFlags)&&!(10256&c.flags)||kc||(kc=!0,Ec=s,xc=n,re(fe,(function(){return es(),null}))),n=!!(15990&c.flags),15990&c.subtreeFlags||n?(n=L.T,L.T=null,l=U.p,U.p=2,i=Zu,Zu|=4,function(e,t){if(e=e.containerInfo,qs=Hf,Zn(e=Jn(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,l=r.focusNode;r=r.focusOffset;try{n.nodeType,l.nodeType}catch(e){n=null;break e}var i=0,u=-1,c=-1,s=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==a&&3!==d.nodeType||(u=i+a),d!==l||0!==r&&3!==d.nodeType||(c=i+r),3===d.nodeType&&(i+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++s===a&&(u=i),p===l&&++f===r&&(c=i),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===c?null:{start:u,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(Ws={focusedElem:e,selectionRange:n},Hf=!1,tu=t;null!==tu;)if(e=(t=tu).child,1028&t.subtreeFlags&&null!==e)e.return=t,tu=e;else for(;null!==tu;){switch(l=(t=tu).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==l){e=void 0,n=t,a=l.memoizedProps,l=l.memoizedState,r=n.stateNode;try{var m=Oo(n.type,a,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(m,l),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){ns(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))lf(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":lf(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(o(163))}if(null!==(e=t.sibling)){e.return=t.return,tu=e;break}tu=t.return}m=nu,nu=!1}(e,c),pu(c,e),er(Ws,e.containerInfo),Hf=!!qs,Ws=qs=null,e.current=c,ru(e,c.alternate,c),oe(),Zu=i,U.p=l,L.T=n):e.current=c,kc?(kc=!1,Sc=e,Cc=r):Zc(e,s),0===(s=e.pendingLanes)&&(Ac=null),function(e){if(ve&&"function"==typeof ve.onCommitFiberRoot)try{ve.onCommitFiberRoot(ge,e,void 0,!(128&~e.current.flags))}catch(e){}}(c.stateNode),hs(e),null!==t)for(a=e.onRecoverableError,c=0;c<t.length;c++)a((s=t[c]).value,{componentStack:s.stack});!!(3&Cc)&&es(),s=e.pendingLanes,4194218&r&&42&s?e===Pc?_c++:(_c=0,Pc=e):_c=0,ms(0,!1)}(e,t,n,r,d,a,l,i)}finally{L.T=f,U.p=d}}function Zc(e,t){0==(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,Ba(t))}function es(){if(null!==Sc){var e=Sc,t=Ec;Ec=0;var n=De(Cc),r=L.T,a=U.p;try{if(U.p=32>n?32:n,L.T=null,null===Sc)var l=!1;else{n=xc,xc=null;var i=Sc,u=Cc;if(Sc=null,Cc=0,6&Zu)throw Error(o(331));var c=Zu;if(Zu|=4,zu(i.current),ku(i,i.current,u,n),Zu=c,ms(0,!1),ve&&"function"==typeof ve.onPostCommitFiberRoot)try{ve.onPostCommitFiberRoot(ge,i)}catch(e){}l=!0}return l}finally{U.p=a,L.T=r,Zc(e,t)}}return!1}function ts(e,t,n){t=Tr(n,t),null!==(e=Ni(e,t=jo(e.stateNode,t,2),2))&&(Ne(e,2),hs(e))}function ns(e,t,n){if(3===e.tag)ts(e,e,n);else for(;null!==t;){if(3===t.tag){ts(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ac||!Ac.has(r))){e=Tr(n,e),null!==(r=Ni(t,n=Bo(2),2))&&(Uo(n,r,t,e),Ne(r,2),hs(r));break}}t=t.return}}function rs(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new Ju;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(ic=!0,a.add(n),e=as.bind(null,e,t,n),t.then(e,e))}function as(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,ec===e&&(nc&n)===n&&(4===cc||3===cc&&(62914560&nc)===nc&&300>ie()-yc?!(2&Zu)&&jc(e,0):dc|=n,hc===nc&&(hc=0)),hs(e)}function ls(e,t){0===t&&(t=Le()),null!==(e=Pr(e,t))&&(Ne(e,t),hs(e))}function os(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),ls(e,n)}function is(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(o(314))}null!==r&&r.delete(t),ls(e,n)}var us=null,cs=null,ss=!1,fs=!1,ds=!1,ps=0;function hs(e){var t;e!==cs&&null===e.next&&(null===cs?us=cs=e:cs=cs.next=e),fs=!0,ss||(ss=!0,t=gs,nf((function(){6&Zu?re(ce,t):t()})))}function ms(e,t){if(!ds&&fs){ds=!0;do{for(var n=!1,r=us;null!==r;){if(!t)if(0!==e){var a=r.pendingLanes;if(0===a)var l=0;else{var o=r.suspendedLanes,i=r.pingedLanes;l=(1<<31-be(42|e)+1)-1,l=201326677&(l&=a&~(o&~i))?201326677&l|1:l?2|l:0}0!==l&&(n=!0,bs(r,l))}else l=nc,!(3&(l=Ee(r,r===ec?l:0)))||xe(r,l)||(n=!0,bs(r,l));r=r.next}}while(n);ds=!1}}function gs(){fs=ss=!1;var e,t=0;0!==ps&&(((e=window.event)&&"popstate"===e.type?e!==Js&&(Js=e,!0):(Js=null,!1))&&(t=ps),ps=0);for(var n=ie(),r=null,a=us;null!==a;){var l=a.next,o=vs(a,n);0===o?(a.next=null,null===r?us=l:r.next=l,null===l&&(cs=r)):(r=a,(0!==t||3&o)&&(fs=!0)),a=l}ms(t,!1)}function vs(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,l=-62914561&e.pendingLanes;0<l;){var o=31-be(l),i=1<<o,u=a[o];-1===u?i&n&&!(i&r)||(a[o]=_e(i,t)):u<=t&&(e.expiredLanes|=i),l&=~i}if(n=nc,n=Ee(e,e===(t=ec)?n:0),r=e.callbackNode,0===n||e===t&&2===rc||null!==e.cancelPendingCommit)return null!==r&&null!==r&&ae(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||xe(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&ae(r),De(n)){case 2:case 8:n=se;break;case 32:default:n=fe;break;case 268435456:n=pe}return r=ys.bind(null,e),n=re(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&ae(r),e.callbackPriority=2,e.callbackNode=null,2}function ys(e,t){var n=e.callbackNode;if(es()&&e.callbackNode!==n)return null;var r=nc;return 0===(r=Ee(e,e===ec?r:0))?null:(Oc(e,r,t),vs(e,ie()),null!=e.callbackNode&&e.callbackNode===n?ys.bind(null,e):null)}function bs(e,t){if(es())return null;Oc(e,t,!0)}function ws(){return 0===ps&&(ps=Pe()),ps}function As(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Pt(""+e)}function ks(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Ss=0;Ss<wr.length;Ss++){var Cs=wr[Ss];Ar(Cs.toLowerCase(),"on"+(Cs[0].toUpperCase()+Cs.slice(1)))}Ar(dr,"onAnimationEnd"),Ar(pr,"onAnimationIteration"),Ar(hr,"onAnimationStart"),Ar("dblclick","onDoubleClick"),Ar("focusin","onFocus"),Ar("focusout","onBlur"),Ar(mr,"onTransitionRun"),Ar(gr,"onTransitionStart"),Ar(vr,"onTransitionCancel"),Ar(yr,"onTransitionEnd"),et("onMouseEnter",["mouseout","mouseover"]),et("onMouseLeave",["mouseout","mouseover"]),et("onPointerEnter",["pointerout","pointerover"]),et("onPointerLeave",["pointerout","pointerover"]),Ze("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Ze("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Ze("onBeforeInput",["compositionend","keypress","textInput","paste"]),Ze("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Ze("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Ze("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Es="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),xs=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Es));function _s(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var l=void 0;if(t)for(var o=r.length-1;0<=o;o--){var i=r[o],u=i.instance,c=i.currentTarget;if(i=i.listener,u!==l&&a.isPropagationStopped())break e;l=i,a.currentTarget=c;try{l(a)}catch(e){To(e)}a.currentTarget=null,l=u}else for(o=0;o<r.length;o++){if(u=(i=r[o]).instance,c=i.currentTarget,i=i.listener,u!==l&&a.isPropagationStopped())break e;l=i,a.currentTarget=c;try{l(a)}catch(e){To(e)}a.currentTarget=null,l=u}}}}function Ps(e,t){var n=t[Be];void 0===n&&(n=t[Be]=new Set);var r=e+"__bubble";n.has(r)||(Os(t,e,2,!1),n.add(r))}function Ls(e,t,n){var r=0;t&&(r|=4),Os(n,e,r,t)}var zs="_reactListening"+Math.random().toString(36).slice(2);function Ns(e){if(!e[zs]){e[zs]=!0,Ye.forEach((function(t){"selectionchange"!==t&&(xs.has(t)||Ls(t,!1,e),Ls(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[zs]||(t[zs]=!0,Ls("selectionchange",!1,t))}}function Os(e,t,n,r){switch(Xf(t)){case 2:var a=Vf;break;case 8:a=$f;break;default:a=Gf}n=a.bind(null,t,n,e),a=void 0,!Rt||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Ts(e,t,n,r,a){var l=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var i=r.stateNode.containerInfo;if(i===a||8===i.nodeType&&i.parentNode===a)break;if(4===o)for(o=r.return;null!==o;){var u=o.tag;if((3===u||4===u)&&((u=o.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;o=o.return}for(;null!==i;){if(null===(o=qe(i)))return;if(5===(u=o.tag)||6===u||26===u||27===u){r=l=o;continue e}i=i.parentNode}}r=r.return}It((function(){var r=l,a=zt(n),o=[];e:{var i=br.get(e);if(void 0!==i){var u=Yt,c=e;switch(e){case"keypress":if(0===Vt(n))break e;case"keydown":case"keyup":u=pn;break;case"focusin":c="focus",u=rn;break;case"focusout":c="blur",u=rn;break;case"beforeblur":case"afterblur":u=rn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=nn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=mn;break;case dr:case pr:case hr:u=an;break;case yr:u=gn;break;case"scroll":case"scrollend":u=Zt;break;case"wheel":u=vn;break;case"copy":case"cut":case"paste":u=ln;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=hn;break;case"toggle":case"beforetoggle":u=yn}var s=!!(4&t),f=!s&&("scroll"===e||"scrollend"===e),d=s?null!==i?i+"Capture":null:i;s=[];for(var p,h=r;null!==h;){var m=h;if(p=m.stateNode,5!==(m=m.tag)&&26!==m&&27!==m||null===p||null===d||null!=(m=Mt(h,d))&&s.push(Ds(h,m,p)),f)break;h=h.return}0<s.length&&(i=new u(i,c,null,n,a),o.push({event:i,listeners:s}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(i="mouseover"===e||"pointerover"===e)||n===Lt||!(c=n.relatedTarget||n.fromElement)||!qe(c)&&!c[je])&&(u||i)&&(i=a.window===a?a:(i=a.ownerDocument)?i.defaultView||i.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?qe(c):null)&&(f=M(c),s=c.tag,c!==f||5!==s&&27!==s&&6!==s)&&(c=null)):(u=null,c=r),u!==c)){if(s=tn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=hn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?i:Qe(u),p=null==c?i:Qe(c),(i=new s(m,h+"leave",u,n,a)).target=f,i.relatedTarget=p,m=null,qe(a)===r&&((s=new s(d,h+"enter",c,n,a)).target=p,s.relatedTarget=f,m=s),f=m,u&&c)e:{for(d=c,h=0,p=s=u;p;p=Ms(p))h++;for(p=0,m=d;m;m=Ms(m))p++;for(;0<h-p;)s=Ms(s),h--;for(;0<p-h;)d=Ms(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=Ms(s),d=Ms(d)}s=null}else s=null;null!==u&&Rs(o,i,u,s,!1),null!==c&&null!==f&&Rs(o,f,c,s,!0)}if("select"===(u=(i=r?Qe(r):window).nodeName&&i.nodeName.toLowerCase())||"input"===u&&"file"===i.type)var g=Mn;else if(zn(i))if(Rn)g=qn;else{g=$n;var v=Vn}else!(u=i.nodeName)||"input"!==u.toLowerCase()||"checkbox"!==i.type&&"radio"!==i.type?r&&Et(r.elementType)&&(g=Mn):g=Gn;switch(g&&(g=g(e,r))?Nn(o,g,n,a):(v&&v(e,i,r),"focusout"===e&&r&&"number"===i.type&&null!=r.memoizedProps.value&&vt(i,"number",i.value)),v=r?Qe(r):window,e){case"focusin":(zn(v)||"true"===v.contentEditable)&&(nr=v,rr=r,ar=null);break;case"focusout":ar=rr=nr=null;break;case"mousedown":lr=!0;break;case"contextmenu":case"mouseup":case"dragend":lr=!1,or(o,n,a);break;case"selectionchange":if(tr)break;case"keydown":case"keyup":or(o,n,a)}var y;if(wn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Pn?xn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Sn&&"ko"!==n.locale&&(Pn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Pn&&(y=Ht()):(Bt="value"in(jt=a)?jt.value:jt.textContent,Pn=!0)),0<(v=Is(r,b)).length&&(b=new on(b,e,null,n,a),o.push({event:b,listeners:v}),(y||null!==(y=_n(n)))&&(b.data=y))),(y=kn?function(e,t){switch(e){case"compositionend":return _n(t);case"keypress":return 32!==t.which?null:(En=!0,Cn);case"textInput":return(e=t.data)===Cn&&En?null:e;default:return null}}(e,n):function(e,t){if(Pn)return"compositionend"===e||!wn&&xn(e,t)?(e=Ht(),Ut=Bt=jt=null,Pn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Sn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(b=Is(r,"onBeforeInput")).length&&(v=new on("onBeforeInput","beforeinput",null,n,a),o.push({event:v,listeners:b}),v.data=y),function(e,t,n,r,a){if("submit"===t&&n&&n.stateNode===a){var l=As((a[Fe]||null).action),o=r.submitter;o&&null!==(t=(t=o[Fe]||null)?As(t.formAction):o.getAttribute("formAction"))&&(l=t,o=null);var i=new Yt("action","action",null,r,a);e.push({event:i,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==ps){var e=o?ks(a,o):new FormData(a);co(n,{pending:!0,data:e,method:a.method,action:l},null,e)}}else"function"==typeof l&&(i.preventDefault(),e=o?ks(a,o):new FormData(a),co(n,{pending:!0,data:e,method:a.method,action:l},l,e))},currentTarget:a}]})}}(o,e,r,n,a)}_s(o,t)}))}function Ds(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Is(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,l=a.stateNode;5!==(a=a.tag)&&26!==a&&27!==a||null===l||(null!=(a=Mt(e,n))&&r.unshift(Ds(e,a,l)),null!=(a=Mt(e,t))&&r.push(Ds(e,a,l))),e=e.return}return r}function Ms(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Rs(e,t,n,r,a){for(var l=t._reactName,o=[];null!==n&&n!==r;){var i=n,u=i.alternate,c=i.stateNode;if(i=i.tag,null!==u&&u===r)break;5!==i&&26!==i&&27!==i||null===c||(u=c,a?null!=(c=Mt(n,l))&&o.unshift(Ds(n,c,u)):a||null!=(c=Mt(n,l))&&o.push(Ds(n,c,u))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var Fs=/\r\n?/g,js=/\u0000|\uFFFD/g;function Bs(e){return("string"==typeof e?e:""+e).replace(Fs,"\n").replace(js,"")}function Us(e,t){return t=Bs(t),Bs(e)===t}function Hs(){}function Vs(e,t,n,r,a,l){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||At(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&At(e,""+r);break;case"className":ot(e,"class",r);break;case"tabIndex":ot(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":ot(e,n,r);break;case"style":Ct(e,r,l);break;case"data":if("object"!==t){ot(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Pt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof l&&("formAction"===n?("input"!==t&&Vs(e,t,"name",a.name,a,null),Vs(e,t,"formEncType",a.formEncType,a,null),Vs(e,t,"formMethod",a.formMethod,a,null),Vs(e,t,"formTarget",a.formTarget,a,null)):(Vs(e,t,"encType",a.encType,a,null),Vs(e,t,"method",a.method,a,null),Vs(e,t,"target",a.target,a,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Pt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Hs);break;case"onScroll":null!=r&&Ps("scroll",e);break;case"onScrollEnd":null!=r&&Ps("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(o(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=Pt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Ps("beforetoggle",e),Ps("toggle",e),lt(e,"popover",r);break;case"xlinkActuate":it(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":it(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":it(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":it(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":it(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":it(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":it(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":it(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":it(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":lt(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&lt(e,n=xt.get(n)||n,r)}}function $s(e,t,n,r,a,l){switch(n){case"style":Ct(e,r,l);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(o(61));if(null!=(n=r.__html)){if(null!=a.children)throw Error(o(60));e.innerHTML=n}}break;case"children":"string"==typeof r?At(e,r):("number"==typeof r||"bigint"==typeof r)&&At(e,""+r);break;case"onScroll":null!=r&&Ps("scroll",e);break;case"onScrollEnd":null!=r&&Ps("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Hs);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Je.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(a=n.endsWith("Capture"),t=n.slice(2,a?n.length-7:void 0),"function"==typeof(l=null!=(l=e[Fe]||null)?l[n]:null)&&e.removeEventListener(t,l,a),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):lt(e,n,r):("function"!=typeof l&&null!==l&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,a)))}}function Gs(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Ps("error",e),Ps("load",e);var r,a=!1,l=!1;for(r in n)if(n.hasOwnProperty(r)){var i=n[r];if(null!=i)switch(r){case"src":a=!0;break;case"srcSet":l=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:Vs(e,t,r,i,n,null)}}return l&&Vs(e,t,"srcSet",n.srcSet,n,null),void(a&&Vs(e,t,"src",n.src,n,null));case"input":Ps("invalid",e);var u=r=i=l=null,c=null,s=null;for(a in n)if(n.hasOwnProperty(a)){var f=n[a];if(null!=f)switch(a){case"name":l=f;break;case"type":i=f;break;case"checked":c=f;break;case"defaultChecked":s=f;break;case"value":r=f;break;case"defaultValue":u=f;break;case"children":case"dangerouslySetInnerHTML":if(null!=f)throw Error(o(137,t));break;default:Vs(e,t,a,f,n,null)}}return gt(e,r,u,c,s,i,l,!1),void st(e);case"select":for(l in Ps("invalid",e),a=i=r=null,n)if(n.hasOwnProperty(l)&&null!=(u=n[l]))switch(l){case"value":r=u;break;case"defaultValue":i=u;break;case"multiple":a=u;default:Vs(e,t,l,u,n,null)}return t=r,n=i,e.multiple=!!a,void(null!=t?yt(e,!!a,t,!1):null!=n&&yt(e,!!a,n,!0));case"textarea":for(i in Ps("invalid",e),r=l=a=null,n)if(n.hasOwnProperty(i)&&null!=(u=n[i]))switch(i){case"value":a=u;break;case"defaultValue":l=u;break;case"children":r=u;break;case"dangerouslySetInnerHTML":if(null!=u)throw Error(o(91));break;default:Vs(e,t,i,u,n,null)}return wt(e,a,l,r),void st(e);case"option":for(c in n)n.hasOwnProperty(c)&&null!=(a=n[c])&&("selected"===c?e.selected=a&&"function"!=typeof a&&"symbol"!=typeof a:Vs(e,t,c,a,n,null));return;case"dialog":Ps("cancel",e),Ps("close",e);break;case"iframe":case"object":Ps("load",e);break;case"video":case"audio":for(a=0;a<Es.length;a++)Ps(Es[a],e);break;case"image":Ps("error",e),Ps("load",e);break;case"details":Ps("toggle",e);break;case"embed":case"source":case"link":Ps("error",e),Ps("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(s in n)if(n.hasOwnProperty(s)&&null!=(a=n[s]))switch(s){case"children":case"dangerouslySetInnerHTML":throw Error(o(137,t));default:Vs(e,t,s,a,n,null)}return;default:if(Et(t)){for(f in n)n.hasOwnProperty(f)&&void 0!==(a=n[f])&&$s(e,t,f,a,n,void 0);return}}for(u in n)n.hasOwnProperty(u)&&null!=(a=n[u])&&Vs(e,t,u,a,n,null)}var qs=null,Ws=null;function Qs(e){return 9===e.nodeType?e:e.ownerDocument}function Xs(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function Ks(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function Ys(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Js=null,Zs="function"==typeof setTimeout?setTimeout:void 0,ef="function"==typeof clearTimeout?clearTimeout:void 0,tf="function"==typeof Promise?Promise:void 0,nf="function"==typeof queueMicrotask?queueMicrotask:void 0!==tf?function(e){return tf.resolve(null).then(e).catch(rf)}:Zs;function rf(e){setTimeout((function(){throw e}))}function af(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void pd(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);pd(t)}function lf(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":lf(n),Ge(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function of(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}function uf(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function cf(e,t,n){switch(t=Qs(n),e){case"html":if(!(e=t.documentElement))throw Error(o(452));return e;case"head":if(!(e=t.head))throw Error(o(453));return e;case"body":if(!(e=t.body))throw Error(o(454));return e;default:throw Error(o(451))}}var sf=new Map,ff=new Set;function df(e){return"function"==typeof e.getRootNode?e.getRootNode():e.ownerDocument}var pf=U.d;U.d={f:function(){var e=pf.f(),t=Rc();return e||t},r:function(e){var t=We(e);null!==t&&5===t.tag&&"form"===t.type?fo(t):pf.r(e)},D:function(e){pf.D(e),mf("dns-prefetch",e,null)},C:function(e,t){pf.C(e,t),mf("preconnect",e,t)},L:function(e,t,n){pf.L(e,t,n);var r=hf;if(r&&e&&t){var a='link[rel="preload"][as="'+ht(t)+'"]';"image"===t&&n&&n.imageSrcSet?(a+='[imagesrcset="'+ht(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(a+='[imagesizes="'+ht(n.imageSizes)+'"]')):a+='[href="'+ht(e)+'"]';var l=a;switch(t){case"style":l=vf(e);break;case"script":l=wf(e)}sf.has(l)||(e=z({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),sf.set(l,e),null!==r.querySelector(a)||"style"===t&&r.querySelector(yf(l))||"script"===t&&r.querySelector(Af(l))||(Gs(t=r.createElement("link"),"link",e),Ke(t),r.head.appendChild(t)))}},m:function(e,t){pf.m(e,t);var n=hf;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",a='link[rel="modulepreload"][as="'+ht(r)+'"][href="'+ht(e)+'"]',l=a;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":l=wf(e)}if(!sf.has(l)&&(e=z({rel:"modulepreload",href:e},t),sf.set(l,e),null===n.querySelector(a))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(Af(l)))return}Gs(r=n.createElement("link"),"link",e),Ke(r),n.head.appendChild(r)}}},X:function(e,t){pf.X(e,t);var n=hf;if(n&&e){var r=Xe(n).hoistableScripts,a=wf(e),l=r.get(a);l||((l=n.querySelector(Af(a)))||(e=z({src:e,async:!0},t),(t=sf.get(a))&&Ef(e,t),Ke(l=n.createElement("script")),Gs(l,"link",e),n.head.appendChild(l)),l={type:"script",instance:l,count:1,state:null},r.set(a,l))}},S:function(e,t,n){pf.S(e,t,n);var r=hf;if(r&&e){var a=Xe(r).hoistableStyles,l=vf(e);t=t||"default";var o=a.get(l);if(!o){var i={loading:0,preload:null};if(o=r.querySelector(yf(l)))i.loading=5;else{e=z({rel:"stylesheet",href:e,"data-precedence":t},n),(n=sf.get(l))&&Cf(e,n);var u=o=r.createElement("link");Ke(u),Gs(u,"link",e),u._p=new Promise((function(e,t){u.onload=e,u.onerror=t})),u.addEventListener("load",(function(){i.loading|=1})),u.addEventListener("error",(function(){i.loading|=2})),i.loading|=4,Sf(o,t,r)}o={type:"stylesheet",instance:o,count:1,state:i},a.set(l,o)}}},M:function(e,t){pf.M(e,t);var n=hf;if(n&&e){var r=Xe(n).hoistableScripts,a=wf(e),l=r.get(a);l||((l=n.querySelector(Af(a)))||(e=z({src:e,async:!0,type:"module"},t),(t=sf.get(a))&&Ef(e,t),Ke(l=n.createElement("script")),Gs(l,"link",e),n.head.appendChild(l)),l={type:"script",instance:l,count:1,state:null},r.set(a,l))}}};var hf="undefined"==typeof document?null:document;function mf(e,t,n){var r=hf;if(r&&"string"==typeof t&&t){var a=ht(t);a='link[rel="'+e+'"][href="'+a+'"]',"string"==typeof n&&(a+='[crossorigin="'+n+'"]'),ff.has(a)||(ff.add(a),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(a)&&(Gs(t=r.createElement("link"),"link",e),Ke(t),r.head.appendChild(t)))}}function gf(e,t,n,r){var a,l,i,u,c=(c=K.current)?df(c):null;if(!c)throw Error(o(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=vf(n.href),(r=(n=Xe(c).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=vf(n.href);var s=Xe(c).hoistableStyles,f=s.get(e);if(f||(c=c.ownerDocument||c,f={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},s.set(e,f),(s=c.querySelector(yf(e)))&&!s._p&&(f.instance=s,f.state.loading=5),sf.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},sf.set(e,n),s||(a=c,l=e,i=n,u=f.state,a.querySelector('link[rel="preload"][as="style"]['+l+"]")?u.loading=1:(l=a.createElement("link"),u.preload=l,l.addEventListener("load",(function(){return u.loading|=1})),l.addEventListener("error",(function(){return u.loading|=2})),Gs(l,"link",i),Ke(l),a.head.appendChild(l))))),t&&null===r)throw Error(o(528,""));return f}if(t&&null!==r)throw Error(o(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=wf(n),(r=(n=Xe(c).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(o(444,e))}}function vf(e){return'href="'+ht(e)+'"'}function yf(e){return'link[rel="stylesheet"]['+e+"]"}function bf(e){return z({},e,{"data-precedence":e.precedence,precedence:null})}function wf(e){return'[src="'+ht(e)+'"]'}function Af(e){return"script[async]"+e}function kf(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+ht(n.href)+'"]');if(r)return t.instance=r,Ke(r),r;var a=z({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return Ke(r=(e.ownerDocument||e).createElement("style")),Gs(r,"style",a),Sf(r,n.precedence,e),t.instance=r;case"stylesheet":a=vf(n.href);var l=e.querySelector(yf(a));if(l)return t.state.loading|=4,t.instance=l,Ke(l),l;r=bf(n),(a=sf.get(a))&&Cf(r,a),Ke(l=(e.ownerDocument||e).createElement("link"));var i=l;return i._p=new Promise((function(e,t){i.onload=e,i.onerror=t})),Gs(l,"link",r),t.state.loading|=4,Sf(l,n.precedence,e),t.instance=l;case"script":return l=wf(n.src),(a=e.querySelector(Af(l)))?(t.instance=a,Ke(a),a):(r=n,(a=sf.get(l))&&Ef(r=z({},n),a),Ke(a=(e=e.ownerDocument||e).createElement("script")),Gs(a,"link",r),e.head.appendChild(a),t.instance=a);case"void":return null;default:throw Error(o(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Sf(r,n.precedence,e));return t.instance}function Sf(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),a=r.length?r[r.length-1]:null,l=a,o=0;o<r.length;o++){var i=r[o];if(i.dataset.precedence===t)l=i;else if(l!==a)break}l?l.parentNode.insertBefore(e,l.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Cf(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function Ef(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var xf=null;function _f(e,t,n){if(null===xf){var r=new Map,a=xf=new Map;a.set(n,r)}else(r=(a=xf).get(n))||(r=new Map,a.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),a=0;a<n.length;a++){var l=n[a];if(!(l[$e]||l[Re]||"link"===e&&"stylesheet"===l.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==l.namespaceURI){var o=l.getAttribute(t)||"";o=e+o;var i=r.get(o);i?i.push(l):r.set(o,[l])}}return r}function Pf(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Lf(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var zf=null;function Nf(){}function Of(){if(this.count--,0===this.count)if(this.stylesheets)Df(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Tf=null;function Df(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Tf=new Map,t.forEach(If,e),Tf=null,Of.call(e))}function If(e,t){if(!(4&t.state.loading)){var n=Tf.get(e);if(n)var r=n.get(null);else{n=new Map,Tf.set(e,n);for(var a=e.querySelectorAll("link[data-precedence],style[data-precedence]"),l=0;l<a.length;l++){var o=a[l];"LINK"!==o.nodeName&&"not all"===o.getAttribute("media")||(n.set(o.dataset.precedence,o),r=o)}r&&n.set(null,r)}o=(a=t.instance).getAttribute("data-precedence"),(l=n.get(o)||r)===r&&n.set(null,a),n.set(o,a),this.count++,r=Of.bind(this),a.addEventListener("load",r),a.addEventListener("error",r),l?l.parentNode.insertBefore(a,l.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(a,e.firstChild),t.state.loading|=4}}var Mf={$$typeof:m,Provider:null,Consumer:null,_currentValue:H,_currentValue2:H,_threadCount:0};function Rf(e,t,n,r,a,l,o,i){this.tag=1,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=ze(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.finishedLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ze(0),this.hiddenUpdates=ze(null),this.identifierPrefix=r,this.onUncaughtError=a,this.onCaughtError=l,this.onRecoverableError=o,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=i,this.incompleteTransitions=new Map}function Ff(e,t,n,r,a,l){a=function(e){return e?e=Nr:Nr}(a),null===r.context?r.context=a:r.pendingContext=a,(r=zi(t)).payload={element:n},null!==(l=void 0===l?null:l)&&(r.callback=l),null!==(n=Ni(e,r,t))&&(Nc(n,0,t),Oi(n,e,t))}function jf(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Bf(e,t){jf(e,t),(e=e.alternate)&&jf(e,t)}function Uf(e){if(13===e.tag){var t=Pr(e,67108864);null!==t&&Nc(t,0,67108864),Bf(e,67108864)}}var Hf=!0;function Vf(e,t,n,r){var a=L.T;L.T=null;var l=U.p;try{U.p=2,Gf(e,t,n,r)}finally{U.p=l,L.T=a}}function $f(e,t,n,r){var a=L.T;L.T=null;var l=U.p;try{U.p=8,Gf(e,t,n,r)}finally{U.p=l,L.T=a}}function Gf(e,t,n,r){if(Hf){var a=qf(r);if(null===a)Ts(e,t,r,Wf,n),ad(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Yf=ld(Yf,e,t,n,r,a),!0;case"dragenter":return Jf=ld(Jf,e,t,n,r,a),!0;case"mouseover":return Zf=ld(Zf,e,t,n,r,a),!0;case"pointerover":var l=a.pointerId;return ed.set(l,ld(ed.get(l)||null,e,t,n,r,a)),!0;case"gotpointercapture":return l=a.pointerId,td.set(l,ld(td.get(l)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(ad(e,r),4&t&&-1<rd.indexOf(e)){for(;null!==a;){var l=We(a);if(null!==l)switch(l.tag){case 3:if((l=l.stateNode).current.memoizedState.isDehydrated){var o=Ce(l.pendingLanes);if(0!==o){var i=l;for(i.pendingLanes|=2,i.entangledLanes|=2;o;){var u=1<<31-be(o);i.entanglements[1]|=u,o&=~u}hs(l),!(6&Zu)&&(bc=ie()+500,ms(0,!1))}}break;case 13:null!==(i=Pr(l,2))&&Nc(i,0,2),Rc(),Bf(l,2)}if(null===(l=qf(r))&&Ts(e,t,r,Wf,n),l===a)break;a=l}null!==a&&r.stopPropagation()}else Ts(e,t,r,null,n)}}function qf(e){return Qf(e=zt(e))}var Wf=null;function Qf(e){if(Wf=null,null!==(e=qe(e))){var t=M(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=R(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return Wf=e,null}function Xf(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(ue()){case ce:return 2;case se:return 8;case fe:case de:return 32;case pe:return 268435456;default:return 32}default:return 32}}var Kf=!1,Yf=null,Jf=null,Zf=null,ed=new Map,td=new Map,nd=[],rd="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function ad(e,t){switch(e){case"focusin":case"focusout":Yf=null;break;case"dragenter":case"dragleave":Jf=null;break;case"mouseover":case"mouseout":Zf=null;break;case"pointerover":case"pointerout":ed.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":td.delete(t.pointerId)}}function ld(e,t,n,r,a,l){return null===e||e.nativeEvent!==l?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:l,targetContainers:[a]},null!==t&&null!==(t=We(t))&&Uf(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function od(e){var t=qe(e.target);if(null!==t){var n=M(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=R(n)))return e.blockedOn=t,void function(e){var t=U.p;try{return U.p=e,function(){if(13===n.tag){var e=Lc(),t=Pr(n,e);null!==t&&Nc(t,0,e),Bf(n,e)}}()}finally{U.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function id(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=qf(e.nativeEvent);if(null!==n)return null!==(t=We(n))&&Uf(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Lt=r,n.target.dispatchEvent(r),Lt=null,t.shift()}return!0}function ud(e,t,n){id(e)&&n.delete(t)}function cd(){Kf=!1,null!==Yf&&id(Yf)&&(Yf=null),null!==Jf&&id(Jf)&&(Jf=null),null!==Zf&&id(Zf)&&(Zf=null),ed.forEach(ud),td.forEach(ud)}function sd(e,t){e.blockedOn===t&&(e.blockedOn=null,Kf||(Kf=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,cd)))}var fd=null;function dd(e){fd!==e&&(fd=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){fd===e&&(fd=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],a=e[t+2];if("function"!=typeof r){if(null===Qf(r||n))continue;break}var l=We(n);null!==l&&(e.splice(t,3),t-=3,co(l,{pending:!0,data:a,method:n.method,action:r},r,a))}})))}function pd(e){function t(t){return sd(t,e)}null!==Yf&&sd(Yf,e),null!==Jf&&sd(Jf,e),null!==Zf&&sd(Zf,e),ed.forEach(t),td.forEach(t);for(var n=0;n<nd.length;n++){var r=nd[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<nd.length&&null===(n=nd[0]).blockedOn;)od(n),null===n.blockedOn&&nd.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var a=n[r],l=n[r+1],o=a[Fe]||null;if("function"==typeof l)o||dd(n);else if(o){var i=null;if(l&&l.hasAttribute("formAction")){if(a=l,o=l[Fe]||null)i=o.formAction;else if(null!==Qf(a))continue}else i=o.action;"function"==typeof i?n[r+1]=i:(n.splice(r,3),r-=3),dd(n)}}}function hd(e){this._internalRoot=e}function md(e){this._internalRoot=e}md.prototype.render=hd.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(o(409));Ff(t.current,Lc(),e,t,null,null)},md.prototype.unmount=hd.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;0===e.tag&&es(),Ff(e.current,2,null,e,null,null),Rc(),t[je]=null}},md.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ie();e={blockedOn:null,target:e,priority:t};for(var n=0;n<nd.length&&0!==t&&t<nd[n].priority;n++);nd.splice(n,0,e),0===n&&od(e)}};var gd=a.version;if("19.0.0"!==gd)throw Error(o(527,gd,"19.0.0"));U.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw e=Object.keys(e).join(","),Error(o(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=M(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var l=a.alternate;if(null===l){if(null!==(r=a.return)){n=r;continue}break}if(a.child===l.child){for(l=a.child;l;){if(l===n)return F(a),e;if(l===r)return F(a),t;l=l.sibling}throw Error(o(188))}if(n.return!==r.return)n=a,r=l;else{for(var i=!1,u=a.child;u;){if(u===n){i=!0,n=a,r=l;break}if(u===r){i=!0,r=a,n=l;break}u=u.sibling}if(!i){for(u=l.child;u;){if(u===n){i=!0,n=l,r=a;break}if(u===r){i=!0,r=l,n=a;break}u=u.sibling}if(!i)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?j(e):null)?null:e.stateNode};var vd={bundleType:0,version:"19.0.0",rendererPackageName:"react-dom",currentDispatcherRef:L,findFiberByHostInstance:qe,reconcilerVersion:"19.0.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var yd=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!yd.isDisabled&&yd.supportsFiber)try{ge=yd.inject(vd),ve=yd}catch(e){}}t.createRoot=function(e,t){if(!(n=e)||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType)throw Error(o(299));var n,r=!1,a="",l=Do,i=Io,u=Mo;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(a=t.identifierPrefix),void 0!==t.onUncaughtError&&(l=t.onUncaughtError),void 0!==t.onCaughtError&&(i=t.onCaughtError),void 0!==t.onRecoverableError&&(u=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=function(e,t,n,r,a,l,o,i,u,c,s,f){return e=new Rf(e,t,n,o,i,u,c,f),t=1,!0===l&&(t|=24),l=Du(3,null,null,t),e.current=l,l.stateNode=e,(t=ja()).refCount++,e.pooledCache=t,t.refCount++,l.memoizedState={element:r,isDehydrated:n,cache:t},Pi(l),e}(e,1,!1,null,0,r,a,l,i,u,0,null),e[je]=t.current,Ns(8===e.nodeType?e.parentNode:e),new hd(t)}},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,l){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(o[u]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);r&&o[s[0]]||(void 0!==l&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=l),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),a&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=a):s[4]="".concat(a)),t.push(s))}},t}},338:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),l="/*# ".concat(a," */");return[t].concat([l]).join("\n")}return[t].join("\n")}},376:(e,t,n)=>{var r=n(72),a=n.n(r),l=n(825),o=n.n(l),i=n(659),u=n.n(i),c=n(56),s=n.n(c),f=n(159),d=n.n(f),p=n(113),h=n.n(p),m=n(11),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=u().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=d();var v=a()(m.default,g);if(!m.default.locals||e.hot.invalidate){var y=!m.default.locals,b=y?m:m.default.locals;e.hot.accept(11,(t=>{m=n(11),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(b,y?m:m.default.locals,y)?(b=y?m:m.default.locals,v(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),m.default&&m.default.locals&&m.default.locals},477:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<l(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,o=a>>>1;r<o;){var i=2*(r+1)-1,u=e[i],c=i+1,s=e[c];if(0>l(u,n))c<a&&0>l(s,u)?(e[r]=s,e[c]=n,r=c):(e[r]=u,e[i]=n,r=i);else{if(!(c<a&&0>l(s,n)))break e;e[r]=s,e[c]=n,r=c}}}return t}function l(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var i=Date,u=i.now();t.unstable_now=function(){return i.now()-u}}var c=[],s=[],f=1,d=null,p=3,h=!1,m=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(s);null!==t;){if(null===t.callback)a(s);else{if(!(t.startTime<=e))break;a(s),t.sortIndex=t.expirationTime,n(c,t)}t=r(s)}}function A(e){if(g=!1,w(e),!m)if(null!==r(c))m=!0,N();else{var t=r(s);null!==t&&O(A,t.startTime-e)}}var k,S=!1,C=-1,E=5,x=-1;function _(){return!(t.unstable_now()-x<E)}function P(){if(S){var e=t.unstable_now();x=e;var n=!0;try{e:{m=!1,g&&(g=!1,y(C),C=-1),h=!0;var l=p;try{t:{for(w(e),d=r(c);null!==d&&!(d.expirationTime>e&&_());){var o=d.callback;if("function"==typeof o){d.callback=null,p=d.priorityLevel;var i=o(d.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof i){d.callback=i,w(e),n=!0;break t}d===r(c)&&a(c),w(e)}else a(c);d=r(c)}if(null!==d)n=!0;else{var u=r(s);null!==u&&O(A,u.startTime-e),n=!1}}break e}finally{d=null,p=l,h=!1}n=void 0}}finally{n?k():S=!1}}}if("function"==typeof b)k=function(){b(P)};else if("undefined"!=typeof MessageChannel){var L=new MessageChannel,z=L.port2;L.port1.onmessage=P,k=function(){z.postMessage(null)}}else k=function(){v(P,0)};function N(){S||(S=!0,k())}function O(e,n){C=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,N())},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):E=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,l){var o=t.unstable_now();switch(l="object"==typeof l&&null!==l&&"number"==typeof(l=l.delay)&&0<l?o+l:o,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return e={id:f++,callback:a,priorityLevel:e,startTime:l,expirationTime:i=l+i,sortIndex:-1},l>o?(e.sortIndex=l,n(s,e),null===r(c)&&e===r(s)&&(g?(y(C),C=-1):g=!0,O(A,l-o))):(e.sortIndex=i,n(c,e),m||h||(m=!0,N())),e},t.unstable_shouldYield=_,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},540:(e,t,n)=>{e.exports=n(869)},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var l=n.sourceMap;l&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(l))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},869:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),l=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),i=Symbol.for("react.consumer"),u=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var w=b.prototype=new y;w.constructor=b,m(w,v.prototype),w.isPureReactComponent=!0;var A=Array.isArray,k={H:null,A:null,T:null,S:null},S=Object.prototype.hasOwnProperty;function C(e,t,r,a,l,o){return r=o.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:o}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var x=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function P(){}function L(e,t,a,l,o){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u,c,s=!1;if(null===e)s=!0;else switch(i){case"bigint":case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case r:s=!0;break;case d:return L((s=e._init)(e._payload),t,a,l,o)}}if(s)return o=o(e),s=""===l?"."+_(e,0):l,A(o)?(a="",null!=s&&(a=s.replace(x,"$&/")+"/"),L(o,t,a,"",(function(e){return e}))):null!=o&&(E(o)&&(u=o,c=a+(null==o.key||e&&e.key===o.key?"":(""+o.key).replace(x,"$&/")+"/")+s,o=C(u.type,c,void 0,0,0,u.props)),t.push(o)),1;s=0;var f,h=""===l?".":l+":";if(A(e))for(var m=0;m<e.length;m++)s+=L(l=e[m],t,a,i=h+_(l,m),o);else if("function"==typeof(m=null===(f=e)||"object"!=typeof f?null:"function"==typeof(f=p&&f[p]||f["@@iterator"])?f:null))for(e=m.call(e),m=0;!(l=e.next()).done;)s+=L(l=l.value,t,a,i=h+_(l,m++),o);else if("object"===i){if("function"==typeof e.then)return L(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(P,P):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,a,l,o);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return s}function z(e,t,n){if(null==e)return e;var r=[],a=0;return L(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function N(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var O="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function T(){}t.Children={map:z,forEach:function(e,t,n){z(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return z(e,(function(){t++})),t},toArray:function(e){return z(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=o,t.PureComponent=b,t.StrictMode=l,t.Suspense=s,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=k,t.act=function(){throw Error("act(...) is not supported in production builds of React.")},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=m({},e.props),a=e.key;if(null!=t)for(l in t.ref,void 0!==t.key&&(a=""+t.key),t)!S.call(t,l)||"key"===l||"__self"===l||"__source"===l||"ref"===l&&void 0===t.ref||(r[l]=t[l]);var l=arguments.length-2;if(1===l)r.children=n;else if(1<l){for(var o=Array(l),i=0;i<l;i++)o[i]=arguments[i+2];r.children=o}return C(e.type,a,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:i,_context:e},e},t.createElement=function(e,t,n){var r,a={},l=null;if(null!=t)for(r in void 0!==t.key&&(l=""+t.key),t)S.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(a[r]=t[r]);var o=arguments.length-2;if(1===o)a.children=n;else if(1<o){for(var i=Array(o),u=0;u<o;u++)i[u]=arguments[u+2];a.children=i}if(e&&e.defaultProps)for(r in o=e.defaultProps)void 0===a[r]&&(a[r]=o[r]);return C(e,l,void 0,0,0,a)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:N}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=k.T,n={};k.T=n;try{var r=e(),a=k.S;null!==a&&a(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(T,O)}catch(e){O(e)}finally{k.T=t}},t.unstable_useCacheRefresh=function(){return k.H.useCacheRefresh()},t.use=function(e){return k.H.use(e)},t.useActionState=function(e,t,n){return k.H.useActionState(e,t,n)},t.useCallback=function(e,t){return k.H.useCallback(e,t)},t.useContext=function(e){return k.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return k.H.useDeferredValue(e,t)},t.useEffect=function(e,t){return k.H.useEffect(e,t)},t.useId=function(){return k.H.useId()},t.useImperativeHandle=function(e,t,n){return k.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return k.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return k.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return k.H.useMemo(e,t)},t.useOptimistic=function(e,t){return k.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return k.H.useReducer(e,t,n)},t.useRef=function(e){return k.H.useRef(e)},t.useState=function(e){return k.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return k.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return k.H.useTransition()},t.version="19.0.0"},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},982:(e,t,n)=>{e.exports=n(477)}},r={};function a(e){var t=r[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var l=r[e]={id:e,exports:{}};try{var o={id:e,module:l,factory:n[e],require:a};a.i.forEach((function(e){e(o)})),l=o.module,o.factory.call(l.exports,l,l.exports,o.require)}catch(e){throw l.error=e,e}return l.exports}a.m=n,a.c=r,a.i=[],a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.hu=e=>e+"."+a.h()+".hot-update.js",a.hmrF=()=>"client-bundle."+a.h()+".hot-update.json",a.h=()=>"54f9f5508f958601c98a",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="soundsync:",a.l=(n,r,l,o)=>{if(e[n])e[n].push(r);else{var i,u;if(void 0!==l)for(var c=document.getElementsByTagName("script"),s=0;s<c.length;s++){var f=c[s];if(f.getAttribute("src")==n||f.getAttribute("data-webpack")==t+l){i=f;break}}i||(u=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,a.nc&&i.setAttribute("nonce",a.nc),i.setAttribute("data-webpack",t+l),i.src=n),e[n]=[r];var d=(t,r)=>{i.onerror=i.onload=null,clearTimeout(p);var a=e[n];if(delete e[n],i.parentNode&&i.parentNode.removeChild(i),a&&a.forEach((e=>e(r))),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=d.bind(null,i.onerror),i.onload=d.bind(null,i.onload),u&&document.head.appendChild(i)}},a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e,t,n,r={},l=a.c,o=[],i=[],u="idle",c=0,s=[];function f(e){u=e;for(var t=[],n=0;n<i.length;n++)t[n]=i[n].call(null,e);return Promise.all(t).then((function(){}))}function d(){0==--c&&f("ready").then((function(){if(0===c){var e=s;s=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return f("check").then(a.hmrM).then((function(n){return n?f("prepare").then((function(){var r=[];return t=[],Promise.all(Object.keys(a.hmrC).reduce((function(e,l){return a.hmrC[l](n.c,n.r,n.m,e,t,r),e}),[])).then((function(){return t=function(){return e?m(e):f("ready").then((function(){return r}))},0===c?t():new Promise((function(e){s.push((function(){e(t())}))}));var t}))})):f(g()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==u?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+u+")")})):m(e)}function m(e){e=e||{},g();var r=t.map((function(t){return t(e)}));t=void 0;var a=r.map((function(e){return e.error})).filter(Boolean);if(a.length>0)return f("abort").then((function(){throw a[0]}));var l=f("dispose");r.forEach((function(e){e.dispose&&e.dispose()}));var o,i=f("apply"),u=function(e){o||(o=e)},c=[];return r.forEach((function(e){if(e.apply){var t=e.apply(u);if(t)for(var n=0;n<t.length;n++)c.push(t[n])}})),Promise.all([l,i]).then((function(){return o?f("fail").then((function(){throw o})):n?m(e).then((function(e){return c.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):f("idle").then((function(){return c}))}))}function g(){if(n)return t||(t=[]),Object.keys(a.hmrI).forEach((function(e){n.forEach((function(n){a.hmrI[e](n,t)}))})),n=void 0,!0}a.hmrD=r,a.i.push((function(s){var m,g,v,y,b=s.module,w=function(t,n){var r=l[n];if(!r)return t;var a=function(a){if(r.hot.active){if(l[a]){var i=l[a].parents;-1===i.indexOf(n)&&i.push(n)}else o=[n],e=a;-1===r.children.indexOf(a)&&r.children.push(a)}else console.warn("[HMR] unexpected require("+a+") from disposed module "+n),o=[];return t(a)},i=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(n){t[e]=n}}};for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&"e"!==s&&Object.defineProperty(a,s,i(s));return a.e=function(e,n){return function(e){switch(u){case"ready":f("prepare");case"prepare":return c++,e.then(d,d),e;default:return e}}(t.e(e,n))},a}(s.require,s.id);b.hot=(m=s.id,g=b,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:v=e!==m,_requireSelf:function(){o=g.parents.slice(),e=v?void 0:m,a(m)},active:!0,accept:function(e,t,n){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._acceptedDependencies[e[r]]=t||function(){},y._acceptedErrorHandlers[e[r]]=n;else y._acceptedDependencies[e]=t||function(){},y._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":t=[],Object.keys(a.hmrI).forEach((function(e){a.hmrI[e](m,t)})),f("ready");break;case"ready":Object.keys(a.hmrI).forEach((function(e){a.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(m)}},check:p,apply:h,status:function(e){if(!e)return u;i.push(e)},addStatusHandler:function(e){i.push(e)},removeStatusHandler:function(e){var t=i.indexOf(e);t>=0&&i.splice(t,1)},data:r[m]},e=void 0,y),b.parents=o,b.children=[],o=[],s.require=w})),a.hmrC={},a.hmrI={}})(),(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),(()=>{var e,t,n,r,l,o=a.hmrS_jsonp=a.hmrS_jsonp||{275:0},i={};function u(t,n){return e=n,new Promise(((e,n)=>{i[t]=e;var r=a.p+a.hu(t),l=new Error;a.l(r,(e=>{if(i[t]){i[t]=void 0;var r=e&&("load"===e.type?"missing":e.type),a=e&&e.target&&e.target.src;l.message="Loading hot update chunk "+t+" failed.\n("+r+": "+a+")",l.name="ChunkLoadError",l.type=r,l.request=a,n(l)}}))}))}function c(e){function i(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var l=r.pop(),o=l.id,i=l.chain,c=a.c[o];if(c&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:o};if(c.hot._main)return{type:"unaccepted",chain:i,moduleId:o};for(var s=0;s<c.parents.length;s++){var f=c.parents[s],d=a.c[f];if(d){if(d.hot._declinedDependencies[o])return{type:"declined",chain:i.concat([f]),moduleId:o,parentId:f};-1===t.indexOf(f)&&(d.hot._acceptedDependencies[o]?(n[f]||(n[f]=[]),u(n[f],[o])):(delete n[f],t.push(f),r.push({chain:i.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}a.f&&delete a.f.jsonpHmr,t=void 0;var c={},s=[],f={},d=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in n)if(a.o(n,p)){var h=n[p],m=h?i(p):{type:"disposed",moduleId:p},g=!1,v=!1,y=!1,b="";switch(m.chain&&(b="\nUpdate propagation: "+m.chain.join(" -> ")),m.type){case"self-declined":e.onDeclined&&e.onDeclined(m),e.ignoreDeclined||(g=new Error("Aborted because of self decline: "+m.moduleId+b));break;case"declined":e.onDeclined&&e.onDeclined(m),e.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+m.moduleId+" in "+m.parentId+b));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(m),e.ignoreUnaccepted||(g=new Error("Aborted because "+p+" is not accepted"+b));break;case"accepted":e.onAccepted&&e.onAccepted(m),v=!0;break;case"disposed":e.onDisposed&&e.onDisposed(m),y=!0;break;default:throw new Error("Unexception type "+m.type)}if(g)return{error:g};if(v)for(p in f[p]=h,u(s,m.outdatedModules),m.outdatedDependencies)a.o(m.outdatedDependencies,p)&&(c[p]||(c[p]=[]),u(c[p],m.outdatedDependencies[p]));y&&(u(s,[m.moduleId]),f[p]=d)}n=void 0;for(var w,A=[],k=0;k<s.length;k++){var S=s[k],C=a.c[S];C&&(C.hot._selfAccepted||C.hot._main)&&f[S]!==d&&!C.hot._selfInvalidated&&A.push({module:S,require:C.hot._requireSelf,errorHandler:C.hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete o[e]})),r=void 0;for(var t,n=s.slice();n.length>0;){var l=n.pop(),i=a.c[l];if(i){var u={},f=i.hot._disposeHandlers;for(k=0;k<f.length;k++)f[k].call(null,u);for(a.hmrD[l]=u,i.hot.active=!1,delete a.c[l],delete c[l],k=0;k<i.children.length;k++){var d=a.c[i.children[k]];d&&(e=d.parents.indexOf(l))>=0&&d.parents.splice(e,1)}}}for(var p in c)if(a.o(c,p)&&(i=a.c[p]))for(w=c[p],k=0;k<w.length;k++)t=w[k],(e=i.children.indexOf(t))>=0&&i.children.splice(e,1)},apply:function(t){for(var n in f)a.o(f,n)&&(a.m[n]=f[n]);for(var r=0;r<l.length;r++)l[r](a);for(var o in c)if(a.o(c,o)){var i=a.c[o];if(i){w=c[o];for(var u=[],d=[],p=[],h=0;h<w.length;h++){var m=w[h],g=i.hot._acceptedDependencies[m],v=i.hot._acceptedErrorHandlers[m];if(g){if(-1!==u.indexOf(g))continue;u.push(g),d.push(v),p.push(m)}}for(var y=0;y<u.length;y++)try{u[y].call(null,w)}catch(n){if("function"==typeof d[y])try{d[y](n,{moduleId:o,dependencyId:p[y]})}catch(r){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:o,dependencyId:p[y],error:r,originalError:n}),e.ignoreErrored||(t(r),t(n))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:o,dependencyId:p[y],error:n}),e.ignoreErrored||t(n)}}}for(var b=0;b<A.length;b++){var k=A[b],S=k.module;try{k.require(S)}catch(n){if("function"==typeof k.errorHandler)try{k.errorHandler(n,{moduleId:S,module:a.c[S]})}catch(r){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:S,error:r,originalError:n}),e.ignoreErrored||(t(r),t(n))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:S,error:n}),e.ignoreErrored||t(n)}}return s}}}self.webpackHotUpdatesoundsync=(t,r,o)=>{for(var u in r)a.o(r,u)&&(n[u]=r[u],e&&e.push(u));o&&l.push(o),i[t]&&(i[t](),i[t]=void 0)},a.hmrI.jsonp=function(e,t){n||(n={},l=[],r=[],t.push(c)),a.o(n,e)||(n[e]=a.m[e])},a.hmrC.jsonp=function(e,i,s,f,d,p){d.push(c),t={},r=i,n=s.reduce((function(e,t){return e[t]=!1,e}),{}),l=[],e.forEach((function(e){a.o(o,e)&&void 0!==o[e]?(f.push(u(e,p)),t[e]=!0):t[e]=!1})),a.f&&(a.f.jsonpHmr=function(e,n){t&&a.o(t,e)&&!t[e]&&(n.push(u(e)),t[e]=!0)})},a.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(a.p+a.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),a.nc=void 0,a(75)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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K0IsRUFBUzd4RSxLQUFLNDBFLEVBQWdCOUUsSUFDOUJ1RSxFQUFvQnZFLElBQVcsRUFFakMsRUFFRixFQUVBWCxFQUFvQnNDLEtBQU8sS0FDMUIsR0FBcUIsb0JBQVZrRyxNQUF1QixNQUFNLElBQUlwc0UsTUFBTSxzQ0FDbEQsT0FBT29zRSxNQUFNeEksRUFBb0Iza0UsRUFBSTJrRSxFQUFvQlksUUFBUTFrRSxNQUFNdXNFLElBQ3RFLEdBQXVCLE1BQXBCQSxFQUFTaHpDLE9BQVosQ0FDQSxJQUFJZ3pDLEVBQVNDLEdBQUksTUFBTSxJQUFJdHNFLE1BQU0sbUNBQXFDcXNFLEVBQVNFLFlBQy9FLE9BQU9GLEVBQVNHLE1BRmtCLENBRVosR0FDckIsTUN0Zkg1SSxFQUFvQm1CLFFBQUs5SixFQ0dDMkksRUFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zb3VuZHN5bmMvd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL3NvdW5kc3luYy8uL3NyYy9zdHlsZS5zY3NzIiwid2VicGFjazovL3NvdW5kc3luYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9zb3VuZHN5bmMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vc291bmRzeW5jLy4vc3JjL2Fzc2V0cy9pY29ucy96b29tLWluLWljb24uc3ZnIiwid2VicGFjazovL3NvdW5kc3luYy8uL3NyYy9hc3NldHMvaWNvbnMvem9vbS1vdXQtaWNvbi5zdmciLCJ3ZWJwYWNrOi8vc291bmRzeW5jLy4vc3JjL2Fzc2V0cy9pY29ucy9yZWxvYWQtaWNvbi5zdmciLCJ3ZWJwYWNrOi8vc291bmRzeW5jLy4vc3JjL2Fzc2V0cy9pY29ucy9tYWduZXRpYy1pY29uLnN2ZyIsIndlYnBhY2s6Ly9zb3VuZHN5bmMvLi9zcmMvYXNzZXRzL2ljb25zL21vdmUtaWNvbi5zdmciLCJ3ZWJwYWNrOi8vc291bmRzeW5jLy4vc3JjL2Fzc2V0cy9pY29ucy9zY2FsZS1pY29uLnN2ZyIsIndlYnBhY2s6Ly9zb3VuZHN5bmMvLi9zcmMvY29tcG9uZW50cy9Ub29sYmFyLmpzeCIsIndlYnBhY2s6Ly9zb3VuZHN5bmMvLi9zcmMvY29tcG9uZW50cy9MYXllci5qcyIsIndlYnBhY2s6Ly9zb3VuZHN5bmMvLi9zcmMvY29tcG9uZW50cy9UaW1lbGluZS5qc3giLCJ3ZWJwYWNrOi8vc291bmRzeW5jLy4vc3JjL2NvbXBvbmVudHMvTG9hZGVyLmpzeCIsIndlYnBhY2s6Ly9zb3VuZHN5bmMvLi9zcmMvQXBwLmpzeCIsIndlYnBhY2s6Ly9zb3VuZHN5bmMvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vc291bmRzeW5jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vc291bmRzeW5jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3NvdW5kc3luYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLmpzIiwid2VicGFjazovL3NvdW5kc3luYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS1jbGllbnQucHJvZHVjdGlvbi5qcyIsIndlYnBhY2s6Ly9zb3VuZHN5bmMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3NvdW5kc3luYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2xpZW50LmpzIiwid2VicGFjazovL3NvdW5kc3luYy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3NvdW5kc3luYy8uL3NyYy9zdHlsZS5zY3NzPzc1YmEiLCJ3ZWJwYWNrOi8vc291bmRzeW5jLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24uanMiLCJ3ZWJwYWNrOi8vc291bmRzeW5jLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL3NvdW5kc3luYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vc291bmRzeW5jLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vc291bmRzeW5jLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLmpzIiwid2VicGFjazovL3NvdW5kc3luYy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vc291bmRzeW5jLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9zb3VuZHN5bmMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vc291bmRzeW5jL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3NvdW5kc3luYy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vc291bmRzeW5jL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCB1cGRhdGUgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vc291bmRzeW5jL3dlYnBhY2svcnVudGltZS9nZXQgdXBkYXRlIG1hbmlmZXN0IGZpbGVuYW1lIiwid2VicGFjazovL3NvdW5kc3luYy93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giLCJ3ZWJwYWNrOi8vc291bmRzeW5jL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vc291bmRzeW5jL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vc291bmRzeW5jL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vc291bmRzeW5jL3dlYnBhY2svcnVudGltZS9ob3QgbW9kdWxlIHJlcGxhY2VtZW50Iiwid2VicGFjazovL3NvdW5kc3luYy93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9zb3VuZHN5bmMvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vc291bmRzeW5jL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9zb3VuZHN5bmMvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBpblByb2dyZXNzID0ge307XG52YXIgZGF0YVdlYnBhY2tQcmVmaXggPSBcInNvdW5kc3luYzpcIjtcbi8vIGxvYWRTY3JpcHQgZnVuY3Rpb24gdG8gbG9hZCBhIHNjcmlwdCB2aWEgc2NyaXB0IHRhZ1xuX193ZWJwYWNrX3JlcXVpcmVfXy5sID0gKHVybCwgZG9uZSwga2V5LCBjaHVua0lkKSA9PiB7XG5cdGlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9XG5cdHZhciBzY3JpcHQsIG5lZWRBdHRhY2g7XG5cdGlmKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHMgPSBzY3JpcHRzW2ldO1xuXHRcdFx0aWYocy5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgPT0gdXJsIHx8IHMuZ2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9XG5cdFx0fVxuXHR9XG5cdGlmKCFzY3JpcHQpIHtcblx0XHRuZWVkQXR0YWNoID0gdHJ1ZTtcblx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuXHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04Jztcblx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuXHRcdH1cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIsIGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KTtcblxuXHRcdHNjcmlwdC5zcmMgPSB1cmw7XG5cdH1cblx0aW5Qcm9ncmVzc1t1cmxdID0gW2RvbmVdO1xuXHR2YXIgb25TY3JpcHRDb21wbGV0ZSA9IChwcmV2LCBldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiAoZm4oZXZlbnQpKSk7XG5cdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuXHR9XG5cdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7XG5cdHNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTtcblx0c2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25sb2FkKTtcblx0bmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59OyIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGA6cm9vdHstLXNlbWktZ3JleTogIzFkMWQxZDstLWRhcmstZ3JleTogIzBlMGUwZTstLWxpZ2h0LWdyZXk6ICMzMDMwMzA7LS1kYXJrOiAjMDAwMDAwOy0tbGlnaHQ6ICNiMGIwYjA7LS1saWdodGVzdDogI2QwZDBkMDstLWhpZ2hsaWdodDogIzQwOTZmM31odG1sLGJvZHksI3Jvb3QsI3Jvb3Q+ZGl2e2hlaWdodDoxMDAlfWJvZHl7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLDApO2ZvbnQtZmFtaWx5OlwiU291cmNlIFNhbnMgUHJvXCIsQXJpYWwsSGVsdmV0aWNhLHNhbnMtc2VyaWY7Y29sb3I6dmFyKC0tbGlnaHQpO2ZvbnQtc2l6ZToxcmVtfWJ1dHRvbixpbnB1dCxsYWJlbCxzZWxlY3R7bWFyZ2luLXJpZ2h0OjNweH1idXR0b24saW5wdXQsc2VsZWN0LHN2Z3tjdXJzb3I6cG9pbnRlcn1idXR0b24saW5wdXQsc2VsZWN0LG9wdGlvbixsYWJlbHtib3JkZXItcmFkaXVzOjNweDtib3JkZXI6c29saWQgMS41cHggdmFyKC0tbGlnaHQtZ3JleSk7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1kYXJrLWdyZXkpO3BhZGRpbmc6MS41cHggM3B4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtjb2xvcjp2YXIoLS1saWdodCl9c3Zne2hlaWdodDpjYWxjKDFyZW0gLSAxcHgpO3dpZHRoOmF1dG87bWFyZ2luLXJpZ2h0OjQuNXB4O2ZpbGw6dmFyKC0tbGlnaHQpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDJweCl9c3ZnOmhvdmVyLHN2Zzpmb2N1c3tmaWxsOnZhcigtLWxpZ2h0ZXN0KX1zdmcuYWN0aXZle2ZpbGw6dmFyKC0taGlnaGxpZ2h0KX1idXR0b246aG92ZXIsYnV0dG9uOmZvY3VzLGlucHV0OmhvdmVyLGlucHV0OmZvY3VzLHNlbGVjdDpob3ZlcixzZWxlY3Q6Zm9jdXMsb3B0aW9uOmhvdmVyLG9wdGlvbjpmb2N1c3tiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWRhcmspO2NvbG9yOnZhcigtLWxpZ2h0ZXN0KX1idXR0b246Zm9jdXMsaW5wdXQ6Zm9jdXMsc2VsZWN0OmZvY3VzLG9wdGlvbjpmb2N1c3tvdXRsaW5lOnNvbGlkIDEuNXB4IHZhcigtLWhpZ2hsaWdodCl9aHJ7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1kYXJrKX1sYWJlbHtmb250LXNpemU6Y2FsYygxcmVtIC0gMi41cHgpO3BhZGRpbmctYm90dG9tOi41cHg7cGFkZGluZy10b3A6LjVweDtwYWRkaW5nLXJpZ2h0OjZweDttYXJnaW4tcmlnaHQ6LTNweH1tYWlue2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC13cmFwOndyYXA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0jbG9hZGVye3Bvc2l0aW9uOmZpeGVkO3otaW5kZXg6MTAwMDA7dGV4dC1hbGlnbjpjZW50ZXI7dG9wOjA7bGVmdDowO3dpZHRoOjEwMHZ3O2hlaWdodDoxMDB2aDtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWRhcmspO29wYWNpdHk6Ljl9I2xvYWRlciBoMSwjbG9hZGVyIHB7YW5pbWF0aW9uLW5hbWU6bG9hZGluZ09wYWNpdHk7YW5pbWF0aW9uLWR1cmF0aW9uOi43NXM7YW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDppbmZpbml0ZTthbmltYXRpb24tZGlyZWN0aW9uOmFsdGVybmF0ZX0jbG9hZGVyIHB7YW5pbWF0aW9uLWRlbGF5Oi41c31Aa2V5ZnJhbWVzIGxvYWRpbmdPcGFjaXR5e2Zyb217b3BhY2l0eTouNX10b3tvcGFjaXR5OjF9fSN0b29sYmFye3dpZHRoOjEwMCU7ZmxleDowO21hcmdpbi10b3A6LTNweDttYXJnaW4tYm90dG9tOjZweDtkaXNwbGF5OmZsZXh9I3Rvb2xiYXIgbWVudXttYXJnaW46MDtwYWRkaW5nOjA7ZGlzcGxheTpibG9jaztmbGV4LXNocmluazoxO2ZsZXgtYmFzaXM6YXV0bzthbGlnbi1zZWxmOmF1dG99I3Rvb2xiYXIgbWVudSNtYWlue2ZsZXgtZ3JvdzoxfSNpbmZvcm1hdGlvbnt3aWR0aDoxMDAlO2ZsZXg6MH0jaW5mb3JtYXRpb24gcDpoYXMoc21hbGwpe21hcmdpbi10b3A6MH0jdGltZWxpbmV7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtmbGV4OjE7ZGlzcGxheTpibG9jaztwb3NpdGlvbjpyZWxhdGl2ZTttaW4td2lkdGg6MTAwJTttaW4taGVpZ2h0OjUwcHg7Ym9yZGVyLXJhZGl1czozcHg7Ym9yZGVyOnNvbGlkIDNweCB2YXIoLS1saWdodC1ncmV5KTtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsMCk7b3ZlcmZsb3cteDphdXRvfSN0aW1lbGluZSAuZ3JpZC10aW1lbGluZSwjdGltZWxpbmUgLmdyaWQtYmFyLCN0aW1lbGluZSAuZ3JpZC1sYXllcnN7Y29sdW1uLWdhcDozcHg7bWluLXdpZHRoOjEwMCV9I3RpbWVsaW5lIC5ncmlkLWJhciwjdGltZWxpbmUgLmdyaWQtYmVhdHtoZWlnaHQ6MTAwJX0jdGltZWxpbmUgLmdyaWQtdGltZWxpbmV7cG9zaXRpb246c3RpY2t5O3RvcDowO2xlZnQ6MDt6LWluZGV4Oi0xMDtoZWlnaHQ6MTAwJTtkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZToxMDAlL3JlcGVhdCgzLCAxZnIpO2JhY2tncm91bmQtY29sb3I6dmFyKC0tbGlnaHQtZ3JleSl9I3RpbWVsaW5lIC5ncmlkLXRpbWVsaW5lIC5ncmlkLWJhcntkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZTpyZXBlYXQoMSwgMWZyKS9yZXBlYXQoNCwgMWZyKTtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNlbWktZ3JleSl9I3RpbWVsaW5lIC5ncmlkLXRpbWVsaW5lIC5ncmlkLWJhciAuZ3JpZC1iZWF0e2JhY2tncm91bmQtY29sb3I6dmFyKC0tZGFyay1ncmV5KX0jdGltZWxpbmUgLmdyaWQtbGF5ZXJze2Rpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlOnJlcGVhdCgxLCAxZnIpL3JlcGVhdCgxMiwgMWZyKTtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsMCk7aGVpZ2h0OjA7b3ZlcmZsb3cteDpjbGlwfSN0aW1lbGluZSAuZ3JpZC1sYXllcnMgLnRpbWVsaW5lLWxheWVye3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQtY29sb3I6Izk5MzJjYztib3JkZXItcmFkaXVzOjNweDtwYWRkaW5nOjNweDttYXJnaW4tdG9wOjZweDttYXJnaW4tYm90dG9tOjZweDtncmlkLWNvbHVtbi1zdGFydDozO2dyaWQtY29sdW1uLWVuZDo2O2ZvbnQtc2l6ZTouOXJlbTt3aGl0ZS1zcGFjZTpub3dyYXA7Y3Vyc29yOmV3LXJlc2l6ZTstd2Via2l0LXRvdWNoLWNhbGxvdXQ6bm9uZSAhaW1wb3J0YW50Oy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZSAhaW1wb3J0YW50Oy13ZWJraXQtdXNlci1kcmFnOm5vbmUgIWltcG9ydGFudDsta2h0bWwtdXNlci1zZWxlY3Q6bm9uZSAhaW1wb3J0YW50Oy1tb3otdXNlci1zZWxlY3Q6bm9uZSAhaW1wb3J0YW50Oy1tcy11c2VyLXNlbGVjdDpub25lICFpbXBvcnRhbnQ7dXNlci1zZWxlY3Q6bm9uZSAhaW1wb3J0YW50fSN0aW1lbGluZSAuZ3JpZC1sYXllcnMgLnRpbWVsaW5lLWxheWVyIC50aW1lbGluZS1sYXllci1idXR0b257cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7d2lkdGg6NTAlO2hlaWdodDoxMDAlfSN0aW1lbGluZSAuZ3JpZC1sYXllcnMgLnRpbWVsaW5lLWxheWVyIC50aW1lbGluZS1sYXllci1idXR0b24ubGVmdHtsZWZ0OjB9I3RpbWVsaW5lIC5ncmlkLWxheWVycyAudGltZWxpbmUtbGF5ZXIgLnRpbWVsaW5lLWxheWVyLWJ1dHRvbi5yaWdodHtyaWdodDowfSN0aW1lbGluZSAuZ3JpZC1sYXllcnMgLnRpbWVsaW5lLWxheWVyIHNwYW57Y29sb3I6I2ZmZjttaXgtYmxlbmQtbW9kZTpkaWZmZXJlbmNlO3BvaW50ZXItZXZlbnRzOm5vbmV9I3RpbWVsaW5lIC5ncmlkLWxheWVycyAudGltZWxpbmUtbGF5ZXIuZ2hvc3R7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLDApO291dGxpbmUtc3R5bGU6c29saWQ7b3V0bGluZS13aWR0aDozcHg7b3V0bGluZS1vZmZzZXQ6MnB4fWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsTUFDSSxvQkFBQSxDQUNBLG9CQUFBLENBQ0EscUJBQUEsQ0FDQSxlQUFBLENBQ0EsZ0JBQUEsQ0FDQSxtQkFBQSxDQUNBLG9CQUFBLENBR0osMEJBQ0ksV0FBQSxDQUdKLEtBQ0ksOEJBQUEsQ0FDQSx3REFBQSxDQUNBLGtCQUFBLENBQ0EsY0FBQSxDQUdKLDBCQUNJLGdCQUFBLENBR0osd0JBQ0ksY0FBQSxDQUdKLGlDQUNJLGlCQUFBLENBQ0Esb0NBQUEsQ0FDQSxpQ0FBQSxDQUNBLGlCQUFBLENBQ0Esd0JBQUEsQ0FDQSxrQkFBQSxDQUdKLElBQ0ksdUJBQUEsQ0FDQSxVQUFBLENBQ0Esa0JBQUEsQ0FDQSxpQkFBQSxDQUNBLHlCQUFBLENBQ0Esb0JBQ0ksb0JBQUEsQ0FFSixXQUNJLHFCQUFBLENBS0osc0dBQ0ksNEJBQUEsQ0FDQSxxQkFBQSxDQUVKLG1EQUNJLG9DQUFBLENBSVIsR0FDSSw0QkFBQSxDQUdKLE1BQ0ksNEJBQUEsQ0FDQSxtQkFBQSxDQUNBLGdCQUFBLENBQ0EsaUJBQUEsQ0FDQSxpQkFBQSxDQUdKLEtBQ0ksWUFBQSxDQUNBLHFCQUFBLENBQ0EsY0FBQSxDQUNBLFVBQUEsQ0FDQSxXQUFBLENBR0osUUFDSSxjQUFBLENBQ0EsYUFBQSxDQUNBLGlCQUFBLENBQ0EsS0FBQSxDQUNBLE1BQUEsQ0FDQSxXQUFBLENBQ0EsWUFBQSxDQUNBLDRCQUFBLENBQ0EsVUFBQSxDQUNBLHFCQUNJLDZCQUFBLENBQ0EsdUJBQUEsQ0FDQSxrQ0FBQSxDQUNBLDZCQUFBLENBRUosVUFDSSxtQkFBQSxDQUlSLDBCQUNJLEtBQUEsVUFBQSxDQUNBLEdBQUEsU0FBQSxDQUFBLENBR0osU0FDSSxVQUFBLENBQ0EsTUFBQSxDQUNBLGVBQUEsQ0FDQSxpQkFBQSxDQUNBLFlBQUEsQ0FDQSxjQUNJLFFBQUEsQ0FDQSxTQUFBLENBQ0EsYUFBQSxDQUNBLGFBQUEsQ0FDQSxlQUFBLENBQ0EsZUFBQSxDQUNBLG1CQUNJLFdBQUEsQ0FLWixhQUNJLFVBQUEsQ0FDQSxNQUFBLENBRUksMEJBQ0ksWUFBQSxDQUtaLFVBQ0ksVUFBQSxDQUNBLFdBQUEsQ0FDQSxNQUFBLENBQ0EsYUFBQSxDQUNBLGlCQUFBLENBQ0EsY0FBQSxDQUNBLGVBQUEsQ0FDQSxpQkFBQSxDQUNBLGtDQUFBLENBQ0EsOEJBQUEsQ0FDQSxlQUFBLENBQ0Esb0VBQ0ksY0FBQSxDQUNBLGNBQUEsQ0FFSix5Q0FDSSxXQUFBLENBRUoseUJBQ0ksZUFBQSxDQUNBLEtBQUEsQ0FDQSxNQUFBLENBQ0EsV0FBQSxDQUNBLFdBQUEsQ0FDQSxZQUFBLENBQ0EsaUNBQUEsQ0FDQSxrQ0FBQSxDQUNBLG1DQUNJLFlBQUEsQ0FDQSwyQ0FBQSxDQUNBLGlDQUFBLENBQ0EsOENBQ0ksaUNBQUEsQ0FJWix1QkFDSSxZQUFBLENBQ0EsNENBQUEsQ0FDQSw4QkFBQSxDQUNBLFFBQUEsQ0FDQSxlQUFBLENBQ0EsdUNBQ0ksaUJBQUEsQ0FDQSx3QkFBQSxDQUNBLGlCQUFBLENBQ0EsV0FBQSxDQUNBLGNBQUEsQ0FDQSxpQkFBQSxDQUNBLG1CQUFBLENBQ0EsaUJBQUEsQ0FDQSxlQUFBLENBQ0Esa0JBQUEsQ0FDQSxnQkFBQSxDQUNBLHFDQUFBLENBQ0EsbUNBQUEsQ0FDQSxpQ0FBQSxDQUNBLGtDQUFBLENBQ0EsZ0NBQUEsQ0FDQSwrQkFBQSxDQUNBLDJCQUFBLENBQ0EsOERBQ0ksaUJBQUEsQ0FDQSxLQUFBLENBQ0EsU0FBQSxDQUNBLFdBQUEsQ0FDQSxtRUFDSSxNQUFBLENBRUosb0VBQ0ksT0FBQSxDQUdSLDRDQUNJLFVBQUEsQ0FDQSx5QkFBQSxDQUNBLG1CQUFBLENBRUosNkNBQ0ksOEJBQUEsQ0FDQSxtQkFBQSxDQUNBLGlCQUFBLENBQ0Esa0JBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOnJvb3Qge1xcclxcbiAgICAtLXNlbWktZ3JleTogIzFkMWQxZDtcXHJcXG4gICAgLS1kYXJrLWdyZXk6ICMwZTBlMGU7XFxyXFxuICAgIC0tbGlnaHQtZ3JleTogIzMwMzAzMDtcXHJcXG4gICAgLS1kYXJrOiAjMDAwMDAwO1xcclxcbiAgICAtLWxpZ2h0OiAjYjBiMGIwO1xcclxcbiAgICAtLWxpZ2h0ZXN0OiAjZDBkMGQwO1xcclxcbiAgICAtLWhpZ2hsaWdodDogIzQwOTZmMztcXHJcXG59XFxyXFxuXFxyXFxuaHRtbCwgYm9keSwgI3Jvb3QsICNyb290PmRpdiB7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG59XFxyXFxuXFxyXFxuYm9keSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbiAgICBmb250LWZhbWlseTogJ1NvdXJjZSBTYW5zIFBybycsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XFxyXFxuICAgIGNvbG9yOiB2YXIoLS1saWdodCk7XFxyXFxuICAgIGZvbnQtc2l6ZTogMXJlbTtcXHJcXG59XFxyXFxuXFxyXFxuYnV0dG9uLCBpbnB1dCwgbGFiZWwsIHNlbGVjdCB7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogM3B4O1xcclxcbn1cXHJcXG5cXHJcXG5idXR0b24sIGlucHV0LCBzZWxlY3QsIHN2ZyB7XFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuYnV0dG9uLCBpbnB1dCwgc2VsZWN0LCBvcHRpb24sIGxhYmVsIHtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xcclxcbiAgICBib3JkZXI6IHNvbGlkIDEuNXB4IHZhcigtLWxpZ2h0LWdyZXkpO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kYXJrLWdyZXkpO1xcclxcbiAgICBwYWRkaW5nOiAxLjVweCAzcHg7XFxyXFxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XFxyXFxuICAgIGNvbG9yOiB2YXIoLS1saWdodCk7XFxyXFxufVxcclxcblxcclxcbnN2ZyB7XFxyXFxuICAgIGhlaWdodDogY2FsYygxcmVtIC0gMXB4KTtcXHJcXG4gICAgd2lkdGg6IGF1dG87XFxyXFxuICAgIG1hcmdpbi1yaWdodDogNC41cHg7XFxyXFxuICAgIGZpbGw6IHZhcigtLWxpZ2h0KTtcXHJcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDJweCk7XFxyXFxuICAgICY6aG92ZXIsICY6Zm9jdXMge1xcclxcbiAgICAgICAgZmlsbDogdmFyKC0tbGlnaHRlc3QpO1xcclxcbiAgICB9XFxyXFxuICAgICYuYWN0aXZlIHtcXHJcXG4gICAgICAgIGZpbGw6IHZhcigtLWhpZ2hsaWdodCk7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuYnV0dG9uLCBpbnB1dCwgc2VsZWN0LCBvcHRpb24ge1xcclxcbiAgICAmOmhvdmVyLCAmOmZvY3VzIHtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWRhcmspO1xcclxcbiAgICAgICAgY29sb3I6IHZhcigtLWxpZ2h0ZXN0KTtcXHJcXG4gICAgfVxcclxcbiAgICAmOmZvY3VzIHtcXHJcXG4gICAgICAgIG91dGxpbmU6IHNvbGlkIDEuNXB4IHZhcigtLWhpZ2hsaWdodCk7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuaHIge1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1kYXJrKTtcXHJcXG59XFxyXFxuXFxyXFxubGFiZWwge1xcclxcbiAgICBmb250LXNpemU6IGNhbGMoMXJlbSAtIDIuNXB4KTtcXHJcXG4gICAgcGFkZGluZy1ib3R0b206IDAuNXB4O1xcclxcbiAgICBwYWRkaW5nLXRvcDogMC41cHg7XFxyXFxuICAgIHBhZGRpbmctcmlnaHQ6IDZweDtcXHJcXG4gICAgbWFyZ2luLXJpZ2h0OiAtM3B4O1xcclxcbn1cXHJcXG5cXHJcXG5tYWluIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG4jbG9hZGVyIHtcXHJcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgICB6LWluZGV4OiAxMDAwMDtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICB0b3A6IDA7XFxyXFxuICAgIGxlZnQ6IDA7XFxyXFxuICAgIHdpZHRoOiAxMDB2dztcXHJcXG4gICAgaGVpZ2h0OiAxMDB2aDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZGFyayk7XFxyXFxuICAgIG9wYWNpdHk6IDAuOTtcXHJcXG4gICAgaDEsIHAge1xcclxcbiAgICAgICAgYW5pbWF0aW9uLW5hbWU6IGxvYWRpbmdPcGFjaXR5O1xcclxcbiAgICAgICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjc1cztcXHJcXG4gICAgICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IGluZmluaXRlO1xcclxcbiAgICAgICAgYW5pbWF0aW9uLWRpcmVjdGlvbjogYWx0ZXJuYXRlO1xcclxcbiAgICB9XFxyXFxuICAgIHAge1xcclxcbiAgICAgICAgYW5pbWF0aW9uLWRlbGF5OiAwLjVzO1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbkBrZXlmcmFtZXMgbG9hZGluZ09wYWNpdHkge1xcclxcbiAgICBmcm9tIHtvcGFjaXR5OiAwLjU7fVxcclxcbiAgICB0byB7b3BhY2l0eTogMTt9XFxyXFxuICB9XFxyXFxuXFxyXFxuI3Rvb2xiYXIge1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgZmxleDogMDtcXHJcXG4gICAgbWFyZ2luLXRvcDogLTNweDtcXHJcXG4gICAgbWFyZ2luLWJvdHRvbTogNnB4O1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBtZW51IHtcXHJcXG4gICAgICAgIG1hcmdpbjogMDtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgICAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gICAgICAgIGZsZXgtc2hyaW5rOiAxO1xcclxcbiAgICAgICAgZmxleC1iYXNpczogYXV0bztcXHJcXG4gICAgICAgIGFsaWduLXNlbGY6IGF1dG87XFxyXFxuICAgICAgICAmI21haW4geyAgIFxcclxcbiAgICAgICAgICAgIGZsZXgtZ3JvdzogMTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4jaW5mb3JtYXRpb24ge1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgZmxleDogMDtcXHJcXG4gICAgcCB7XFxyXFxuICAgICAgICAmOmhhcyhzbWFsbCkge1xcclxcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuI3RpbWVsaW5lIHtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgZmxleDogMTtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgbWluLXdpZHRoOiAxMDAlO1xcclxcbiAgICBtaW4taGVpZ2h0OiA1MHB4O1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XFxyXFxuICAgIGJvcmRlcjogc29saWQgM3B4IHZhcigtLWxpZ2h0LWdyZXkpO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXHJcXG4gICAgb3ZlcmZsb3cteDogYXV0bztcXHJcXG4gICAgLmdyaWQtdGltZWxpbmUsIC5ncmlkLWJhciwgLmdyaWQtbGF5ZXJzIHtcXHJcXG4gICAgICAgIGNvbHVtbi1nYXA6IDNweDtcXHJcXG4gICAgICAgIG1pbi13aWR0aDogMTAwJTtcXHJcXG4gICAgfVxcclxcbiAgICAuZ3JpZC1iYXIsIC5ncmlkLWJlYXQge1xcclxcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICB9XFxyXFxuICAgIC5ncmlkLXRpbWVsaW5lIHtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiBzdGlja3k7XFxyXFxuICAgICAgICB0b3A6IDA7XFxyXFxuICAgICAgICBsZWZ0OiAwO1xcclxcbiAgICAgICAgei1pbmRleDogLTEwO1xcclxcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgICAgIGdyaWQtdGVtcGxhdGU6IDEwMCUgLyByZXBlYXQoMywgMWZyKTtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWxpZ2h0LWdyZXkpOyAvKiBDb2xvciBvZiBiYXIgdmVydGljYWwgbGluZXMgKi9cXHJcXG4gICAgICAgIC5ncmlkLWJhciB7XFxyXFxuICAgICAgICAgICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgICAgICAgICBncmlkLXRlbXBsYXRlOiByZXBlYXQoMSwgMWZyKSAvIHJlcGVhdCg0LCAxZnIpO1xcclxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlbWktZ3JleSk7IC8qIENvbG9yIG9mIGJlYXQgdmVydGljYWwgbGluZXMgKi9cXHJcXG4gICAgICAgICAgICAuZ3JpZC1iZWF0IHtcXHJcXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZGFyay1ncmV5KTtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG4gICAgLmdyaWQtbGF5ZXJzIHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgICAgICBncmlkLXRlbXBsYXRlOiByZXBlYXQoMSwgMWZyKSAvIHJlcGVhdCgxMiwgMWZyKTtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbiAgICAgICAgaGVpZ2h0OiAwO1xcclxcbiAgICAgICAgb3ZlcmZsb3cteDogY2xpcDtcXHJcXG4gICAgICAgIC50aW1lbGluZS1sYXllciB7XFxyXFxuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtvcmNoaWQ7XFxyXFxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogM3B4O1xcclxcbiAgICAgICAgICAgIHBhZGRpbmc6IDNweDtcXHJcXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiA2cHg7XFxyXFxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNnB4O1xcclxcbiAgICAgICAgICAgIGdyaWQtY29sdW1uLXN0YXJ0OiAzO1xcclxcbiAgICAgICAgICAgIGdyaWQtY29sdW1uLWVuZDogNjtcXHJcXG4gICAgICAgICAgICBmb250LXNpemU6IDAuOXJlbTtcXHJcXG4gICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcclxcbiAgICAgICAgICAgIGN1cnNvcjogZXctcmVzaXplO1xcclxcbiAgICAgICAgICAgIC13ZWJraXQtdG91Y2gtY2FsbG91dDogbm9uZSAhaW1wb3J0YW50O1xcclxcbiAgICAgICAgICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmUgIWltcG9ydGFudDtcXHJcXG4gICAgICAgICAgICAtd2Via2l0LXVzZXItZHJhZzogbm9uZSAhaW1wb3J0YW50O1xcclxcbiAgICAgICAgICAgIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZSAhaW1wb3J0YW50O1xcclxcbiAgICAgICAgICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmUgIWltcG9ydGFudDtcXHJcXG4gICAgICAgICAgICAtbXMtdXNlci1zZWxlY3Q6IG5vbmUgIWltcG9ydGFudDtcXHJcXG4gICAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZSAhaW1wb3J0YW50O1xcclxcbiAgICAgICAgICAgIC50aW1lbGluZS1sYXllci1idXR0b24ge1xcclxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICAgICAgICAgIHRvcDogMDtcXHJcXG4gICAgICAgICAgICAgICAgd2lkdGg6IDUwJTtcXHJcXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICAgICAgICAgICAgICAmLmxlZnQge1xcclxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogMDtcXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICAmLnJpZ2h0IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAwO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIHNwYW4ge1xcclxcbiAgICAgICAgICAgICAgICBjb2xvcjogI2ZmZmZmZjtcXHJcXG4gICAgICAgICAgICAgICAgbWl4LWJsZW5kLW1vZGU6IGRpZmZlcmVuY2U7XFxyXFxuICAgICAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAmLmdob3N0IHtcXHJcXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuICAgICAgICAgICAgICAgIG91dGxpbmUtc3R5bGU6IHNvbGlkO1xcclxcbiAgICAgICAgICAgICAgICBvdXRsaW5lLXdpZHRoOiAzcHg7XFxyXFxuICAgICAgICAgICAgICAgIG91dGxpbmUtb2Zmc2V0OiAycHg7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsInZhciBfcGF0aDtcbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyByZXR1cm4gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAobikgeyBmb3IgKHZhciBlID0gMTsgZSA8IGFyZ3VtZW50cy5sZW5ndGg7IGUrKykgeyB2YXIgdCA9IGFyZ3VtZW50c1tlXTsgZm9yICh2YXIgciBpbiB0KSAoe30pLmhhc093blByb3BlcnR5LmNhbGwodCwgcikgJiYgKG5bcl0gPSB0W3JdKTsgfSByZXR1cm4gbjsgfSwgX2V4dGVuZHMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsgfVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG52YXIgU3ZnWm9vbUluSWNvbiA9IGZ1bmN0aW9uIFN2Z1pvb21Jbkljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9leHRlbmRzKHtcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIHhtbFNwYWNlOiBcInByZXNlcnZlXCIsXG4gICAgdmlld0JveDogXCIwIDAgMTIyLjg3OSAxMTkuODAxXCJcbiAgfSwgcHJvcHMpLCBfcGF0aCB8fCAoX3BhdGggPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTQ5Ljk5MSAwaC4wMTV2LjAwNkM2My44LjAxIDc2LjMgNS42MDcgODUuMzQyIDE0LjY1MWM5LjAyNiA5LjAzMSAxNC42MTggMjEuNTE1IDE0LjYyOCAzNS4zMDNoLjAwNnYuMDc0aC0uMDA2YTUwIDUwIDAgMCAxLTMuNDcxIDE4LjMwMXYuMDA3YTUwIDUwIDAgMCAxLTUuNTQ4IDEwLjMwN2wyOS4wOCAyNi4xNC4wMTguMDE1LjE1Ny4xNDYuMDEyLjAxMmE4LjYgOC42IDAgMCAxIDIuNjQ4IDUuNzc5IDguNiA4LjYgMCAwIDEtMS45NzYgNS45NzFsLS4wMTEuMDE2LS4xNzYuMjA0LS4wMzkuMDQ2LS4xNDUuMTU1LS4wMTEuMDExYTguNiA4LjYgMCAwIDEtNS43ODIgMi42NTEgOC42IDguNiAwIDAgMS01Ljk3NS0xLjk3OGwtLjAxMi0uMDEyLS4yMDMtLjE3NS0uMDI5LS4wMjQtMjkuNzQzLTI2LjczNWE1MCA1MCAwIDAgMS0yLjY4NyAxLjc2MyA1MCA1MCAwIDAgMS0zLjgxNiAyLjExN2MtNi42OTkgMy4zNDItMTQuMjY2IDUuMjIzLTIyLjI3IDUuMjIzdi4wMDZoLS4wMTZ2LS4wMDZjLTEzLjc5Ny0uMDA1LTI2LjI5Ny01LjYwMS0zNS4zMzQtMTQuNjQ0bC0uMDA0LjAwNUM1LjYwOCA3Ni4zLjAxNiA2My44MS4wMDcgNTAuMDIxSDB2LS4wNDloLjAwN2MuMDA1LTEzLjc5OSA1LjYwMS0yNi4yOTcgMTQuNjQ2LTM1LjMzOUMyMy42ODQgNS42MDcgMzYuMTY5LjAxNSA0OS45NTguMDA2VjB6bTE3Ljc5NiA0My4zOTdhNi41NiA2LjU2IDAgMCAxIDMuMzIyLjg3MmwtLjAwMi4wMDJjLjM2NS4yMS43MDguNDU0IDEuMDEuNzE1LjMwNi4yNjQuNTk0LjU2OS44NTEuODk1aC4wMDRhNi41MiA2LjUyIDAgMCAxIDEuMzk0IDQuMDUzIDYuNjMgNi42MyAwIDAgMS0uOTA2IDMuMzM1IDYuNyA2LjcgMCAwIDEtMS43OTEgMS45OTYgNi43IDYuNyAwIDAgMS0xLjE2OC42ODh2LjAwMmE2LjYgNi42IDAgMCAxLTIuNzIyLjZsLTExLjA1MS4wOC0uMDggMTEuMDYyYTYuNSA2LjUgMCAwIDEtMS4zNjYgMy45NmwtLjAwNi4wMDdhNi42NDYgNi42NDYgMCAwIDEtNS4yNDcgMi41Njh2LS4wMDdhNi42IDYuNiAwIDAgMS0xLjc0My0uMjMyIDYuNTYgNi41NiAwIDAgMS0yLjg5OS0xLjY4OSA2LjUgNi41IDAgMCAxLTEuNjcyLTIuODkzdi0uMDA2YTYuNiA2LjYgMCAwIDEtLjIxNS0xLjcyOHYtLjAwNWwuMDc1LTEwLjk0NS0xMC45NjIuMDc2YTYuNSA2LjUgMCAwIDEtMy4zMjctLjg3M2wuMDAyLS4wMDJhNi4zIDYuMyAwIDAgMS0xLjg2LTEuNjEzaC0uMDA0YTYuNTIgNi41MiAwIDAgMS0xLjM5My00LjA1MyA2LjYgNi42IDAgMCAxIC45MDYtMy4zMjhsLS4wMDQtLjAwMmE2LjggNi44IDAgMCAxIDEuNDQyLTEuNzE0aC4wMDRhNi43IDYuNyAwIDAgMSAxLjk0Mi0xLjE1MSA2LjYgNi42IDAgMCAxIDIuMjk2LS40MjNsMTEuMDUxLS4wODIuMDgtMTEuMDYyYTYuNSA2LjUgMCAwIDEgLjkyMS0zLjMwOWwuMDA0LjAwMmMuMjI0LS4zNzQuNDY3LS43MTUuNzI3LTEuMDAzLjI2NC0uMjk2LjU3Ni0uNTg0LjkwOC0uODM5bC4wMDUtLjAwNHYuMDAyYTYuNjIgNi42MiAwIDAgMSA0LjA1NS0xLjM3NSA2LjYgNi42IDAgMCAxIDMuMzE3Ljg5N2MuNDc5LjI3OS45MjguNjMxIDEuMzIgMS4wMjVsLjAwNC0uMDA0YTYuNSA2LjUgMCAwIDEgMS44ODcgNC42MzdsLS4wNzUgMTAuOTQyek01MC4wMDYgMTEuMjEydi4wMDZoLS4wNDl2LS4wMDZjLTEwLjY4My4wMDctMjAuMzY3IDQuMzQ4LTI3LjM3NiAxMS4zNTRsLjAwMi4wMDJjLTcuMDE5IDcuMDE4LTExLjM2NSAxNi43MTEtMTEuMzY4IDI3LjQwNGguMDA2di4wNDloLS4wMDZjLjAwNiAxMC42ODMgNC4zNDcgMjAuMzY1IDExLjM1NCAyNy4zNzdsLjAwMi0uMDAyYzcuMDE4IDcuMDE4IDE2LjcxMSAxMS4zNjUgMjcuNDA0IDExLjM2N3YtLjAwN2guMDQ5di4wMDdjMTAuNjg1LS4wMDcgMjAuMzY3LTQuMzQ4IDI3LjM4MS0xMS4zNTkgNy4wMTItNy4wMDkgMTEuMzU5LTE2LjcwMiAxMS4zNjEtMjcuNDAxaC0uMDA2di0uMDQ5aC4wMDdjLS4wMDctMTAuNjgxLTQuMzQ4LTIwLjM2My0xMS4zNi0yNy4zNzR2LS4wMDdjLTcuMDA5LTcuMDExLTE2LjcwMi0xMS4zNTktMjcuNDAxLTExLjM2MVwiXG4gIH0pKSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgU3ZnWm9vbUluSWNvbjsiLCJ2YXIgX3BhdGg7XG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgcmV0dXJuIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKG4pIHsgZm9yICh2YXIgZSA9IDE7IGUgPCBhcmd1bWVudHMubGVuZ3RoOyBlKyspIHsgdmFyIHQgPSBhcmd1bWVudHNbZV07IGZvciAodmFyIHIgaW4gdCkgKHt9KS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIHIpICYmIChuW3JdID0gdFtyXSk7IH0gcmV0dXJuIG47IH0sIF9leHRlbmRzLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7IH1cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xudmFyIFN2Z1pvb21PdXRJY29uID0gZnVuY3Rpb24gU3ZnWm9vbU91dEljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9leHRlbmRzKHtcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIHhtbFNwYWNlOiBcInByZXNlcnZlXCIsXG4gICAgdmlld0JveDogXCIwIDAgMTIyLjg3OSAxMTkuODAxXCJcbiAgfSwgcHJvcHMpLCBfcGF0aCB8fCAoX3BhdGggPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGZpbGxSdWxlOiBcImV2ZW5vZGRcIixcbiAgICBkOiBcIk00OS45OTEgMGguMDE1di4wMDZDNjMuOC4wMSA3Ni4zIDUuNjA3IDg1LjM0MiAxNC42NTFjOS4wMjYgOS4wMzEgMTQuNjE4IDIxLjUxNSAxNC42MjggMzUuMzAzaC4wMDZ2LjA3NGgtLjAwNmE1MCA1MCAwIDAgMS0zLjQ3MSAxOC4zMDF2LjAwN2E1MCA1MCAwIDAgMS01LjU0OCAxMC4zMDdsMjkuMDggMjYuMTQuMDE4LjAxNS4xNTcuMTQ2LjAxMi4wMTJhOC42IDguNiAwIDAgMSAyLjY0OCA1Ljc3OSA4LjYgOC42IDAgMCAxLTEuOTc2IDUuOTcxbC0uMDExLjAxNi0uMTc2LjIwNC0uMDM5LjA0Ni0uMTQ1LjE1NS0uMDExLjAxMWE4LjYgOC42IDAgMCAxLTUuNzgyIDIuNjUxIDguNiA4LjYgMCAwIDEtNS45NzUtMS45NzhsLS4wMTItLjAxMi0uMjAzLS4xNzUtLjAyOS0uMDI0LTI5Ljc0My0yNi43MzVhNTAgNTAgMCAwIDEtMi42ODcgMS43NjMgNTAgNTAgMCAwIDEtMy44MTYgMi4xMTdjLTYuNjk5IDMuMzQyLTE0LjI2NiA1LjIyMy0yMi4yNyA1LjIyM3YuMDA2aC0uMDE2di0uMDA2Yy0xMy43OTctLjAwNS0yNi4yOTctNS42MDEtMzUuMzM0LTE0LjY0NGwtLjAwNC4wMDVDNS42MDggNzYuMy4wMTYgNjMuODEuMDA3IDUwLjAyMUgwdi0uMDQ5aC4wMDdjLjAwNS0xMy43OTkgNS42MDEtMjYuMjk3IDE0LjY0Ni0zNS4zMzlDMjMuNjg0IDUuNjA3IDM2LjE2OS4wMTUgNDkuOTU4LjAwNlYwem0xNy43OTYgNDMuMzk3YTYuNTYgNi41NiAwIDAgMSAzLjMyMi44NzJsLS4wMDIuMDAyYy4zNjUuMjEuNzA4LjQ1NCAxLjAxLjcxNS4zMDYuMjY0LjU5NC41NjkuODUxLjg5NWguMDA0YTYuNTIgNi41MiAwIDAgMSAxLjM5NCA0LjA1MyA2LjYzIDYuNjMgMCAwIDEtLjkwNiAzLjMzNSA2LjcgNi43IDAgMCAxLTEuNzkxIDEuOTk2IDYuNyA2LjcgMCAwIDEtMS4xNjguNjg4di4wMDJhNi42IDYuNiAwIDAgMS0yLjcyMi42bC0zNS4xNjYuMjQ4YTYuNSA2LjUgMCAwIDEtMy4zMjctLjg3M2wuMDAyLS4wMDJhNi4zIDYuMyAwIDAgMS0xLjg2LTEuNjEzaC0uMDA0YTYuNTIgNi41MiAwIDAgMS0xLjM5My00LjA1MyA2LjYgNi42IDAgMCAxIC45MDYtMy4zMjhsLS4wMDQtLjAwMmE2LjggNi44IDAgMCAxIDEuNDQyLTEuNzE0aC4wMDRhNi43IDYuNyAwIDAgMSAxLjk0Mi0xLjE1MSA2LjYgNi42IDAgMCAxIDIuMjk2LS40MjN6TTUwLjAwNiAxMS4yMTJ2LjAwNmgtLjA0OXYtLjAwNmMtMTAuNjgzLjAwNy0yMC4zNjcgNC4zNDgtMjcuMzc2IDExLjM1NGwuMDAyLjAwMmMtNy4wMTkgNy4wMTgtMTEuMzY1IDE2LjcxMS0xMS4zNjggMjcuNDA0aC4wMDZ2LjA0OWgtLjAwNmMuMDA2IDEwLjY4MyA0LjM0NyAyMC4zNjUgMTEuMzU0IDI3LjM3N2wuMDAyLS4wMDJjNy4wMTggNy4wMTggMTYuNzExIDExLjM2NSAyNy40MDQgMTEuMzY3di0uMDA3aC4wNDl2LjAwN2MxMC42ODUtLjAwNyAyMC4zNjctNC4zNDggMjcuMzgxLTExLjM1OSA3LjAxMi03LjAwOSAxMS4zNTktMTYuNzAyIDExLjM2MS0yNy40MDFoLS4wMDZ2LS4wNDloLjAwN2MtLjAwNy0xMC42ODEtNC4zNDgtMjAuMzYzLTExLjM2LTI3LjM3NHYtLjAwN2MtNy4wMDktNy4wMTEtMTYuNzAyLTExLjM1OS0yNy40MDEtMTEuMzYxXCIsXG4gICAgY2xpcFJ1bGU6IFwiZXZlbm9kZFwiXG4gIH0pKSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgU3ZnWm9vbU91dEljb247IiwidmFyIF9wYXRoO1xuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IHJldHVybiBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uIChuKSB7IGZvciAodmFyIGUgPSAxOyBlIDwgYXJndW1lbnRzLmxlbmd0aDsgZSsrKSB7IHZhciB0ID0gYXJndW1lbnRzW2VdOyBmb3IgKHZhciByIGluIHQpICh7fSkuaGFzT3duUHJvcGVydHkuY2FsbCh0LCByKSAmJiAobltyXSA9IHRbcl0pOyB9IHJldHVybiBuOyB9LCBfZXh0ZW5kcy5hcHBseShudWxsLCBhcmd1bWVudHMpOyB9XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbnZhciBTdmdSZWxvYWRJY29uID0gZnVuY3Rpb24gU3ZnUmVsb2FkSWNvbihwcm9wcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX2V4dGVuZHMoe1xuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgXCJkYXRhLW5hbWVcIjogXCJMYXllciAxXCIsXG4gICAgdmlld0JveDogXCIwIDAgMTE5LjQgMTIyLjg4XCJcbiAgfSwgcHJvcHMpLCBfcGF0aCB8fCAoX3BhdGggPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTgzLjkxIDI2LjM0YTQzLjggNDMuOCAwIDAgMC0yMi42OC03IDQyIDQyIDAgMCAwLTI0LjQyIDcgNTAgNTAgMCAwIDAtNy40NiA2LjA5IDQyLjA3IDQyLjA3IDAgMCAwLTUuNDcgNTQuMUE0OSA0OSAwIDAgMCAzMCA5NGE0MS44MyA0MS44MyAwIDAgMCAxOC42IDEwLjkgNDIuNzcgNDIuNzcgMCAwIDAgMjEuNzcuMTMgNDcuMiA0Ny4yIDAgMCAwIDE5LjItOS42MiAzOCAzOCAwIDAgMCAxMS4xNC0xNiAzNyAzNyAwIDAgMCAxLjY0LTYuMTggMzguNCAzOC40IDAgMCAwIC42MS02LjY5IDguMjQgOC4yNCAwIDEgMSAxNi40NyAwIDU1IDU1IDAgMCAxLS44IDkuNTNBNTQuNzcgNTQuNzcgMCAwIDEgMTAwLjI2IDEwOGE2My42IDYzLjYgMCAwIDEtMjUuOTIgMTMuMSA1OS4xIDU5LjEgMCAwIDEtMzAuMS0uMjUgNTguNDUgNTguNDUgMCAwIDEtMjYtMTUuMTcgNjYgNjYgMCAwIDEtOC4xLTkuODYgNTguNTYgNTguNTYgMCAwIDEgNy41NC03NSA2NS43IDY1LjcgMCAwIDEgOS45Mi04LjA5IDU4LjQgNTguNCAwIDAgMSAzMy45NS05Ljg1IDYwLjUgNjAuNSAwIDAgMSAzMi41IDEwLjQybC0uNDctNC4xMUE4LjI1IDguMjUgMCAxIDEgMTEwIDcuMzJsMi42NCAyMi43N2E4LjI0IDguMjQgMCAwIDEtNi43MyA5bC0yMy4zOCA0LjIyYTguMjMgOC4yMyAwIDEgMS0yLjktMTYuMjF6XCJcbiAgfSkpKTtcbn07XG5leHBvcnQgZGVmYXVsdCBTdmdSZWxvYWRJY29uOyIsImZ1bmN0aW9uIF9leHRlbmRzKCkgeyByZXR1cm4gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAobikgeyBmb3IgKHZhciBlID0gMTsgZSA8IGFyZ3VtZW50cy5sZW5ndGg7IGUrKykgeyB2YXIgdCA9IGFyZ3VtZW50c1tlXTsgZm9yICh2YXIgciBpbiB0KSAoe30pLmhhc093blByb3BlcnR5LmNhbGwodCwgcikgJiYgKG5bcl0gPSB0W3JdKTsgfSByZXR1cm4gbjsgfSwgX2V4dGVuZHMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsgfVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG52YXIgU3ZnTWFnbmV0aWNJY29uID0gZnVuY3Rpb24gU3ZnTWFnbmV0aWNJY29uKHByb3BzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInN2Z1wiLCBfZXh0ZW5kcyh7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICBcImRhdGEtbmFtZVwiOiBcIkxheWVyIDFcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAxMjIuODggMTIyLjg1XCJcbiAgfSwgcHJvcHMpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwibTgzLjYgNjEuNDguNDItLjQyYTEuMSAxLjEgMCAwIDEgMS41NCAwbDE1LjY1IDE1LjY0YTEuMSAxLjEgMCAwIDEgMCAxLjU0TDg5IDkwLjQ1IDcxLjgxIDczLjI3em0yOC4yMiA5LjU5YTIuOTMgMi45MyAwIDAgMS0uODYtNS44bDguNTYtMS4yN2EyLjkzIDIuOTMgMCAxIDEgLjg2IDUuOHptLTE1LjItMjAuNmEyLjk1IDIuOTUgMCAwIDEtNS44OSAwdi05YTIuOTUgMi45NSAwIDEgMSA1Ljg5IDB6bTEwLjk0IDcuMTdhMi45MyAyLjkzIDAgMCAxLTQuMTgtNC4xMWw1LjktNmEyLjkzIDIuOTMgMCAwIDEgNC4xOCA0LjExek03My4yOCAzMi41M2EyLjkzIDIuOTMgMCAxIDEtLjg3LTUuOEw4MSAyNS40NmEyLjkzIDIuOTMgMCAxIDEgLjg2IDUuOGwtOC41NSAxLjI3Wm0tMTUuMi0yMC42MWEyLjk1IDIuOTUgMCAxIDEtNS44OSAwdi05YTIuOTUgMi45NSAwIDAgMSA1Ljg5IDB6TTY5IDE5LjFhMi45MyAyLjkzIDAgMCAxLTQuMTYtNC4xbDUuNDctNS41N2EyLjkzIDIuOTMgMCAxIDEgNC4xNyA0LjExem0xMy42MyA3Ny43MS0xNS40MiAxNS40MUEzOS42IDM5LjYgMCAwIDEgNTYuMzUgMTIwYTI4LjU2IDI4LjU2IDAgMCAxLTEyLjQ5IDIuODUgMjcuNCAyNy40IDAgMCAxLTExLjUxLTIuMjhjLTguNzUtNC0xOS40OS0xNS4zMS0yNS4zOS0yMi44MkEzMi42IDMyLjYgMCAwIDEgMS4yIDg3LjQ3IDI4LjYgMjguNiAwIDAgMSAuMDkgNzYuNzVhMjUgMjUgMCAwIDEgMi43NS0xMC4wOCA0NyA0NyAwIDAgMSA3LjgyLTExbDE1LjQzLTE1LjQgMTcuMTQgMTcuMTQtMTUuMzIgMTUuMzRxLTQuNTYgNC41Ny00LjYxIDkuNjNjMCA2Ljg2IDEwLjMgMTcuMjMgMTcuMTUgMTcuMjMgMy4zNCAwIDYuNTktMS41NiA5LjY3LTQuNjRsMTUuMzMtMTUuMzR6TTMyLjQ2IDMzLjkzbDExLjgxLTExLjc4LjQyLS40MmExLjEgMS4xIDAgMCAxIDEuNTQgMGwxNS41NiAxNS41NWExLjA4IDEuMDggMCAwIDEgMCAxLjUzbC0uNDEuNDJMNDkuNTcgNTF6XCIsXG4gICAgc3R5bGU6IHtcbiAgICAgIGZpbGxSdWxlOiBcImV2ZW5vZGRcIlxuICAgIH1cbiAgfSkpO1xufTtcbmV4cG9ydCBkZWZhdWx0IFN2Z01hZ25ldGljSWNvbjsiLCJ2YXIgX3BhdGg7XG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgcmV0dXJuIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKG4pIHsgZm9yICh2YXIgZSA9IDE7IGUgPCBhcmd1bWVudHMubGVuZ3RoOyBlKyspIHsgdmFyIHQgPSBhcmd1bWVudHNbZV07IGZvciAodmFyIHIgaW4gdCkgKHt9KS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIHIpICYmIChuW3JdID0gdFtyXSk7IH0gcmV0dXJuIG47IH0sIF9leHRlbmRzLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7IH1cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xudmFyIFN2Z01vdmVJY29uID0gZnVuY3Rpb24gU3ZnTW92ZUljb24ocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9leHRlbmRzKHtcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIHhtbFNwYWNlOiBcInByZXNlcnZlXCIsXG4gICAgdmlld0JveDogXCIwIDAgNzIuNyA2MFwiXG4gIH0sIHByb3BzKSwgX3BhdGggfHwgKF9wYXRoID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk03Mi40IDI4LjV2LS4yYy0uMS0uMi0uMy0uNS0uNS0uN0w1OC4zIDEwLjljLTEuMy0xLjYtMy42LTEuOS01LjItLjZzLTEuOSAzLjYtLjYgNS4ybDguNiAxMC43SDExLjVsOC43LTEwLjdjMS4zLTEuNiAxLTQtLjYtNS4yLTEuNi0xLjMtNC0xLTUuMi42TC45IDI3LjZjLS4yLjItLjMuNC0uNS43di4yYy0uMy40LS40LjgtLjQgMS4zdi40YzAgLjQuMS45LjMgMS4zdi4yYy4xLjIuMy41LjUuN2wxMy41IDE2LjdjMS4zIDEuNiAzLjYgMS45IDUuMi42czEuOS0zLjYuNi01LjJsLTguNi0xMC43aDQ5LjZsLTguNyAxMC43Yy0xLjMgMS42LTEgNCAuNiA1LjIgMS42IDEuMyA0IDEgNS4yLS42bDEzLjUtMTYuN2MuMi0uMi4zLS40LjUtLjd2LS4yYy4yLS40LjMtLjguMy0xLjN2LS40Yy4yLS41LjEtLjktLjEtMS4zXCJcbiAgfSkpKTtcbn07XG5leHBvcnQgZGVmYXVsdCBTdmdNb3ZlSWNvbjsiLCJ2YXIgX3BhdGg7XG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgcmV0dXJuIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKG4pIHsgZm9yICh2YXIgZSA9IDE7IGUgPCBhcmd1bWVudHMubGVuZ3RoOyBlKyspIHsgdmFyIHQgPSBhcmd1bWVudHNbZV07IGZvciAodmFyIHIgaW4gdCkgKHt9KS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIHIpICYmIChuW3JdID0gdFtyXSk7IH0gcmV0dXJuIG47IH0sIF9leHRlbmRzLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7IH1cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xudmFyIFN2Z1NjYWxlSWNvbiA9IGZ1bmN0aW9uIFN2Z1NjYWxlSWNvbihwcm9wcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgX2V4dGVuZHMoe1xuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgeG1sU3BhY2U6IFwicHJlc2VydmVcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAxMjIuOSA2MFwiXG4gIH0sIHByb3BzKSwgX3BhdGggfHwgKF9wYXRoID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk00OC41IDBjLTIuMSAwLTMuOCAxLjctMy44IDMuOHYyMi41SDExLjVsOC43LTEwLjdjMS4zLTEuNiAxLTQtLjYtNS4yLTEuNi0xLjMtNC0xLTUuMi42TC45IDI3LjZjLS4yLjItLjMuNC0uNS43di4yYy0uMy40LS40LjgtLjQgMS4zdi40YzAgLjQuMS45LjMgMS4zdi4yYy4xLjIuMy41LjUuN2wxMy41IDE2LjdjMS4zIDEuNiAzLjYgMS45IDUuMi42czEuOS0zLjYuNi01LjJsLTguNi0xMC43aDMzLjJ2MjIuNWMwIDIuMSAxLjcgMy43IDMuOCAzLjggMi4xIDAgMy44LTEuNyAzLjgtMy44VjMuN2MtLjEtMi0xLjgtMy43LTMuOC0zLjdNNzQuNCA2MGMyLjEgMCAzLjgtMS43IDMuOC0zLjhWMzMuN2gzMy4ybC04LjcgMTAuN2MtMS4zIDEuNi0xIDQgLjYgNS4yIDEuNiAxLjMgNCAxIDUuMi0uNkwxMjIgMzIuNGMuMi0uMi4zLS40LjUtLjd2LS4yYy4yLS40LjMtLjkuMy0xLjN2LS40YzAtLjQtLjEtLjktLjMtMS4zdi0uMmMtLjEtLjItLjMtLjUtLjUtLjdsLTEzLjUtMTYuN2MtMS4zLTEuNi0zLjYtMS45LTUuMi0uNnMtMS45IDMuNi0uNiA1LjJsOC42IDEwLjdINzguMVYzLjdjMC0yLjEtMS43LTMuNy0zLjgtMy44LTIuMSAwLTMuOCAxLjctMy44IDMuOHY1Mi41Yy4yIDIuMSAxLjggMy44IDMuOSAzLjhcIlxuICB9KSkpO1xufTtcbmV4cG9ydCBkZWZhdWx0IFN2Z1NjYWxlSWNvbjsiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG4vLyBTVkcgaWNvbnMgaW1wb3J0ZWQgYXMgUmVhY3QgY29tcG9uZW50c1xyXG5pbXBvcnQgSWNvblpvb21JbiBmcm9tIFwiLi4vYXNzZXRzL2ljb25zL3pvb20taW4taWNvbi5zdmdcIjtcclxuaW1wb3J0IEljb25ab29tT3V0IGZyb20gXCIuLi9hc3NldHMvaWNvbnMvem9vbS1vdXQtaWNvbi5zdmdcIjtcclxuaW1wb3J0IEljb25SZWxvYWQgZnJvbSBcIi4uL2Fzc2V0cy9pY29ucy9yZWxvYWQtaWNvbi5zdmdcIjtcclxuaW1wb3J0IEljb25NYWduZXQgZnJvbSBcIi4uL2Fzc2V0cy9pY29ucy9tYWduZXRpYy1pY29uLnN2Z1wiO1xyXG5pbXBvcnQgSWNvbk1vdmUgZnJvbSBcIi4uL2Fzc2V0cy9pY29ucy9tb3ZlLWljb24uc3ZnXCI7XHJcbmltcG9ydCBJY29uU2NhbGUgZnJvbSBcIi4uL2Fzc2V0cy9pY29ucy9zY2FsZS1pY29uLnN2Z1wiO1xyXG5cclxuLy8gRnVuY3Rpb25hbCBjb21wb25lbnQgcmVjZWl2ZXMgcHJvcHMgY29udHJvbGxpbmcgdGltZWxpbmUgYW5kIGRhdGEgSU9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVG9vbGJhcih7XHJcbiAgYnBtLFxyXG4gIHNldEJwbSxcclxuICBiZWF0c1BlckJhcixcclxuICBzZXRCZWF0c1BlckJhcixcclxuICB6b29tTGV2ZWwsXHJcbiAgaW5jcmVhc2Vab29tLFxyXG4gIGRlY3JlYXNlWm9vbSxcclxuICB1cGRhdGVWaWV3LFxyXG4gIG1vZGVTbmFwLFxyXG4gIHNldE1vZGVTbmFwLFxyXG4gIG1vZGUsXHJcbiAgc2V0TW9kZSxcclxuICBzYXZlQ29tcERhdGFKU09OLFxyXG4gIGxvYWRDb21wRGF0YUpTT04sXHJcbn0pIHtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBpZD1cInRvb2xiYXJcIj5cclxuICAgICAgey8qIE1haW4gdG9vbGJhciBjb250cm9scyAqL31cclxuICAgICAgPG1lbnUgaWQ9XCJtYWluXCI+XHJcbiAgICAgICAgey8qIFJlbG9hZCBpY29uIHRyaWdnZXJzIGNvbXBvc2l0aW9uIGRhdGEgcmVmcmVzaCAqL31cclxuICAgICAgICA8SWNvblJlbG9hZCBvbkNsaWNrPXt1cGRhdGVWaWV3fSAvPlxyXG5cclxuICAgICAgICB7LyogQlBNIGlucHV0OiBudW1iZXIgZmllbGQgYm91bmQgdG8gYnBtIHN0YXRlICovfVxyXG4gICAgICAgIDxsYWJlbCBodG1sRm9yPVwiYnBtXCI+QlBNPC9sYWJlbD5cclxuICAgICAgICA8aW5wdXRcclxuICAgICAgICAgIG5hbWU9XCJicG1cIlxyXG4gICAgICAgICAgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICBzaXplPVwiM1wiXHJcbiAgICAgICAgICBzdHlsZT17eyB3aWR0aDogXCIzcmVtXCIgfX1cclxuICAgICAgICAgIHZhbHVlPXticG19XHJcbiAgICAgICAgICAvLyBVcGRhdGUgcGFyZW50IGJwbSBzdGF0ZSBvbiBjaGFuZ2VcclxuICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0QnBtKGUudGFyZ2V0LnZhbHVlKX1cclxuICAgICAgICAvPlxyXG5cclxuICAgICAgICB7LyogQmVhdHMgcGVyIGJhciBzZWxlY3RvciAqL31cclxuICAgICAgICA8c2VsZWN0XHJcbiAgICAgICAgICBuYW1lPVwiYmVhdHNQZXJCYXJcIlxyXG4gICAgICAgICAgaWQ9XCJiZWF0c1BlckJhclNlbGVjdFwiXHJcbiAgICAgICAgICB2YWx1ZT17YmVhdHNQZXJCYXJ9XHJcbiAgICAgICAgICAvLyBVcGRhdGUgcGFyZW50IGJlYXRzUGVyQmFyIHN0YXRlIG9uIGNoYW5nZVxyXG4gICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRCZWF0c1BlckJhcihlLnRhcmdldC52YWx1ZSl9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgey8qIENvbW1vbiB0aW1lIHNpZ25hdHVyZSBvcHRpb25zICovfVxyXG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjJcIj4yPC9vcHRpb24+XHJcbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiNFwiPjQ8L29wdGlvbj5cclxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCI4XCI+ODwvb3B0aW9uPlxyXG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjE2XCI+MTY8L29wdGlvbj5cclxuICAgICAgICA8L3NlbGVjdD5cclxuXHJcbiAgICAgICAgey8qIFpvb20gY29udHJvbHMgKi99XHJcbiAgICAgICAgPEljb25ab29tSW5cclxuICAgICAgICAgIG9uQ2xpY2s9e2luY3JlYXNlWm9vbX1cclxuICAgICAgICAgIHN0eWxlPXt7IG1hcmdpbkxlZnQ6IFwiMS41cHhcIiB9fVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPEljb25ab29tT3V0IFxyXG4gICAgICAgICAgb25DbGljaz17ZGVjcmVhc2Vab29tfSBcclxuICAgICAgICAgIHN0eWxlPXt7IG1hcmdpbkxlZnQ6IFwiMFwiIH19XHJcbiAgICAgICAgLz5cclxuICAgICAgICA8ZGl2IHN0eWxlPXt7XHJcbiAgICAgICAgICBkaXNwbGF5OiBcImlubGluZVwiLFxyXG4gICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcclxuICAgICAgICAgIGJvcmRlckxlZnQ6IFwic29saWQgM3B4IHZhcigtLWxpZ2h0LWdyZXkpXCIsXHJcbiAgICAgICAgICBtYXJnaW5MZWZ0OiBcIjEuNXB4XCIsXHJcbiAgICAgICAgICBtYXJnaW5SaWdodDogXCI2cHhcIlxyXG4gICAgICAgIH19IC8+XHJcbiAgICAgICAgey8qIE1vZGUgQ29udHJvbHMgY29udHJvbHMgKi99XHJcbiAgICAgICAgPEljb25NYWduZXRcclxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHNldE1vZGVTbmFwKCFtb2RlU25hcCl9XHJcbiAgICAgICAgICBjbGFzc05hbWU9e2Ake21vZGVTbmFwID8gXCJhY3RpdmVcIiA6IFwiXCJ9YH1cclxuICAgICAgICAgIHN0eWxlPXt7IG1hcmdpbkxlZnQ6IFwiMFwiIH19XHJcbiAgICAgICAgLz5cclxuICAgICAgICA8SWNvbk1vdmUgXHJcbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRNb2RlKFwibW92ZVwiKX0gXHJcbiAgICAgICAgICBjbGFzc05hbWU9e2Ake21vZGUgPT09IFwibW92ZVwiID8gXCJhY3RpdmVcIiA6IFwiXCJ9YH1cclxuICAgICAgICAgIHN0eWxlPXt7IG1hcmdpbkxlZnQ6IFwiMFwiIH19XHJcbiAgICAgICAgLz5cclxuICAgICAgICA8SWNvblNjYWxlIFxyXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0TW9kZShcInNjYWxlXCIpfSBcclxuICAgICAgICAgIGNsYXNzTmFtZT17YCR7bW9kZSA9PT0gXCJzY2FsZVwiID8gXCJhY3RpdmVcIiA6IFwiXCJ9YH1cclxuICAgICAgICAgIHN0eWxlPXt7IG1hcmdpbkxlZnQ6IFwiMFwiIH19XHJcbiAgICAgICAgLz5cclxuICAgICAgPC9tZW51PlxyXG5cclxuICAgICAgey8qIFNlY29uZGFyeSBtZW51IHdpdGggSlNPTiBzYXZlL2xvYWQgYnV0dG9ucyAqL31cclxuICAgICAgPG1lbnUgaWQ9XCJzZWNvbmRcIj5cclxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHNhdmVDb21wRGF0YUpTT04oXCJzb3VuZHN5bmNcIil9PlNBVkUgSlNPTjwvYnV0dG9uPlxyXG4gICAgICAgIDxidXR0b24gb25DbGljaz17bG9hZENvbXBEYXRhSlNPTn0+TE9BRCBKU09OPC9idXR0b24+XHJcbiAgICAgIDwvbWVudT5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGF5ZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RzIGEgTGF5ZXIgaW5zdGFuY2UgcmVwcmVzZW50aW5nIGEgc2luZ2xlIEFFIGxheWVyIG9uIHRoZSB0aW1lbGluZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbGF5ZXJEYXRhIC0gUmF3IGxheWVyIGRhdGEgZnJvbSBBRSAoaW5kZXgsIG5hbWUsIGNvbG9yLCBpblBvaW50LCBvdXRQb2ludCwgZHVyYXRpb24pXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXJyYXlJbmRleCAtIFBvc2l0aW9uIG9mIHRoZSBsYXllciBpbiB0aGUgY29tcERhdGEubGF5ZXJzIGFycmF5XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29tcERhdGEgLSBDb21wb3NpdGlvbiBkYXRhIChpbmNsdWRpbmcgZHVyYXRpb24pXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdG90YWxCZWF0cyAtIFRvdGFsIGJlYXRzIGluIHRoZSB0aW1lbGluZSAoYmFzZWQgb24gY29tcCBkdXJhdGlvbiBhbmQgYnBtKVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJlYXRXaWR0aCAtIFdpZHRoIGluIHBpeGVscyBwZXIgYmVhdCAodG8gcG9zaXRpb24gaW4gVUkpXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZWxpbmVXaWR0aCAtIFRvdGFsIHdpZHRoIG9mIHRoZSB0aW1lbGluZSBpbiBwaXhlbHNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobGF5ZXJEYXRhLCBhcnJheUluZGV4LCBjb21wRGF0YSwgdG90YWxCZWF0cywgYmVhdFdpZHRoLCB0aW1lbGluZVdpZHRoKSB7XHJcbiAgICAgIC8vIFVuaXF1ZSBpbmRleCBmcm9tIEFFIHRvIGlkZW50aWZ5IHRoaXMgbGF5ZXJcclxuICAgICAgdGhpcy5pbmRleCA9IGxheWVyRGF0YS5pbmRleDtcclxuICAgICAgdGhpcy5hcnJheUluZGV4ID0gYXJyYXlJbmRleDtcclxuICAgICAgdGhpcy5uYW1lID0gbGF5ZXJEYXRhLm5hbWU7XHJcbiAgICAgIHRoaXMuY29sb3IgPSBsYXllckRhdGEuY29sb3I7XHJcbiAgXHJcbiAgICAgIC8vIFRpbWluZyBpbmZvIGluIHNlY29uZHMgKGZyb20gQUUpXHJcbiAgICAgIHRoaXMuaW5Qb2ludCA9IGxheWVyRGF0YS5pblBvaW50O1xyXG4gICAgICB0aGlzLm91dFBvaW50ID0gbGF5ZXJEYXRhLm91dFBvaW50O1xyXG4gICAgICB0aGlzLmR1cmF0aW9uID0gbGF5ZXJEYXRhLmR1cmF0aW9uO1xyXG4gIFxyXG4gICAgICB0aGlzLmNvbXBEdXJhdGlvbiA9IGNvbXBEYXRhLmR1cmF0aW9uOyAvLyBUb3RhbCBjb21wIGR1cmF0aW9uIGluIHNlY29uZHNcclxuICAgICAgdGhpcy50b3RhbEJlYXRzID0gdG90YWxCZWF0czsgICAgICAgICAgLy8gVG90YWwgYmVhdHMgdGltZWxpbmUgc3BhbnNcclxuICBcclxuICAgICAgLy8gQ2FsY3VsYXRlIGdyaWQgc3RhcnQgKDEtYmFzZWQgaW5kZXggb2YgYmVhdCB3aGVyZSBsYXllciBzdGFydHMpXHJcbiAgICAgIHRoaXMuZ3JpZFN0YXJ0ID0gTWF0aC5mbG9vcigodGhpcy5pblBvaW50IC8gdGhpcy5jb21wRHVyYXRpb24pICogdGhpcy50b3RhbEJlYXRzKSArIDE7XHJcbiAgICAgIGlmICh0aGlzLmdyaWRTdGFydCA8IDEpIHRoaXMuZ3JpZFN0YXJ0ID0gMTtcclxuICBcclxuICAgICAgLy8gQ2xvc2VzdCBncmlkIHN0YXJ0IGlzIHJvdW5kZWQgKGZvciBzbmFwcGluZylcclxuICAgICAgdGhpcy5jbG9zZXN0R3JpZFN0YXJ0ID0gTWF0aC5yb3VuZCgodGhpcy5pblBvaW50IC8gdGhpcy5jb21wRHVyYXRpb24pICogdGhpcy50b3RhbEJlYXRzKSArIDE7XHJcbiAgICAgIGlmICh0aGlzLmNsb3Nlc3RHcmlkU3RhcnQgPCAxKSB0aGlzLmNsb3Nlc3RHcmlkU3RhcnQgPSAxO1xyXG4gIFxyXG4gICAgICAvLyBHcmlkIGVuZCAoYmVhdCBpbmRleCB3aGVyZSBsYXllciBlbmRzKVxyXG4gICAgICB0aGlzLmdyaWRFbmQgPSBNYXRoLmNlaWwoKHRoaXMub3V0UG9pbnQgLyB0aGlzLmNvbXBEdXJhdGlvbikgKiB0aGlzLnRvdGFsQmVhdHMpICsgMTtcclxuICAgICAgaWYgKHRoaXMuZ3JpZEVuZCA+IHRoaXMudG90YWxCZWF0cykgdGhpcy5ncmlkRW5kID0gdGhpcy50b3RhbEJlYXRzO1xyXG4gIFxyXG4gICAgICAvLyBDbG9zZXN0IGdyaWQgZW5kIHJvdW5kZWQgZm9yIHNuYXBwaW5nXHJcbiAgICAgIHRoaXMuY2xvc2VzdEdyaWRFbmQgPSBNYXRoLnJvdW5kKCh0aGlzLm91dFBvaW50IC8gdGhpcy5jb21wRHVyYXRpb24pICogdGhpcy50b3RhbEJlYXRzKSArIDE7XHJcbiAgICAgIGlmICh0aGlzLmNsb3Nlc3RHcmlkRW5kID4gdGhpcy50b3RhbEJlYXRzKSB0aGlzLmNsb3Nlc3RHcmlkRW5kID0gdGhpcy50b3RhbEJlYXRzO1xyXG4gIFxyXG4gICAgICAvLyBEdXJhdGlvbiBpbiBiZWF0cyAoaW50ZWdlciBudW1iZXIgb2YgYmVhdHMgc3Bhbm5lZClcclxuICAgICAgdGhpcy5ncmlkRHVyYXRpb24gPSB0aGlzLmdyaWRFbmQgLSB0aGlzLmdyaWRTdGFydDtcclxuICBcclxuICAgICAgLy8gU2NhbGluZyBmYWN0b3IgZm9yIHJlbmRlcmluZzpcclxuICAgICAgLy8gcmF0aW8gb2YgQUUgZHVyYXRpb24gaW4gc2Vjb25kcyB0byBkdXJhdGlvbiBpbiBiZWF0cyBzY2FsZWQgdG8gc2Vjb25kcyBwZXIgYmVhdFxyXG4gICAgICB0aGlzLnNjYWxpbmcgPSB0aGlzLmR1cmF0aW9uIC8gKHRoaXMuZ3JpZER1cmF0aW9uICogKHRoaXMuY29tcER1cmF0aW9uIC8gdGhpcy50b3RhbEJlYXRzKSk7XHJcbiAgXHJcbiAgICAgIC8vIENhbGN1bGF0ZSBiYXNlIFggcG9zaXRpb24gb24gZ3JpZCAoaW4gcGl4ZWxzKSBhdCBncmlkU3RhcnQgYmVhdFxyXG4gICAgICB0aGlzLmJhc2VHcmlkWCA9ICh0aGlzLmdyaWRTdGFydCAtIDEpICogYmVhdFdpZHRoO1xyXG4gIFxyXG4gICAgICAvLyBUcnVlIFggcG9zaXRpb24gKGluIHBpeGVscykgYmFzZWQgb24gZXhhY3QgaW5Qb2ludCByZWxhdGl2ZSB0byBjb21wIGR1cmF0aW9uXHJcbiAgICAgIHRoaXMudHJ1ZVggPSAodGhpcy5pblBvaW50IC8gdGhpcy5jb21wRHVyYXRpb24pICogdGltZWxpbmVXaWR0aDtcclxuICBcclxuICAgICAgLy8gVHJhbnNsYXRpb24gaW4gcGl4ZWxzIHRvIGFkanVzdCBmb3Igc25hcHBpbmcgZGlmZmVyZW5jZSBiZXR3ZWVuIHRydWVYIGFuZCBiYXNlR3JpZFhcclxuICAgICAgdGhpcy50cmFuc2xhdGVYID0gdGhpcy50cnVlWCAtIHRoaXMuYmFzZUdyaWRYO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBSZXNjYWxlcyB0aGUgbGF5ZXIsIGNhbGN1bGF0ZXMgdGhlIHNjYWxpbmcgZmFjdG9yIG5ld1xyXG4gICAgKiBAcGFyYW0ge251bWJlcn0gYmVhdFdpZHRoIC0gV2lkdGggaW4gcGl4ZWxzIHBlciBiZWF0ICh0byBwb3NpdGlvbiBpbiBVSSlcclxuICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVsaW5lV2lkdGggLSBUb3RhbCB3aWR0aCBvZiB0aGUgdGltZWxpbmUgaW4gcGl4ZWxzXHJcbiAgICAqL1xyXG5cclxuICAgIHJlc2NhbGVMYXllcihiZWF0V2lkdGgsIHRpbWVsaW5lV2lkdGgpIHsgXHJcbiAgICAgIC8vIER1cmF0aW9uIGluIGJlYXRzIChpbnRlZ2VyIG51bWJlciBvZiBiZWF0cyBzcGFubmVkKVxyXG4gICAgICB0aGlzLmdyaWREdXJhdGlvbiA9IHRoaXMuZ3JpZEVuZCAtIHRoaXMuZ3JpZFN0YXJ0O1xyXG4gIFxyXG4gICAgICAvLyBTY2FsaW5nIGZhY3RvciBmb3IgcmVuZGVyaW5nOlxyXG4gICAgICAvLyByYXRpbyBvZiBBRSBkdXJhdGlvbiBpbiBzZWNvbmRzIHRvIGR1cmF0aW9uIGluIGJlYXRzIHNjYWxlZCB0byBzZWNvbmRzIHBlciBiZWF0XHJcbiAgICAgIHRoaXMuc2NhbGluZyA9IHRoaXMuZHVyYXRpb24gLyAodGhpcy5ncmlkRHVyYXRpb24gKiAodGhpcy5jb21wRHVyYXRpb24gLyB0aGlzLnRvdGFsQmVhdHMpKTtcclxuICBcclxuICAgICAgLy8gQ2FsY3VsYXRlIGJhc2UgWCBwb3NpdGlvbiBvbiBncmlkIChpbiBwaXhlbHMpIGF0IGdyaWRTdGFydCBiZWF0XHJcbiAgICAgIHRoaXMuYmFzZUdyaWRYID0gKHRoaXMuZ3JpZFN0YXJ0IC0gMSkgKiBiZWF0V2lkdGg7XHJcbiAgXHJcbiAgICAgIC8vIFRydWUgWCBwb3NpdGlvbiAoaW4gcGl4ZWxzKSBiYXNlZCBvbiBleGFjdCBpblBvaW50IHJlbGF0aXZlIHRvIGNvbXAgZHVyYXRpb25cclxuICAgICAgdGhpcy50cnVlWCA9ICh0aGlzLmluUG9pbnQgLyB0aGlzLmNvbXBEdXJhdGlvbikgKiB0aW1lbGluZVdpZHRoO1xyXG4gIFxyXG4gICAgICAvLyBUcmFuc2xhdGlvbiBpbiBwaXhlbHMgdG8gYWRqdXN0IGZvciBzbmFwcGluZyBkaWZmZXJlbmNlIGJldHdlZW4gdHJ1ZVggYW5kIGJhc2VHcmlkWFxyXG4gICAgICB0aGlzLnRyYW5zbGF0ZVggPSB0aGlzLnRydWVYIC0gdGhpcy5iYXNlR3JpZFg7XHJcbiAgICB9XHJcbiAgXHJcbiAgICAvKipcclxuICAgICAqIE1vdmVzIHRoZSBsYXllciBvbiB0aGUgdGltZWxpbmUgYnkgYSBudW1iZXIgb2YgYmVhdHMuXHJcbiAgICAgKiBVcGRhdGVzIGFsbCByZWxhdGVkIHRpbWluZyBhbmQgZ3JpZCBwcm9wZXJ0aWVzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiZWF0cyAtIE51bWJlciBvZiBiZWF0cyB0byBtb3ZlIChjYW4gYmUgbmVnYXRpdmUpXHJcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IHNuYXBwaW5nIC0gV2hldGhlciBvciBub3QgdG8gc25hcCB0byB0aGUgZ3JpZFxyXG4gICAgICogVGhlc2UgYXJlIGp1c3QgdG8gcmVzY2FsZSBMYXllciBwcm9wZXJseSBhZnRlciBtb3ZpbmdcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiZWF0V2lkdGggLSBXaWR0aCBpbiBwaXhlbHMgcGVyIGJlYXQgKHRvIHBvc2l0aW9uIGluIFVJKVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVsaW5lV2lkdGggLSBUb3RhbCB3aWR0aCBvZiB0aGUgdGltZWxpbmUgaW4gcGl4ZWxzXHJcbiAgICAgKi9cclxuICAgIG1vdmVMYXllcihiZWF0cywgc25hcHBpbmcsIGJlYXRXaWR0aCwgdGltZWxpbmVXaWR0aCkge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyhcIm1vdmluZ1wiLCBiZWF0cywgXCJiZWF0cy4gY3VycmVudCBpbjpcIiwgdGhpcy5pblBvaW50LCBcImN1cnJlbnQgZ3JpZFN0YXJ0OlwiLCB0aGlzLmdyaWRTdGFydCwgXCJTTkFQUElORz9cIiwgc25hcHBpbmcpO1xyXG4gIFxyXG4gICAgICAvLyBHZXQgY3VycmVudCBiZWF0IGR1cmF0aW9uIHRvIGtlZXAgbGF5ZXIgZHVyYXRpb24gd2hlbiBmaW5pc2hlZCBtb3ZpbmdcclxuICAgICAgbGV0IGdyaWREdXJhdGlvbiA9IHRoaXMuZ3JpZEVuZCAtIHRoaXMuZ3JpZFN0YXJ0O1xyXG4gICAgICBsZXQgY2xvc2VzdEdyaWREdXJhdGlvbiA9IHRoaXMuY2xvc2VzdEdyaWRFbmQgLSB0aGlzLmNsb3Nlc3RHcmlkU3RhcnQ7XHJcbiAgICAgIC8vIFVwZGF0ZSBncmlkIHBvc2l0aW9ucyBieSBhZGRpbmcgYmVhdHNcclxuICAgICAgdGhpcy5ncmlkU3RhcnQgKz0gYmVhdHM7XHJcbiAgICAgIHRoaXMuY2xvc2VzdEdyaWRTdGFydCArPSBiZWF0cztcclxuICAgICAgaWYgKHRoaXMuY2xvc2VzdEdyaWRTdGFydCA8IDEpIHRoaXMuY2xvc2VzdEdyaWRTdGFydCA9IDE7XHJcblxyXG4gICAgICBpZiAodGhpcy5ncmlkU3RhcnQgPCAxIHx8IHNuYXBwaW5nKSB7XHJcbiAgICAgICAgdGhpcy5ncmlkU3RhcnQgPSAxO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuZ3JpZFN0YXJ0ID0gdGhpcy5jbG9zZXN0R3JpZFN0YXJ0O1xyXG4gICAgICAgIHRoaXMuZ3JpZEVuZCA9IHRoaXMuZ3JpZFN0YXJ0ICsgZ3JpZER1cmF0aW9uO1xyXG4gICAgICAgIHRoaXMuY2xvc2VzdEdyaWRFbmQgPSB0aGlzLmNsb3Nlc3RHcmlkU3RhcnQgKyBjbG9zZXN0R3JpZER1cmF0aW9uO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgIHtcclxuICAgICAgICB0aGlzLmdyaWRFbmQgKz0gYmVhdHM7XHJcbiAgICAgICAgaWYgKHRoaXMuZ3JpZEVuZCA+IHRoaXMudG90YWxCZWF0cykgdGhpcy5ncmlkRW5kID0gdGhpcy50b3RhbEJlYXRzOyBcclxuICAgICAgICB0aGlzLmNsb3Nlc3RHcmlkRW5kICs9IGJlYXRzO1xyXG4gICAgICAgIGlmICh0aGlzLmNsb3Nlc3RHcmlkRW5kID4gdGhpcy50b3RhbEJlYXRzKSB0aGlzLmNsb3Nlc3RHcmlkRW5kID0gdGhpcy50b3RhbEJlYXRzOyBcclxuICAgICAgfVxyXG4gIFxyXG4gIFxyXG5cclxuICAgICAgLy8gUmVjYWxjdWxhdGUgdGltaW5nIGluIHNlY29uZHMgYmFzZWQgb24gbmV3IGdyaWQgcG9zaXRpb25zXHJcbiAgICAgIHRoaXMuaW5Qb2ludCA9ICgodGhpcy5ncmlkU3RhcnQgLSAxKSAqIHRoaXMuY29tcER1cmF0aW9uKSAvIHRoaXMudG90YWxCZWF0cztcclxuICAgICAgdGhpcy5vdXRQb2ludCA9ICgodGhpcy5ncmlkRW5kIC0gMSkgKiB0aGlzLmNvbXBEdXJhdGlvbikgLyB0aGlzLnRvdGFsQmVhdHM7XHJcbiAgICAgIFxyXG4gICAgICAvLyBIYW5kbGUgaWYgbGF5ZXIgbW92ZWQgYmV5b25kIHRoZSB0aW1lbGluZVxyXG4gICAgICBpZiAodGhpcy5pblBvaW50IDwgMCkgdGhpcy5pblBvaW50ID0gMDtcclxuICAgICAgaWYgKHRoaXMub3V0UG9pbnQgPiB0aGlzLmNvbXBEdXJhdGlvbikgdGhpcy5vdXRQb2ludCA9IHRoaXMuY29tcER1cmF0aW9uO1xyXG4gICAgICAvLyBVcGRhdGUgZHVyYXRpb25cclxuICAgICAgdGhpcy5kdXJhdGlvbiA9IHRoaXMub3V0UG9pbnQgLSB0aGlzLmluUG9pbnQ7XHJcbiAgICAgIHRoaXMucmVzY2FsZUxheWVyKGJlYXRXaWR0aCwgdGltZWxpbmVXaWR0aCk7XHJcbiAgXHJcbiAgICAgIGNvbnNvbGUubG9nKFwibW92ZWQgbmV3IGluOlwiLCB0aGlzLmluUG9pbnQsIFwibmV3IGdyaWRTdGFydDpcIiwgdGhpcy5ncmlkU3RhcnQpO1xyXG4gICAgfSAgXHJcbiAgXHJcbiAgICAvKipcclxuICAgICAqIE1vdmVzIHRoZSBpbiBvciBvdXRwb2ludCBvZiB0aGUgbGF5ZXIgb24gdGhlIHRpbWVsaW5lIGJ5IGEgbnVtYmVyIG9mIGJlYXRzLlxyXG4gICAgICogVXBkYXRlcyBhbGwgcmVsYXRlZCB0aW1pbmcgYW5kIGdyaWQgcHJvcGVydGllcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRQb2ludCAtIEVpdGhlciBpbiBvciBvdXRQb2ludCB3aGljaCB3aWxsIGJlIG1vdmVkXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYmVhdHMgLSBOdW1iZXIgb2YgYmVhdHMgdG8gbW92ZSBpbiBvciBvdXRwb2ludCAoY2FuIGJlIG5lZ2F0aXZlKVxyXG4gICAgICogQHBhcmFtIHtib29sfSBzbmFwcGluZyAtIFdoZXRoZXIgb3Igbm90IHRvIHNuYXAgdG8gdGhlIGdyaWRcclxuICAgICAqIFRoZXNlIGFyZSBqdXN0IHRvIHJlc2NhbGUgTGF5ZXIgcHJvcGVybHkgYWZ0ZXIgbW92aW5nXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYmVhdFdpZHRoIC0gV2lkdGggaW4gcGl4ZWxzIHBlciBiZWF0ICh0byBwb3NpdGlvbiBpbiBVSSlcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lbGluZVdpZHRoIC0gVG90YWwgd2lkdGggb2YgdGhlIHRpbWVsaW5lIGluIHBpeGVsc1xyXG4gICAgICovXHJcbiAgICBzY2FsZUxheWVyKHN0YXJ0UG9pbnQsIGJlYXRzLCBzbmFwcGluZywgYmVhdFdpZHRoLCB0aW1lbGluZVdpZHRoKSB7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwibW92aW5nXCIsIGJlYXRzLCBcImJlYXRzLiBjdXJyZW50IGluOlwiLCB0aGlzLmluUG9pbnQsIFwiY3VycmVudCBncmlkU3RhcnQ6XCIsIHRoaXMuZ3JpZFN0YXJ0LCBcIlNOQVBQSU5HP1wiLCBzbmFwcGluZyk7XHJcbiAgXHJcbiAgICAgIC8vIFVwZGF0ZSBncmlkIHBvc2l0aW9ucyBieSBhZGRpbmcgYmVhdHNcclxuICAgICAgaWYoc3RhcnRQb2ludCA9PT0gXCJpblwiKSB7XHJcbiAgICAgICAgdGhpcy5ncmlkU3RhcnQgKz0gYmVhdHM7XHJcbiAgICAgICAgdGhpcy5jbG9zZXN0R3JpZFN0YXJ0ICs9IGJlYXRzO1xyXG4gICAgICAgIGlmICh0aGlzLmNsb3Nlc3RHcmlkU3RhcnQgPCAxKSB0aGlzLmNsb3Nlc3RHcmlkU3RhcnQgPSAxO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5ncmlkU3RhcnQgPCAxIHx8IHNuYXBwaW5nKSB7XHJcbiAgICAgICAgICB0aGlzLmdyaWRTdGFydCA9IDE7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHRoaXMuZ3JpZFN0YXJ0ID0gdGhpcy5jbG9zZXN0R3JpZFN0YXJ0O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZihzdGFydFBvaW50ID09PSBcIm91dFwiKSB7XHJcbiAgICAgICAgdGhpcy5ncmlkRW5kICs9IGJlYXRzO1xyXG4gICAgICAgIHRoaXMuY2xvc2VzdEdyaWRFbmQgKz0gYmVhdHM7XHJcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VzdEdyaWRFbmQgPiB0aGlzLnRvdGFsQmVhdHMpIHRoaXMuY2xvc2VzdEdyaWRFbmQgPSAxO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5ncmlkRW5kID4gdGhpcy50b3RhbEJlYXRzIHx8IHNuYXBwaW5nKSB7XHJcbiAgICAgICAgICB0aGlzLmdyaWRFbmQgPSAxO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB0aGlzLmdyaWRFbmQgPSB0aGlzLmNsb3Nlc3RHcmlkRW5kO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gIFxyXG4gIFxyXG5cclxuICAgICAgLy8gUmVjYWxjdWxhdGUgdGltaW5nIGluIHNlY29uZHMgYmFzZWQgb24gbmV3IGdyaWQgcG9zaXRpb25zXHJcbiAgICAgIHRoaXMuaW5Qb2ludCA9ICgodGhpcy5ncmlkU3RhcnQgLSAxKSAqIHRoaXMuY29tcER1cmF0aW9uKSAvIHRoaXMudG90YWxCZWF0cztcclxuICAgICAgdGhpcy5vdXRQb2ludCA9ICgodGhpcy5ncmlkRW5kIC0gMSkgKiB0aGlzLmNvbXBEdXJhdGlvbikgLyB0aGlzLnRvdGFsQmVhdHM7XHJcbiAgICAgIFxyXG4gICAgICAvLyBIYW5kbGUgaWYgbGF5ZXIgbW92ZWQgYmV5b25kIHRoZSB0aW1lbGluZVxyXG4gICAgICBpZiAodGhpcy5pblBvaW50IDwgMCkgdGhpcy5pblBvaW50ID0gMDtcclxuICAgICAgaWYgKHRoaXMub3V0UG9pbnQgPiB0aGlzLmNvbXBEdXJhdGlvbikgdGhpcy5vdXRQb2ludCA9IHRoaXMuY29tcER1cmF0aW9uO1xyXG4gICAgICAvLyBVcGRhdGUgZHVyYXRpb25cclxuICAgICAgdGhpcy5kdXJhdGlvbiA9IHRoaXMub3V0UG9pbnQgLSB0aGlzLmluUG9pbnQ7XHJcbiAgICAgIHRoaXMucmVzY2FsZUxheWVyKGJlYXRXaWR0aCwgdGltZWxpbmVXaWR0aCk7XHJcbiAgXHJcbiAgICAgIGNvbnNvbGUubG9nKFwibW92ZWRcIiwgc3RhcnRQb2ludCwgXCJieVwiLCBiZWF0cywgXCJiZWF0c1wiKTtcclxuICAgIH1cclxuICB9XHJcbiAgIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSwgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgTGF5ZXIgZnJvbSBcIi4vTGF5ZXJcIjtcclxuXHJcbi8qKlxyXG4gKiBUaW1lbGluZSBjb21wb25lbnQgcmVuZGVycyB0aGUgdGltZWxpbmUgZ3JpZCB3aXRoIGxheWVycyBhbmQgYWxsb3dzXHJcbiAqIGRyYWdnaW5nIGxheWVycyBob3Jpem9udGFsbHkgdG8gY2hhbmdlIHRoZWlyIGluUG9pbnRzLlxyXG4gKiBcclxuICogUHJvcHM6XHJcbiAqIC0gY29tcERhdGE6IENvbXBvc2l0aW9uIGRhdGEgd2l0aCBsYXllcnMgYW5kIGR1cmF0aW9uXHJcbiAqIC0gYnBtOiBCZWF0cyBwZXIgbWludXRlXHJcbiAqIC0gYmVhdHNQZXJCYXI6IE51bWJlciBvZiBiZWF0cyBpbiBlYWNoIGJhciAodGltZSBzaWduYXR1cmUgbnVtZXJhdG9yKVxyXG4gKiAtIHpvb21MZXZlbDogSG9yaXpvbnRhbCB6b29tIGZhY3RvciAocGVyY2VudGFnZSlcclxuICogLSB1cGRhdGVWaWV3OiBDYWxsYmFjayB0byByZWZyZXNoIGNvbXBvc2l0aW9uIGRhdGEgZnJvbSBBRVxyXG4gKiAtIHNldExvYWRpbmcsIHNldExvYWRpbmdUZXh0OiBDb250cm9scyBsb2FkaW5nIFVJIHN0YXRlIGZvciBhc3luYyBvcHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRpbWVsaW5lKHtcclxuICAgIGNvbXBEYXRhLFxyXG4gICAgYnBtLFxyXG4gICAgYmVhdHNQZXJCYXIsXHJcbiAgICB6b29tTGV2ZWwsXHJcbiAgICB1cGRhdGVWaWV3LFxyXG4gICAgd2FpdGluZ0ZvckFFUmVmLFxyXG4gICAgc2V0TG9hZGluZyxcclxuICAgIHNldExvYWRpbmdUZXh0LFxyXG4gICAgbW9kZVNuYXBSZWYsXHJcbiAgICBtb2RlUmVmXHJcbiAgICB9KSB7XHJcblxyXG4gICAgLypcclxuICAgICAqIFNFVFVQOiBDYWxjdWxhdGUgdGltaW5nIG1ldHJpY3MgZm9yIHRpbWVsaW5lIGdyaWRcclxuICAgICAqL1xyXG5cclxuICAgIGNvbnN0IHRpbWVTaWduYXR1cmUgPSA0OyAvLyBGaXhlZCBpbm5lciB0aW1lIHNpZ25hdHVyZSAoZS5nLiA0LzQpXHJcbiAgICBcclxuICAgIC8vIENhbGN1bGF0ZSBiZWF0cyBwZXIgc2Vjb25kOiBicG0gLyA2MCAqIChiZWF0c1BlckJhciAvIDQpXHJcbiAgICAvLyBNZW1vaXplIHNvIHJlY2FsY3VsYXRpb24gb25seSBvY2N1cnMgd2hlbiBicG0gb3IgYmVhdHNQZXJCYXIgY2hhbmdlXHJcbiAgICBjb25zdCBiZWF0c1BlclNlY29uZCA9IHVzZU1lbW8oKCkgPT4gKGJwbSAvIDYwKSAqIChiZWF0c1BlckJhciAvIDQpLCBbYnBtLCBiZWF0c1BlckJhcl0pO1xyXG5cclxuICAgIC8vIEJlYXRzIHBlciBzZWNvbmQgZm9yIHRoZSBmaXhlZCB0aW1lIHNpZ25hdHVyZSAodXNlZCBmb3IgYmFyIGNhbGN1bGF0aW9ucylcclxuICAgIGNvbnN0IGJlYXRzUGVyU2lnbmF0dXJlID0gYnBtIC8gNjAgKiAodGltZVNpZ25hdHVyZSAvIDQpO1xyXG5cclxuICAgIC8vIFRvdGFsIG51bWJlciBvZiBiZWF0cyBpbiBjb21wb3NpdGlvbiAoZmxvb3IgdG8gaW50ZWdlcilcclxuICAgIGNvbnN0IHRvdGFsQmVhdHMgPSB1c2VNZW1vKCgpID0+IE1hdGguZmxvb3IoY29tcERhdGEuZHVyYXRpb24gKiBiZWF0c1BlclNlY29uZCksIFticG0sIGNvbXBEYXRhLmR1cmF0aW9uLCBiZWF0c1BlckJhciwgYmVhdHNQZXJTZWNvbmRdKTtcclxuXHJcbiAgICAvLyBUb3RhbCBiZWF0cyBpbiB0aGUgZml4ZWQgdGltZSBzaWduYXR1cmUgc2NhbGUgKGZsb29yIGludGVnZXIpXHJcbiAgICBjb25zdCB0b3RhbEJlYXRzUGVyU2lnbmF0dXJlID0gdXNlTWVtbygoKSA9PiBNYXRoLmZsb29yKGNvbXBEYXRhLmR1cmF0aW9uICogYmVhdHNQZXJTaWduYXR1cmUpLCBbYnBtLCBjb21wRGF0YV0pO1xyXG5cclxuICAgIC8vIFJvdW5kZWQgdXAgdG90YWwgYmVhdHMgdG8gdGhlIG5leHQgZnVsbCBiYXJcclxuICAgIGNvbnN0IHJvdW5kZWRCZWF0cyA9IHVzZU1lbW8oKCkgPT4gTWF0aC5jZWlsKHRvdGFsQmVhdHMgLyBiZWF0c1BlckJhcikgKiBiZWF0c1BlckJhciwgW3RvdGFsQmVhdHMsIGJlYXRzUGVyQmFyXSk7XHJcblxyXG4gICAgLy8gVG90YWwgbnVtYmVyIG9mIGJhcnMgYmFzZWQgb24gZml4ZWQgdGltZSBzaWduYXR1cmVcclxuICAgIGNvbnN0IHRvdGFsQmFycyA9IE1hdGguY2VpbCh0b3RhbEJlYXRzUGVyU2lnbmF0dXJlIC8gdGltZVNpZ25hdHVyZSk7XHJcblxyXG4gICAgLy8gUmVmcyBhbmQgc3RhdGUgdG8gbWFuYWdlIGRpbWVuc2lvbnNcclxuICAgIGNvbnN0IHRpbWVsaW5lUmVmID0gdXNlUmVmKG51bGwpO1xyXG4gICAgY29uc3QgW3RpbWVsaW5lV2lkdGgsIHNldFRpbWVsaW5lV2lkdGhdID0gdXNlU3RhdGUoMCk7XHJcbiAgICBjb25zdCBbYmVhdFdpZHRoLCBzZXRCZWF0V2lkdGhdID0gdXNlU3RhdGUoMCk7XHJcblxyXG4gICAgLy8gVXBkYXRlIHRpbWVsaW5lIHdpZHRoIG9uIG1vdW50LCB3aW5kb3cgcmVzaXplLCBvciBjb21wRGF0YS96b29tTGV2ZWwgY2hhbmdlXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHVwZGF0ZVRpbWVsaW5lV2lkdGggPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aW1lbGluZVJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lbGluZVdpZHRoKHRpbWVsaW5lUmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdXBkYXRlVGltZWxpbmVXaWR0aCgpOyAvLyBJbml0aWFsIHdpZHRoIHNldHVwXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHVwZGF0ZVRpbWVsaW5lV2lkdGgpO1xyXG5cclxuICAgICAgICByZXR1cm4gKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHVwZGF0ZVRpbWVsaW5lV2lkdGgpO1xyXG4gICAgfSwgW2NvbXBEYXRhLCB6b29tTGV2ZWxdKTtcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgdGhlIHdpZHRoIGluIHBpeGVscyBwZXIgYmVhdCBhZnRlciB0aW1lbGluZVdpZHRoIG9yIHRvdGFsQmVhdHMgY2hhbmdlXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aW1lbGluZVdpZHRoID4gMCAmJiB0b3RhbEJlYXRzID4gMCkge1xyXG4gICAgICAgICAgICBzZXRCZWF0V2lkdGgodGltZWxpbmVXaWR0aCAvIHRvdGFsQmVhdHMpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIFt0aW1lbGluZVdpZHRoLCB0b3RhbEJlYXRzXSk7XHJcblxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBDUkVBVEUgTEFZRVIgT0JKRUNUU1xyXG4gICAgICovXHJcbiAgICAvLyBTdG9yZSBMYXllciBpbnN0YW5jZXMgaW4gc3RhdGUgZm9yIHJlbmRlcmluZyBhbmQgaW50ZXJhY3Rpb25cclxuICAgIGNvbnN0IFtsYXllcnMsIHNldExheWVyc10gPSB1c2VTdGF0ZShbXSk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIExheWVyIGluc3RhbmNlcyB3aGVuZXZlciBjb21wRGF0YSwgdG90YWxCZWF0cywgYmVhdFdpZHRoLCBvciB0aW1lbGluZVdpZHRoIGNoYW5nZXNcclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbmV3TGF5ZXJzID0gY29tcERhdGEubGF5ZXJzLm1hcCgobGF5ZXIsIGluZGV4KSA9PiBcclxuICAgICAgICAgICAgbmV3IExheWVyKGxheWVyLCBpbmRleCwgY29tcERhdGEsIHRvdGFsQmVhdHMsIGJlYXRXaWR0aCwgdGltZWxpbmVXaWR0aClcclxuICAgICAgICApO1xyXG4gICAgICAgIHNldExheWVycyhuZXdMYXllcnMpO1xyXG4gICAgfSwgW2NvbXBEYXRhLCB0b3RhbEJlYXRzLCBiZWF0V2lkdGgsIHRpbWVsaW5lV2lkdGhdKTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIElOVEVSQUNUSU9OOiBEcmFnIGFuZCBkcm9wIHRvIG1vdmUgbGF5ZXJzIGhvcml6b250YWxseSAoaW4gYmVhdHMpXHJcbiAgICAgKi9cclxuICAgIGNvbnN0IFtnaG9zdExheWVyLCBzZXRHaG9zdExheWVyXSA9IHVzZVN0YXRlKG51bGwpOyAgLy8gVmlzdWFsIGRyYWcgcHJldmlld1xyXG4gICAgY29uc3QgZ2hvc3RMYXllclJlZiA9IHVzZVJlZihudWxsKTtcclxuXHJcbiAgICAvLyBUcmFjayBtb3VzZSBwb3NpdGlvbnMgYW5kIGRyYWcgc3RhdGVcclxuICAgIGNvbnN0IHN0YXJ0TW91c2VYID0gdXNlUmVmKDApO1xyXG4gICAgY29uc3QgbW91c2VYID0gdXNlUmVmKDApO1xyXG5cclxuICAgIGNvbnN0IGlzRHJhZ2dpbmcgPSB1c2VSZWYoZmFsc2UpO1xyXG4gICAgY29uc3QgZHJhZ2dlZExheWVyID0gdXNlUmVmKG51bGwpO1xyXG4gICAgY29uc3QgZHJhZ2dlRGlyZWN0aW9uID0gdXNlUmVmKFwiXCIpO1xyXG5cclxuICAgIGNvbnN0IG1vdmVkQmVhdHMgPSB1c2VSZWYoMCk7XHJcblxyXG4gICAgLy8gTW91c2UgbW92ZSBoYW5kbGVyIHRvIHVwZGF0ZSBnaG9zdCBsYXllciBkdXJpbmcgZHJhZ1xyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBjb25zdCBoYW5kbGVNb3VzZU1vdmUgPSAoZXYpID0+IHtcclxuICAgICAgICAgICAgaWYgKGlzRHJhZ2dpbmcuY3VycmVudCAmJiBiZWF0V2lkdGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBtb3VzZVguY3VycmVudCA9IGV2LnBhZ2VYO1xyXG4gICAgICAgICAgICAgICAgbW92ZWRCZWF0cy5jdXJyZW50ID0gLU1hdGgucm91bmQoKHN0YXJ0TW91c2VYLmN1cnJlbnQgLSBtb3VzZVguY3VycmVudCkgLyBiZWF0V2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGdob3N0TGF5ZXJSZWYuY3VycmVudCAmJiBtb3ZlZEJlYXRzLmN1cnJlbnQgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgZ2hvc3QgbGF5ZXIgaW5zdGFuY2Ugc2ltdWxhdGluZyBtb3ZlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdob3N0ID0gbmV3IExheWVyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5kcmFnZ2VkTGF5ZXIuY3VycmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFnZ2VkTGF5ZXIuY3VycmVudC5hcnJheUluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wRGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxCZWF0cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmVhdFdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lbGluZVdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihtb2RlUmVmLmN1cnJlbnQgPT09IFwibW92ZVwiKSBnaG9zdC5tb3ZlTGF5ZXIobW92ZWRCZWF0cy5jdXJyZW50LCBtb2RlU25hcFJlZi5jdXJyZW50LCBiZWF0V2lkdGgsIHRpbWVsaW5lV2lkdGgpOyAvLyBzaW11bGF0ZSBtb3ZlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYobW9kZVJlZi5jdXJyZW50ID09PSBcInNjYWxlXCIpIGdob3N0LnNjYWxlTGF5ZXIoZHJhZ2dlRGlyZWN0aW9uLmN1cnJlbnQsIG1vdmVkQmVhdHMuY3VycmVudCwgbW9kZVNuYXBSZWYuY3VycmVudCwgYmVhdFdpZHRoLCB0aW1lbGluZVdpZHRoKTsgLy8gc2ltdWxhdGUgc2NhbGluZyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgZ2hvc3RMYXllclJlZi5jdXJyZW50ID0gZ2hvc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0R2hvc3RMYXllcihnaG9zdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBoYW5kbGVNb3VzZU1vdmUpO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBoYW5kbGVNb3VzZU1vdmUpO1xyXG4gICAgfSwgW2JlYXRXaWR0aF0pO1xyXG5cclxuICAgIC8vIFN0YXJ0IGRyYWdnaW5nIGEgbGF5ZXIgb24gbW91c2UgZG93blxyXG4gICAgY29uc3QgbGF5ZXJNb3VzZURvd24gPSAobGF5ZXIsIGRpcmVjdGlvbikgPT4ge1xyXG4gICAgICAgIGRyYWdnZURpcmVjdGlvbi5jdXJyZW50ID0gZGlyZWN0aW9uO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiZGlyZWN0aW9uXCIsIGRyYWdnZURpcmVjdGlvbi5jdXJyZW50KTtcclxuICAgICAgICBzdGFydE1vdXNlWC5jdXJyZW50ID0gbW91c2VYLmN1cnJlbnQ7XHJcbiAgICAgICAgaXNEcmFnZ2luZy5jdXJyZW50ID0gdHJ1ZTtcclxuICAgICAgICBtb3ZlZEJlYXRzLmN1cnJlbnQgPSAwO1xyXG4gICAgICAgIC8vIEZpbmQgdGhlIGNvcnJlc3BvbmRpbmcgTGF5ZXIgaW5zdGFuY2VcclxuICAgICAgICBkcmFnZ2VkTGF5ZXIuY3VycmVudCA9IGxheWVycy5maW5kKGwgPT4gbC5pbmRleCA9PT0gbGF5ZXIuaW5kZXgpO1xyXG4gICAgICAgIC8vIENyZWF0ZSBnaG9zdCBsYXllciB0byBmb2xsb3cgbW91c2VcclxuICAgICAgICBjb25zdCBuZXdHaG9zdExheWVyID0gbmV3IExheWVyKFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAuLi5kcmFnZ2VkTGF5ZXIuY3VycmVudFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkcmFnZ2VkTGF5ZXIuY3VycmVudC5hcnJheUluZGV4LCBjb21wRGF0YSwgdG90YWxCZWF0cywgYmVhdFdpZHRoLCB0aW1lbGluZVdpZHRoXHJcbiAgICAgICAgKTtcclxuICAgICAgICBnaG9zdExheWVyUmVmLmN1cnJlbnQgPSBuZXdHaG9zdExheWVyO1xyXG4gICAgICAgIHNldEdob3N0TGF5ZXIobmV3R2hvc3RMYXllcik7ICAvLyBUcmlnZ2VyIHJlLXJlbmRlciBmb3IgZ2hvc3QgbGF5ZXJcclxuICAgIH07XHJcbiAgICBcclxuICAgIC8vIE9uIG1vdXNlIHVwLCBhcHBseSB0aGUgbW92ZW1lbnQgaWYgYW55XHJcbiAgICBjb25zdCBsYXllck1vdXNlVXAgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGlzRHJhZ2dpbmcuY3VycmVudCAmJiBtb3ZlZEJlYXRzLmN1cnJlbnQgIT09IDApIHtcclxuICAgICAgICAgICAgaXNEcmFnZ2luZy5jdXJyZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGdob3N0TGF5ZXJSZWYuY3VycmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgIHNldEdob3N0TGF5ZXIobnVsbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJlYXRzVG9VcGRhdGUgPSBtb3ZlZEJlYXRzLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIG1vdmVkQmVhdHMuY3VycmVudCA9IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGRyYWdEaXJlY3Rpb24gPSBkcmFnZ2VEaXJlY3Rpb24uY3VycmVudDtcclxuICAgICAgICAgICAgZHJhZ2dlRGlyZWN0aW9uLmN1cnJlbnQgPSBcIlwiO1xyXG5cclxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBsYXllcnMgc3RhdGUgYnkgbW92aW5nIHRoZSBkcmFnZ2VkIGxheWVyXHJcbiAgICAgICAgICAgIHNldExheWVycygocHJldkxheWVycykgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXZMYXllcnMubWFwKChsYXllcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXllciA9PT0gZHJhZ2dlZExheWVyLmN1cnJlbnQgJiYgbW9kZVJlZi5jdXJyZW50ID09PSBcIm1vdmVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNb3ZlIHRoZSBsYXllcidzIGluUG9pbnQgYnkgYmVhdHNUb1VwZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkTGF5ZXIgPSBsYXllcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZExheWVyLm1vdmVMYXllcihiZWF0c1RvVXBkYXRlLCBtb2RlU25hcFJlZi5jdXJyZW50LCBiZWF0V2lkdGgsIHRpbWVsaW5lV2lkdGgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3luYyB3aXRoIEFmdGVyIEVmZmVjdHMgaWYgbm90IGluIGRldiBtb2RlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFfX0lTX0RFVl9fICYmICF3YWl0aW5nRm9yQUVSZWYuY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FpdGluZ0ZvckFFUmVmLmN1cnJlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0TG9hZGluZ1RleHQoYE1vdmluZyBMYXllciBieSAke2JlYXRzVG9VcGRhdGV9IEJlYXRzYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRMb2FkaW5nKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW92ZUFFTGF5ZXIodXBkYXRlZExheWVyLmluZGV4LCB1cGRhdGVkTGF5ZXIuaW5Qb2ludClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7IHVwZGF0ZVZpZXcoKTsgd2FpdGluZ0ZvckFFUmVmLmN1cnJlbnQgPSBmYWxzZTsgc2V0TG9hZGluZyhmYWxzZSk7IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4gY29uc29sZS5lcnJvcihcIkVycm9yIG1vdmluZyBBRSBsYXllcjpcIiwgZXJyb3IpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlZExheWVyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXIgPT09IGRyYWdnZWRMYXllci5jdXJyZW50ICYmIG1vZGVSZWYuY3VycmVudCA9PT0gXCJzY2FsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vdmUgdGhlIGxheWVyJ3MgaW5Qb2ludCBieSBiZWF0c1RvVXBkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRMYXllciA9IGxheWVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkTGF5ZXIuc2NhbGVMYXllcihkcmFnRGlyZWN0aW9uLCBiZWF0c1RvVXBkYXRlLCBtb2RlU25hcFJlZi5jdXJyZW50LCBiZWF0V2lkdGgsIHRpbWVsaW5lV2lkdGgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3luYyB3aXRoIEFmdGVyIEVmZmVjdHMgaWYgbm90IGluIGRldiBtb2RlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFfX0lTX0RFVl9fICYmICF3YWl0aW5nRm9yQUVSZWYuY3VycmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FpdGluZ0ZvckFFUmVmLmN1cnJlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0TG9hZGluZ1RleHQoYFNjYWxpbmcgTGF5ZXIgYnkgJHtiZWF0c1RvVXBkYXRlfSBCZWF0c2ApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0TG9hZGluZyh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlQUVMYXllcih1cGRhdGVkTGF5ZXIuaW5kZXgsIHVwZGF0ZWRMYXllci5pblBvaW50LCB1cGRhdGVkTGF5ZXIub3V0UG9pbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4geyB1cGRhdGVWaWV3KCk7IHdhaXRpbmdGb3JBRVJlZi5jdXJyZW50ID0gZmFsc2U7IHNldExvYWRpbmcoZmFsc2UpOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGNvbnNvbGUuZXJyb3IoXCJFcnJvciBtb3ZpbmcgQUUgbGF5ZXI6XCIsIGVycm9yKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZWRMYXllcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxheWVyO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gQ2FsbHMgQWZ0ZXIgRWZmZWN0cyBzY3JpcHQgdG8gbW92ZSBhIGxheWVyIGJ5IG5ldyBpblBvaW50XHJcbiAgICBjb25zdCBtb3ZlQUVMYXllciA9IGFzeW5jIChsYXllckluZGV4LCBuZXdJbikgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghd2luZG93LkNTSW50ZXJmYWNlKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoXCJDU0ludGVyZmFjZSBpcyBub3QgYXZhaWxhYmxlLiBNYWtlIHN1cmUgQ1NJbnRlcmZhY2UuanMgaXMgbG9hZGVkLlwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgIGNvbnN0IGNzSW50ZXJmYWNlID0gbmV3IHdpbmRvdy5DU0ludGVyZmFjZSgpO1xyXG4gICAgICAgICAgICBjc0ludGVyZmFjZS5ldmFsU2NyaXB0KGBtb3ZlTGF5ZXIoJHtsYXllckluZGV4fSwgJHtuZXdJbn0pYCwgKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gXCJzdWNjZXNzXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gQ2FsbHMgQWZ0ZXIgRWZmZWN0cyBzY3JpcHQgdG8gc2NhbGUgYSBsYXllciBieSBuZXcgaW5Qb2ludFxyXG4gICAgY29uc3Qgc2NhbGVBRUxheWVyID0gYXN5bmMgKGxheWVySW5kZXgsIG5ld0luLCBuZXdPdXQpID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXdpbmRvdy5DU0ludGVyZmFjZSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KFwiQ1NJbnRlcmZhY2UgaXMgbm90IGF2YWlsYWJsZS4gTWFrZSBzdXJlIENTSW50ZXJmYWNlLmpzIGlzIGxvYWRlZC5cIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICBjb25zdCBjc0ludGVyZmFjZSA9IG5ldyB3aW5kb3cuQ1NJbnRlcmZhY2UoKTtcclxuICAgICAgICAgICAgY3NJbnRlcmZhY2UuZXZhbFNjcmlwdChgc2NhbGVMYXllcigke2xheWVySW5kZXh9LCAke25ld0lufSwgJHtuZXdPdXR9KWAsIChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IFwic3VjY2Vzc1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QocmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEdsb2JhbCBtb3VzZXVwIGxpc3RlbmVyIHRvIGNhdGNoIG1vdXNlIHJlbGVhc2Ugb3V0c2lkZSB0aW1lbGluZSBib3VuZHNcclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaGFuZGxlTW91c2VVcCA9ICgpID0+IHtcclxuICAgICAgICAgICAgbGF5ZXJNb3VzZVVwKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgaGFuZGxlTW91c2VVcCk7XHJcblxyXG4gICAgICAgIHJldHVybiAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBoYW5kbGVNb3VzZVVwKTtcclxuICAgIH0sIFtdKTtcclxuXHJcblxyXG4gICAgLypcclxuICAgICAqIFJFTkRFUlxyXG4gICAgICovXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgaWQ9XCJ0aW1lbGluZVwiIG9uTW91c2VNb3ZlPXsoZXYpID0+IG1vdXNlWC5jdXJyZW50ID0gZXYucGFnZVh9PlxyXG4gICAgICAgICAgICB7LyogTGF5ZXIgZ3JpZDogRWFjaCBsYXllciBpcyBwb3NpdGlvbmVkIGFuZCBzaXplZCBiYXNlZCBvbiBpdHMgdGltaW5nICovfVxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJncmlkLWxheWVyc1wiXHJcbiAgICAgICAgICAgICAgICByZWY9e3RpbWVsaW5lUmVmfVxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICBncmlkVGVtcGxhdGU6IGBhdXRvIC8gcmVwZWF0KCR7cm91bmRlZEJlYXRzfSwgbWlubWF4KDAsIDFmcikpYCxcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogYCR7MTAwICogem9vbUxldmVsfSVgXHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICB7bGF5ZXJzLm1hcCgobGF5ZXIsIGluZGV4KSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtpbmRleH0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRpbWVsaW5lLWxheWVyXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmlkQ29sdW1uU3RhcnQ6IGxheWVyLmNsb3Nlc3RHcmlkU3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmlkQ29sdW1uRW5kOiBsYXllci5jbG9zZXN0R3JpZEVuZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWRSb3c6IGxheWVyLmluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBgcmdiKCR7bGF5ZXIuY29sb3JbMF19LCAke2xheWVyLmNvbG9yWzFdfSwgJHtsYXllci5jb2xvclsyXX0pYCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHNjYWxlWCgke2xheWVyLnNjYWxpbmd9KSB0cmFuc2xhdGVYKCR7bGF5ZXIudHJhbnNsYXRlWH1weClgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiBcImxlZnRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aW1lbGluZS1sYXllci1idXR0b24gbGVmdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VEb3duPXsoKSA9PiBsYXllck1vdXNlRG93bihsYXllciwgXCJpblwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZVVwPXsoKSA9PiBsYXllck1vdXNlVXAoKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPiZuYnNwOzwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpbWVsaW5lLWxheWVyLWJ1dHRvbiByaWdodFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VEb3duPXsoKSA9PiBsYXllck1vdXNlRG93bihsYXllciwgXCJvdXRcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uTW91c2VVcD17KCkgPT4gbGF5ZXJNb3VzZVVwKCl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID4mbmJzcDs8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9e3sgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIiwgdHJhbnNmb3JtOiBcInNjYWxlWCgxKVwiIH19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2xheWVyLm5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICkpfVxyXG5cclxuICAgICAgICAgICAgICAgIHsvKiBSZW5kZXIgZ2hvc3QgbGF5ZXIgZHVyaW5nIGRyYWcgKi99XHJcbiAgICAgICAgICAgICAgICB7Z2hvc3RMYXllciAmJiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0aW1lbGluZS1sYXllciBnaG9zdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmlkQ29sdW1uU3RhcnQ6IGdob3N0TGF5ZXIuY2xvc2VzdEdyaWRTdGFydCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWRDb2x1bW5FbmQ6IGdob3N0TGF5ZXIuY2xvc2VzdEdyaWRFbmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncmlkUm93OiBnaG9zdExheWVyLmluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0bGluZUNvbG9yOiBgcmdiKCR7Z2hvc3RMYXllci5jb2xvclswXX0sICR7Z2hvc3RMYXllci5jb2xvclsxXX0sICR7Z2hvc3RMYXllci5jb2xvclsyXX0pYCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHNjYWxlWCgke2dob3N0TGF5ZXIuc2NhbGluZ30pIHRyYW5zbGF0ZVgoJHtnaG9zdExheWVyLnRyYW5zbGF0ZVh9cHgpYCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogXCJsZWZ0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgey8qIFRpbWVsaW5lIGdyaWQgc2hvd2luZyBiYXJzIGFuZCBiZWF0cyAqL31cclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ3JpZC10aW1lbGluZVwiXHJcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgIGdyaWRUZW1wbGF0ZTogYDEwMCUgLyByZXBlYXQoJHt0b3RhbEJhcnN9LCBtaW5tYXgoMCwgMWZyKSlgLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBgJHsxMDAgKiB6b29tTGV2ZWx9JWBcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIHsvKiBCYXJzICovfVxyXG4gICAgICAgICAgICAgICAge0FycmF5LmZyb20oeyBsZW5ndGg6IHRvdGFsQmFycyB9KS5tYXAoKF8sIGJhckluZGV4KSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2JhckluZGV4fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJncmlkLWJhclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGdyaWRUZW1wbGF0ZTogYDEwMCUgLyByZXBlYXQoJHtiZWF0c1BlckJhcn0sIG1pbm1heCgwLCAxZnIpKWAgfX1cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsvKiBCZWF0cyBpbnNpZGUgYmFyICovfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7QXJyYXkuZnJvbSh7IGxlbmd0aDogYmVhdHNQZXJCYXIgfSkubWFwKChfLCBiZWF0SW5kZXgpID0+IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYga2V5PXtiZWF0SW5kZXh9IGNsYXNzTmFtZT1cImdyaWQtYmVhdFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBJY29uWm9vbUluIGZyb20gXCIuLi9hc3NldHMvaWNvbnMvem9vbS1pbi1pY29uLnN2Z1wiO1xyXG5pbXBvcnQgSWNvblpvb21PdXQgZnJvbSBcIi4uL2Fzc2V0cy9pY29ucy96b29tLW91dC1pY29uLnN2Z1wiO1xyXG5pbXBvcnQgSWNvblJlbG9hZCBmcm9tIFwiLi4vYXNzZXRzL2ljb25zL3JlbG9hZC1pY29uLnN2Z1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTG9hZGVyKHsgdGV4dCA9IFwiXCIgfSkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGlkPVwibG9hZGVyXCI+XHJcbiAgICAgICAgICAgIDxoMT5Mb2FkaW5nIC4uLjwvaDE+XHJcbiAgICAgICAgICAgIDxwPnt0ZXh0fTwvcD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn0iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZU1lbW8sIHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBcIi4vc3R5bGUuc2Nzc1wiO1xyXG5pbXBvcnQgVG9vbGJhciBmcm9tIFwiLi9jb21wb25lbnRzL1Rvb2xiYXJcIjtcclxuaW1wb3J0IFRpbWVsaW5lIGZyb20gXCIuL2NvbXBvbmVudHMvVGltZWxpbmVcIjtcclxuaW1wb3J0IExvYWRlciBmcm9tIFwiLi9jb21wb25lbnRzL0xvYWRlclwiO1xyXG5cclxuLy8gTWFpbiBSZWFjdCBjb21wb25lbnRcclxuY29uc3QgQXBwID0gKCkgPT4ge1xyXG4gICAgLy8gVUkgbG9hZGluZyBzdGF0ZXNcclxuICAgIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFtsb2FkaW5nVGV4dCwgc2V0TG9hZGluZ1RleHRdID0gdXNlU3RhdGUoXCJcIik7XHJcblxyXG4gICAgLy8gVGltZWxpbmUgc2V0dGluZ3NcclxuICAgIGNvbnN0IFticG0sIHNldEJwbV0gPSB1c2VTdGF0ZSgxMjAuMCk7IC8vIEJlYXRzIHBlciBtaW51dGVcclxuICAgIGNvbnN0IFtiZWF0c1BlckJhciwgc2V0QmVhdHNQZXJCYXJdID0gdXNlU3RhdGUoNCk7IC8vIFRpbWUgc2lnbmF0dXJlIHRvcCBudW1iZXJcclxuICAgIGNvbnN0IFt6b29tTGV2ZWwsIHNldFpvb21MZXZlbF0gPSB1c2VTdGF0ZSgxLjApOyAvLyBDb250cm9scyBob3Jpem9udGFsIHpvb20gb2YgdGltZWxpbmVcclxuICAgIGNvbnN0IHRpbWVTaWduYXR1cmUgPSA0OyAvLyBVc2VkIG9ubHkgZm9yIGRpc3BsYXkgY2FsY3VsYXRpb24gKG5vdCBlZGl0YWJsZSB5ZXQpXHJcblxyXG4gICAgLy8gTW9kZSBTZXR0aW5nc1xyXG4gICAgLyogR0VORVJBTCBNT0RFIFdIRU4gQ09NTVVOSUNBVElORyBXSVRIIEFFIFRPIFBSRVZFTlQgQ1JBU0hFUyAqL1xyXG4gICAgY29uc3QgW3dhaXRpbmdGb3JBRSwgc2V0V2FpdGluZ0ZvckFFXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IHdhaXRpbmdGb3JBRVJlZiA9IHVzZVJlZih3YWl0aW5nRm9yQUUpO1xyXG4gICAgLyogRGlmZmVyZW50IG1vZGVzIHdoZW4gdXNpbmcgdGhlIFRMICovXHJcbiAgICBjb25zdCBbbW9kZVNuYXAsIHNldE1vZGVTbmFwXSA9IHVzZVN0YXRlKHRydWUpO1xyXG4gICAgY29uc3QgbW9kZVNuYXBSZWYgPSB1c2VSZWYobW9kZVNuYXApO1xyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBtb2RlU25hcFJlZi5jdXJyZW50ID0gbW9kZVNuYXA7XHJcbiAgICB9LCBbbW9kZVNuYXBdKTtcclxuICAgIGNvbnN0IFttb2RlLCBzZXRNb2RlXSA9IHVzZVN0YXRlKFwibW92ZVwiKTsgLy8gRWl0aGVyIFwibW92ZVwiIG9yIFwic2NhbGVcIlxyXG4gICAgY29uc3QgbW9kZVJlZiA9IHVzZVJlZihtb2RlKTtcclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgbW9kZVJlZi5jdXJyZW50ID0gbW9kZTtcclxuICAgIH0sIFttb2RlXSk7XHJcblxyXG5cclxuICAgIC8vIFpvb20gY29udHJvbHNcclxuICAgIGNvbnN0IGluY3JlYXNlWm9vbSA9ICgpID0+IHNldFpvb21MZXZlbCh6b29tTGV2ZWwgKyAwLjI1KTtcclxuICAgIGNvbnN0IGRlY3JlYXNlWm9vbSA9ICgpID0+IHpvb21MZXZlbCAtIDAuMjUgPj0gMS4wID8gc2V0Wm9vbUxldmVsKHpvb21MZXZlbCAtIDAuMjUpIDogbnVsbDtcclxuXHJcbiAgICAvLyBEZWZhdWx0IChlbXB0eSkgY29tcCBzdHJ1Y3R1cmVcclxuICAgIGxldCBwbGFjZWhvbGRlckNvbXBEYXRhID0ge1xyXG4gICAgICAgIG5hbWU6IFwiUGxhY2Vob2xkZXIgQ29tcFwiLFxyXG4gICAgICAgIGR1cmF0aW9uOiAwLFxyXG4gICAgICAgIGZyYW1lUmF0ZTogMCxcclxuICAgICAgICB3aWR0aDogMCxcclxuICAgICAgICBoZWlnaHQ6IDAsXHJcbiAgICAgICAgbGF5ZXJzOiBbXVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBJZiBpbiBkZXYgbW9kZSwgcG9wdWxhdGUgY29tcCBkYXRhIHdpdGggbW9jayBsYXllcnNcclxuICAgIGlmIChfX0lTX0RFVl9fKSB7XHJcbiAgICAgICAgcGxhY2Vob2xkZXJDb21wRGF0YSA9IHtcclxuICAgICAgICAgICAgbmFtZTogXCJEdW1teSBDb21wXCIsXHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiA0OCwgLy8gc2Vjb25kc1xyXG4gICAgICAgICAgICBmcmFtZVJhdGU6IDMwLFxyXG4gICAgICAgICAgICB3aWR0aDogMTA4MCxcclxuICAgICAgICAgICAgaGVpZ2h0OiAxMDgwLFxyXG4gICAgICAgICAgICBsYXllcnM6IFtcclxuICAgICAgICAgICAgICAgIHsgaW5kZXg6IDEsIG5hbWU6IFwiTGF5ZXIgMDFcIiwgaW5Qb2ludDogMTIsIG91dFBvaW50OiAzNSwgZHVyYXRpb246IDIzLCBjb2xvcjogW01hdGgucmFuZG9tKCkqMjU1LCBNYXRoLnJhbmRvbSgpKjI1NSwgTWF0aC5yYW5kb20oKSoyNTVdIH0sXHJcbiAgICAgICAgICAgICAgICB7IGluZGV4OiAyLCBuYW1lOiBcIkxheWVyIDAyXCIsIGluUG9pbnQ6IDUsIG91dFBvaW50OiAyMSwgZHVyYXRpb246IDE2LCBjb2xvcjogW01hdGgucmFuZG9tKCkqMjU1LCBNYXRoLnJhbmRvbSgpKjI1NSwgTWF0aC5yYW5kb20oKSoyNTVdIH0sXHJcbiAgICAgICAgICAgICAgICB7IGluZGV4OiAzLCBuYW1lOiBcIkxheWVyIDAzXCIsIGluUG9pbnQ6IDcuOCwgb3V0UG9pbnQ6IDQ2LCBkdXJhdGlvbjogMzguMiwgY29sb3I6IFtNYXRoLnJhbmRvbSgpKjI1NSwgTWF0aC5yYW5kb20oKSoyNTUsIE1hdGgucmFuZG9tKCkqMjU1XSB9LFxyXG4gICAgICAgICAgICAgICAgeyBpbmRleDogNCwgbmFtZTogXCJMYXllciAwNFwiLCBpblBvaW50OiAxLCBvdXRQb2ludDogMywgZHVyYXRpb246IDIsIGNvbG9yOiBbTWF0aC5yYW5kb20oKSoyNTUsIE1hdGgucmFuZG9tKCkqMjU1LCBNYXRoLnJhbmRvbSgpKjI1NV0gfSxcclxuICAgICAgICAgICAgICAgIHsgaW5kZXg6IDUsIG5hbWU6IFwiTGF5ZXIgMDVcIiwgaW5Qb2ludDogMzUsIG91dFBvaW50OiA0OCwgZHVyYXRpb246IDEzLCBjb2xvcjogW01hdGgucmFuZG9tKCkqMjU1LCBNYXRoLnJhbmRvbSgpKjI1NSwgTWF0aC5yYW5kb20oKSoyNTVdIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVhY3Qgc3RhdGUgaG9sZGluZyBjb21wb3NpdGlvbiBkYXRhXHJcbiAgICBjb25zdCBbY29tcERhdGEsIHNldENvbXBEYXRhXSA9IHVzZVN0YXRlKHBsYWNlaG9sZGVyQ29tcERhdGEpO1xyXG5cclxuICAgIC8vIEZ1bmN0aW9uIHRoYXQgZmV0Y2hlcyBjb21wb3NpdGlvbiBkYXRhIGZyb20gRXh0ZW5kU2NyaXB0IHZpYSBDRVBcclxuICAgIGNvbnN0IGZldGNoQ29tcERhdGEgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF3aW5kb3cuQ1NJbnRlcmZhY2UpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChcIkNTSW50ZXJmYWNlIGlzIG5vdCBhdmFpbGFibGUuIE1ha2Ugc3VyZSBDU0ludGVyZmFjZS5qcyBpcyBsb2FkZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjc0ludGVyZmFjZSA9IG5ldyB3aW5kb3cuQ1NJbnRlcmZhY2UoKTtcclxuICAgICAgICAgICAgY3NJbnRlcmZhY2UuZXZhbFNjcmlwdChcImdldENvbXBEYXRhKClcIiwgKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShyZXN1bHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmVycm9yKSByZWplY3QoZGF0YS5lcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSByZXNvbHZlKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChcIkludmFsaWQgSlNPTiByZXNwb25zZSBmcm9tIEV4dGVuZFNjcmlwdC5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBUcmlnZ2VycyBmZXRjaCB3aGVuIHVzZXIgc3dpdGNoZXMgdG8gdGhlIGFwcFxyXG4gICAgY29uc3QgdXBkYXRlVmlldyA9ICgpID0+IHtcclxuICAgICAgICBpZiAoIV9fSVNfREVWX18gJiYgIXdhaXRpbmdGb3JBRVJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIHdhaXRpbmdGb3JBRVJlZi5jdXJyZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2V0TG9hZGluZ1RleHQoXCJGZXRjaGluZyBDb21wb3NpdGlvbiBEYXRhXCIpO1xyXG4gICAgICAgICAgICBzZXRMb2FkaW5nKHRydWUpO1xyXG4gICAgICAgICAgICBmZXRjaENvbXBEYXRhKClcclxuICAgICAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0Q29tcERhdGEoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FpdGluZ0ZvckFFUmVmLmN1cnJlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgY29tcCBkYXRhOlwiLCBlcnJvcikpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gUmVnaXN0ZXIgZXZlbnQgbGlzdGVuZXI6IHdoZW4gYXBwIHJlZ2FpbnMgZm9jdXMsIHJlZnJlc2ggZGF0YVxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCB1cGRhdGVWaWV3KTtcclxuXHJcbiAgICAvLyBFeHBvcnQgY29tcCBkYXRhIHRvIC5qc29uIGZpbGVcclxuICAgIGNvbnN0IHNhdmVDb21wRGF0YUpTT04gPSAoZmlsZW5hbWUpID0+IHtcclxuICAgICAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW0pTT04uc3RyaW5naWZ5KGNvbXBEYXRhLCBudWxsLCAyKV0sIHsgdHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nIH0pO1xyXG4gICAgICAgIGNvbnN0IHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XHJcbiAgICAgICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICBhLmhyZWYgPSB1cmw7XHJcbiAgICAgICAgYS5kb3dubG9hZCA9IGAke2ZpbGVuYW1lfS5qc29uYDtcclxuICAgICAgICBhLmNsaWNrKCk7XHJcbiAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGNvbXBEYXRhKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEltcG9ydCBjb21wIGRhdGEgZnJvbSBhIC5qc29uIGZpbGVcclxuICAgIGNvbnN0IGxvYWRDb21wRGF0YUpTT04gPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVhZEZpbGUgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIHZhciBmaWxlID0gZS50YXJnZXQuZmlsZXNbMF07XHJcbiAgICAgICAgICAgIGlmICghZmlsZSkgcmV0dXJuO1xyXG4gICAgICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcclxuICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb250ZW50cyA9IGUudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgIGZpbGVJbnB1dC5mdW5jKGNvbnRlbnRzKTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZmlsZUlucHV0KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgZmlsZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xyXG4gICAgICAgIGZpbGVJbnB1dC50eXBlID0gXCJmaWxlXCI7XHJcbiAgICAgICAgZmlsZUlucHV0LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICBmaWxlSW5wdXQub25jaGFuZ2UgPSByZWFkRmlsZTtcclxuICAgICAgICBmaWxlSW5wdXQuZnVuYyA9IChjb250ZW50KSA9PiBzZXRDb21wRGF0YShKU09OLnBhcnNlKGNvbnRlbnQpKTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZpbGVJbnB1dCk7XHJcbiAgICAgICAgZmlsZUlucHV0LmNsaWNrKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPG1haW4+XHJcbiAgICAgICAgICAgIHtsb2FkaW5nICYmIDxMb2FkZXIgdGV4dD17bG9hZGluZ1RleHR9IC8+fVxyXG5cclxuICAgICAgICAgICAgPFRvb2xiYXJcclxuICAgICAgICAgICAgICAgIGJwbT17YnBtfVxyXG4gICAgICAgICAgICAgICAgc2V0QnBtPXtzZXRCcG19XHJcbiAgICAgICAgICAgICAgICBiZWF0c1BlckJhcj17YmVhdHNQZXJCYXJ9XHJcbiAgICAgICAgICAgICAgICBzZXRCZWF0c1BlckJhcj17c2V0QmVhdHNQZXJCYXJ9XHJcbiAgICAgICAgICAgICAgICB6b29tTGV2ZWw9e3pvb21MZXZlbH1cclxuICAgICAgICAgICAgICAgIGluY3JlYXNlWm9vbT17aW5jcmVhc2Vab29tfVxyXG4gICAgICAgICAgICAgICAgZGVjcmVhc2Vab29tPXtkZWNyZWFzZVpvb219XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVWaWV3PXt1cGRhdGVWaWV3fVxyXG4gICAgICAgICAgICAgICAgbW9kZVNuYXA9e21vZGVTbmFwfVxyXG4gICAgICAgICAgICAgICAgc2V0TW9kZVNuYXA9e3NldE1vZGVTbmFwfVxyXG4gICAgICAgICAgICAgICAgbW9kZT17bW9kZX1cclxuICAgICAgICAgICAgICAgIHNldE1vZGU9e3NldE1vZGV9XHJcbiAgICAgICAgICAgICAgICBzYXZlQ29tcERhdGFKU09OPXtzYXZlQ29tcERhdGFKU09OfVxyXG4gICAgICAgICAgICAgICAgbG9hZENvbXBEYXRhSlNPTj17bG9hZENvbXBEYXRhSlNPTn1cclxuICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICAgIDxUaW1lbGluZVxyXG4gICAgICAgICAgICAgICAgY29tcERhdGE9e2NvbXBEYXRhfVxyXG4gICAgICAgICAgICAgICAgYnBtPXticG19XHJcbiAgICAgICAgICAgICAgICBiZWF0c1BlckJhcj17YmVhdHNQZXJCYXJ9XHJcbiAgICAgICAgICAgICAgICB6b29tTGV2ZWw9e3pvb21MZXZlbH1cclxuICAgICAgICAgICAgICAgIHVwZGF0ZVZpZXc9e3VwZGF0ZVZpZXd9XHJcbiAgICAgICAgICAgICAgICB3YWl0aW5nRm9yQUVSZWYgPSB7d2FpdGluZ0ZvckFFUmVmfVxyXG4gICAgICAgICAgICAgICAgc2V0TG9hZGluZz17c2V0TG9hZGluZ31cclxuICAgICAgICAgICAgICAgIHNldExvYWRpbmdUZXh0PXtzZXRMb2FkaW5nVGV4dH1cclxuICAgICAgICAgICAgICAgIG1vZGVTbmFwUmVmPXttb2RlU25hcFJlZn1cclxuICAgICAgICAgICAgICAgIG1vZGVSZWY9e21vZGVSZWZ9XHJcbiAgICAgICAgICAgIC8+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGlkPVwiaW5mb3JtYXRpb25cIj5cclxuICAgICAgICAgICAgICAgIDxociAvPlxyXG4gICAgICAgICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNtYWxsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wIGR1cmF0aW9uOiB7Y29tcERhdGEuZHVyYXRpb259IHNlY29uZHMgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbCBiZWF0czoge01hdGguZmxvb3IoY29tcERhdGEuZHVyYXRpb24gKiAoYnBtIC8gNjAgKiAoYmVhdHNQZXJCYXIgLyA0KSkpfSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsIGJhcnM6IHtNYXRoLmNlaWwoKE1hdGguZmxvb3IoY29tcERhdGEuZHVyYXRpb24gKiAoYnBtIC8gNjAgKiAodGltZVNpZ25hdHVyZSAvIDQpKSkpIC8gdGltZVNpZ25hdHVyZSl9IHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmVhdHMgcGVyIHNlY29uZDogeyBicG0gLyA2MCAqIChiZWF0c1BlckJhciAvIDQpfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvc21hbGw+XHJcbiAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvbWFpbj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBcHA7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gJ3JlYWN0LWRvbS9jbGllbnQnO1xyXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJztcclxuXHJcbmNvbnN0IHJvb3QgPSBjcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JykpO1xyXG5yb290LnJlbmRlcig8QXBwIC8+KTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cblwidXNlIHN0cmljdFwiO1xudmFyIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuZnVuY3Rpb24gZm9ybWF0UHJvZEVycm9yTWVzc2FnZShjb2RlKSB7XG4gIHZhciB1cmwgPSBcImh0dHBzOi8vcmVhY3QuZGV2L2Vycm9ycy9cIiArIGNvZGU7XG4gIGlmICgxIDwgYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIHVybCArPSBcIj9hcmdzW109XCIgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzWzFdKTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgIHVybCArPSBcIiZhcmdzW109XCIgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2ldKTtcbiAgfVxuICByZXR1cm4gKFxuICAgIFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiICtcbiAgICBjb2RlICtcbiAgICBcIjsgdmlzaXQgXCIgK1xuICAgIHVybCArXG4gICAgXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiXG4gICk7XG59XG5mdW5jdGlvbiBub29wKCkge31cbnZhciBJbnRlcm5hbHMgPSB7XG4gICAgZDoge1xuICAgICAgZjogbm9vcCxcbiAgICAgIHI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1MjIpKTtcbiAgICAgIH0sXG4gICAgICBEOiBub29wLFxuICAgICAgQzogbm9vcCxcbiAgICAgIEw6IG5vb3AsXG4gICAgICBtOiBub29wLFxuICAgICAgWDogbm9vcCxcbiAgICAgIFM6IG5vb3AsXG4gICAgICBNOiBub29wXG4gICAgfSxcbiAgICBwOiAwLFxuICAgIGZpbmRET01Ob2RlOiBudWxsXG4gIH0sXG4gIFJFQUNUX1BPUlRBTF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTtcbmZ1bmN0aW9uIGNyZWF0ZVBvcnRhbCQxKGNoaWxkcmVuLCBjb250YWluZXJJbmZvLCBpbXBsZW1lbnRhdGlvbikge1xuICB2YXIga2V5ID1cbiAgICAzIDwgYXJndW1lbnRzLmxlbmd0aCAmJiB2b2lkIDAgIT09IGFyZ3VtZW50c1szXSA/IGFyZ3VtZW50c1szXSA6IG51bGw7XG4gIHJldHVybiB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX1BPUlRBTF9UWVBFLFxuICAgIGtleTogbnVsbCA9PSBrZXkgPyBudWxsIDogXCJcIiArIGtleSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgY29udGFpbmVySW5mbzogY29udGFpbmVySW5mbyxcbiAgICBpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb25cbiAgfTtcbn1cbnZhciBSZWFjdFNoYXJlZEludGVybmFscyA9XG4gIFJlYWN0Ll9fQ0xJRU5UX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERTtcbmZ1bmN0aW9uIGdldENyb3NzT3JpZ2luU3RyaW5nQXMoYXMsIGlucHV0KSB7XG4gIGlmIChcImZvbnRcIiA9PT0gYXMpIHJldHVybiBcIlwiO1xuICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGlucHV0KVxuICAgIHJldHVybiBcInVzZS1jcmVkZW50aWFsc1wiID09PSBpbnB1dCA/IGlucHV0IDogXCJcIjtcbn1cbmV4cG9ydHMuX19ET01fSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfV0FSTl9VU0VSU19USEVZX0NBTk5PVF9VUEdSQURFID1cbiAgSW50ZXJuYWxzO1xuZXhwb3J0cy5jcmVhdGVQb3J0YWwgPSBmdW5jdGlvbiAoY2hpbGRyZW4sIGNvbnRhaW5lcikge1xuICB2YXIga2V5ID1cbiAgICAyIDwgYXJndW1lbnRzLmxlbmd0aCAmJiB2b2lkIDAgIT09IGFyZ3VtZW50c1syXSA/IGFyZ3VtZW50c1syXSA6IG51bGw7XG4gIGlmIChcbiAgICAhY29udGFpbmVyIHx8XG4gICAgKDEgIT09IGNvbnRhaW5lci5ub2RlVHlwZSAmJlxuICAgICAgOSAhPT0gY29udGFpbmVyLm5vZGVUeXBlICYmXG4gICAgICAxMSAhPT0gY29udGFpbmVyLm5vZGVUeXBlKVxuICApXG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyOTkpKTtcbiAgcmV0dXJuIGNyZWF0ZVBvcnRhbCQxKGNoaWxkcmVuLCBjb250YWluZXIsIG51bGwsIGtleSk7XG59O1xuZXhwb3J0cy5mbHVzaFN5bmMgPSBmdW5jdGlvbiAoZm4pIHtcbiAgdmFyIHByZXZpb3VzVHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQsXG4gICAgcHJldmlvdXNVcGRhdGVQcmlvcml0eSA9IEludGVybmFscy5wO1xuICB0cnkge1xuICAgIGlmICgoKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsKSwgKEludGVybmFscy5wID0gMiksIGZuKSkgcmV0dXJuIGZuKCk7XG4gIH0gZmluYWxseSB7XG4gICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2aW91c1RyYW5zaXRpb24pLFxuICAgICAgKEludGVybmFscy5wID0gcHJldmlvdXNVcGRhdGVQcmlvcml0eSksXG4gICAgICBJbnRlcm5hbHMuZC5mKCk7XG4gIH1cbn07XG5leHBvcnRzLnByZWNvbm5lY3QgPSBmdW5jdGlvbiAoaHJlZiwgb3B0aW9ucykge1xuICBcInN0cmluZ1wiID09PSB0eXBlb2YgaHJlZiAmJlxuICAgIChvcHRpb25zXG4gICAgICA/ICgob3B0aW9ucyA9IG9wdGlvbnMuY3Jvc3NPcmlnaW4pLFxuICAgICAgICAob3B0aW9ucyA9XG4gICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnNcbiAgICAgICAgICAgID8gXCJ1c2UtY3JlZGVudGlhbHNcIiA9PT0gb3B0aW9uc1xuICAgICAgICAgICAgICA/IG9wdGlvbnNcbiAgICAgICAgICAgICAgOiBcIlwiXG4gICAgICAgICAgICA6IHZvaWQgMCkpXG4gICAgICA6IChvcHRpb25zID0gbnVsbCksXG4gICAgSW50ZXJuYWxzLmQuQyhocmVmLCBvcHRpb25zKSk7XG59O1xuZXhwb3J0cy5wcmVmZXRjaEROUyA9IGZ1bmN0aW9uIChocmVmKSB7XG4gIFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmICYmIEludGVybmFscy5kLkQoaHJlZik7XG59O1xuZXhwb3J0cy5wcmVpbml0ID0gZnVuY3Rpb24gKGhyZWYsIG9wdGlvbnMpIHtcbiAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmICYmIG9wdGlvbnMgJiYgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuYXMpIHtcbiAgICB2YXIgYXMgPSBvcHRpb25zLmFzLFxuICAgICAgY3Jvc3NPcmlnaW4gPSBnZXRDcm9zc09yaWdpblN0cmluZ0FzKGFzLCBvcHRpb25zLmNyb3NzT3JpZ2luKSxcbiAgICAgIGludGVncml0eSA9XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmludGVncml0eSA/IG9wdGlvbnMuaW50ZWdyaXR5IDogdm9pZCAwLFxuICAgICAgZmV0Y2hQcmlvcml0eSA9XG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmZldGNoUHJpb3JpdHlcbiAgICAgICAgICA/IG9wdGlvbnMuZmV0Y2hQcmlvcml0eVxuICAgICAgICAgIDogdm9pZCAwO1xuICAgIFwic3R5bGVcIiA9PT0gYXNcbiAgICAgID8gSW50ZXJuYWxzLmQuUyhcbiAgICAgICAgICBocmVmLFxuICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLnByZWNlZGVuY2UgPyBvcHRpb25zLnByZWNlZGVuY2UgOiB2b2lkIDAsXG4gICAgICAgICAge1xuICAgICAgICAgICAgY3Jvc3NPcmlnaW46IGNyb3NzT3JpZ2luLFxuICAgICAgICAgICAgaW50ZWdyaXR5OiBpbnRlZ3JpdHksXG4gICAgICAgICAgICBmZXRjaFByaW9yaXR5OiBmZXRjaFByaW9yaXR5XG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICA6IFwic2NyaXB0XCIgPT09IGFzICYmXG4gICAgICAgIEludGVybmFscy5kLlgoaHJlZiwge1xuICAgICAgICAgIGNyb3NzT3JpZ2luOiBjcm9zc09yaWdpbixcbiAgICAgICAgICBpbnRlZ3JpdHk6IGludGVncml0eSxcbiAgICAgICAgICBmZXRjaFByaW9yaXR5OiBmZXRjaFByaW9yaXR5LFxuICAgICAgICAgIG5vbmNlOiBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5ub25jZSA/IG9wdGlvbnMubm9uY2UgOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gIH1cbn07XG5leHBvcnRzLnByZWluaXRNb2R1bGUgPSBmdW5jdGlvbiAoaHJlZiwgb3B0aW9ucykge1xuICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYpXG4gICAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBvcHRpb25zICYmIG51bGwgIT09IG9wdGlvbnMpIHtcbiAgICAgIGlmIChudWxsID09IG9wdGlvbnMuYXMgfHwgXCJzY3JpcHRcIiA9PT0gb3B0aW9ucy5hcykge1xuICAgICAgICB2YXIgY3Jvc3NPcmlnaW4gPSBnZXRDcm9zc09yaWdpblN0cmluZ0FzKFxuICAgICAgICAgIG9wdGlvbnMuYXMsXG4gICAgICAgICAgb3B0aW9ucy5jcm9zc09yaWdpblxuICAgICAgICApO1xuICAgICAgICBJbnRlcm5hbHMuZC5NKGhyZWYsIHtcbiAgICAgICAgICBjcm9zc09yaWdpbjogY3Jvc3NPcmlnaW4sXG4gICAgICAgICAgaW50ZWdyaXR5OlxuICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuaW50ZWdyaXR5ID8gb3B0aW9ucy5pbnRlZ3JpdHkgOiB2b2lkIDAsXG4gICAgICAgICAgbm9uY2U6IFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLm5vbmNlID8gb3B0aW9ucy5ub25jZSA6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgbnVsbCA9PSBvcHRpb25zICYmIEludGVybmFscy5kLk0oaHJlZik7XG59O1xuZXhwb3J0cy5wcmVsb2FkID0gZnVuY3Rpb24gKGhyZWYsIG9wdGlvbnMpIHtcbiAgaWYgKFxuICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmICYmXG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIG9wdGlvbnMgJiZcbiAgICBudWxsICE9PSBvcHRpb25zICYmXG4gICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuYXNcbiAgKSB7XG4gICAgdmFyIGFzID0gb3B0aW9ucy5hcyxcbiAgICAgIGNyb3NzT3JpZ2luID0gZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyhhcywgb3B0aW9ucy5jcm9zc09yaWdpbik7XG4gICAgSW50ZXJuYWxzLmQuTChocmVmLCBhcywge1xuICAgICAgY3Jvc3NPcmlnaW46IGNyb3NzT3JpZ2luLFxuICAgICAgaW50ZWdyaXR5OlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbnRlZ3JpdHkgPyBvcHRpb25zLmludGVncml0eSA6IHZvaWQgMCxcbiAgICAgIG5vbmNlOiBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5ub25jZSA/IG9wdGlvbnMubm9uY2UgOiB2b2lkIDAsXG4gICAgICB0eXBlOiBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy50eXBlID8gb3B0aW9ucy50eXBlIDogdm9pZCAwLFxuICAgICAgZmV0Y2hQcmlvcml0eTpcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMuZmV0Y2hQcmlvcml0eVxuICAgICAgICAgID8gb3B0aW9ucy5mZXRjaFByaW9yaXR5XG4gICAgICAgICAgOiB2b2lkIDAsXG4gICAgICByZWZlcnJlclBvbGljeTpcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG9wdGlvbnMucmVmZXJyZXJQb2xpY3lcbiAgICAgICAgICA/IG9wdGlvbnMucmVmZXJyZXJQb2xpY3lcbiAgICAgICAgICA6IHZvaWQgMCxcbiAgICAgIGltYWdlU3JjU2V0OlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbWFnZVNyY1NldCA/IG9wdGlvbnMuaW1hZ2VTcmNTZXQgOiB2b2lkIDAsXG4gICAgICBpbWFnZVNpemVzOlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbWFnZVNpemVzID8gb3B0aW9ucy5pbWFnZVNpemVzIDogdm9pZCAwLFxuICAgICAgbWVkaWE6IFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLm1lZGlhID8gb3B0aW9ucy5tZWRpYSA6IHZvaWQgMFxuICAgIH0pO1xuICB9XG59O1xuZXhwb3J0cy5wcmVsb2FkTW9kdWxlID0gZnVuY3Rpb24gKGhyZWYsIG9wdGlvbnMpIHtcbiAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBocmVmKVxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICB2YXIgY3Jvc3NPcmlnaW4gPSBnZXRDcm9zc09yaWdpblN0cmluZ0FzKG9wdGlvbnMuYXMsIG9wdGlvbnMuY3Jvc3NPcmlnaW4pO1xuICAgICAgSW50ZXJuYWxzLmQubShocmVmLCB7XG4gICAgICAgIGFzOlxuICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmFzICYmIFwic2NyaXB0XCIgIT09IG9wdGlvbnMuYXNcbiAgICAgICAgICAgID8gb3B0aW9ucy5hc1xuICAgICAgICAgICAgOiB2b2lkIDAsXG4gICAgICAgIGNyb3NzT3JpZ2luOiBjcm9zc09yaWdpbixcbiAgICAgICAgaW50ZWdyaXR5OlxuICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmludGVncml0eSA/IG9wdGlvbnMuaW50ZWdyaXR5IDogdm9pZCAwXG4gICAgICB9KTtcbiAgICB9IGVsc2UgSW50ZXJuYWxzLmQubShocmVmKTtcbn07XG5leHBvcnRzLnJlcXVlc3RGb3JtUmVzZXQgPSBmdW5jdGlvbiAoZm9ybSkge1xuICBJbnRlcm5hbHMuZC5yKGZvcm0pO1xufTtcbmV4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgPSBmdW5jdGlvbiAoZm4sIGEpIHtcbiAgcmV0dXJuIGZuKGEpO1xufTtcbmV4cG9ydHMudXNlRm9ybVN0YXRlID0gZnVuY3Rpb24gKGFjdGlvbiwgaW5pdGlhbFN0YXRlLCBwZXJtYWxpbmspIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlRm9ybVN0YXRlKGFjdGlvbiwgaW5pdGlhbFN0YXRlLCBwZXJtYWxpbmspO1xufTtcbmV4cG9ydHMudXNlRm9ybVN0YXR1cyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlSG9zdFRyYW5zaXRpb25TdGF0dXMoKTtcbn07XG5leHBvcnRzLnZlcnNpb24gPSBcIjE5LjAuMFwiO1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtZG9tLWNsaWVudC5wcm9kdWN0aW9uLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cblwidXNlIHN0cmljdFwiO1xudmFyIFNjaGVkdWxlciA9IHJlcXVpcmUoXCJzY2hlZHVsZXJcIiksXG4gIFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpLFxuICBSZWFjdERPTSA9IHJlcXVpcmUoXCJyZWFjdC1kb21cIik7XG5mdW5jdGlvbiBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKGNvZGUpIHtcbiAgdmFyIHVybCA9IFwiaHR0cHM6Ly9yZWFjdC5kZXYvZXJyb3JzL1wiICsgY29kZTtcbiAgaWYgKDEgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgdXJsICs9IFwiP2FyZ3NbXT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbMV0pO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgICAgdXJsICs9IFwiJmFyZ3NbXT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbaV0pO1xuICB9XG4gIHJldHVybiAoXG4gICAgXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIgK1xuICAgIGNvZGUgK1xuICAgIFwiOyB2aXNpdCBcIiArXG4gICAgdXJsICtcbiAgICBcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJcbiAgKTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRDb250YWluZXIobm9kZSkge1xuICByZXR1cm4gIShcbiAgICAhbm9kZSB8fFxuICAgICgxICE9PSBub2RlLm5vZGVUeXBlICYmIDkgIT09IG5vZGUubm9kZVR5cGUgJiYgMTEgIT09IG5vZGUubm9kZVR5cGUpXG4gICk7XG59XG52YXIgUkVBQ1RfTEVHQUNZX0VMRU1FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLFxuICBSRUFDVF9FTEVNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QudHJhbnNpdGlvbmFsLmVsZW1lbnRcIiksXG4gIFJFQUNUX1BPUlRBTF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxcbiAgUkVBQ1RfRlJBR01FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxcbiAgUkVBQ1RfU1RSSUNUX01PREVfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxcbiAgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxcbiAgUkVBQ1RfUFJPVklERVJfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxcbiAgUkVBQ1RfQ09OU1VNRVJfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5jb25zdW1lclwiKSxcbiAgUkVBQ1RfQ09OVEVYVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksXG4gIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksXG4gIFJFQUNUX1NVU1BFTlNFX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksXG4gIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLFxuICBSRUFDVF9NRU1PX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxcbiAgUkVBQ1RfTEFaWV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7XG5TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7XG5TeW1ib2wuZm9yKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtcbnZhciBSRUFDVF9PRkZTQ1JFRU5fVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7XG5TeW1ib2wuZm9yKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKTtcblN5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTtcbnZhciBSRUFDVF9NRU1PX0NBQ0hFX1NFTlRJTkVMID0gU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9fY2FjaGVfc2VudGluZWxcIiksXG4gIE1BWUJFX0lURVJBVE9SX1NZTUJPTCA9IFN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICBpZiAobnVsbCA9PT0gbWF5YmVJdGVyYWJsZSB8fCBcIm9iamVjdFwiICE9PSB0eXBlb2YgbWF5YmVJdGVyYWJsZSkgcmV0dXJuIG51bGw7XG4gIG1heWJlSXRlcmFibGUgPVxuICAgIChNQVlCRV9JVEVSQVRPUl9TWU1CT0wgJiYgbWF5YmVJdGVyYWJsZVtNQVlCRV9JVEVSQVRPUl9TWU1CT0xdKSB8fFxuICAgIG1heWJlSXRlcmFibGVbXCJAQGl0ZXJhdG9yXCJdO1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbWF5YmVJdGVyYWJsZSA/IG1heWJlSXRlcmFibGUgOiBudWxsO1xufVxudmFyIFJFQUNUX0NMSUVOVF9SRUZFUkVOQ0UgPSBTeW1ib2wuZm9yKFwicmVhY3QuY2xpZW50LnJlZmVyZW5jZVwiKTtcbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlKSB7XG4gIGlmIChudWxsID09IHR5cGUpIHJldHVybiBudWxsO1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdHlwZSlcbiAgICByZXR1cm4gdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRVxuICAgICAgPyBudWxsXG4gICAgICA6IHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8IG51bGw7XG4gIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgdHlwZSkgcmV0dXJuIHR5cGU7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgUkVBQ1RfRlJBR01FTlRfVFlQRTpcbiAgICAgIHJldHVybiBcIkZyYWdtZW50XCI7XG4gICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgIHJldHVybiBcIlBvcnRhbFwiO1xuICAgIGNhc2UgUkVBQ1RfUFJPRklMRVJfVFlQRTpcbiAgICAgIHJldHVybiBcIlByb2ZpbGVyXCI7XG4gICAgY2FzZSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFOlxuICAgICAgcmV0dXJuIFwiU3RyaWN0TW9kZVwiO1xuICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgIHJldHVybiBcIlN1c3BlbnNlXCI7XG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICByZXR1cm4gXCJTdXNwZW5zZUxpc3RcIjtcbiAgfVxuICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIHR5cGUpXG4gICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7XG4gICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgcmV0dXJuICh0eXBlLmRpc3BsYXlOYW1lIHx8IFwiQ29udGV4dFwiKSArIFwiLlByb3ZpZGVyXCI7XG4gICAgICBjYXNlIFJFQUNUX0NPTlNVTUVSX1RZUEU6XG4gICAgICAgIHJldHVybiAodHlwZS5fY29udGV4dC5kaXNwbGF5TmFtZSB8fCBcIkNvbnRleHRcIikgKyBcIi5Db25zdW1lclwiO1xuICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICB2YXIgaW5uZXJUeXBlID0gdHlwZS5yZW5kZXI7XG4gICAgICAgIHR5cGUgPSB0eXBlLmRpc3BsYXlOYW1lO1xuICAgICAgICB0eXBlIHx8XG4gICAgICAgICAgKCh0eXBlID0gaW5uZXJUeXBlLmRpc3BsYXlOYW1lIHx8IGlubmVyVHlwZS5uYW1lIHx8IFwiXCIpLFxuICAgICAgICAgICh0eXBlID0gXCJcIiAhPT0gdHlwZSA/IFwiRm9yd2FyZFJlZihcIiArIHR5cGUgKyBcIilcIiA6IFwiRm9yd2FyZFJlZlwiKSk7XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKGlubmVyVHlwZSA9IHR5cGUuZGlzcGxheU5hbWUgfHwgbnVsbCksXG4gICAgICAgICAgbnVsbCAhPT0gaW5uZXJUeXBlXG4gICAgICAgICAgICA/IGlubmVyVHlwZVxuICAgICAgICAgICAgOiBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUodHlwZS50eXBlKSB8fCBcIk1lbW9cIlxuICAgICAgICApO1xuICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgIGlubmVyVHlwZSA9IHR5cGUuX3BheWxvYWQ7XG4gICAgICAgIHR5cGUgPSB0eXBlLl9pbml0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUodHlwZShpbm5lclR5cGUpKTtcbiAgICAgICAgfSBjYXRjaCAoeCkge31cbiAgICB9XG4gIHJldHVybiBudWxsO1xufVxudmFyIFJlYWN0U2hhcmVkSW50ZXJuYWxzID1cbiAgICBSZWFjdC5fX0NMSUVOVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUsXG4gIGFzc2lnbiA9IE9iamVjdC5hc3NpZ24sXG4gIHByZWZpeCxcbiAgc3VmZml4O1xuZnVuY3Rpb24gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUobmFtZSkge1xuICBpZiAodm9pZCAwID09PSBwcmVmaXgpXG4gICAgdHJ5IHtcbiAgICAgIHRocm93IEVycm9yKCk7XG4gICAgfSBjYXRjaCAoeCkge1xuICAgICAgdmFyIG1hdGNoID0geC5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtcbiAgICAgIHByZWZpeCA9IChtYXRjaCAmJiBtYXRjaFsxXSkgfHwgXCJcIjtcbiAgICAgIHN1ZmZpeCA9XG4gICAgICAgIC0xIDwgeC5zdGFjay5pbmRleE9mKFwiXFxuICAgIGF0XCIpXG4gICAgICAgICAgPyBcIiAoPGFub255bW91cz4pXCJcbiAgICAgICAgICA6IC0xIDwgeC5zdGFjay5pbmRleE9mKFwiQFwiKVxuICAgICAgICAgICAgPyBcIkB1bmtub3duOjA6MFwiXG4gICAgICAgICAgICA6IFwiXCI7XG4gICAgfVxuICByZXR1cm4gXCJcXG5cIiArIHByZWZpeCArIG5hbWUgKyBzdWZmaXg7XG59XG52YXIgcmVlbnRyeSA9ICExO1xuZnVuY3Rpb24gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZShmbiwgY29uc3RydWN0KSB7XG4gIGlmICghZm4gfHwgcmVlbnRyeSkgcmV0dXJuIFwiXCI7XG4gIHJlZW50cnkgPSAhMDtcbiAgdmFyIHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtcbiAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSB2b2lkIDA7XG4gIHRyeSB7XG4gICAgdmFyIFJ1bkluUm9vdEZyYW1lID0ge1xuICAgICAgRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKGNvbnN0cnVjdCkge1xuICAgICAgICAgICAgdmFyIEZha2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZha2UucHJvdG90eXBlLCBcInByb3BzXCIsIHtcbiAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIFJlZmxlY3QgJiYgUmVmbGVjdC5jb25zdHJ1Y3QpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBSZWZsZWN0LmNvbnN0cnVjdChGYWtlLCBbXSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udHJvbCA9IHg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgUmVmbGVjdC5jb25zdHJ1Y3QoZm4sIFtdLCBGYWtlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgRmFrZS5jYWxsKCk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKHgkMCkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2wgPSB4JDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZm4uY2FsbChGYWtlLnByb3RvdHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKCk7XG4gICAgICAgICAgICB9IGNhdGNoICh4JDEpIHtcbiAgICAgICAgICAgICAgY29udHJvbCA9IHgkMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChGYWtlID0gZm4oKSkgJiZcbiAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgRmFrZS5jYXRjaCAmJlxuICAgICAgICAgICAgICBGYWtlLmNhdGNoKGZ1bmN0aW9uICgpIHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKHNhbXBsZSkge1xuICAgICAgICAgIGlmIChzYW1wbGUgJiYgY29udHJvbCAmJiBcInN0cmluZ1wiID09PSB0eXBlb2Ygc2FtcGxlLnN0YWNrKVxuICAgICAgICAgICAgcmV0dXJuIFtzYW1wbGUuc3RhY2ssIGNvbnRyb2wuc3RhY2tdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbnVsbCwgbnVsbF07XG4gICAgICB9XG4gICAgfTtcbiAgICBSdW5JblJvb3RGcmFtZS5EZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QuZGlzcGxheU5hbWUgPVxuICAgICAgXCJEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3RcIjtcbiAgICB2YXIgbmFtZVByb3BEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihcbiAgICAgIFJ1bkluUm9vdEZyYW1lLkRldGVybWluZUNvbXBvbmVudEZyYW1lUm9vdCxcbiAgICAgIFwibmFtZVwiXG4gICAgKTtcbiAgICBuYW1lUHJvcERlc2NyaXB0b3IgJiZcbiAgICAgIG5hbWVQcm9wRGVzY3JpcHRvci5jb25maWd1cmFibGUgJiZcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShcbiAgICAgICAgUnVuSW5Sb290RnJhbWUuRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290LFxuICAgICAgICBcIm5hbWVcIixcbiAgICAgICAgeyB2YWx1ZTogXCJEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3RcIiB9XG4gICAgICApO1xuICAgIHZhciBfUnVuSW5Sb290RnJhbWUkRGV0ZXIgPSBSdW5JblJvb3RGcmFtZS5EZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3QoKSxcbiAgICAgIHNhbXBsZVN0YWNrID0gX1J1bkluUm9vdEZyYW1lJERldGVyWzBdLFxuICAgICAgY29udHJvbFN0YWNrID0gX1J1bkluUm9vdEZyYW1lJERldGVyWzFdO1xuICAgIGlmIChzYW1wbGVTdGFjayAmJiBjb250cm9sU3RhY2spIHtcbiAgICAgIHZhciBzYW1wbGVMaW5lcyA9IHNhbXBsZVN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuICAgICAgICBjb250cm9sTGluZXMgPSBjb250cm9sU3RhY2suc3BsaXQoXCJcXG5cIik7XG4gICAgICBmb3IgKFxuICAgICAgICBuYW1lUHJvcERlc2NyaXB0b3IgPSBSdW5JblJvb3RGcmFtZSA9IDA7XG4gICAgICAgIFJ1bkluUm9vdEZyYW1lIDwgc2FtcGxlTGluZXMubGVuZ3RoICYmXG4gICAgICAgICFzYW1wbGVMaW5lc1tSdW5JblJvb3RGcmFtZV0uaW5jbHVkZXMoXCJEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3RcIik7XG5cbiAgICAgIClcbiAgICAgICAgUnVuSW5Sb290RnJhbWUrKztcbiAgICAgIGZvciAoXG4gICAgICAgIDtcbiAgICAgICAgbmFtZVByb3BEZXNjcmlwdG9yIDwgY29udHJvbExpbmVzLmxlbmd0aCAmJlxuICAgICAgICAhY29udHJvbExpbmVzW25hbWVQcm9wRGVzY3JpcHRvcl0uaW5jbHVkZXMoXG4gICAgICAgICAgXCJEZXRlcm1pbmVDb21wb25lbnRGcmFtZVJvb3RcIlxuICAgICAgICApO1xuXG4gICAgICApXG4gICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvcisrO1xuICAgICAgaWYgKFxuICAgICAgICBSdW5JblJvb3RGcmFtZSA9PT0gc2FtcGxlTGluZXMubGVuZ3RoIHx8XG4gICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvciA9PT0gY29udHJvbExpbmVzLmxlbmd0aFxuICAgICAgKVxuICAgICAgICBmb3IgKFxuICAgICAgICAgIFJ1bkluUm9vdEZyYW1lID0gc2FtcGxlTGluZXMubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvciA9IGNvbnRyb2xMaW5lcy5sZW5ndGggLSAxO1xuICAgICAgICAgIDEgPD0gUnVuSW5Sb290RnJhbWUgJiZcbiAgICAgICAgICAwIDw9IG5hbWVQcm9wRGVzY3JpcHRvciAmJlxuICAgICAgICAgIHNhbXBsZUxpbmVzW1J1bkluUm9vdEZyYW1lXSAhPT0gY29udHJvbExpbmVzW25hbWVQcm9wRGVzY3JpcHRvcl07XG5cbiAgICAgICAgKVxuICAgICAgICAgIG5hbWVQcm9wRGVzY3JpcHRvci0tO1xuICAgICAgZm9yIChcbiAgICAgICAgO1xuICAgICAgICAxIDw9IFJ1bkluUm9vdEZyYW1lICYmIDAgPD0gbmFtZVByb3BEZXNjcmlwdG9yO1xuICAgICAgICBSdW5JblJvb3RGcmFtZS0tLCBuYW1lUHJvcERlc2NyaXB0b3ItLVxuICAgICAgKVxuICAgICAgICBpZiAoc2FtcGxlTGluZXNbUnVuSW5Sb290RnJhbWVdICE9PSBjb250cm9sTGluZXNbbmFtZVByb3BEZXNjcmlwdG9yXSkge1xuICAgICAgICAgIGlmICgxICE9PSBSdW5JblJvb3RGcmFtZSB8fCAxICE9PSBuYW1lUHJvcERlc2NyaXB0b3IpIHtcbiAgICAgICAgICAgIGRvXG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoUnVuSW5Sb290RnJhbWUtLSxcbiAgICAgICAgICAgICAgICBuYW1lUHJvcERlc2NyaXB0b3ItLSxcbiAgICAgICAgICAgICAgICAwID4gbmFtZVByb3BEZXNjcmlwdG9yIHx8XG4gICAgICAgICAgICAgICAgICBzYW1wbGVMaW5lc1tSdW5JblJvb3RGcmFtZV0gIT09XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xMaW5lc1tuYW1lUHJvcERlc2NyaXB0b3JdKVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB2YXIgZnJhbWUgPVxuICAgICAgICAgICAgICAgICAgXCJcXG5cIiArXG4gICAgICAgICAgICAgICAgICBzYW1wbGVMaW5lc1tSdW5JblJvb3RGcmFtZV0ucmVwbGFjZShcIiBhdCBuZXcgXCIsIFwiIGF0IFwiKTtcbiAgICAgICAgICAgICAgICBmbi5kaXNwbGF5TmFtZSAmJlxuICAgICAgICAgICAgICAgICAgZnJhbWUuaW5jbHVkZXMoXCI8YW5vbnltb3VzPlwiKSAmJlxuICAgICAgICAgICAgICAgICAgKGZyYW1lID0gZnJhbWUucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsIGZuLmRpc3BsYXlOYW1lKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZyYW1lO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoMSA8PSBSdW5JblJvb3RGcmFtZSAmJiAwIDw9IG5hbWVQcm9wRGVzY3JpcHRvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIChyZWVudHJ5ID0gITEpLCAoRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSBwcmV2aW91c1ByZXBhcmVTdGFja1RyYWNlKTtcbiAgfVxuICByZXR1cm4gKHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UgPSBmbiA/IGZuLmRpc3BsYXlOYW1lIHx8IGZuLm5hbWUgOiBcIlwiKVxuICAgID8gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUocHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSlcbiAgICA6IFwiXCI7XG59XG5mdW5jdGlvbiBkZXNjcmliZUZpYmVyKGZpYmVyKSB7XG4gIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgY2FzZSAyNjpcbiAgICBjYXNlIDI3OlxuICAgIGNhc2UgNTpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShmaWJlci50eXBlKTtcbiAgICBjYXNlIDE2OlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKFwiTGF6eVwiKTtcbiAgICBjYXNlIDEzOlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKFwiU3VzcGVuc2VcIik7XG4gICAgY2FzZSAxOTpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShcIlN1c3BlbnNlTGlzdFwiKTtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxNTpcbiAgICAgIHJldHVybiAoZmliZXIgPSBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZpYmVyLnR5cGUsICExKSksIGZpYmVyO1xuICAgIGNhc2UgMTE6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoZmliZXIgPSBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZpYmVyLnR5cGUucmVuZGVyLCAhMSkpLCBmaWJlclxuICAgICAgKTtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gKGZpYmVyID0gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZShmaWJlci50eXBlLCAhMCkpLCBmaWJlcjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZCh3b3JrSW5Qcm9ncmVzcykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gXCJcIjtcbiAgICBkb1xuICAgICAgKGluZm8gKz0gZGVzY3JpYmVGaWJlcih3b3JrSW5Qcm9ncmVzcykpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5yZXR1cm4pO1xuICAgIHdoaWxlICh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgcmV0dXJuIGluZm87XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICByZXR1cm4gXCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIiArIHgubWVzc2FnZSArIFwiXFxuXCIgKyB4LnN0YWNrO1xuICB9XG59XG5mdW5jdGlvbiBnZXROZWFyZXN0TW91bnRlZEZpYmVyKGZpYmVyKSB7XG4gIHZhciBub2RlID0gZmliZXIsXG4gICAgbmVhcmVzdE1vdW50ZWQgPSBmaWJlcjtcbiAgaWYgKGZpYmVyLmFsdGVybmF0ZSkgZm9yICg7IG5vZGUucmV0dXJuOyApIG5vZGUgPSBub2RlLnJldHVybjtcbiAgZWxzZSB7XG4gICAgZmliZXIgPSBub2RlO1xuICAgIGRvXG4gICAgICAobm9kZSA9IGZpYmVyKSxcbiAgICAgICAgMCAhPT0gKG5vZGUuZmxhZ3MgJiA0MDk4KSAmJiAobmVhcmVzdE1vdW50ZWQgPSBub2RlLnJldHVybiksXG4gICAgICAgIChmaWJlciA9IG5vZGUucmV0dXJuKTtcbiAgICB3aGlsZSAoZmliZXIpO1xuICB9XG4gIHJldHVybiAzID09PSBub2RlLnRhZyA/IG5lYXJlc3RNb3VudGVkIDogbnVsbDtcbn1cbmZ1bmN0aW9uIGdldFN1c3BlbnNlSW5zdGFuY2VGcm9tRmliZXIoZmliZXIpIHtcbiAgaWYgKDEzID09PSBmaWJlci50YWcpIHtcbiAgICB2YXIgc3VzcGVuc2VTdGF0ZSA9IGZpYmVyLm1lbW9pemVkU3RhdGU7XG4gICAgbnVsbCA9PT0gc3VzcGVuc2VTdGF0ZSAmJlxuICAgICAgKChmaWJlciA9IGZpYmVyLmFsdGVybmF0ZSksXG4gICAgICBudWxsICE9PSBmaWJlciAmJiAoc3VzcGVuc2VTdGF0ZSA9IGZpYmVyLm1lbW9pemVkU3RhdGUpKTtcbiAgICBpZiAobnVsbCAhPT0gc3VzcGVuc2VTdGF0ZSkgcmV0dXJuIHN1c3BlbnNlU3RhdGUuZGVoeWRyYXRlZDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGFzc2VydElzTW91bnRlZChmaWJlcikge1xuICBpZiAoZ2V0TmVhcmVzdE1vdW50ZWRGaWJlcihmaWJlcikgIT09IGZpYmVyKVxuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg4KSk7XG59XG5mdW5jdGlvbiBmaW5kQ3VycmVudEZpYmVyVXNpbmdTbG93UGF0aChmaWJlcikge1xuICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICBpZiAoIWFsdGVybmF0ZSkge1xuICAgIGFsdGVybmF0ZSA9IGdldE5lYXJlc3RNb3VudGVkRmliZXIoZmliZXIpO1xuICAgIGlmIChudWxsID09PSBhbHRlcm5hdGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg4KSk7XG4gICAgcmV0dXJuIGFsdGVybmF0ZSAhPT0gZmliZXIgPyBudWxsIDogZmliZXI7XG4gIH1cbiAgZm9yICh2YXIgYSA9IGZpYmVyLCBiID0gYWx0ZXJuYXRlOyA7ICkge1xuICAgIHZhciBwYXJlbnRBID0gYS5yZXR1cm47XG4gICAgaWYgKG51bGwgPT09IHBhcmVudEEpIGJyZWFrO1xuICAgIHZhciBwYXJlbnRCID0gcGFyZW50QS5hbHRlcm5hdGU7XG4gICAgaWYgKG51bGwgPT09IHBhcmVudEIpIHtcbiAgICAgIGIgPSBwYXJlbnRBLnJldHVybjtcbiAgICAgIGlmIChudWxsICE9PSBiKSB7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAocGFyZW50QS5jaGlsZCA9PT0gcGFyZW50Qi5jaGlsZCkge1xuICAgICAgZm9yIChwYXJlbnRCID0gcGFyZW50QS5jaGlsZDsgcGFyZW50QjsgKSB7XG4gICAgICAgIGlmIChwYXJlbnRCID09PSBhKSByZXR1cm4gYXNzZXJ0SXNNb3VudGVkKHBhcmVudEEpLCBmaWJlcjtcbiAgICAgICAgaWYgKHBhcmVudEIgPT09IGIpIHJldHVybiBhc3NlcnRJc01vdW50ZWQocGFyZW50QSksIGFsdGVybmF0ZTtcbiAgICAgICAgcGFyZW50QiA9IHBhcmVudEIuc2libGluZztcbiAgICAgIH1cbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg4KSk7XG4gICAgfVxuICAgIGlmIChhLnJldHVybiAhPT0gYi5yZXR1cm4pIChhID0gcGFyZW50QSksIChiID0gcGFyZW50Qik7XG4gICAgZWxzZSB7XG4gICAgICBmb3IgKHZhciBkaWRGaW5kQ2hpbGQgPSAhMSwgY2hpbGQkMiA9IHBhcmVudEEuY2hpbGQ7IGNoaWxkJDI7ICkge1xuICAgICAgICBpZiAoY2hpbGQkMiA9PT0gYSkge1xuICAgICAgICAgIGRpZEZpbmRDaGlsZCA9ICEwO1xuICAgICAgICAgIGEgPSBwYXJlbnRBO1xuICAgICAgICAgIGIgPSBwYXJlbnRCO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZCQyID09PSBiKSB7XG4gICAgICAgICAgZGlkRmluZENoaWxkID0gITA7XG4gICAgICAgICAgYiA9IHBhcmVudEE7XG4gICAgICAgICAgYSA9IHBhcmVudEI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQkMiA9IGNoaWxkJDIuc2libGluZztcbiAgICAgIH1cbiAgICAgIGlmICghZGlkRmluZENoaWxkKSB7XG4gICAgICAgIGZvciAoY2hpbGQkMiA9IHBhcmVudEIuY2hpbGQ7IGNoaWxkJDI7ICkge1xuICAgICAgICAgIGlmIChjaGlsZCQyID09PSBhKSB7XG4gICAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSAhMDtcbiAgICAgICAgICAgIGEgPSBwYXJlbnRCO1xuICAgICAgICAgICAgYiA9IHBhcmVudEE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNoaWxkJDIgPT09IGIpIHtcbiAgICAgICAgICAgIGRpZEZpbmRDaGlsZCA9ICEwO1xuICAgICAgICAgICAgYiA9IHBhcmVudEI7XG4gICAgICAgICAgICBhID0gcGFyZW50QTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaGlsZCQyID0gY2hpbGQkMi5zaWJsaW5nO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGlkRmluZENoaWxkKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE4OSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYS5hbHRlcm5hdGUgIT09IGIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTkwKSk7XG4gIH1cbiAgaWYgKDMgIT09IGEudGFnKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE4OCkpO1xuICByZXR1cm4gYS5zdGF0ZU5vZGUuY3VycmVudCA9PT0gYSA/IGZpYmVyIDogYWx0ZXJuYXRlO1xufVxuZnVuY3Rpb24gZmluZEN1cnJlbnRIb3N0RmliZXJJbXBsKG5vZGUpIHtcbiAgdmFyIHRhZyA9IG5vZGUudGFnO1xuICBpZiAoNSA9PT0gdGFnIHx8IDI2ID09PSB0YWcgfHwgMjcgPT09IHRhZyB8fCA2ID09PSB0YWcpIHJldHVybiBub2RlO1xuICBmb3IgKG5vZGUgPSBub2RlLmNoaWxkOyBudWxsICE9PSBub2RlOyApIHtcbiAgICB0YWcgPSBmaW5kQ3VycmVudEhvc3RGaWJlckltcGwobm9kZSk7XG4gICAgaWYgKG51bGwgIT09IHRhZykgcmV0dXJuIHRhZztcbiAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxudmFyIGlzQXJyYXlJbXBsID0gQXJyYXkuaXNBcnJheSxcbiAgUmVhY3RET01TaGFyZWRJbnRlcm5hbHMgPVxuICAgIFJlYWN0RE9NLl9fRE9NX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1dBUk5fVVNFUlNfVEhFWV9DQU5OT1RfVVBHUkFERSxcbiAgc2hhcmVkTm90UGVuZGluZ09iamVjdCA9IHtcbiAgICBwZW5kaW5nOiAhMSxcbiAgICBkYXRhOiBudWxsLFxuICAgIG1ldGhvZDogbnVsbCxcbiAgICBhY3Rpb246IG51bGxcbiAgfSxcbiAgdmFsdWVTdGFjayA9IFtdLFxuICBpbmRleCA9IC0xO1xuZnVuY3Rpb24gY3JlYXRlQ3Vyc29yKGRlZmF1bHRWYWx1ZSkge1xuICByZXR1cm4geyBjdXJyZW50OiBkZWZhdWx0VmFsdWUgfTtcbn1cbmZ1bmN0aW9uIHBvcChjdXJzb3IpIHtcbiAgMCA+IGluZGV4IHx8XG4gICAgKChjdXJzb3IuY3VycmVudCA9IHZhbHVlU3RhY2tbaW5kZXhdKSwgKHZhbHVlU3RhY2tbaW5kZXhdID0gbnVsbCksIGluZGV4LS0pO1xufVxuZnVuY3Rpb24gcHVzaChjdXJzb3IsIHZhbHVlKSB7XG4gIGluZGV4Kys7XG4gIHZhbHVlU3RhY2tbaW5kZXhdID0gY3Vyc29yLmN1cnJlbnQ7XG4gIGN1cnNvci5jdXJyZW50ID0gdmFsdWU7XG59XG52YXIgY29udGV4dFN0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKG51bGwpLFxuICBjb250ZXh0RmliZXJTdGFja0N1cnNvciA9IGNyZWF0ZUN1cnNvcihudWxsKSxcbiAgcm9vdEluc3RhbmNlU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCksXG4gIGhvc3RUcmFuc2l0aW9uUHJvdmlkZXJDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCk7XG5mdW5jdGlvbiBwdXNoSG9zdENvbnRhaW5lcihmaWJlciwgbmV4dFJvb3RJbnN0YW5jZSkge1xuICBwdXNoKHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLCBuZXh0Um9vdEluc3RhbmNlKTtcbiAgcHVzaChjb250ZXh0RmliZXJTdGFja0N1cnNvciwgZmliZXIpO1xuICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciwgbnVsbCk7XG4gIGZpYmVyID0gbmV4dFJvb3RJbnN0YW5jZS5ub2RlVHlwZTtcbiAgc3dpdGNoIChmaWJlcikge1xuICAgIGNhc2UgOTpcbiAgICBjYXNlIDExOlxuICAgICAgbmV4dFJvb3RJbnN0YW5jZSA9IChuZXh0Um9vdEluc3RhbmNlID0gbmV4dFJvb3RJbnN0YW5jZS5kb2N1bWVudEVsZW1lbnQpXG4gICAgICAgID8gKG5leHRSb290SW5zdGFuY2UgPSBuZXh0Um9vdEluc3RhbmNlLm5hbWVzcGFjZVVSSSlcbiAgICAgICAgICA/IGdldE93bkhvc3RDb250ZXh0KG5leHRSb290SW5zdGFuY2UpXG4gICAgICAgICAgOiAwXG4gICAgICAgIDogMDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoXG4gICAgICAgICgoZmliZXIgPSA4ID09PSBmaWJlciA/IG5leHRSb290SW5zdGFuY2UucGFyZW50Tm9kZSA6IG5leHRSb290SW5zdGFuY2UpLFxuICAgICAgICAobmV4dFJvb3RJbnN0YW5jZSA9IGZpYmVyLnRhZ05hbWUpLFxuICAgICAgICAoZmliZXIgPSBmaWJlci5uYW1lc3BhY2VVUkkpKVxuICAgICAgKVxuICAgICAgICAoZmliZXIgPSBnZXRPd25Ib3N0Q29udGV4dChmaWJlcikpLFxuICAgICAgICAgIChuZXh0Um9vdEluc3RhbmNlID0gZ2V0Q2hpbGRIb3N0Q29udGV4dFByb2QoZmliZXIsIG5leHRSb290SW5zdGFuY2UpKTtcbiAgICAgIGVsc2VcbiAgICAgICAgc3dpdGNoIChuZXh0Um9vdEluc3RhbmNlKSB7XG4gICAgICAgICAgY2FzZSBcInN2Z1wiOlxuICAgICAgICAgICAgbmV4dFJvb3RJbnN0YW5jZSA9IDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwibWF0aFwiOlxuICAgICAgICAgICAgbmV4dFJvb3RJbnN0YW5jZSA9IDI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbmV4dFJvb3RJbnN0YW5jZSA9IDA7XG4gICAgICAgIH1cbiAgfVxuICBwb3AoY29udGV4dFN0YWNrQ3Vyc29yKTtcbiAgcHVzaChjb250ZXh0U3RhY2tDdXJzb3IsIG5leHRSb290SW5zdGFuY2UpO1xufVxuZnVuY3Rpb24gcG9wSG9zdENvbnRhaW5lcigpIHtcbiAgcG9wKGNvbnRleHRTdGFja0N1cnNvcik7XG4gIHBvcChjb250ZXh0RmliZXJTdGFja0N1cnNvcik7XG4gIHBvcChyb290SW5zdGFuY2VTdGFja0N1cnNvcik7XG59XG5mdW5jdGlvbiBwdXNoSG9zdENvbnRleHQoZmliZXIpIHtcbiAgbnVsbCAhPT0gZmliZXIubWVtb2l6ZWRTdGF0ZSAmJiBwdXNoKGhvc3RUcmFuc2l0aW9uUHJvdmlkZXJDdXJzb3IsIGZpYmVyKTtcbiAgdmFyIGNvbnRleHQgPSBjb250ZXh0U3RhY2tDdXJzb3IuY3VycmVudDtcbiAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IGdldENoaWxkSG9zdENvbnRleHRQcm9kKGNvbnRleHQsIGZpYmVyLnR5cGUpO1xuICBjb250ZXh0ICE9PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiZcbiAgICAocHVzaChjb250ZXh0RmliZXJTdGFja0N1cnNvciwgZmliZXIpLFxuICAgIHB1c2goY29udGV4dFN0YWNrQ3Vyc29yLCBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpKTtcbn1cbmZ1bmN0aW9uIHBvcEhvc3RDb250ZXh0KGZpYmVyKSB7XG4gIGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLmN1cnJlbnQgPT09IGZpYmVyICYmXG4gICAgKHBvcChjb250ZXh0U3RhY2tDdXJzb3IpLCBwb3AoY29udGV4dEZpYmVyU3RhY2tDdXJzb3IpKTtcbiAgaG9zdFRyYW5zaXRpb25Qcm92aWRlckN1cnNvci5jdXJyZW50ID09PSBmaWJlciAmJlxuICAgIChwb3AoaG9zdFRyYW5zaXRpb25Qcm92aWRlckN1cnNvciksXG4gICAgKEhvc3RUcmFuc2l0aW9uQ29udGV4dC5fY3VycmVudFZhbHVlID0gc2hhcmVkTm90UGVuZGluZ09iamVjdCkpO1xufVxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcbiAgc2NoZWR1bGVDYWxsYmFjayQzID0gU2NoZWR1bGVyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssXG4gIGNhbmNlbENhbGxiYWNrJDEgPSBTY2hlZHVsZXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssXG4gIHNob3VsZFlpZWxkID0gU2NoZWR1bGVyLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFxuICByZXF1ZXN0UGFpbnQgPSBTY2hlZHVsZXIudW5zdGFibGVfcmVxdWVzdFBhaW50LFxuICBub3cgPSBTY2hlZHVsZXIudW5zdGFibGVfbm93LFxuICBnZXRDdXJyZW50UHJpb3JpdHlMZXZlbCA9IFNjaGVkdWxlci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxcbiAgSW1tZWRpYXRlUHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksXG4gIFVzZXJCbG9ja2luZ1ByaW9yaXR5ID0gU2NoZWR1bGVyLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFxuICBOb3JtYWxQcmlvcml0eSQxID0gU2NoZWR1bGVyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFxuICBMb3dQcmlvcml0eSA9IFNjaGVkdWxlci51bnN0YWJsZV9Mb3dQcmlvcml0eSxcbiAgSWRsZVByaW9yaXR5ID0gU2NoZWR1bGVyLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxcbiAgbG9nJDEgPSBTY2hlZHVsZXIubG9nLFxuICB1bnN0YWJsZV9zZXREaXNhYmxlWWllbGRWYWx1ZSA9IFNjaGVkdWxlci51bnN0YWJsZV9zZXREaXNhYmxlWWllbGRWYWx1ZSxcbiAgcmVuZGVyZXJJRCA9IG51bGwsXG4gIGluamVjdGVkSG9vayA9IG51bGw7XG5mdW5jdGlvbiBvbkNvbW1pdFJvb3Qocm9vdCkge1xuICBpZiAoaW5qZWN0ZWRIb29rICYmIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluamVjdGVkSG9vay5vbkNvbW1pdEZpYmVyUm9vdClcbiAgICB0cnkge1xuICAgICAgaW5qZWN0ZWRIb29rLm9uQ29tbWl0RmliZXJSb290KFxuICAgICAgICByZW5kZXJlcklELFxuICAgICAgICByb290LFxuICAgICAgICB2b2lkIDAsXG4gICAgICAgIDEyOCA9PT0gKHJvb3QuY3VycmVudC5mbGFncyAmIDEyOClcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxufVxuZnVuY3Rpb24gc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMobmV3SXNTdHJpY3RNb2RlKSB7XG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGxvZyQxICYmIHVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlKG5ld0lzU3RyaWN0TW9kZSk7XG4gIGlmIChpbmplY3RlZEhvb2sgJiYgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5qZWN0ZWRIb29rLnNldFN0cmljdE1vZGUpXG4gICAgdHJ5IHtcbiAgICAgIGluamVjdGVkSG9vay5zZXRTdHJpY3RNb2RlKHJlbmRlcmVySUQsIG5ld0lzU3RyaWN0TW9kZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7fVxufVxudmFyIGNsejMyID0gTWF0aC5jbHozMiA/IE1hdGguY2x6MzIgOiBjbHozMkZhbGxiYWNrLFxuICBsb2cgPSBNYXRoLmxvZyxcbiAgTE4yID0gTWF0aC5MTjI7XG5mdW5jdGlvbiBjbHozMkZhbGxiYWNrKHgpIHtcbiAgeCA+Pj49IDA7XG4gIHJldHVybiAwID09PSB4ID8gMzIgOiAoMzEgLSAoKGxvZyh4KSAvIExOMikgfCAwKSkgfCAwO1xufVxudmFyIG5leHRUcmFuc2l0aW9uTGFuZSA9IDEyOCxcbiAgbmV4dFJldHJ5TGFuZSA9IDQxOTQzMDQ7XG5mdW5jdGlvbiBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhsYW5lcykge1xuICB2YXIgcGVuZGluZ1N5bmNMYW5lcyA9IGxhbmVzICYgNDI7XG4gIGlmICgwICE9PSBwZW5kaW5nU3luY0xhbmVzKSByZXR1cm4gcGVuZGluZ1N5bmNMYW5lcztcbiAgc3dpdGNoIChsYW5lcyAmIC1sYW5lcykge1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiAxO1xuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiAyO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiA0O1xuICAgIGNhc2UgODpcbiAgICAgIHJldHVybiA4O1xuICAgIGNhc2UgMTY6XG4gICAgICByZXR1cm4gMTY7XG4gICAgY2FzZSAzMjpcbiAgICAgIHJldHVybiAzMjtcbiAgICBjYXNlIDY0OlxuICAgICAgcmV0dXJuIDY0O1xuICAgIGNhc2UgMTI4OlxuICAgIGNhc2UgMjU2OlxuICAgIGNhc2UgNTEyOlxuICAgIGNhc2UgMTAyNDpcbiAgICBjYXNlIDIwNDg6XG4gICAgY2FzZSA0MDk2OlxuICAgIGNhc2UgODE5MjpcbiAgICBjYXNlIDE2Mzg0OlxuICAgIGNhc2UgMzI3Njg6XG4gICAgY2FzZSA2NTUzNjpcbiAgICBjYXNlIDEzMTA3MjpcbiAgICBjYXNlIDI2MjE0NDpcbiAgICBjYXNlIDUyNDI4ODpcbiAgICBjYXNlIDEwNDg1NzY6XG4gICAgY2FzZSAyMDk3MTUyOlxuICAgICAgcmV0dXJuIGxhbmVzICYgNDE5NDE3NjtcbiAgICBjYXNlIDQxOTQzMDQ6XG4gICAgY2FzZSA4Mzg4NjA4OlxuICAgIGNhc2UgMTY3NzcyMTY6XG4gICAgY2FzZSAzMzU1NDQzMjpcbiAgICAgIHJldHVybiBsYW5lcyAmIDYyOTE0NTYwO1xuICAgIGNhc2UgNjcxMDg4NjQ6XG4gICAgICByZXR1cm4gNjcxMDg4NjQ7XG4gICAgY2FzZSAxMzQyMTc3Mjg6XG4gICAgICByZXR1cm4gMTM0MjE3NzI4O1xuICAgIGNhc2UgMjY4NDM1NDU2OlxuICAgICAgcmV0dXJuIDI2ODQzNTQ1NjtcbiAgICBjYXNlIDUzNjg3MDkxMjpcbiAgICAgIHJldHVybiA1MzY4NzA5MTI7XG4gICAgY2FzZSAxMDczNzQxODI0OlxuICAgICAgcmV0dXJuIDA7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBsYW5lcztcbiAgfVxufVxuZnVuY3Rpb24gZ2V0TmV4dExhbmVzKHJvb3QsIHdpcExhbmVzKSB7XG4gIHZhciBwZW5kaW5nTGFuZXMgPSByb290LnBlbmRpbmdMYW5lcztcbiAgaWYgKDAgPT09IHBlbmRpbmdMYW5lcykgcmV0dXJuIDA7XG4gIHZhciBuZXh0TGFuZXMgPSAwLFxuICAgIHN1c3BlbmRlZExhbmVzID0gcm9vdC5zdXNwZW5kZWRMYW5lcyxcbiAgICBwaW5nZWRMYW5lcyA9IHJvb3QucGluZ2VkTGFuZXMsXG4gICAgd2FybUxhbmVzID0gcm9vdC53YXJtTGFuZXM7XG4gIHJvb3QgPSAwICE9PSByb290LmZpbmlzaGVkTGFuZXM7XG4gIHZhciBub25JZGxlUGVuZGluZ0xhbmVzID0gcGVuZGluZ0xhbmVzICYgMTM0MjE3NzI3O1xuICAwICE9PSBub25JZGxlUGVuZGluZ0xhbmVzXG4gICAgPyAoKHBlbmRpbmdMYW5lcyA9IG5vbklkbGVQZW5kaW5nTGFuZXMgJiB+c3VzcGVuZGVkTGFuZXMpLFxuICAgICAgMCAhPT0gcGVuZGluZ0xhbmVzXG4gICAgICAgID8gKG5leHRMYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKHBlbmRpbmdMYW5lcykpXG4gICAgICAgIDogKChwaW5nZWRMYW5lcyAmPSBub25JZGxlUGVuZGluZ0xhbmVzKSxcbiAgICAgICAgICAwICE9PSBwaW5nZWRMYW5lc1xuICAgICAgICAgICAgPyAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMocGluZ2VkTGFuZXMpKVxuICAgICAgICAgICAgOiByb290IHx8XG4gICAgICAgICAgICAgICgod2FybUxhbmVzID0gbm9uSWRsZVBlbmRpbmdMYW5lcyAmIH53YXJtTGFuZXMpLFxuICAgICAgICAgICAgICAwICE9PSB3YXJtTGFuZXMgJiZcbiAgICAgICAgICAgICAgICAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMod2FybUxhbmVzKSkpKSlcbiAgICA6ICgobm9uSWRsZVBlbmRpbmdMYW5lcyA9IHBlbmRpbmdMYW5lcyAmIH5zdXNwZW5kZWRMYW5lcyksXG4gICAgICAwICE9PSBub25JZGxlUGVuZGluZ0xhbmVzXG4gICAgICAgID8gKG5leHRMYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKG5vbklkbGVQZW5kaW5nTGFuZXMpKVxuICAgICAgICA6IDAgIT09IHBpbmdlZExhbmVzXG4gICAgICAgICAgPyAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMocGluZ2VkTGFuZXMpKVxuICAgICAgICAgIDogcm9vdCB8fFxuICAgICAgICAgICAgKCh3YXJtTGFuZXMgPSBwZW5kaW5nTGFuZXMgJiB+d2FybUxhbmVzKSxcbiAgICAgICAgICAgIDAgIT09IHdhcm1MYW5lcyAmJlxuICAgICAgICAgICAgICAobmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMod2FybUxhbmVzKSkpKTtcbiAgcmV0dXJuIDAgPT09IG5leHRMYW5lc1xuICAgID8gMFxuICAgIDogMCAhPT0gd2lwTGFuZXMgJiZcbiAgICAgICAgd2lwTGFuZXMgIT09IG5leHRMYW5lcyAmJlxuICAgICAgICAwID09PSAod2lwTGFuZXMgJiBzdXNwZW5kZWRMYW5lcykgJiZcbiAgICAgICAgKChzdXNwZW5kZWRMYW5lcyA9IG5leHRMYW5lcyAmIC1uZXh0TGFuZXMpLFxuICAgICAgICAod2FybUxhbmVzID0gd2lwTGFuZXMgJiAtd2lwTGFuZXMpLFxuICAgICAgICBzdXNwZW5kZWRMYW5lcyA+PSB3YXJtTGFuZXMgfHxcbiAgICAgICAgICAoMzIgPT09IHN1c3BlbmRlZExhbmVzICYmIDAgIT09ICh3YXJtTGFuZXMgJiA0MTk0MTc2KSkpXG4gICAgICA/IHdpcExhbmVzXG4gICAgICA6IG5leHRMYW5lcztcbn1cbmZ1bmN0aW9uIGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcocm9vdCwgcmVuZGVyTGFuZXMpIHtcbiAgcmV0dXJuIChcbiAgICAwID09PVxuICAgIChyb290LnBlbmRpbmdMYW5lcyAmXG4gICAgICB+KHJvb3Quc3VzcGVuZGVkTGFuZXMgJiB+cm9vdC5waW5nZWRMYW5lcykgJlxuICAgICAgcmVuZGVyTGFuZXMpXG4gICk7XG59XG5mdW5jdGlvbiBjb21wdXRlRXhwaXJhdGlvblRpbWUobGFuZSwgY3VycmVudFRpbWUpIHtcbiAgc3dpdGNoIChsYW5lKSB7XG4gICAgY2FzZSAxOlxuICAgIGNhc2UgMjpcbiAgICBjYXNlIDQ6XG4gICAgY2FzZSA4OlxuICAgICAgcmV0dXJuIGN1cnJlbnRUaW1lICsgMjUwO1xuICAgIGNhc2UgMTY6XG4gICAgY2FzZSAzMjpcbiAgICBjYXNlIDY0OlxuICAgIGNhc2UgMTI4OlxuICAgIGNhc2UgMjU2OlxuICAgIGNhc2UgNTEyOlxuICAgIGNhc2UgMTAyNDpcbiAgICBjYXNlIDIwNDg6XG4gICAgY2FzZSA0MDk2OlxuICAgIGNhc2UgODE5MjpcbiAgICBjYXNlIDE2Mzg0OlxuICAgIGNhc2UgMzI3Njg6XG4gICAgY2FzZSA2NTUzNjpcbiAgICBjYXNlIDEzMTA3MjpcbiAgICBjYXNlIDI2MjE0NDpcbiAgICBjYXNlIDUyNDI4ODpcbiAgICBjYXNlIDEwNDg1NzY6XG4gICAgY2FzZSAyMDk3MTUyOlxuICAgICAgcmV0dXJuIGN1cnJlbnRUaW1lICsgNWUzO1xuICAgIGNhc2UgNDE5NDMwNDpcbiAgICBjYXNlIDgzODg2MDg6XG4gICAgY2FzZSAxNjc3NzIxNjpcbiAgICBjYXNlIDMzNTU0NDMyOlxuICAgICAgcmV0dXJuIC0xO1xuICAgIGNhc2UgNjcxMDg4NjQ6XG4gICAgY2FzZSAxMzQyMTc3Mjg6XG4gICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgY2FzZSA1MzY4NzA5MTI6XG4gICAgY2FzZSAxMDczNzQxODI0OlxuICAgICAgcmV0dXJuIC0xO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gLTE7XG4gIH1cbn1cbmZ1bmN0aW9uIGNsYWltTmV4dFRyYW5zaXRpb25MYW5lKCkge1xuICB2YXIgbGFuZSA9IG5leHRUcmFuc2l0aW9uTGFuZTtcbiAgbmV4dFRyYW5zaXRpb25MYW5lIDw8PSAxO1xuICAwID09PSAobmV4dFRyYW5zaXRpb25MYW5lICYgNDE5NDE3NikgJiYgKG5leHRUcmFuc2l0aW9uTGFuZSA9IDEyOCk7XG4gIHJldHVybiBsYW5lO1xufVxuZnVuY3Rpb24gY2xhaW1OZXh0UmV0cnlMYW5lKCkge1xuICB2YXIgbGFuZSA9IG5leHRSZXRyeUxhbmU7XG4gIG5leHRSZXRyeUxhbmUgPDw9IDE7XG4gIDAgPT09IChuZXh0UmV0cnlMYW5lICYgNjI5MTQ1NjApICYmIChuZXh0UmV0cnlMYW5lID0gNDE5NDMwNCk7XG4gIHJldHVybiBsYW5lO1xufVxuZnVuY3Rpb24gY3JlYXRlTGFuZU1hcChpbml0aWFsKSB7XG4gIGZvciAodmFyIGxhbmVNYXAgPSBbXSwgaSA9IDA7IDMxID4gaTsgaSsrKSBsYW5lTWFwLnB1c2goaW5pdGlhbCk7XG4gIHJldHVybiBsYW5lTWFwO1xufVxuZnVuY3Rpb24gbWFya1Jvb3RVcGRhdGVkJDEocm9vdCwgdXBkYXRlTGFuZSkge1xuICByb290LnBlbmRpbmdMYW5lcyB8PSB1cGRhdGVMYW5lO1xuICAyNjg0MzU0NTYgIT09IHVwZGF0ZUxhbmUgJiZcbiAgICAoKHJvb3Quc3VzcGVuZGVkTGFuZXMgPSAwKSwgKHJvb3QucGluZ2VkTGFuZXMgPSAwKSwgKHJvb3Qud2FybUxhbmVzID0gMCkpO1xufVxuZnVuY3Rpb24gbWFya1Jvb3RGaW5pc2hlZChcbiAgcm9vdCxcbiAgZmluaXNoZWRMYW5lcyxcbiAgcmVtYWluaW5nTGFuZXMsXG4gIHNwYXduZWRMYW5lLFxuICB1cGRhdGVkTGFuZXMsXG4gIHN1c3BlbmRlZFJldHJ5TGFuZXNcbikge1xuICB2YXIgcHJldmlvdXNseVBlbmRpbmdMYW5lcyA9IHJvb3QucGVuZGluZ0xhbmVzO1xuICByb290LnBlbmRpbmdMYW5lcyA9IHJlbWFpbmluZ0xhbmVzO1xuICByb290LnN1c3BlbmRlZExhbmVzID0gMDtcbiAgcm9vdC5waW5nZWRMYW5lcyA9IDA7XG4gIHJvb3Qud2FybUxhbmVzID0gMDtcbiAgcm9vdC5leHBpcmVkTGFuZXMgJj0gcmVtYWluaW5nTGFuZXM7XG4gIHJvb3QuZW50YW5nbGVkTGFuZXMgJj0gcmVtYWluaW5nTGFuZXM7XG4gIHJvb3QuZXJyb3JSZWNvdmVyeURpc2FibGVkTGFuZXMgJj0gcmVtYWluaW5nTGFuZXM7XG4gIHJvb3Quc2hlbGxTdXNwZW5kQ291bnRlciA9IDA7XG4gIHZhciBlbnRhbmdsZW1lbnRzID0gcm9vdC5lbnRhbmdsZW1lbnRzLFxuICAgIGV4cGlyYXRpb25UaW1lcyA9IHJvb3QuZXhwaXJhdGlvblRpbWVzLFxuICAgIGhpZGRlblVwZGF0ZXMgPSByb290LmhpZGRlblVwZGF0ZXM7XG4gIGZvciAoXG4gICAgcmVtYWluaW5nTGFuZXMgPSBwcmV2aW91c2x5UGVuZGluZ0xhbmVzICYgfnJlbWFpbmluZ0xhbmVzO1xuICAgIDAgPCByZW1haW5pbmdMYW5lcztcblxuICApIHtcbiAgICB2YXIgaW5kZXgkNyA9IDMxIC0gY2x6MzIocmVtYWluaW5nTGFuZXMpLFxuICAgICAgbGFuZSA9IDEgPDwgaW5kZXgkNztcbiAgICBlbnRhbmdsZW1lbnRzW2luZGV4JDddID0gMDtcbiAgICBleHBpcmF0aW9uVGltZXNbaW5kZXgkN10gPSAtMTtcbiAgICB2YXIgaGlkZGVuVXBkYXRlc0ZvckxhbmUgPSBoaWRkZW5VcGRhdGVzW2luZGV4JDddO1xuICAgIGlmIChudWxsICE9PSBoaWRkZW5VcGRhdGVzRm9yTGFuZSlcbiAgICAgIGZvciAoXG4gICAgICAgIGhpZGRlblVwZGF0ZXNbaW5kZXgkN10gPSBudWxsLCBpbmRleCQ3ID0gMDtcbiAgICAgICAgaW5kZXgkNyA8IGhpZGRlblVwZGF0ZXNGb3JMYW5lLmxlbmd0aDtcbiAgICAgICAgaW5kZXgkNysrXG4gICAgICApIHtcbiAgICAgICAgdmFyIHVwZGF0ZSA9IGhpZGRlblVwZGF0ZXNGb3JMYW5lW2luZGV4JDddO1xuICAgICAgICBudWxsICE9PSB1cGRhdGUgJiYgKHVwZGF0ZS5sYW5lICY9IC01MzY4NzA5MTMpO1xuICAgICAgfVxuICAgIHJlbWFpbmluZ0xhbmVzICY9IH5sYW5lO1xuICB9XG4gIDAgIT09IHNwYXduZWRMYW5lICYmIG1hcmtTcGF3bmVkRGVmZXJyZWRMYW5lKHJvb3QsIHNwYXduZWRMYW5lLCAwKTtcbiAgMCAhPT0gc3VzcGVuZGVkUmV0cnlMYW5lcyAmJlxuICAgIDAgPT09IHVwZGF0ZWRMYW5lcyAmJlxuICAgIDAgIT09IHJvb3QudGFnICYmXG4gICAgKHJvb3Quc3VzcGVuZGVkTGFuZXMgfD1cbiAgICAgIHN1c3BlbmRlZFJldHJ5TGFuZXMgJiB+KHByZXZpb3VzbHlQZW5kaW5nTGFuZXMgJiB+ZmluaXNoZWRMYW5lcykpO1xufVxuZnVuY3Rpb24gbWFya1NwYXduZWREZWZlcnJlZExhbmUocm9vdCwgc3Bhd25lZExhbmUsIGVudGFuZ2xlZExhbmVzKSB7XG4gIHJvb3QucGVuZGluZ0xhbmVzIHw9IHNwYXduZWRMYW5lO1xuICByb290LnN1c3BlbmRlZExhbmVzICY9IH5zcGF3bmVkTGFuZTtcbiAgdmFyIHNwYXduZWRMYW5lSW5kZXggPSAzMSAtIGNsejMyKHNwYXduZWRMYW5lKTtcbiAgcm9vdC5lbnRhbmdsZWRMYW5lcyB8PSBzcGF3bmVkTGFuZTtcbiAgcm9vdC5lbnRhbmdsZW1lbnRzW3NwYXduZWRMYW5lSW5kZXhdID1cbiAgICByb290LmVudGFuZ2xlbWVudHNbc3Bhd25lZExhbmVJbmRleF0gfFxuICAgIDEwNzM3NDE4MjQgfFxuICAgIChlbnRhbmdsZWRMYW5lcyAmIDQxOTQyMTgpO1xufVxuZnVuY3Rpb24gbWFya1Jvb3RFbnRhbmdsZWQocm9vdCwgZW50YW5nbGVkTGFuZXMpIHtcbiAgdmFyIHJvb3RFbnRhbmdsZWRMYW5lcyA9IChyb290LmVudGFuZ2xlZExhbmVzIHw9IGVudGFuZ2xlZExhbmVzKTtcbiAgZm9yIChyb290ID0gcm9vdC5lbnRhbmdsZW1lbnRzOyByb290RW50YW5nbGVkTGFuZXM7ICkge1xuICAgIHZhciBpbmRleCQ4ID0gMzEgLSBjbHozMihyb290RW50YW5nbGVkTGFuZXMpLFxuICAgICAgbGFuZSA9IDEgPDwgaW5kZXgkODtcbiAgICAobGFuZSAmIGVudGFuZ2xlZExhbmVzKSB8IChyb290W2luZGV4JDhdICYgZW50YW5nbGVkTGFuZXMpICYmXG4gICAgICAocm9vdFtpbmRleCQ4XSB8PSBlbnRhbmdsZWRMYW5lcyk7XG4gICAgcm9vdEVudGFuZ2xlZExhbmVzICY9IH5sYW5lO1xuICB9XG59XG5mdW5jdGlvbiBsYW5lc1RvRXZlbnRQcmlvcml0eShsYW5lcykge1xuICBsYW5lcyAmPSAtbGFuZXM7XG4gIHJldHVybiAyIDwgbGFuZXNcbiAgICA/IDggPCBsYW5lc1xuICAgICAgPyAwICE9PSAobGFuZXMgJiAxMzQyMTc3MjcpXG4gICAgICAgID8gMzJcbiAgICAgICAgOiAyNjg0MzU0NTZcbiAgICAgIDogOFxuICAgIDogMjtcbn1cbmZ1bmN0aW9uIHJlc29sdmVVcGRhdGVQcmlvcml0eSgpIHtcbiAgdmFyIHVwZGF0ZVByaW9yaXR5ID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucDtcbiAgaWYgKDAgIT09IHVwZGF0ZVByaW9yaXR5KSByZXR1cm4gdXBkYXRlUHJpb3JpdHk7XG4gIHVwZGF0ZVByaW9yaXR5ID0gd2luZG93LmV2ZW50O1xuICByZXR1cm4gdm9pZCAwID09PSB1cGRhdGVQcmlvcml0eSA/IDMyIDogZ2V0RXZlbnRQcmlvcml0eSh1cGRhdGVQcmlvcml0eS50eXBlKTtcbn1cbmZ1bmN0aW9uIHJ1bldpdGhQcmlvcml0eShwcmlvcml0eSwgZm4pIHtcbiAgdmFyIHByZXZpb3VzUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICB0cnkge1xuICAgIHJldHVybiAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByaW9yaXR5KSwgZm4oKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gcHJldmlvdXNQcmlvcml0eTtcbiAgfVxufVxudmFyIHJhbmRvbUtleSA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLFxuICBpbnRlcm5hbEluc3RhbmNlS2V5ID0gXCJfX3JlYWN0RmliZXIkXCIgKyByYW5kb21LZXksXG4gIGludGVybmFsUHJvcHNLZXkgPSBcIl9fcmVhY3RQcm9wcyRcIiArIHJhbmRvbUtleSxcbiAgaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleSA9IFwiX19yZWFjdENvbnRhaW5lciRcIiArIHJhbmRvbUtleSxcbiAgaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5ID0gXCJfX3JlYWN0RXZlbnRzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbEV2ZW50SGFuZGxlckxpc3RlbmVyc0tleSA9IFwiX19yZWFjdExpc3RlbmVycyRcIiArIHJhbmRvbUtleSxcbiAgaW50ZXJuYWxFdmVudEhhbmRsZXNTZXRLZXkgPSBcIl9fcmVhY3RIYW5kbGVzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbFJvb3ROb2RlUmVzb3VyY2VzS2V5ID0gXCJfX3JlYWN0UmVzb3VyY2VzJFwiICsgcmFuZG9tS2V5LFxuICBpbnRlcm5hbEhvaXN0YWJsZU1hcmtlciA9IFwiX19yZWFjdE1hcmtlciRcIiArIHJhbmRvbUtleTtcbmZ1bmN0aW9uIGRldGFjaERlbGV0ZWRJbnN0YW5jZShub2RlKSB7XG4gIGRlbGV0ZSBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbFByb3BzS2V5XTtcbiAgZGVsZXRlIG5vZGVbaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5XTtcbiAgZGVsZXRlIG5vZGVbaW50ZXJuYWxFdmVudEhhbmRsZXJMaXN0ZW5lcnNLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbEV2ZW50SGFuZGxlc1NldEtleV07XG59XG5mdW5jdGlvbiBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSh0YXJnZXROb2RlKSB7XG4gIHZhciB0YXJnZXRJbnN0ID0gdGFyZ2V0Tm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XTtcbiAgaWYgKHRhcmdldEluc3QpIHJldHVybiB0YXJnZXRJbnN0O1xuICBmb3IgKHZhciBwYXJlbnROb2RlID0gdGFyZ2V0Tm9kZS5wYXJlbnROb2RlOyBwYXJlbnROb2RlOyApIHtcbiAgICBpZiAoXG4gICAgICAodGFyZ2V0SW5zdCA9XG4gICAgICAgIHBhcmVudE5vZGVbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0gfHxcbiAgICAgICAgcGFyZW50Tm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSlcbiAgICApIHtcbiAgICAgIHBhcmVudE5vZGUgPSB0YXJnZXRJbnN0LmFsdGVybmF0ZTtcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCAhPT0gdGFyZ2V0SW5zdC5jaGlsZCB8fFxuICAgICAgICAobnVsbCAhPT0gcGFyZW50Tm9kZSAmJiBudWxsICE9PSBwYXJlbnROb2RlLmNoaWxkKVxuICAgICAgKVxuICAgICAgICBmb3IgKFxuICAgICAgICAgIHRhcmdldE5vZGUgPSBnZXRQYXJlbnRTdXNwZW5zZUluc3RhbmNlKHRhcmdldE5vZGUpO1xuICAgICAgICAgIG51bGwgIT09IHRhcmdldE5vZGU7XG5cbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKChwYXJlbnROb2RlID0gdGFyZ2V0Tm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSkpIHJldHVybiBwYXJlbnROb2RlO1xuICAgICAgICAgIHRhcmdldE5vZGUgPSBnZXRQYXJlbnRTdXNwZW5zZUluc3RhbmNlKHRhcmdldE5vZGUpO1xuICAgICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0SW5zdDtcbiAgICB9XG4gICAgdGFyZ2V0Tm9kZSA9IHBhcmVudE5vZGU7XG4gICAgcGFyZW50Tm9kZSA9IHRhcmdldE5vZGUucGFyZW50Tm9kZTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldEluc3RhbmNlRnJvbU5vZGUobm9kZSkge1xuICBpZiAoXG4gICAgKG5vZGUgPSBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldIHx8IG5vZGVbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0pXG4gICkge1xuICAgIHZhciB0YWcgPSBub2RlLnRhZztcbiAgICBpZiAoXG4gICAgICA1ID09PSB0YWcgfHxcbiAgICAgIDYgPT09IHRhZyB8fFxuICAgICAgMTMgPT09IHRhZyB8fFxuICAgICAgMjYgPT09IHRhZyB8fFxuICAgICAgMjcgPT09IHRhZyB8fFxuICAgICAgMyA9PT0gdGFnXG4gICAgKVxuICAgICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBnZXROb2RlRnJvbUluc3RhbmNlKGluc3QpIHtcbiAgdmFyIHRhZyA9IGluc3QudGFnO1xuICBpZiAoNSA9PT0gdGFnIHx8IDI2ID09PSB0YWcgfHwgMjcgPT09IHRhZyB8fCA2ID09PSB0YWcpIHJldHVybiBpbnN0LnN0YXRlTm9kZTtcbiAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMykpO1xufVxuZnVuY3Rpb24gZ2V0UmVzb3VyY2VzRnJvbVJvb3Qocm9vdCkge1xuICB2YXIgcmVzb3VyY2VzID0gcm9vdFtpbnRlcm5hbFJvb3ROb2RlUmVzb3VyY2VzS2V5XTtcbiAgcmVzb3VyY2VzIHx8XG4gICAgKHJlc291cmNlcyA9IHJvb3RbaW50ZXJuYWxSb290Tm9kZVJlc291cmNlc0tleV0gPVxuICAgICAgeyBob2lzdGFibGVTdHlsZXM6IG5ldyBNYXAoKSwgaG9pc3RhYmxlU2NyaXB0czogbmV3IE1hcCgpIH0pO1xuICByZXR1cm4gcmVzb3VyY2VzO1xufVxuZnVuY3Rpb24gbWFya05vZGVBc0hvaXN0YWJsZShub2RlKSB7XG4gIG5vZGVbaW50ZXJuYWxIb2lzdGFibGVNYXJrZXJdID0gITA7XG59XG52YXIgYWxsTmF0aXZlRXZlbnRzID0gbmV3IFNldCgpLFxuICByZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzID0ge307XG5mdW5jdGlvbiByZWdpc3RlclR3b1BoYXNlRXZlbnQocmVnaXN0cmF0aW9uTmFtZSwgZGVwZW5kZW5jaWVzKSB7XG4gIHJlZ2lzdGVyRGlyZWN0RXZlbnQocmVnaXN0cmF0aW9uTmFtZSwgZGVwZW5kZW5jaWVzKTtcbiAgcmVnaXN0ZXJEaXJlY3RFdmVudChyZWdpc3RyYXRpb25OYW1lICsgXCJDYXB0dXJlXCIsIGRlcGVuZGVuY2llcyk7XG59XG5mdW5jdGlvbiByZWdpc3RlckRpcmVjdEV2ZW50KHJlZ2lzdHJhdGlvbk5hbWUsIGRlcGVuZGVuY2llcykge1xuICByZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzW3JlZ2lzdHJhdGlvbk5hbWVdID0gZGVwZW5kZW5jaWVzO1xuICBmb3IgKFxuICAgIHJlZ2lzdHJhdGlvbk5hbWUgPSAwO1xuICAgIHJlZ2lzdHJhdGlvbk5hbWUgPCBkZXBlbmRlbmNpZXMubGVuZ3RoO1xuICAgIHJlZ2lzdHJhdGlvbk5hbWUrK1xuICApXG4gICAgYWxsTmF0aXZlRXZlbnRzLmFkZChkZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV0pO1xufVxudmFyIGNhblVzZURPTSA9ICEoXG4gICAgXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHdpbmRvdyB8fFxuICAgIFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgfHxcbiAgICBcInVuZGVmaW5lZFwiID09PSB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcbiAgKSxcbiAgVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVggPSBSZWdFeHAoXG4gICAgXCJeWzpBLVpfYS16XFxcXHUwMEMwLVxcXFx1MDBENlxcXFx1MDBEOC1cXFxcdTAwRjZcXFxcdTAwRjgtXFxcXHUwMkZGXFxcXHUwMzcwLVxcXFx1MDM3RFxcXFx1MDM3Ri1cXFxcdTFGRkZcXFxcdTIwMEMtXFxcXHUyMDBEXFxcXHUyMDcwLVxcXFx1MjE4RlxcXFx1MkMwMC1cXFxcdTJGRUZcXFxcdTMwMDEtXFxcXHVEN0ZGXFxcXHVGOTAwLVxcXFx1RkRDRlxcXFx1RkRGMC1cXFxcdUZGRkRdWzpBLVpfYS16XFxcXHUwMEMwLVxcXFx1MDBENlxcXFx1MDBEOC1cXFxcdTAwRjZcXFxcdTAwRjgtXFxcXHUwMkZGXFxcXHUwMzcwLVxcXFx1MDM3RFxcXFx1MDM3Ri1cXFxcdTFGRkZcXFxcdTIwMEMtXFxcXHUyMDBEXFxcXHUyMDcwLVxcXFx1MjE4RlxcXFx1MkMwMC1cXFxcdTJGRUZcXFxcdTMwMDEtXFxcXHVEN0ZGXFxcXHVGOTAwLVxcXFx1RkRDRlxcXFx1RkRGMC1cXFxcdUZGRkRcXFxcLS4wLTlcXFxcdTAwQjdcXFxcdTAzMDAtXFxcXHUwMzZGXFxcXHUyMDNGLVxcXFx1MjA0MF0qJFwiXG4gICksXG4gIGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUgPSB7fSxcbiAgdmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlID0ge307XG5mdW5jdGlvbiBpc0F0dHJpYnV0ZU5hbWVTYWZlKGF0dHJpYnV0ZU5hbWUpIHtcbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlLCBhdHRyaWJ1dGVOYW1lKSlcbiAgICByZXR1cm4gITA7XG4gIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUsIGF0dHJpYnV0ZU5hbWUpKSByZXR1cm4gITE7XG4gIGlmIChWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWC50ZXN0KGF0dHJpYnV0ZU5hbWUpKVxuICAgIHJldHVybiAodmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlW2F0dHJpYnV0ZU5hbWVdID0gITApO1xuICBpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlW2F0dHJpYnV0ZU5hbWVdID0gITA7XG4gIHJldHVybiAhMTtcbn1cbmZ1bmN0aW9uIHNldFZhbHVlRm9yQXR0cmlidXRlKG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gIGlmIChpc0F0dHJpYnV0ZU5hbWVTYWZlKG5hbWUpKVxuICAgIGlmIChudWxsID09PSB2YWx1ZSkgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgZWxzZSB7XG4gICAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICBjYXNlIFwic3ltYm9sXCI6XG4gICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgIHZhciBwcmVmaXgkMTAgPSBuYW1lLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCwgNSk7XG4gICAgICAgICAgaWYgKFwiZGF0YS1cIiAhPT0gcHJlZml4JDEwICYmIFwiYXJpYS1cIiAhPT0gcHJlZml4JDEwKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShuYW1lLCBcIlwiICsgdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUobm9kZSwgbmFtZSwgdmFsdWUpIHtcbiAgaWYgKG51bGwgPT09IHZhbHVlKSBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgZWxzZSB7XG4gICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgXCJcIiArIHZhbHVlKTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlKG5vZGUsIG5hbWVzcGFjZSwgbmFtZSwgdmFsdWUpIHtcbiAgaWYgKG51bGwgPT09IHZhbHVlKSBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgZWxzZSB7XG4gICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGVOUyhuYW1lc3BhY2UsIG5hbWUsIFwiXCIgKyB2YWx1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpIHtcbiAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICBjYXNlIFwiYmlnaW50XCI6XG4gICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgY2FzZSBcInN0cmluZ1wiOlxuICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBcIlwiO1xuICB9XG59XG5mdW5jdGlvbiBpc0NoZWNrYWJsZShlbGVtKSB7XG4gIHZhciB0eXBlID0gZWxlbS50eXBlO1xuICByZXR1cm4gKFxuICAgIChlbGVtID0gZWxlbS5ub2RlTmFtZSkgJiZcbiAgICBcImlucHV0XCIgPT09IGVsZW0udG9Mb3dlckNhc2UoKSAmJlxuICAgIChcImNoZWNrYm94XCIgPT09IHR5cGUgfHwgXCJyYWRpb1wiID09PSB0eXBlKVxuICApO1xufVxuZnVuY3Rpb24gdHJhY2tWYWx1ZU9uTm9kZShub2RlKSB7XG4gIHZhciB2YWx1ZUZpZWxkID0gaXNDaGVja2FibGUobm9kZSkgPyBcImNoZWNrZWRcIiA6IFwidmFsdWVcIixcbiAgICBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihcbiAgICAgIG5vZGUuY29uc3RydWN0b3IucHJvdG90eXBlLFxuICAgICAgdmFsdWVGaWVsZFxuICAgICksXG4gICAgY3VycmVudFZhbHVlID0gXCJcIiArIG5vZGVbdmFsdWVGaWVsZF07XG4gIGlmIChcbiAgICAhbm9kZS5oYXNPd25Qcm9wZXJ0eSh2YWx1ZUZpZWxkKSAmJlxuICAgIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBkZXNjcmlwdG9yICYmXG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZGVzY3JpcHRvci5nZXQgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBkZXNjcmlwdG9yLnNldFxuICApIHtcbiAgICB2YXIgZ2V0ID0gZGVzY3JpcHRvci5nZXQsXG4gICAgICBzZXQgPSBkZXNjcmlwdG9yLnNldDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9kZSwgdmFsdWVGaWVsZCwge1xuICAgICAgY29uZmlndXJhYmxlOiAhMCxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZ2V0LmNhbGwodGhpcyk7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgY3VycmVudFZhbHVlID0gXCJcIiArIHZhbHVlO1xuICAgICAgICBzZXQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vZGUsIHZhbHVlRmllbGQsIHtcbiAgICAgIGVudW1lcmFibGU6IGRlc2NyaXB0b3IuZW51bWVyYWJsZVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBnZXRWYWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY3VycmVudFZhbHVlO1xuICAgICAgfSxcbiAgICAgIHNldFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgY3VycmVudFZhbHVlID0gXCJcIiArIHZhbHVlO1xuICAgICAgfSxcbiAgICAgIHN0b3BUcmFja2luZzogZnVuY3Rpb24gKCkge1xuICAgICAgICBub2RlLl92YWx1ZVRyYWNrZXIgPSBudWxsO1xuICAgICAgICBkZWxldGUgbm9kZVt2YWx1ZUZpZWxkXTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5mdW5jdGlvbiB0cmFjayhub2RlKSB7XG4gIG5vZGUuX3ZhbHVlVHJhY2tlciB8fCAobm9kZS5fdmFsdWVUcmFja2VyID0gdHJhY2tWYWx1ZU9uTm9kZShub2RlKSk7XG59XG5mdW5jdGlvbiB1cGRhdGVWYWx1ZUlmQ2hhbmdlZChub2RlKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuICExO1xuICB2YXIgdHJhY2tlciA9IG5vZGUuX3ZhbHVlVHJhY2tlcjtcbiAgaWYgKCF0cmFja2VyKSByZXR1cm4gITA7XG4gIHZhciBsYXN0VmFsdWUgPSB0cmFja2VyLmdldFZhbHVlKCk7XG4gIHZhciB2YWx1ZSA9IFwiXCI7XG4gIG5vZGUgJiZcbiAgICAodmFsdWUgPSBpc0NoZWNrYWJsZShub2RlKVxuICAgICAgPyBub2RlLmNoZWNrZWRcbiAgICAgICAgPyBcInRydWVcIlxuICAgICAgICA6IFwiZmFsc2VcIlxuICAgICAgOiBub2RlLnZhbHVlKTtcbiAgbm9kZSA9IHZhbHVlO1xuICByZXR1cm4gbm9kZSAhPT0gbGFzdFZhbHVlID8gKHRyYWNrZXIuc2V0VmFsdWUobm9kZSksICEwKSA6ICExO1xufVxuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIHtcbiAgZG9jID0gZG9jIHx8IChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgZG9jdW1lbnQgPyBkb2N1bWVudCA6IHZvaWQgMCk7XG4gIGlmIChcInVuZGVmaW5lZFwiID09PSB0eXBlb2YgZG9jKSByZXR1cm4gbnVsbDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cbnZhciBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzUmVnZXggPSAvW1xcblwiXFxcXF0vZztcbmZ1bmN0aW9uIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXModmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoXG4gICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3Rlc1JlZ2V4LFxuICAgIGZ1bmN0aW9uIChjaCkge1xuICAgICAgcmV0dXJuIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikgKyBcIiBcIjtcbiAgICB9XG4gICk7XG59XG5mdW5jdGlvbiB1cGRhdGVJbnB1dChcbiAgZWxlbWVudCxcbiAgdmFsdWUsXG4gIGRlZmF1bHRWYWx1ZSxcbiAgbGFzdERlZmF1bHRWYWx1ZSxcbiAgY2hlY2tlZCxcbiAgZGVmYXVsdENoZWNrZWQsXG4gIHR5cGUsXG4gIG5hbWVcbikge1xuICBlbGVtZW50Lm5hbWUgPSBcIlwiO1xuICBudWxsICE9IHR5cGUgJiZcbiAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICBcInN5bWJvbFwiICE9PSB0eXBlb2YgdHlwZSAmJlxuICBcImJvb2xlYW5cIiAhPT0gdHlwZW9mIHR5cGVcbiAgICA/IChlbGVtZW50LnR5cGUgPSB0eXBlKVxuICAgIDogZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuICBpZiAobnVsbCAhPSB2YWx1ZSlcbiAgICBpZiAoXCJudW1iZXJcIiA9PT0gdHlwZSkge1xuICAgICAgaWYgKCgwID09PSB2YWx1ZSAmJiBcIlwiID09PSBlbGVtZW50LnZhbHVlKSB8fCBlbGVtZW50LnZhbHVlICE9IHZhbHVlKVxuICAgICAgICBlbGVtZW50LnZhbHVlID0gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpO1xuICAgIH0gZWxzZVxuICAgICAgZWxlbWVudC52YWx1ZSAhPT0gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpICYmXG4gICAgICAgIChlbGVtZW50LnZhbHVlID0gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpKTtcbiAgZWxzZVxuICAgIChcInN1Ym1pdFwiICE9PSB0eXBlICYmIFwicmVzZXRcIiAhPT0gdHlwZSkgfHwgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtcbiAgbnVsbCAhPSB2YWx1ZVxuICAgID8gc2V0RGVmYXVsdFZhbHVlKGVsZW1lbnQsIHR5cGUsIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpKVxuICAgIDogbnVsbCAhPSBkZWZhdWx0VmFsdWVcbiAgICAgID8gc2V0RGVmYXVsdFZhbHVlKGVsZW1lbnQsIHR5cGUsIGdldFRvU3RyaW5nVmFsdWUoZGVmYXVsdFZhbHVlKSlcbiAgICAgIDogbnVsbCAhPSBsYXN0RGVmYXVsdFZhbHVlICYmIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7XG4gIG51bGwgPT0gY2hlY2tlZCAmJlxuICAgIG51bGwgIT0gZGVmYXVsdENoZWNrZWQgJiZcbiAgICAoZWxlbWVudC5kZWZhdWx0Q2hlY2tlZCA9ICEhZGVmYXVsdENoZWNrZWQpO1xuICBudWxsICE9IGNoZWNrZWQgJiZcbiAgICAoZWxlbWVudC5jaGVja2VkID1cbiAgICAgIGNoZWNrZWQgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY2hlY2tlZCAmJiBcInN5bWJvbFwiICE9PSB0eXBlb2YgY2hlY2tlZCk7XG4gIG51bGwgIT0gbmFtZSAmJlxuICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBuYW1lICYmXG4gIFwic3ltYm9sXCIgIT09IHR5cGVvZiBuYW1lICYmXG4gIFwiYm9vbGVhblwiICE9PSB0eXBlb2YgbmFtZVxuICAgID8gKGVsZW1lbnQubmFtZSA9IFwiXCIgKyBnZXRUb1N0cmluZ1ZhbHVlKG5hbWUpKVxuICAgIDogZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJuYW1lXCIpO1xufVxuZnVuY3Rpb24gaW5pdElucHV0KFxuICBlbGVtZW50LFxuICB2YWx1ZSxcbiAgZGVmYXVsdFZhbHVlLFxuICBjaGVja2VkLFxuICBkZWZhdWx0Q2hlY2tlZCxcbiAgdHlwZSxcbiAgbmFtZSxcbiAgaXNIeWRyYXRpbmdcbikge1xuICBudWxsICE9IHR5cGUgJiZcbiAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB0eXBlICYmXG4gICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgICBcImJvb2xlYW5cIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgICAoZWxlbWVudC50eXBlID0gdHlwZSk7XG4gIGlmIChudWxsICE9IHZhbHVlIHx8IG51bGwgIT0gZGVmYXVsdFZhbHVlKSB7XG4gICAgaWYgKFxuICAgICAgIShcbiAgICAgICAgKFwic3VibWl0XCIgIT09IHR5cGUgJiYgXCJyZXNldFwiICE9PSB0eXBlKSB8fFxuICAgICAgICAodm9pZCAwICE9PSB2YWx1ZSAmJiBudWxsICE9PSB2YWx1ZSlcbiAgICAgIClcbiAgICApXG4gICAgICByZXR1cm47XG4gICAgZGVmYXVsdFZhbHVlID1cbiAgICAgIG51bGwgIT0gZGVmYXVsdFZhbHVlID8gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUoZGVmYXVsdFZhbHVlKSA6IFwiXCI7XG4gICAgdmFsdWUgPSBudWxsICE9IHZhbHVlID8gXCJcIiArIGdldFRvU3RyaW5nVmFsdWUodmFsdWUpIDogZGVmYXVsdFZhbHVlO1xuICAgIGlzSHlkcmF0aW5nIHx8IHZhbHVlID09PSBlbGVtZW50LnZhbHVlIHx8IChlbGVtZW50LnZhbHVlID0gdmFsdWUpO1xuICAgIGVsZW1lbnQuZGVmYXVsdFZhbHVlID0gdmFsdWU7XG4gIH1cbiAgY2hlY2tlZCA9IG51bGwgIT0gY2hlY2tlZCA/IGNoZWNrZWQgOiBkZWZhdWx0Q2hlY2tlZDtcbiAgY2hlY2tlZCA9XG4gICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY2hlY2tlZCAmJiBcInN5bWJvbFwiICE9PSB0eXBlb2YgY2hlY2tlZCAmJiAhIWNoZWNrZWQ7XG4gIGVsZW1lbnQuY2hlY2tlZCA9IGlzSHlkcmF0aW5nID8gZWxlbWVudC5jaGVja2VkIDogISFjaGVja2VkO1xuICBlbGVtZW50LmRlZmF1bHRDaGVja2VkID0gISFjaGVja2VkO1xuICBudWxsICE9IG5hbWUgJiZcbiAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBuYW1lICYmXG4gICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIG5hbWUgJiZcbiAgICBcImJvb2xlYW5cIiAhPT0gdHlwZW9mIG5hbWUgJiZcbiAgICAoZWxlbWVudC5uYW1lID0gbmFtZSk7XG59XG5mdW5jdGlvbiBzZXREZWZhdWx0VmFsdWUobm9kZSwgdHlwZSwgdmFsdWUpIHtcbiAgKFwibnVtYmVyXCIgPT09IHR5cGUgJiYgZ2V0QWN0aXZlRWxlbWVudChub2RlLm93bmVyRG9jdW1lbnQpID09PSBub2RlKSB8fFxuICAgIG5vZGUuZGVmYXVsdFZhbHVlID09PSBcIlwiICsgdmFsdWUgfHxcbiAgICAobm9kZS5kZWZhdWx0VmFsdWUgPSBcIlwiICsgdmFsdWUpO1xufVxuZnVuY3Rpb24gdXBkYXRlT3B0aW9ucyhub2RlLCBtdWx0aXBsZSwgcHJvcFZhbHVlLCBzZXREZWZhdWx0U2VsZWN0ZWQpIHtcbiAgbm9kZSA9IG5vZGUub3B0aW9ucztcbiAgaWYgKG11bHRpcGxlKSB7XG4gICAgbXVsdGlwbGUgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BWYWx1ZS5sZW5ndGg7IGkrKylcbiAgICAgIG11bHRpcGxlW1wiJFwiICsgcHJvcFZhbHVlW2ldXSA9ICEwO1xuICAgIGZvciAocHJvcFZhbHVlID0gMDsgcHJvcFZhbHVlIDwgbm9kZS5sZW5ndGg7IHByb3BWYWx1ZSsrKVxuICAgICAgKGkgPSBtdWx0aXBsZS5oYXNPd25Qcm9wZXJ0eShcIiRcIiArIG5vZGVbcHJvcFZhbHVlXS52YWx1ZSkpLFxuICAgICAgICBub2RlW3Byb3BWYWx1ZV0uc2VsZWN0ZWQgIT09IGkgJiYgKG5vZGVbcHJvcFZhbHVlXS5zZWxlY3RlZCA9IGkpLFxuICAgICAgICBpICYmIHNldERlZmF1bHRTZWxlY3RlZCAmJiAobm9kZVtwcm9wVmFsdWVdLmRlZmF1bHRTZWxlY3RlZCA9ICEwKTtcbiAgfSBlbHNlIHtcbiAgICBwcm9wVmFsdWUgPSBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZShwcm9wVmFsdWUpO1xuICAgIG11bHRpcGxlID0gbnVsbDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbm9kZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKG5vZGVbaV0udmFsdWUgPT09IHByb3BWYWx1ZSkge1xuICAgICAgICBub2RlW2ldLnNlbGVjdGVkID0gITA7XG4gICAgICAgIHNldERlZmF1bHRTZWxlY3RlZCAmJiAobm9kZVtpXS5kZWZhdWx0U2VsZWN0ZWQgPSAhMCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG51bGwgIT09IG11bHRpcGxlIHx8IG5vZGVbaV0uZGlzYWJsZWQgfHwgKG11bHRpcGxlID0gbm9kZVtpXSk7XG4gICAgfVxuICAgIG51bGwgIT09IG11bHRpcGxlICYmIChtdWx0aXBsZS5zZWxlY3RlZCA9ICEwKTtcbiAgfVxufVxuZnVuY3Rpb24gdXBkYXRlVGV4dGFyZWEoZWxlbWVudCwgdmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAoXG4gICAgbnVsbCAhPSB2YWx1ZSAmJlxuICAgICgodmFsdWUgPSBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkpLFxuICAgIHZhbHVlICE9PSBlbGVtZW50LnZhbHVlICYmIChlbGVtZW50LnZhbHVlID0gdmFsdWUpLFxuICAgIG51bGwgPT0gZGVmYXVsdFZhbHVlKVxuICApIHtcbiAgICBlbGVtZW50LmRlZmF1bHRWYWx1ZSAhPT0gdmFsdWUgJiYgKGVsZW1lbnQuZGVmYXVsdFZhbHVlID0gdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfVxuICBlbGVtZW50LmRlZmF1bHRWYWx1ZSA9XG4gICAgbnVsbCAhPSBkZWZhdWx0VmFsdWUgPyBcIlwiICsgZ2V0VG9TdHJpbmdWYWx1ZShkZWZhdWx0VmFsdWUpIDogXCJcIjtcbn1cbmZ1bmN0aW9uIGluaXRUZXh0YXJlYShlbGVtZW50LCB2YWx1ZSwgZGVmYXVsdFZhbHVlLCBjaGlsZHJlbikge1xuICBpZiAobnVsbCA9PSB2YWx1ZSkge1xuICAgIGlmIChudWxsICE9IGNoaWxkcmVuKSB7XG4gICAgICBpZiAobnVsbCAhPSBkZWZhdWx0VmFsdWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOTIpKTtcbiAgICAgIGlmIChpc0FycmF5SW1wbChjaGlsZHJlbikpIHtcbiAgICAgICAgaWYgKDEgPCBjaGlsZHJlbi5sZW5ndGgpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOTMpKTtcbiAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlblswXTtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHRWYWx1ZSA9IGNoaWxkcmVuO1xuICAgIH1cbiAgICBudWxsID09IGRlZmF1bHRWYWx1ZSAmJiAoZGVmYXVsdFZhbHVlID0gXCJcIik7XG4gICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gIH1cbiAgZGVmYXVsdFZhbHVlID0gZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSk7XG4gIGVsZW1lbnQuZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICBjaGlsZHJlbiA9IGVsZW1lbnQudGV4dENvbnRlbnQ7XG4gIGNoaWxkcmVuID09PSBkZWZhdWx0VmFsdWUgJiZcbiAgICBcIlwiICE9PSBjaGlsZHJlbiAmJlxuICAgIG51bGwgIT09IGNoaWxkcmVuICYmXG4gICAgKGVsZW1lbnQudmFsdWUgPSBjaGlsZHJlbik7XG59XG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudChub2RlLCB0ZXh0KSB7XG4gIGlmICh0ZXh0KSB7XG4gICAgdmFyIGZpcnN0Q2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgaWYgKFxuICAgICAgZmlyc3RDaGlsZCAmJlxuICAgICAgZmlyc3RDaGlsZCA9PT0gbm9kZS5sYXN0Q2hpbGQgJiZcbiAgICAgIDMgPT09IGZpcnN0Q2hpbGQubm9kZVR5cGVcbiAgICApIHtcbiAgICAgIGZpcnN0Q2hpbGQubm9kZVZhbHVlID0gdGV4dDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59XG52YXIgdW5pdGxlc3NOdW1iZXJzID0gbmV3IFNldChcbiAgXCJhbmltYXRpb25JdGVyYXRpb25Db3VudCBhc3BlY3RSYXRpbyBib3JkZXJJbWFnZU91dHNldCBib3JkZXJJbWFnZVNsaWNlIGJvcmRlckltYWdlV2lkdGggYm94RmxleCBib3hGbGV4R3JvdXAgYm94T3JkaW5hbEdyb3VwIGNvbHVtbkNvdW50IGNvbHVtbnMgZmxleCBmbGV4R3JvdyBmbGV4UG9zaXRpdmUgZmxleFNocmluayBmbGV4TmVnYXRpdmUgZmxleE9yZGVyIGdyaWRBcmVhIGdyaWRSb3cgZ3JpZFJvd0VuZCBncmlkUm93U3BhbiBncmlkUm93U3RhcnQgZ3JpZENvbHVtbiBncmlkQ29sdW1uRW5kIGdyaWRDb2x1bW5TcGFuIGdyaWRDb2x1bW5TdGFydCBmb250V2VpZ2h0IGxpbmVDbGFtcCBsaW5lSGVpZ2h0IG9wYWNpdHkgb3JkZXIgb3JwaGFucyBzY2FsZSB0YWJTaXplIHdpZG93cyB6SW5kZXggem9vbSBmaWxsT3BhY2l0eSBmbG9vZE9wYWNpdHkgc3RvcE9wYWNpdHkgc3Ryb2tlRGFzaGFycmF5IHN0cm9rZURhc2hvZmZzZXQgc3Ryb2tlTWl0ZXJsaW1pdCBzdHJva2VPcGFjaXR5IHN0cm9rZVdpZHRoIE1vekFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IE1vekJveEZsZXggTW96Qm94RmxleEdyb3VwIE1vekxpbmVDbGFtcCBtc0FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IG1zRmxleCBtc1pvb20gbXNGbGV4R3JvdyBtc0ZsZXhOZWdhdGl2ZSBtc0ZsZXhPcmRlciBtc0ZsZXhQb3NpdGl2ZSBtc0ZsZXhTaHJpbmsgbXNHcmlkQ29sdW1uIG1zR3JpZENvbHVtblNwYW4gbXNHcmlkUm93IG1zR3JpZFJvd1NwYW4gV2Via2l0QW5pbWF0aW9uSXRlcmF0aW9uQ291bnQgV2Via2l0Qm94RmxleCBXZWJLaXRCb3hGbGV4R3JvdXAgV2Via2l0Qm94T3JkaW5hbEdyb3VwIFdlYmtpdENvbHVtbkNvdW50IFdlYmtpdENvbHVtbnMgV2Via2l0RmxleCBXZWJraXRGbGV4R3JvdyBXZWJraXRGbGV4UG9zaXRpdmUgV2Via2l0RmxleFNocmluayBXZWJraXRMaW5lQ2xhbXBcIi5zcGxpdChcbiAgICBcIiBcIlxuICApXG4pO1xuZnVuY3Rpb24gc2V0VmFsdWVGb3JTdHlsZShzdHlsZSwgc3R5bGVOYW1lLCB2YWx1ZSkge1xuICB2YXIgaXNDdXN0b21Qcm9wZXJ0eSA9IDAgPT09IHN0eWxlTmFtZS5pbmRleE9mKFwiLS1cIik7XG4gIG51bGwgPT0gdmFsdWUgfHwgXCJib29sZWFuXCIgPT09IHR5cGVvZiB2YWx1ZSB8fCBcIlwiID09PSB2YWx1ZVxuICAgID8gaXNDdXN0b21Qcm9wZXJ0eVxuICAgICAgPyBzdHlsZS5zZXRQcm9wZXJ0eShzdHlsZU5hbWUsIFwiXCIpXG4gICAgICA6IFwiZmxvYXRcIiA9PT0gc3R5bGVOYW1lXG4gICAgICAgID8gKHN0eWxlLmNzc0Zsb2F0ID0gXCJcIilcbiAgICAgICAgOiAoc3R5bGVbc3R5bGVOYW1lXSA9IFwiXCIpXG4gICAgOiBpc0N1c3RvbVByb3BlcnR5XG4gICAgICA/IHN0eWxlLnNldFByb3BlcnR5KHN0eWxlTmFtZSwgdmFsdWUpXG4gICAgICA6IFwibnVtYmVyXCIgIT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgICAgIDAgPT09IHZhbHVlIHx8XG4gICAgICAgICAgdW5pdGxlc3NOdW1iZXJzLmhhcyhzdHlsZU5hbWUpXG4gICAgICAgID8gXCJmbG9hdFwiID09PSBzdHlsZU5hbWVcbiAgICAgICAgICA/IChzdHlsZS5jc3NGbG9hdCA9IHZhbHVlKVxuICAgICAgICAgIDogKHN0eWxlW3N0eWxlTmFtZV0gPSAoXCJcIiArIHZhbHVlKS50cmltKCkpXG4gICAgICAgIDogKHN0eWxlW3N0eWxlTmFtZV0gPSB2YWx1ZSArIFwicHhcIik7XG59XG5mdW5jdGlvbiBzZXRWYWx1ZUZvclN0eWxlcyhub2RlLCBzdHlsZXMsIHByZXZTdHlsZXMpIHtcbiAgaWYgKG51bGwgIT0gc3R5bGVzICYmIFwib2JqZWN0XCIgIT09IHR5cGVvZiBzdHlsZXMpXG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2MikpO1xuICBub2RlID0gbm9kZS5zdHlsZTtcbiAgaWYgKG51bGwgIT0gcHJldlN0eWxlcykge1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBwcmV2U3R5bGVzKVxuICAgICAgIXByZXZTdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSB8fFxuICAgICAgICAobnVsbCAhPSBzdHlsZXMgJiYgc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHx8XG4gICAgICAgICgwID09PSBzdHlsZU5hbWUuaW5kZXhPZihcIi0tXCIpXG4gICAgICAgICAgPyBub2RlLnNldFByb3BlcnR5KHN0eWxlTmFtZSwgXCJcIilcbiAgICAgICAgICA6IFwiZmxvYXRcIiA9PT0gc3R5bGVOYW1lXG4gICAgICAgICAgICA/IChub2RlLmNzc0Zsb2F0ID0gXCJcIilcbiAgICAgICAgICAgIDogKG5vZGVbc3R5bGVOYW1lXSA9IFwiXCIpKTtcbiAgICBmb3IgKHZhciBzdHlsZU5hbWUkMTYgaW4gc3R5bGVzKVxuICAgICAgKHN0eWxlTmFtZSA9IHN0eWxlc1tzdHlsZU5hbWUkMTZdKSxcbiAgICAgICAgc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSQxNikgJiZcbiAgICAgICAgICBwcmV2U3R5bGVzW3N0eWxlTmFtZSQxNl0gIT09IHN0eWxlTmFtZSAmJlxuICAgICAgICAgIHNldFZhbHVlRm9yU3R5bGUobm9kZSwgc3R5bGVOYW1lJDE2LCBzdHlsZU5hbWUpO1xuICB9IGVsc2VcbiAgICBmb3IgKHZhciBzdHlsZU5hbWUkMTcgaW4gc3R5bGVzKVxuICAgICAgc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSQxNykgJiZcbiAgICAgICAgc2V0VmFsdWVGb3JTdHlsZShub2RlLCBzdHlsZU5hbWUkMTcsIHN0eWxlc1tzdHlsZU5hbWUkMTddKTtcbn1cbmZ1bmN0aW9uIGlzQ3VzdG9tRWxlbWVudCh0YWdOYW1lKSB7XG4gIGlmICgtMSA9PT0gdGFnTmFtZS5pbmRleE9mKFwiLVwiKSkgcmV0dXJuICExO1xuICBzd2l0Y2ggKHRhZ05hbWUpIHtcbiAgICBjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpcbiAgICBjYXNlIFwiY29sb3ItcHJvZmlsZVwiOlxuICAgIGNhc2UgXCJmb250LWZhY2VcIjpcbiAgICBjYXNlIFwiZm9udC1mYWNlLXNyY1wiOlxuICAgIGNhc2UgXCJmb250LWZhY2UtdXJpXCI6XG4gICAgY2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpcbiAgICBjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpcbiAgICBjYXNlIFwibWlzc2luZy1nbHlwaFwiOlxuICAgICAgcmV0dXJuICExO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gITA7XG4gIH1cbn1cbnZhciBhbGlhc2VzID0gbmV3IE1hcChbXG4gICAgW1wiYWNjZXB0Q2hhcnNldFwiLCBcImFjY2VwdC1jaGFyc2V0XCJdLFxuICAgIFtcImh0bWxGb3JcIiwgXCJmb3JcIl0sXG4gICAgW1wiaHR0cEVxdWl2XCIsIFwiaHR0cC1lcXVpdlwiXSxcbiAgICBbXCJjcm9zc09yaWdpblwiLCBcImNyb3Nzb3JpZ2luXCJdLFxuICAgIFtcImFjY2VudEhlaWdodFwiLCBcImFjY2VudC1oZWlnaHRcIl0sXG4gICAgW1wiYWxpZ25tZW50QmFzZWxpbmVcIiwgXCJhbGlnbm1lbnQtYmFzZWxpbmVcIl0sXG4gICAgW1wiYXJhYmljRm9ybVwiLCBcImFyYWJpYy1mb3JtXCJdLFxuICAgIFtcImJhc2VsaW5lU2hpZnRcIiwgXCJiYXNlbGluZS1zaGlmdFwiXSxcbiAgICBbXCJjYXBIZWlnaHRcIiwgXCJjYXAtaGVpZ2h0XCJdLFxuICAgIFtcImNsaXBQYXRoXCIsIFwiY2xpcC1wYXRoXCJdLFxuICAgIFtcImNsaXBSdWxlXCIsIFwiY2xpcC1ydWxlXCJdLFxuICAgIFtcImNvbG9ySW50ZXJwb2xhdGlvblwiLCBcImNvbG9yLWludGVycG9sYXRpb25cIl0sXG4gICAgW1wiY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyc1wiLCBcImNvbG9yLWludGVycG9sYXRpb24tZmlsdGVyc1wiXSxcbiAgICBbXCJjb2xvclByb2ZpbGVcIiwgXCJjb2xvci1wcm9maWxlXCJdLFxuICAgIFtcImNvbG9yUmVuZGVyaW5nXCIsIFwiY29sb3ItcmVuZGVyaW5nXCJdLFxuICAgIFtcImRvbWluYW50QmFzZWxpbmVcIiwgXCJkb21pbmFudC1iYXNlbGluZVwiXSxcbiAgICBbXCJlbmFibGVCYWNrZ3JvdW5kXCIsIFwiZW5hYmxlLWJhY2tncm91bmRcIl0sXG4gICAgW1wiZmlsbE9wYWNpdHlcIiwgXCJmaWxsLW9wYWNpdHlcIl0sXG4gICAgW1wiZmlsbFJ1bGVcIiwgXCJmaWxsLXJ1bGVcIl0sXG4gICAgW1wiZmxvb2RDb2xvclwiLCBcImZsb29kLWNvbG9yXCJdLFxuICAgIFtcImZsb29kT3BhY2l0eVwiLCBcImZsb29kLW9wYWNpdHlcIl0sXG4gICAgW1wiZm9udEZhbWlseVwiLCBcImZvbnQtZmFtaWx5XCJdLFxuICAgIFtcImZvbnRTaXplXCIsIFwiZm9udC1zaXplXCJdLFxuICAgIFtcImZvbnRTaXplQWRqdXN0XCIsIFwiZm9udC1zaXplLWFkanVzdFwiXSxcbiAgICBbXCJmb250U3RyZXRjaFwiLCBcImZvbnQtc3RyZXRjaFwiXSxcbiAgICBbXCJmb250U3R5bGVcIiwgXCJmb250LXN0eWxlXCJdLFxuICAgIFtcImZvbnRWYXJpYW50XCIsIFwiZm9udC12YXJpYW50XCJdLFxuICAgIFtcImZvbnRXZWlnaHRcIiwgXCJmb250LXdlaWdodFwiXSxcbiAgICBbXCJnbHlwaE5hbWVcIiwgXCJnbHlwaC1uYW1lXCJdLFxuICAgIFtcImdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsXCIsIFwiZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbFwiXSxcbiAgICBbXCJnbHlwaE9yaWVudGF0aW9uVmVydGljYWxcIiwgXCJnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbFwiXSxcbiAgICBbXCJob3JpekFkdlhcIiwgXCJob3Jpei1hZHYteFwiXSxcbiAgICBbXCJob3Jpek9yaWdpblhcIiwgXCJob3Jpei1vcmlnaW4teFwiXSxcbiAgICBbXCJpbWFnZVJlbmRlcmluZ1wiLCBcImltYWdlLXJlbmRlcmluZ1wiXSxcbiAgICBbXCJsZXR0ZXJTcGFjaW5nXCIsIFwibGV0dGVyLXNwYWNpbmdcIl0sXG4gICAgW1wibGlnaHRpbmdDb2xvclwiLCBcImxpZ2h0aW5nLWNvbG9yXCJdLFxuICAgIFtcIm1hcmtlckVuZFwiLCBcIm1hcmtlci1lbmRcIl0sXG4gICAgW1wibWFya2VyTWlkXCIsIFwibWFya2VyLW1pZFwiXSxcbiAgICBbXCJtYXJrZXJTdGFydFwiLCBcIm1hcmtlci1zdGFydFwiXSxcbiAgICBbXCJvdmVybGluZVBvc2l0aW9uXCIsIFwib3ZlcmxpbmUtcG9zaXRpb25cIl0sXG4gICAgW1wib3ZlcmxpbmVUaGlja25lc3NcIiwgXCJvdmVybGluZS10aGlja25lc3NcIl0sXG4gICAgW1wicGFpbnRPcmRlclwiLCBcInBhaW50LW9yZGVyXCJdLFxuICAgIFtcInBhbm9zZS0xXCIsIFwicGFub3NlLTFcIl0sXG4gICAgW1wicG9pbnRlckV2ZW50c1wiLCBcInBvaW50ZXItZXZlbnRzXCJdLFxuICAgIFtcInJlbmRlcmluZ0ludGVudFwiLCBcInJlbmRlcmluZy1pbnRlbnRcIl0sXG4gICAgW1wic2hhcGVSZW5kZXJpbmdcIiwgXCJzaGFwZS1yZW5kZXJpbmdcIl0sXG4gICAgW1wic3RvcENvbG9yXCIsIFwic3RvcC1jb2xvclwiXSxcbiAgICBbXCJzdG9wT3BhY2l0eVwiLCBcInN0b3Atb3BhY2l0eVwiXSxcbiAgICBbXCJzdHJpa2V0aHJvdWdoUG9zaXRpb25cIiwgXCJzdHJpa2V0aHJvdWdoLXBvc2l0aW9uXCJdLFxuICAgIFtcInN0cmlrZXRocm91Z2hUaGlja25lc3NcIiwgXCJzdHJpa2V0aHJvdWdoLXRoaWNrbmVzc1wiXSxcbiAgICBbXCJzdHJva2VEYXNoYXJyYXlcIiwgXCJzdHJva2UtZGFzaGFycmF5XCJdLFxuICAgIFtcInN0cm9rZURhc2hvZmZzZXRcIiwgXCJzdHJva2UtZGFzaG9mZnNldFwiXSxcbiAgICBbXCJzdHJva2VMaW5lY2FwXCIsIFwic3Ryb2tlLWxpbmVjYXBcIl0sXG4gICAgW1wic3Ryb2tlTGluZWpvaW5cIiwgXCJzdHJva2UtbGluZWpvaW5cIl0sXG4gICAgW1wic3Ryb2tlTWl0ZXJsaW1pdFwiLCBcInN0cm9rZS1taXRlcmxpbWl0XCJdLFxuICAgIFtcInN0cm9rZU9wYWNpdHlcIiwgXCJzdHJva2Utb3BhY2l0eVwiXSxcbiAgICBbXCJzdHJva2VXaWR0aFwiLCBcInN0cm9rZS13aWR0aFwiXSxcbiAgICBbXCJ0ZXh0QW5jaG9yXCIsIFwidGV4dC1hbmNob3JcIl0sXG4gICAgW1widGV4dERlY29yYXRpb25cIiwgXCJ0ZXh0LWRlY29yYXRpb25cIl0sXG4gICAgW1widGV4dFJlbmRlcmluZ1wiLCBcInRleHQtcmVuZGVyaW5nXCJdLFxuICAgIFtcInRyYW5zZm9ybU9yaWdpblwiLCBcInRyYW5zZm9ybS1vcmlnaW5cIl0sXG4gICAgW1widW5kZXJsaW5lUG9zaXRpb25cIiwgXCJ1bmRlcmxpbmUtcG9zaXRpb25cIl0sXG4gICAgW1widW5kZXJsaW5lVGhpY2tuZXNzXCIsIFwidW5kZXJsaW5lLXRoaWNrbmVzc1wiXSxcbiAgICBbXCJ1bmljb2RlQmlkaVwiLCBcInVuaWNvZGUtYmlkaVwiXSxcbiAgICBbXCJ1bmljb2RlUmFuZ2VcIiwgXCJ1bmljb2RlLXJhbmdlXCJdLFxuICAgIFtcInVuaXRzUGVyRW1cIiwgXCJ1bml0cy1wZXItZW1cIl0sXG4gICAgW1widkFscGhhYmV0aWNcIiwgXCJ2LWFscGhhYmV0aWNcIl0sXG4gICAgW1widkhhbmdpbmdcIiwgXCJ2LWhhbmdpbmdcIl0sXG4gICAgW1widklkZW9ncmFwaGljXCIsIFwidi1pZGVvZ3JhcGhpY1wiXSxcbiAgICBbXCJ2TWF0aGVtYXRpY2FsXCIsIFwidi1tYXRoZW1hdGljYWxcIl0sXG4gICAgW1widmVjdG9yRWZmZWN0XCIsIFwidmVjdG9yLWVmZmVjdFwiXSxcbiAgICBbXCJ2ZXJ0QWR2WVwiLCBcInZlcnQtYWR2LXlcIl0sXG4gICAgW1widmVydE9yaWdpblhcIiwgXCJ2ZXJ0LW9yaWdpbi14XCJdLFxuICAgIFtcInZlcnRPcmlnaW5ZXCIsIFwidmVydC1vcmlnaW4teVwiXSxcbiAgICBbXCJ3b3JkU3BhY2luZ1wiLCBcIndvcmQtc3BhY2luZ1wiXSxcbiAgICBbXCJ3cml0aW5nTW9kZVwiLCBcIndyaXRpbmctbW9kZVwiXSxcbiAgICBbXCJ4bWxuc1hsaW5rXCIsIFwieG1sbnM6eGxpbmtcIl0sXG4gICAgW1wieEhlaWdodFwiLCBcIngtaGVpZ2h0XCJdXG4gIF0pLFxuICBpc0phdmFTY3JpcHRQcm90b2NvbCA9XG4gICAgL15bXFx1MDAwMC1cXHUwMDFGIF0qaltcXHJcXG5cXHRdKmFbXFxyXFxuXFx0XSp2W1xcclxcblxcdF0qYVtcXHJcXG5cXHRdKnNbXFxyXFxuXFx0XSpjW1xcclxcblxcdF0qcltcXHJcXG5cXHRdKmlbXFxyXFxuXFx0XSpwW1xcclxcblxcdF0qdFtcXHJcXG5cXHRdKjovaTtcbmZ1bmN0aW9uIHNhbml0aXplVVJMKHVybCkge1xuICByZXR1cm4gaXNKYXZhU2NyaXB0UHJvdG9jb2wudGVzdChcIlwiICsgdXJsKVxuICAgID8gXCJqYXZhc2NyaXB0OnRocm93IG5ldyBFcnJvcignUmVhY3QgaGFzIGJsb2NrZWQgYSBqYXZhc2NyaXB0OiBVUkwgYXMgYSBzZWN1cml0eSBwcmVjYXV0aW9uLicpXCJcbiAgICA6IHVybDtcbn1cbnZhciBjdXJyZW50UmVwbGF5aW5nRXZlbnQgPSBudWxsO1xuZnVuY3Rpb24gZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpIHtcbiAgbmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudC50YXJnZXQgfHwgbmF0aXZlRXZlbnQuc3JjRWxlbWVudCB8fCB3aW5kb3c7XG4gIG5hdGl2ZUV2ZW50LmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50ICYmXG4gICAgKG5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO1xuICByZXR1cm4gMyA9PT0gbmF0aXZlRXZlbnQubm9kZVR5cGUgPyBuYXRpdmVFdmVudC5wYXJlbnROb2RlIDogbmF0aXZlRXZlbnQ7XG59XG52YXIgcmVzdG9yZVRhcmdldCA9IG51bGwsXG4gIHJlc3RvcmVRdWV1ZSA9IG51bGw7XG5mdW5jdGlvbiByZXN0b3JlU3RhdGVPZlRhcmdldCh0YXJnZXQpIHtcbiAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnN0YW5jZUZyb21Ob2RlKHRhcmdldCk7XG4gIGlmIChpbnRlcm5hbEluc3RhbmNlICYmICh0YXJnZXQgPSBpbnRlcm5hbEluc3RhbmNlLnN0YXRlTm9kZSkpIHtcbiAgICB2YXIgcHJvcHMgPSB0YXJnZXRbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbDtcbiAgICBhOiBzd2l0Y2ggKCgodGFyZ2V0ID0gaW50ZXJuYWxJbnN0YW5jZS5zdGF0ZU5vZGUpLCBpbnRlcm5hbEluc3RhbmNlLnR5cGUpKSB7XG4gICAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgICAgdXBkYXRlSW5wdXQoXG4gICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgIHByb3BzLnZhbHVlLFxuICAgICAgICAgIHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgICAgcHJvcHMuY2hlY2tlZCxcbiAgICAgICAgICBwcm9wcy5kZWZhdWx0Q2hlY2tlZCxcbiAgICAgICAgICBwcm9wcy50eXBlLFxuICAgICAgICAgIHByb3BzLm5hbWVcbiAgICAgICAgKTtcbiAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSA9IHByb3BzLm5hbWU7XG4gICAgICAgIGlmIChcInJhZGlvXCIgPT09IHByb3BzLnR5cGUgJiYgbnVsbCAhPSBpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICAgICAgZm9yIChwcm9wcyA9IHRhcmdldDsgcHJvcHMucGFyZW50Tm9kZTsgKSBwcm9wcyA9IHByb3BzLnBhcmVudE5vZGU7XG4gICAgICAgICAgcHJvcHMgPSBwcm9wcy5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAgICAgJ2lucHV0W25hbWU9XCInICtcbiAgICAgICAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhcbiAgICAgICAgICAgICAgICBcIlwiICsgaW50ZXJuYWxJbnN0YW5jZVxuICAgICAgICAgICAgICApICtcbiAgICAgICAgICAgICAgJ1wiXVt0eXBlPVwicmFkaW9cIl0nXG4gICAgICAgICAgKTtcbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSA9IDA7XG4gICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlIDwgcHJvcHMubGVuZ3RoO1xuICAgICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZSsrXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXJOb2RlID0gcHJvcHNbaW50ZXJuYWxJbnN0YW5jZV07XG4gICAgICAgICAgICBpZiAob3RoZXJOb2RlICE9PSB0YXJnZXQgJiYgb3RoZXJOb2RlLmZvcm0gPT09IHRhcmdldC5mb3JtKSB7XG4gICAgICAgICAgICAgIHZhciBvdGhlclByb3BzID0gb3RoZXJOb2RlW2ludGVybmFsUHJvcHNLZXldIHx8IG51bGw7XG4gICAgICAgICAgICAgIGlmICghb3RoZXJQcm9wcykgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5MCkpO1xuICAgICAgICAgICAgICB1cGRhdGVJbnB1dChcbiAgICAgICAgICAgICAgICBvdGhlck5vZGUsXG4gICAgICAgICAgICAgICAgb3RoZXJQcm9wcy52YWx1ZSxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLmNoZWNrZWQsXG4gICAgICAgICAgICAgICAgb3RoZXJQcm9wcy5kZWZhdWx0Q2hlY2tlZCxcbiAgICAgICAgICAgICAgICBvdGhlclByb3BzLnR5cGUsXG4gICAgICAgICAgICAgICAgb3RoZXJQcm9wcy5uYW1lXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlID0gMDtcbiAgICAgICAgICAgIGludGVybmFsSW5zdGFuY2UgPCBwcm9wcy5sZW5ndGg7XG4gICAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlKytcbiAgICAgICAgICApXG4gICAgICAgICAgICAob3RoZXJOb2RlID0gcHJvcHNbaW50ZXJuYWxJbnN0YW5jZV0pLFxuICAgICAgICAgICAgICBvdGhlck5vZGUuZm9ybSA9PT0gdGFyZ2V0LmZvcm0gJiYgdXBkYXRlVmFsdWVJZkNoYW5nZWQob3RoZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhayBhO1xuICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgIHVwZGF0ZVRleHRhcmVhKHRhcmdldCwgcHJvcHMudmFsdWUsIHByb3BzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIGJyZWFrIGE7XG4gICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgIChpbnRlcm5hbEluc3RhbmNlID0gcHJvcHMudmFsdWUpLFxuICAgICAgICAgIG51bGwgIT0gaW50ZXJuYWxJbnN0YW5jZSAmJlxuICAgICAgICAgICAgdXBkYXRlT3B0aW9ucyh0YXJnZXQsICEhcHJvcHMubXVsdGlwbGUsIGludGVybmFsSW5zdGFuY2UsICExKTtcbiAgICB9XG4gIH1cbn1cbnZhciBpc0luc2lkZUV2ZW50SGFuZGxlciA9ICExO1xuZnVuY3Rpb24gYmF0Y2hlZFVwZGF0ZXMkMShmbiwgYSwgYikge1xuICBpZiAoaXNJbnNpZGVFdmVudEhhbmRsZXIpIHJldHVybiBmbihhLCBiKTtcbiAgaXNJbnNpZGVFdmVudEhhbmRsZXIgPSAhMDtcbiAgdHJ5IHtcbiAgICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gZm4oYSk7XG4gICAgcmV0dXJuIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAoXG4gICAgICAoKGlzSW5zaWRlRXZlbnRIYW5kbGVyID0gITEpLFxuICAgICAgbnVsbCAhPT0gcmVzdG9yZVRhcmdldCB8fCBudWxsICE9PSByZXN0b3JlUXVldWUpXG4gICAgKVxuICAgICAgaWYgKFxuICAgICAgICAoZmx1c2hTeW5jV29yayQxKCksXG4gICAgICAgIHJlc3RvcmVUYXJnZXQgJiZcbiAgICAgICAgICAoKGEgPSByZXN0b3JlVGFyZ2V0KSxcbiAgICAgICAgICAoZm4gPSByZXN0b3JlUXVldWUpLFxuICAgICAgICAgIChyZXN0b3JlUXVldWUgPSByZXN0b3JlVGFyZ2V0ID0gbnVsbCksXG4gICAgICAgICAgcmVzdG9yZVN0YXRlT2ZUYXJnZXQoYSksXG4gICAgICAgICAgZm4pKVxuICAgICAgKVxuICAgICAgICBmb3IgKGEgPSAwOyBhIDwgZm4ubGVuZ3RoOyBhKyspIHJlc3RvcmVTdGF0ZU9mVGFyZ2V0KGZuW2FdKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0TGlzdGVuZXIoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSkge1xuICB2YXIgc3RhdGVOb2RlID0gaW5zdC5zdGF0ZU5vZGU7XG4gIGlmIChudWxsID09PSBzdGF0ZU5vZGUpIHJldHVybiBudWxsO1xuICB2YXIgcHJvcHMgPSBzdGF0ZU5vZGVbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbDtcbiAgaWYgKG51bGwgPT09IHByb3BzKSByZXR1cm4gbnVsbDtcbiAgc3RhdGVOb2RlID0gcHJvcHNbcmVnaXN0cmF0aW9uTmFtZV07XG4gIGE6IHN3aXRjaCAocmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIGNhc2UgXCJvbkNsaWNrXCI6XG4gICAgY2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6XG4gICAgY2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpcbiAgICBjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpcbiAgICBjYXNlIFwib25Nb3VzZURvd25cIjpcbiAgICBjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6XG4gICAgY2FzZSBcIm9uTW91c2VNb3ZlXCI6XG4gICAgY2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOlxuICAgIGNhc2UgXCJvbk1vdXNlVXBcIjpcbiAgICBjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOlxuICAgIGNhc2UgXCJvbk1vdXNlRW50ZXJcIjpcbiAgICAgIChwcm9wcyA9ICFwcm9wcy5kaXNhYmxlZCkgfHxcbiAgICAgICAgKChpbnN0ID0gaW5zdC50eXBlKSxcbiAgICAgICAgKHByb3BzID0gIShcbiAgICAgICAgICBcImJ1dHRvblwiID09PSBpbnN0IHx8XG4gICAgICAgICAgXCJpbnB1dFwiID09PSBpbnN0IHx8XG4gICAgICAgICAgXCJzZWxlY3RcIiA9PT0gaW5zdCB8fFxuICAgICAgICAgIFwidGV4dGFyZWFcIiA9PT0gaW5zdFxuICAgICAgICApKSk7XG4gICAgICBpbnN0ID0gIXByb3BzO1xuICAgICAgYnJlYWsgYTtcbiAgICBkZWZhdWx0OlxuICAgICAgaW5zdCA9ICExO1xuICB9XG4gIGlmIChpbnN0KSByZXR1cm4gbnVsbDtcbiAgaWYgKHN0YXRlTm9kZSAmJiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBzdGF0ZU5vZGUpXG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIzMSwgcmVnaXN0cmF0aW9uTmFtZSwgdHlwZW9mIHN0YXRlTm9kZSlcbiAgICApO1xuICByZXR1cm4gc3RhdGVOb2RlO1xufVxudmFyIHBhc3NpdmVCcm93c2VyRXZlbnRzU3VwcG9ydGVkID0gITE7XG5pZiAoY2FuVXNlRE9NKVxuICB0cnkge1xuICAgIHZhciBvcHRpb25zID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdGlvbnMsIFwicGFzc2l2ZVwiLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQgPSAhMDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIiwgb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsIG9wdGlvbnMsIG9wdGlvbnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQgPSAhMTtcbiAgfVxudmFyIHJvb3QgPSBudWxsLFxuICBzdGFydFRleHQgPSBudWxsLFxuICBmYWxsYmFja1RleHQgPSBudWxsO1xuZnVuY3Rpb24gZ2V0RGF0YSgpIHtcbiAgaWYgKGZhbGxiYWNrVGV4dCkgcmV0dXJuIGZhbGxiYWNrVGV4dDtcbiAgdmFyIHN0YXJ0LFxuICAgIHN0YXJ0VmFsdWUgPSBzdGFydFRleHQsXG4gICAgc3RhcnRMZW5ndGggPSBzdGFydFZhbHVlLmxlbmd0aCxcbiAgICBlbmQsXG4gICAgZW5kVmFsdWUgPSBcInZhbHVlXCIgaW4gcm9vdCA/IHJvb3QudmFsdWUgOiByb290LnRleHRDb250ZW50LFxuICAgIGVuZExlbmd0aCA9IGVuZFZhbHVlLmxlbmd0aDtcbiAgZm9yIChcbiAgICBzdGFydCA9IDA7XG4gICAgc3RhcnQgPCBzdGFydExlbmd0aCAmJiBzdGFydFZhbHVlW3N0YXJ0XSA9PT0gZW5kVmFsdWVbc3RhcnRdO1xuICAgIHN0YXJ0KytcbiAgKTtcbiAgdmFyIG1pbkVuZCA9IHN0YXJ0TGVuZ3RoIC0gc3RhcnQ7XG4gIGZvciAoXG4gICAgZW5kID0gMTtcbiAgICBlbmQgPD0gbWluRW5kICYmXG4gICAgc3RhcnRWYWx1ZVtzdGFydExlbmd0aCAtIGVuZF0gPT09IGVuZFZhbHVlW2VuZExlbmd0aCAtIGVuZF07XG4gICAgZW5kKytcbiAgKTtcbiAgcmV0dXJuIChmYWxsYmFja1RleHQgPSBlbmRWYWx1ZS5zbGljZShzdGFydCwgMSA8IGVuZCA/IDEgLSBlbmQgOiB2b2lkIDApKTtcbn1cbmZ1bmN0aW9uIGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpIHtcbiAgdmFyIGtleUNvZGUgPSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuICBcImNoYXJDb2RlXCIgaW4gbmF0aXZlRXZlbnRcbiAgICA/ICgobmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudC5jaGFyQ29kZSksXG4gICAgICAwID09PSBuYXRpdmVFdmVudCAmJiAxMyA9PT0ga2V5Q29kZSAmJiAobmF0aXZlRXZlbnQgPSAxMykpXG4gICAgOiAobmF0aXZlRXZlbnQgPSBrZXlDb2RlKTtcbiAgMTAgPT09IG5hdGl2ZUV2ZW50ICYmIChuYXRpdmVFdmVudCA9IDEzKTtcbiAgcmV0dXJuIDMyIDw9IG5hdGl2ZUV2ZW50IHx8IDEzID09PSBuYXRpdmVFdmVudCA/IG5hdGl2ZUV2ZW50IDogMDtcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uVGhhdFJldHVybnNUcnVlKCkge1xuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2UoKSB7XG4gIHJldHVybiAhMTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEludGVyZmFjZSkge1xuICBmdW5jdGlvbiBTeW50aGV0aWNCYXNlRXZlbnQoXG4gICAgcmVhY3ROYW1lLFxuICAgIHJlYWN0RXZlbnRUeXBlLFxuICAgIHRhcmdldEluc3QsXG4gICAgbmF0aXZlRXZlbnQsXG4gICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgKSB7XG4gICAgdGhpcy5fcmVhY3ROYW1lID0gcmVhY3ROYW1lO1xuICAgIHRoaXMuX3RhcmdldEluc3QgPSB0YXJnZXRJbnN0O1xuICAgIHRoaXMudHlwZSA9IHJlYWN0RXZlbnRUeXBlO1xuICAgIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcbiAgICB0aGlzLnRhcmdldCA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuICAgIHRoaXMuY3VycmVudFRhcmdldCA9IG51bGw7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gSW50ZXJmYWNlKVxuICAgICAgSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSAmJlxuICAgICAgICAoKHJlYWN0TmFtZSA9IEludGVyZmFjZVtwcm9wTmFtZV0pLFxuICAgICAgICAodGhpc1twcm9wTmFtZV0gPSByZWFjdE5hbWVcbiAgICAgICAgICA/IHJlYWN0TmFtZShuYXRpdmVFdmVudClcbiAgICAgICAgICA6IG5hdGl2ZUV2ZW50W3Byb3BOYW1lXSkpO1xuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gKFxuICAgICAgbnVsbCAhPSBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkXG4gICAgICAgID8gbmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZFxuICAgICAgICA6ICExID09PSBuYXRpdmVFdmVudC5yZXR1cm5WYWx1ZVxuICAgIClcbiAgICAgID8gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWVcbiAgICAgIDogZnVuY3Rpb25UaGF0UmV0dXJuc0ZhbHNlO1xuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgYXNzaWduKFN5bnRoZXRpY0Jhc2VFdmVudC5wcm90b3R5cGUsIHtcbiAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gITA7XG4gICAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgICAgZXZlbnQgJiZcbiAgICAgICAgKGV2ZW50LnByZXZlbnREZWZhdWx0XG4gICAgICAgICAgPyBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgOiBcInVua25vd25cIiAhPT0gdHlwZW9mIGV2ZW50LnJldHVyblZhbHVlICYmIChldmVudC5yZXR1cm5WYWx1ZSA9ICExKSxcbiAgICAgICAgKHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWUpKTtcbiAgICB9LFxuICAgIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGV2ZW50ID0gdGhpcy5uYXRpdmVFdmVudDtcbiAgICAgIGV2ZW50ICYmXG4gICAgICAgIChldmVudC5zdG9wUHJvcGFnYXRpb25cbiAgICAgICAgICA/IGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgICAgOiBcInVua25vd25cIiAhPT0gdHlwZW9mIGV2ZW50LmNhbmNlbEJ1YmJsZSAmJlxuICAgICAgICAgICAgKGV2ZW50LmNhbmNlbEJ1YmJsZSA9ICEwKSxcbiAgICAgICAgKHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZSkpO1xuICAgIH0sXG4gICAgcGVyc2lzdDogZnVuY3Rpb24gKCkge30sXG4gICAgaXNQZXJzaXN0ZW50OiBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZVxuICB9KTtcbiAgcmV0dXJuIFN5bnRoZXRpY0Jhc2VFdmVudDtcbn1cbnZhciBFdmVudEludGVyZmFjZSA9IHtcbiAgICBldmVudFBoYXNlOiAwLFxuICAgIGJ1YmJsZXM6IDAsXG4gICAgY2FuY2VsYWJsZTogMCxcbiAgICB0aW1lU3RhbXA6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIGV2ZW50LnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuICAgIH0sXG4gICAgZGVmYXVsdFByZXZlbnRlZDogMCxcbiAgICBpc1RydXN0ZWQ6IDBcbiAgfSxcbiAgU3ludGhldGljRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChFdmVudEludGVyZmFjZSksXG4gIFVJRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7IHZpZXc6IDAsIGRldGFpbDogMCB9KSxcbiAgU3ludGhldGljVUlFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFVJRXZlbnRJbnRlcmZhY2UpLFxuICBsYXN0TW92ZW1lbnRYLFxuICBsYXN0TW92ZW1lbnRZLFxuICBsYXN0TW91c2VFdmVudCxcbiAgTW91c2VFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgVUlFdmVudEludGVyZmFjZSwge1xuICAgIHNjcmVlblg6IDAsXG4gICAgc2NyZWVuWTogMCxcbiAgICBjbGllbnRYOiAwLFxuICAgIGNsaWVudFk6IDAsXG4gICAgcGFnZVg6IDAsXG4gICAgcGFnZVk6IDAsXG4gICAgY3RybEtleTogMCxcbiAgICBzaGlmdEtleTogMCxcbiAgICBhbHRLZXk6IDAsXG4gICAgbWV0YUtleTogMCxcbiAgICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gICAgYnV0dG9uOiAwLFxuICAgIGJ1dHRvbnM6IDAsXG4gICAgcmVsYXRlZFRhcmdldDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gdm9pZCAwID09PSBldmVudC5yZWxhdGVkVGFyZ2V0XG4gICAgICAgID8gZXZlbnQuZnJvbUVsZW1lbnQgPT09IGV2ZW50LnNyY0VsZW1lbnRcbiAgICAgICAgICA/IGV2ZW50LnRvRWxlbWVudFxuICAgICAgICAgIDogZXZlbnQuZnJvbUVsZW1lbnRcbiAgICAgICAgOiBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIH0sXG4gICAgbW92ZW1lbnRYOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChcIm1vdmVtZW50WFwiIGluIGV2ZW50KSByZXR1cm4gZXZlbnQubW92ZW1lbnRYO1xuICAgICAgZXZlbnQgIT09IGxhc3RNb3VzZUV2ZW50ICYmXG4gICAgICAgIChsYXN0TW91c2VFdmVudCAmJiBcIm1vdXNlbW92ZVwiID09PSBldmVudC50eXBlXG4gICAgICAgICAgPyAoKGxhc3RNb3ZlbWVudFggPSBldmVudC5zY3JlZW5YIC0gbGFzdE1vdXNlRXZlbnQuc2NyZWVuWCksXG4gICAgICAgICAgICAobGFzdE1vdmVtZW50WSA9IGV2ZW50LnNjcmVlblkgLSBsYXN0TW91c2VFdmVudC5zY3JlZW5ZKSlcbiAgICAgICAgICA6IChsYXN0TW92ZW1lbnRZID0gbGFzdE1vdmVtZW50WCA9IDApLFxuICAgICAgICAobGFzdE1vdXNlRXZlbnQgPSBldmVudCkpO1xuICAgICAgcmV0dXJuIGxhc3RNb3ZlbWVudFg7XG4gICAgfSxcbiAgICBtb3ZlbWVudFk6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIFwibW92ZW1lbnRZXCIgaW4gZXZlbnQgPyBldmVudC5tb3ZlbWVudFkgOiBsYXN0TW92ZW1lbnRZO1xuICAgIH1cbiAgfSksXG4gIFN5bnRoZXRpY01vdXNlRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChNb3VzZUV2ZW50SW50ZXJmYWNlKSxcbiAgRHJhZ0V2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBNb3VzZUV2ZW50SW50ZXJmYWNlLCB7IGRhdGFUcmFuc2ZlcjogMCB9KSxcbiAgU3ludGhldGljRHJhZ0V2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoRHJhZ0V2ZW50SW50ZXJmYWNlKSxcbiAgRm9jdXNFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgVUlFdmVudEludGVyZmFjZSwgeyByZWxhdGVkVGFyZ2V0OiAwIH0pLFxuICBTeW50aGV0aWNGb2N1c0V2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoRm9jdXNFdmVudEludGVyZmFjZSksXG4gIEFuaW1hdGlvbkV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBFdmVudEludGVyZmFjZSwge1xuICAgIGFuaW1hdGlvbk5hbWU6IDAsXG4gICAgZWxhcHNlZFRpbWU6IDAsXG4gICAgcHNldWRvRWxlbWVudDogMFxuICB9KSxcbiAgU3ludGhldGljQW5pbWF0aW9uRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChBbmltYXRpb25FdmVudEludGVyZmFjZSksXG4gIENsaXBib2FyZEV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBFdmVudEludGVyZmFjZSwge1xuICAgIGNsaXBib2FyZERhdGE6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIFwiY2xpcGJvYXJkRGF0YVwiIGluIGV2ZW50XG4gICAgICAgID8gZXZlbnQuY2xpcGJvYXJkRGF0YVxuICAgICAgICA6IHdpbmRvdy5jbGlwYm9hcmREYXRhO1xuICAgIH1cbiAgfSksXG4gIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UpLFxuICBDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBFdmVudEludGVyZmFjZSwgeyBkYXRhOiAwIH0pLFxuICBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSksXG4gIG5vcm1hbGl6ZUtleSA9IHtcbiAgICBFc2M6IFwiRXNjYXBlXCIsXG4gICAgU3BhY2ViYXI6IFwiIFwiLFxuICAgIExlZnQ6IFwiQXJyb3dMZWZ0XCIsXG4gICAgVXA6IFwiQXJyb3dVcFwiLFxuICAgIFJpZ2h0OiBcIkFycm93UmlnaHRcIixcbiAgICBEb3duOiBcIkFycm93RG93blwiLFxuICAgIERlbDogXCJEZWxldGVcIixcbiAgICBXaW46IFwiT1NcIixcbiAgICBNZW51OiBcIkNvbnRleHRNZW51XCIsXG4gICAgQXBwczogXCJDb250ZXh0TWVudVwiLFxuICAgIFNjcm9sbDogXCJTY3JvbGxMb2NrXCIsXG4gICAgTW96UHJpbnRhYmxlS2V5OiBcIlVuaWRlbnRpZmllZFwiXG4gIH0sXG4gIHRyYW5zbGF0ZVRvS2V5ID0ge1xuICAgIDg6IFwiQmFja3NwYWNlXCIsXG4gICAgOTogXCJUYWJcIixcbiAgICAxMjogXCJDbGVhclwiLFxuICAgIDEzOiBcIkVudGVyXCIsXG4gICAgMTY6IFwiU2hpZnRcIixcbiAgICAxNzogXCJDb250cm9sXCIsXG4gICAgMTg6IFwiQWx0XCIsXG4gICAgMTk6IFwiUGF1c2VcIixcbiAgICAyMDogXCJDYXBzTG9ja1wiLFxuICAgIDI3OiBcIkVzY2FwZVwiLFxuICAgIDMyOiBcIiBcIixcbiAgICAzMzogXCJQYWdlVXBcIixcbiAgICAzNDogXCJQYWdlRG93blwiLFxuICAgIDM1OiBcIkVuZFwiLFxuICAgIDM2OiBcIkhvbWVcIixcbiAgICAzNzogXCJBcnJvd0xlZnRcIixcbiAgICAzODogXCJBcnJvd1VwXCIsXG4gICAgMzk6IFwiQXJyb3dSaWdodFwiLFxuICAgIDQwOiBcIkFycm93RG93blwiLFxuICAgIDQ1OiBcIkluc2VydFwiLFxuICAgIDQ2OiBcIkRlbGV0ZVwiLFxuICAgIDExMjogXCJGMVwiLFxuICAgIDExMzogXCJGMlwiLFxuICAgIDExNDogXCJGM1wiLFxuICAgIDExNTogXCJGNFwiLFxuICAgIDExNjogXCJGNVwiLFxuICAgIDExNzogXCJGNlwiLFxuICAgIDExODogXCJGN1wiLFxuICAgIDExOTogXCJGOFwiLFxuICAgIDEyMDogXCJGOVwiLFxuICAgIDEyMTogXCJGMTBcIixcbiAgICAxMjI6IFwiRjExXCIsXG4gICAgMTIzOiBcIkYxMlwiLFxuICAgIDE0NDogXCJOdW1Mb2NrXCIsXG4gICAgMTQ1OiBcIlNjcm9sbExvY2tcIixcbiAgICAyMjQ6IFwiTWV0YVwiXG4gIH0sXG4gIG1vZGlmaWVyS2V5VG9Qcm9wID0ge1xuICAgIEFsdDogXCJhbHRLZXlcIixcbiAgICBDb250cm9sOiBcImN0cmxLZXlcIixcbiAgICBNZXRhOiBcIm1ldGFLZXlcIixcbiAgICBTaGlmdDogXCJzaGlmdEtleVwiXG4gIH07XG5mdW5jdGlvbiBtb2RpZmllclN0YXRlR2V0dGVyKGtleUFyZykge1xuICB2YXIgbmF0aXZlRXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICByZXR1cm4gbmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZVxuICAgID8gbmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZShrZXlBcmcpXG4gICAgOiAoa2V5QXJnID0gbW9kaWZpZXJLZXlUb1Byb3Bba2V5QXJnXSlcbiAgICAgID8gISFuYXRpdmVFdmVudFtrZXlBcmddXG4gICAgICA6ICExO1xufVxuZnVuY3Rpb24gZ2V0RXZlbnRNb2RpZmllclN0YXRlKCkge1xuICByZXR1cm4gbW9kaWZpZXJTdGF0ZUdldHRlcjtcbn1cbnZhciBLZXlib2FyZEV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBVSUV2ZW50SW50ZXJmYWNlLCB7XG4gICAga2V5OiBmdW5jdGlvbiAobmF0aXZlRXZlbnQpIHtcbiAgICAgIGlmIChuYXRpdmVFdmVudC5rZXkpIHtcbiAgICAgICAgdmFyIGtleSA9IG5vcm1hbGl6ZUtleVtuYXRpdmVFdmVudC5rZXldIHx8IG5hdGl2ZUV2ZW50LmtleTtcbiAgICAgICAgaWYgKFwiVW5pZGVudGlmaWVkXCIgIT09IGtleSkgcmV0dXJuIGtleTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBcImtleXByZXNzXCIgPT09IG5hdGl2ZUV2ZW50LnR5cGVcbiAgICAgICAgPyAoKG5hdGl2ZUV2ZW50ID0gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkpLFxuICAgICAgICAgIDEzID09PSBuYXRpdmVFdmVudCA/IFwiRW50ZXJcIiA6IFN0cmluZy5mcm9tQ2hhckNvZGUobmF0aXZlRXZlbnQpKVxuICAgICAgICA6IFwia2V5ZG93blwiID09PSBuYXRpdmVFdmVudC50eXBlIHx8IFwia2V5dXBcIiA9PT0gbmF0aXZlRXZlbnQudHlwZVxuICAgICAgICAgID8gdHJhbnNsYXRlVG9LZXlbbmF0aXZlRXZlbnQua2V5Q29kZV0gfHwgXCJVbmlkZW50aWZpZWRcIlxuICAgICAgICAgIDogXCJcIjtcbiAgICB9LFxuICAgIGNvZGU6IDAsXG4gICAgbG9jYXRpb246IDAsXG4gICAgY3RybEtleTogMCxcbiAgICBzaGlmdEtleTogMCxcbiAgICBhbHRLZXk6IDAsXG4gICAgbWV0YUtleTogMCxcbiAgICByZXBlYXQ6IDAsXG4gICAgbG9jYWxlOiAwLFxuICAgIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgICBjaGFyQ29kZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJrZXlwcmVzc1wiID09PSBldmVudC50eXBlID8gZ2V0RXZlbnRDaGFyQ29kZShldmVudCkgOiAwO1xuICAgIH0sXG4gICAga2V5Q29kZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJrZXlkb3duXCIgPT09IGV2ZW50LnR5cGUgfHwgXCJrZXl1cFwiID09PSBldmVudC50eXBlXG4gICAgICAgID8gZXZlbnQua2V5Q29kZVxuICAgICAgICA6IDA7XG4gICAgfSxcbiAgICB3aGljaDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICByZXR1cm4gXCJrZXlwcmVzc1wiID09PSBldmVudC50eXBlXG4gICAgICAgID8gZ2V0RXZlbnRDaGFyQ29kZShldmVudClcbiAgICAgICAgOiBcImtleWRvd25cIiA9PT0gZXZlbnQudHlwZSB8fCBcImtleXVwXCIgPT09IGV2ZW50LnR5cGVcbiAgICAgICAgICA/IGV2ZW50LmtleUNvZGVcbiAgICAgICAgICA6IDA7XG4gICAgfVxuICB9KSxcbiAgU3ludGhldGljS2V5Ym9hcmRFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEtleWJvYXJkRXZlbnRJbnRlcmZhY2UpLFxuICBQb2ludGVyRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIE1vdXNlRXZlbnRJbnRlcmZhY2UsIHtcbiAgICBwb2ludGVySWQ6IDAsXG4gICAgd2lkdGg6IDAsXG4gICAgaGVpZ2h0OiAwLFxuICAgIHByZXNzdXJlOiAwLFxuICAgIHRhbmdlbnRpYWxQcmVzc3VyZTogMCxcbiAgICB0aWx0WDogMCxcbiAgICB0aWx0WTogMCxcbiAgICB0d2lzdDogMCxcbiAgICBwb2ludGVyVHlwZTogMCxcbiAgICBpc1ByaW1hcnk6IDBcbiAgfSksXG4gIFN5bnRoZXRpY1BvaW50ZXJFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFBvaW50ZXJFdmVudEludGVyZmFjZSksXG4gIFRvdWNoRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIFVJRXZlbnRJbnRlcmZhY2UsIHtcbiAgICB0b3VjaGVzOiAwLFxuICAgIHRhcmdldFRvdWNoZXM6IDAsXG4gICAgY2hhbmdlZFRvdWNoZXM6IDAsXG4gICAgYWx0S2V5OiAwLFxuICAgIG1ldGFLZXk6IDAsXG4gICAgY3RybEtleTogMCxcbiAgICBzaGlmdEtleTogMCxcbiAgICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGVcbiAgfSksXG4gIFN5bnRoZXRpY1RvdWNoRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChUb3VjaEV2ZW50SW50ZXJmYWNlKSxcbiAgVHJhbnNpdGlvbkV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBFdmVudEludGVyZmFjZSwge1xuICAgIHByb3BlcnR5TmFtZTogMCxcbiAgICBlbGFwc2VkVGltZTogMCxcbiAgICBwc2V1ZG9FbGVtZW50OiAwXG4gIH0pLFxuICBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChUcmFuc2l0aW9uRXZlbnRJbnRlcmZhY2UpLFxuICBXaGVlbEV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBNb3VzZUV2ZW50SW50ZXJmYWNlLCB7XG4gICAgZGVsdGFYOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJldHVybiBcImRlbHRhWFwiIGluIGV2ZW50XG4gICAgICAgID8gZXZlbnQuZGVsdGFYXG4gICAgICAgIDogXCJ3aGVlbERlbHRhWFwiIGluIGV2ZW50XG4gICAgICAgICAgPyAtZXZlbnQud2hlZWxEZWx0YVhcbiAgICAgICAgICA6IDA7XG4gICAgfSxcbiAgICBkZWx0YVk6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmV0dXJuIFwiZGVsdGFZXCIgaW4gZXZlbnRcbiAgICAgICAgPyBldmVudC5kZWx0YVlcbiAgICAgICAgOiBcIndoZWVsRGVsdGFZXCIgaW4gZXZlbnRcbiAgICAgICAgICA/IC1ldmVudC53aGVlbERlbHRhWVxuICAgICAgICAgIDogXCJ3aGVlbERlbHRhXCIgaW4gZXZlbnRcbiAgICAgICAgICAgID8gLWV2ZW50LndoZWVsRGVsdGFcbiAgICAgICAgICAgIDogMDtcbiAgICB9LFxuICAgIGRlbHRhWjogMCxcbiAgICBkZWx0YU1vZGU6IDBcbiAgfSksXG4gIFN5bnRoZXRpY1doZWVsRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChXaGVlbEV2ZW50SW50ZXJmYWNlKSxcbiAgVG9nZ2xlRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gICAgbmV3U3RhdGU6IDAsXG4gICAgb2xkU3RhdGU6IDBcbiAgfSksXG4gIFN5bnRoZXRpY1RvZ2dsZUV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoVG9nZ2xlRXZlbnRJbnRlcmZhY2UpLFxuICBFTkRfS0VZQ09ERVMgPSBbOSwgMTMsIDI3LCAzMl0sXG4gIGNhblVzZUNvbXBvc2l0aW9uRXZlbnQgPSBjYW5Vc2VET00gJiYgXCJDb21wb3NpdGlvbkV2ZW50XCIgaW4gd2luZG93LFxuICBkb2N1bWVudE1vZGUgPSBudWxsO1xuY2FuVXNlRE9NICYmXG4gIFwiZG9jdW1lbnRNb2RlXCIgaW4gZG9jdW1lbnQgJiZcbiAgKGRvY3VtZW50TW9kZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgY2FuVXNlVGV4dElucHV0RXZlbnQgPSBjYW5Vc2VET00gJiYgXCJUZXh0RXZlbnRcIiBpbiB3aW5kb3cgJiYgIWRvY3VtZW50TW9kZSxcbiAgdXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgPVxuICAgIGNhblVzZURPTSAmJlxuICAgICghY2FuVXNlQ29tcG9zaXRpb25FdmVudCB8fFxuICAgICAgKGRvY3VtZW50TW9kZSAmJiA4IDwgZG9jdW1lbnRNb2RlICYmIDExID49IGRvY3VtZW50TW9kZSkpLFxuICBTUEFDRUJBUl9DSEFSID0gU3RyaW5nLmZyb21DaGFyQ29kZSgzMiksXG4gIGhhc1NwYWNlS2V5cHJlc3MgPSAhMTtcbmZ1bmN0aW9uIGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSBcImtleXVwXCI6XG4gICAgICByZXR1cm4gLTEgIT09IEVORF9LRVlDT0RFUy5pbmRleE9mKG5hdGl2ZUV2ZW50LmtleUNvZGUpO1xuICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgICByZXR1cm4gMjI5ICE9PSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcbiAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICAgIHJldHVybiAhMDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICExO1xuICB9XG59XG5mdW5jdGlvbiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIG5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQuZGV0YWlsO1xuICByZXR1cm4gXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5hdGl2ZUV2ZW50ICYmIFwiZGF0YVwiIGluIG5hdGl2ZUV2ZW50XG4gICAgPyBuYXRpdmVFdmVudC5kYXRhXG4gICAgOiBudWxsO1xufVxudmFyIGlzQ29tcG9zaW5nID0gITE7XG5mdW5jdGlvbiBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpcbiAgICAgIHJldHVybiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBjYXNlIFwia2V5cHJlc3NcIjpcbiAgICAgIGlmICgzMiAhPT0gbmF0aXZlRXZlbnQud2hpY2gpIHJldHVybiBudWxsO1xuICAgICAgaGFzU3BhY2VLZXlwcmVzcyA9ICEwO1xuICAgICAgcmV0dXJuIFNQQUNFQkFSX0NIQVI7XG4gICAgY2FzZSBcInRleHRJbnB1dFwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGRvbUV2ZW50TmFtZSA9IG5hdGl2ZUV2ZW50LmRhdGEpLFxuICAgICAgICBkb21FdmVudE5hbWUgPT09IFNQQUNFQkFSX0NIQVIgJiYgaGFzU3BhY2VLZXlwcmVzcyA/IG51bGwgOiBkb21FdmVudE5hbWVcbiAgICAgICk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5mdW5jdGlvbiBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkge1xuICBpZiAoaXNDb21wb3NpbmcpXG4gICAgcmV0dXJuIFwiY29tcG9zaXRpb25lbmRcIiA9PT0gZG9tRXZlbnROYW1lIHx8XG4gICAgICAoIWNhblVzZUNvbXBvc2l0aW9uRXZlbnQgJiZcbiAgICAgICAgaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpKVxuICAgICAgPyAoKGRvbUV2ZW50TmFtZSA9IGdldERhdGEoKSksXG4gICAgICAgIChmYWxsYmFja1RleHQgPSBzdGFydFRleHQgPSByb290ID0gbnVsbCksXG4gICAgICAgIChpc0NvbXBvc2luZyA9ICExKSxcbiAgICAgICAgZG9tRXZlbnROYW1lKVxuICAgICAgOiBudWxsO1xuICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgIGNhc2UgXCJwYXN0ZVwiOlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgICBpZiAoXG4gICAgICAgICEobmF0aXZlRXZlbnQuY3RybEtleSB8fCBuYXRpdmVFdmVudC5hbHRLZXkgfHwgbmF0aXZlRXZlbnQubWV0YUtleSkgfHxcbiAgICAgICAgKG5hdGl2ZUV2ZW50LmN0cmxLZXkgJiYgbmF0aXZlRXZlbnQuYWx0S2V5KVxuICAgICAgKSB7XG4gICAgICAgIGlmIChuYXRpdmVFdmVudC5jaGFyICYmIDEgPCBuYXRpdmVFdmVudC5jaGFyLmxlbmd0aClcbiAgICAgICAgICByZXR1cm4gbmF0aXZlRXZlbnQuY2hhcjtcbiAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LndoaWNoKSByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShuYXRpdmVFdmVudC53aGljaCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpcbiAgICAgIHJldHVybiB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSAmJiBcImtvXCIgIT09IG5hdGl2ZUV2ZW50LmxvY2FsZVxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiBuYXRpdmVFdmVudC5kYXRhO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxudmFyIHN1cHBvcnRlZElucHV0VHlwZXMgPSB7XG4gIGNvbG9yOiAhMCxcbiAgZGF0ZTogITAsXG4gIGRhdGV0aW1lOiAhMCxcbiAgXCJkYXRldGltZS1sb2NhbFwiOiAhMCxcbiAgZW1haWw6ICEwLFxuICBtb250aDogITAsXG4gIG51bWJlcjogITAsXG4gIHBhc3N3b3JkOiAhMCxcbiAgcmFuZ2U6ICEwLFxuICBzZWFyY2g6ICEwLFxuICB0ZWw6ICEwLFxuICB0ZXh0OiAhMCxcbiAgdGltZTogITAsXG4gIHVybDogITAsXG4gIHdlZWs6ICEwXG59O1xuZnVuY3Rpb24gaXNUZXh0SW5wdXRFbGVtZW50KGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbSAmJiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIFwiaW5wdXRcIiA9PT0gbm9kZU5hbWVcbiAgICA/ICEhc3VwcG9ydGVkSW5wdXRUeXBlc1tlbGVtLnR5cGVdXG4gICAgOiBcInRleHRhcmVhXCIgPT09IG5vZGVOYW1lXG4gICAgICA/ICEwXG4gICAgICA6ICExO1xufVxuZnVuY3Rpb24gY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KFxuICBkaXNwYXRjaFF1ZXVlLFxuICBpbnN0LFxuICBuYXRpdmVFdmVudCxcbiAgdGFyZ2V0XG4pIHtcbiAgcmVzdG9yZVRhcmdldFxuICAgID8gcmVzdG9yZVF1ZXVlXG4gICAgICA/IHJlc3RvcmVRdWV1ZS5wdXNoKHRhcmdldClcbiAgICAgIDogKHJlc3RvcmVRdWV1ZSA9IFt0YXJnZXRdKVxuICAgIDogKHJlc3RvcmVUYXJnZXQgPSB0YXJnZXQpO1xuICBpbnN0ID0gYWNjdW11bGF0ZVR3b1BoYXNlTGlzdGVuZXJzKGluc3QsIFwib25DaGFuZ2VcIik7XG4gIDAgPCBpbnN0Lmxlbmd0aCAmJlxuICAgICgobmF0aXZlRXZlbnQgPSBuZXcgU3ludGhldGljRXZlbnQoXG4gICAgICBcIm9uQ2hhbmdlXCIsXG4gICAgICBcImNoYW5nZVwiLFxuICAgICAgbnVsbCxcbiAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgdGFyZ2V0XG4gICAgKSksXG4gICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHsgZXZlbnQ6IG5hdGl2ZUV2ZW50LCBsaXN0ZW5lcnM6IGluc3QgfSkpO1xufVxudmFyIGFjdGl2ZUVsZW1lbnQkMSA9IG51bGwsXG4gIGFjdGl2ZUVsZW1lbnRJbnN0JDEgPSBudWxsO1xuZnVuY3Rpb24gcnVuRXZlbnRJbkJhdGNoKGRpc3BhdGNoUXVldWUpIHtcbiAgcHJvY2Vzc0Rpc3BhdGNoUXVldWUoZGlzcGF0Y2hRdWV1ZSwgMCk7XG59XG5mdW5jdGlvbiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQodGFyZ2V0SW5zdCkge1xuICB2YXIgdGFyZ2V0Tm9kZSA9IGdldE5vZGVGcm9tSW5zdGFuY2UodGFyZ2V0SW5zdCk7XG4gIGlmICh1cGRhdGVWYWx1ZUlmQ2hhbmdlZCh0YXJnZXROb2RlKSkgcmV0dXJuIHRhcmdldEluc3Q7XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSB7XG4gIGlmIChcImNoYW5nZVwiID09PSBkb21FdmVudE5hbWUpIHJldHVybiB0YXJnZXRJbnN0O1xufVxudmFyIGlzSW5wdXRFdmVudFN1cHBvcnRlZCA9ICExO1xuaWYgKGNhblVzZURPTSkge1xuICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQyODM7XG4gIGlmIChjYW5Vc2VET00pIHtcbiAgICB2YXIgaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTggPSBcIm9uaW5wdXRcIiBpbiBkb2N1bWVudDtcbiAgICBpZiAoIWlzU3VwcG9ydGVkJGpzY29tcCRpbmxpbmVfNDE4KSB7XG4gICAgICB2YXIgZWxlbWVudCRqc2NvbXAkaW5saW5lXzQxOSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBlbGVtZW50JGpzY29tcCRpbmxpbmVfNDE5LnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIiwgXCJyZXR1cm47XCIpO1xuICAgICAgaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTggPVxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBlbGVtZW50JGpzY29tcCRpbmxpbmVfNDE5Lm9uaW5wdXQ7XG4gICAgfVxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMjgzID0gaXNTdXBwb3J0ZWQkanNjb21wJGlubGluZV80MTg7XG4gIH0gZWxzZSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDI4MyA9ICExO1xuICBpc0lucHV0RXZlbnRTdXBwb3J0ZWQgPVxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMjgzICYmXG4gICAgKCFkb2N1bWVudC5kb2N1bWVudE1vZGUgfHwgOSA8IGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG59XG5mdW5jdGlvbiBzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpIHtcbiAgYWN0aXZlRWxlbWVudCQxICYmXG4gICAgKGFjdGl2ZUVsZW1lbnQkMS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIiwgaGFuZGxlUHJvcGVydHlDaGFuZ2UpLFxuICAgIChhY3RpdmVFbGVtZW50SW5zdCQxID0gYWN0aXZlRWxlbWVudCQxID0gbnVsbCkpO1xufVxuZnVuY3Rpb24gaGFuZGxlUHJvcGVydHlDaGFuZ2UobmF0aXZlRXZlbnQpIHtcbiAgaWYgKFxuICAgIFwidmFsdWVcIiA9PT0gbmF0aXZlRXZlbnQucHJvcGVydHlOYW1lICYmXG4gICAgZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKGFjdGl2ZUVsZW1lbnRJbnN0JDEpXG4gICkge1xuICAgIHZhciBkaXNwYXRjaFF1ZXVlID0gW107XG4gICAgY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KFxuICAgICAgZGlzcGF0Y2hRdWV1ZSxcbiAgICAgIGFjdGl2ZUVsZW1lbnRJbnN0JDEsXG4gICAgICBuYXRpdmVFdmVudCxcbiAgICAgIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KVxuICAgICk7XG4gICAgYmF0Y2hlZFVwZGF0ZXMkMShydW5FdmVudEluQmF0Y2gsIGRpc3BhdGNoUXVldWUpO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50UG9seWZpbGwoZG9tRXZlbnROYW1lLCB0YXJnZXQsIHRhcmdldEluc3QpIHtcbiAgXCJmb2N1c2luXCIgPT09IGRvbUV2ZW50TmFtZVxuICAgID8gKHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCksXG4gICAgICAoYWN0aXZlRWxlbWVudCQxID0gdGFyZ2V0KSxcbiAgICAgIChhY3RpdmVFbGVtZW50SW5zdCQxID0gdGFyZ2V0SW5zdCksXG4gICAgICBhY3RpdmVFbGVtZW50JDEuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsIGhhbmRsZVByb3BlcnR5Q2hhbmdlKSlcbiAgICA6IFwiZm9jdXNvdXRcIiA9PT0gZG9tRXZlbnROYW1lICYmIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9ySW5wdXRFdmVudFBvbHlmaWxsKGRvbUV2ZW50TmFtZSkge1xuICBpZiAoXG4gICAgXCJzZWxlY3Rpb25jaGFuZ2VcIiA9PT0gZG9tRXZlbnROYW1lIHx8XG4gICAgXCJrZXl1cFwiID09PSBkb21FdmVudE5hbWUgfHxcbiAgICBcImtleWRvd25cIiA9PT0gZG9tRXZlbnROYW1lXG4gIClcbiAgICByZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKGFjdGl2ZUVsZW1lbnRJbnN0JDEpO1xufVxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSB7XG4gIGlmIChcImNsaWNrXCIgPT09IGRvbUV2ZW50TmFtZSkgcmV0dXJuIGdldEluc3RJZlZhbHVlQ2hhbmdlZCh0YXJnZXRJbnN0KTtcbn1cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSB7XG4gIGlmIChcImlucHV0XCIgPT09IGRvbUV2ZW50TmFtZSB8fCBcImNoYW5nZVwiID09PSBkb21FdmVudE5hbWUpXG4gICAgcmV0dXJuIGdldEluc3RJZlZhbHVlQ2hhbmdlZCh0YXJnZXRJbnN0KTtcbn1cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgcmV0dXJuICh4ID09PSB5ICYmICgwICE9PSB4IHx8IDEgLyB4ID09PSAxIC8geSkpIHx8ICh4ICE9PSB4ICYmIHkgIT09IHkpO1xufVxudmFyIG9iamVjdElzID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgT2JqZWN0LmlzID8gT2JqZWN0LmlzIDogaXM7XG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAob2JqZWN0SXMob2JqQSwgb2JqQikpIHJldHVybiAhMDtcbiAgaWYgKFxuICAgIFwib2JqZWN0XCIgIT09IHR5cGVvZiBvYmpBIHx8XG4gICAgbnVsbCA9PT0gb2JqQSB8fFxuICAgIFwib2JqZWN0XCIgIT09IHR5cGVvZiBvYmpCIHx8XG4gICAgbnVsbCA9PT0gb2JqQlxuICApXG4gICAgcmV0dXJuICExO1xuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKSxcbiAgICBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiAhMTtcbiAgZm9yIChrZXlzQiA9IDA7IGtleXNCIDwga2V5c0EubGVuZ3RoOyBrZXlzQisrKSB7XG4gICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlzQVtrZXlzQl07XG4gICAgaWYgKFxuICAgICAgIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwgY3VycmVudEtleSkgfHxcbiAgICAgICFvYmplY3RJcyhvYmpBW2N1cnJlbnRLZXldLCBvYmpCW2N1cnJlbnRLZXldKVxuICAgIClcbiAgICAgIHJldHVybiAhMTtcbiAgfVxuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBnZXRMZWFmTm9kZShub2RlKSB7XG4gIGZvciAoOyBub2RlICYmIG5vZGUuZmlyc3RDaGlsZDsgKSBub2RlID0gbm9kZS5maXJzdENoaWxkO1xuICByZXR1cm4gbm9kZTtcbn1cbmZ1bmN0aW9uIGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQocm9vdCwgb2Zmc2V0KSB7XG4gIHZhciBub2RlID0gZ2V0TGVhZk5vZGUocm9vdCk7XG4gIHJvb3QgPSAwO1xuICBmb3IgKHZhciBub2RlRW5kOyBub2RlOyApIHtcbiAgICBpZiAoMyA9PT0gbm9kZS5ub2RlVHlwZSkge1xuICAgICAgbm9kZUVuZCA9IHJvb3QgKyBub2RlLnRleHRDb250ZW50Lmxlbmd0aDtcbiAgICAgIGlmIChyb290IDw9IG9mZnNldCAmJiBub2RlRW5kID49IG9mZnNldClcbiAgICAgICAgcmV0dXJuIHsgbm9kZTogbm9kZSwgb2Zmc2V0OiBvZmZzZXQgLSByb290IH07XG4gICAgICByb290ID0gbm9kZUVuZDtcbiAgICB9XG4gICAgYToge1xuICAgICAgZm9yICg7IG5vZGU7ICkge1xuICAgICAgICBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICAgIG5vZGUgPSB2b2lkIDA7XG4gICAgfVxuICAgIG5vZGUgPSBnZXRMZWFmTm9kZShub2RlKTtcbiAgfVxufVxuZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gIHJldHVybiBvdXRlck5vZGUgJiYgaW5uZXJOb2RlXG4gICAgPyBvdXRlck5vZGUgPT09IGlubmVyTm9kZVxuICAgICAgPyAhMFxuICAgICAgOiBvdXRlck5vZGUgJiYgMyA9PT0gb3V0ZXJOb2RlLm5vZGVUeXBlXG4gICAgICAgID8gITFcbiAgICAgICAgOiBpbm5lck5vZGUgJiYgMyA9PT0gaW5uZXJOb2RlLm5vZGVUeXBlXG4gICAgICAgICAgPyBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSlcbiAgICAgICAgICA6IFwiY29udGFpbnNcIiBpbiBvdXRlck5vZGVcbiAgICAgICAgICAgID8gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSlcbiAgICAgICAgICAgIDogb3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG4gICAgICAgICAgICAgID8gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNilcbiAgICAgICAgICAgICAgOiAhMVxuICAgIDogITE7XG59XG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50RGVlcChjb250YWluZXJJbmZvKSB7XG4gIGNvbnRhaW5lckluZm8gPVxuICAgIG51bGwgIT0gY29udGFpbmVySW5mbyAmJlxuICAgIG51bGwgIT0gY29udGFpbmVySW5mby5vd25lckRvY3VtZW50ICYmXG4gICAgbnVsbCAhPSBjb250YWluZXJJbmZvLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXdcbiAgICAgID8gY29udGFpbmVySW5mby5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3XG4gICAgICA6IHdpbmRvdztcbiAgZm9yIChcbiAgICB2YXIgZWxlbWVudCA9IGdldEFjdGl2ZUVsZW1lbnQoY29udGFpbmVySW5mby5kb2N1bWVudCk7XG4gICAgZWxlbWVudCBpbnN0YW5jZW9mIGNvbnRhaW5lckluZm8uSFRNTElGcmFtZUVsZW1lbnQ7XG5cbiAgKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPVxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgZWxlbWVudC5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSAhMTtcbiAgICB9XG4gICAgaWYgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkgY29udGFpbmVySW5mbyA9IGVsZW1lbnQuY29udGVudFdpbmRvdztcbiAgICBlbHNlIGJyZWFrO1xuICAgIGVsZW1lbnQgPSBnZXRBY3RpdmVFbGVtZW50KGNvbnRhaW5lckluZm8uZG9jdW1lbnQpO1xuICB9XG4gIHJldHVybiBlbGVtZW50O1xufVxuZnVuY3Rpb24gaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbSAmJiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChcbiAgICBub2RlTmFtZSAmJlxuICAgICgoXCJpbnB1dFwiID09PSBub2RlTmFtZSAmJlxuICAgICAgKFwidGV4dFwiID09PSBlbGVtLnR5cGUgfHxcbiAgICAgICAgXCJzZWFyY2hcIiA9PT0gZWxlbS50eXBlIHx8XG4gICAgICAgIFwidGVsXCIgPT09IGVsZW0udHlwZSB8fFxuICAgICAgICBcInVybFwiID09PSBlbGVtLnR5cGUgfHxcbiAgICAgICAgXCJwYXNzd29yZFwiID09PSBlbGVtLnR5cGUpKSB8fFxuICAgICAgXCJ0ZXh0YXJlYVwiID09PSBub2RlTmFtZSB8fFxuICAgICAgXCJ0cnVlXCIgPT09IGVsZW0uY29udGVudEVkaXRhYmxlKVxuICApO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNlbGVjdGlvbihwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLCBjb250YWluZXJJbmZvKSB7XG4gIHZhciBjdXJGb2N1c2VkRWxlbSA9IGdldEFjdGl2ZUVsZW1lbnREZWVwKGNvbnRhaW5lckluZm8pO1xuICBjb250YWluZXJJbmZvID0gcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5mb2N1c2VkRWxlbTtcbiAgdmFyIHByaW9yU2VsZWN0aW9uUmFuZ2UgPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLnNlbGVjdGlvblJhbmdlO1xuICBpZiAoXG4gICAgY3VyRm9jdXNlZEVsZW0gIT09IGNvbnRhaW5lckluZm8gJiZcbiAgICBjb250YWluZXJJbmZvICYmXG4gICAgY29udGFpbmVySW5mby5vd25lckRvY3VtZW50ICYmXG4gICAgY29udGFpbnNOb2RlKGNvbnRhaW5lckluZm8ub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIGNvbnRhaW5lckluZm8pXG4gICkge1xuICAgIGlmIChudWxsICE9PSBwcmlvclNlbGVjdGlvblJhbmdlICYmIGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhjb250YWluZXJJbmZvKSlcbiAgICAgIGlmIChcbiAgICAgICAgKChwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uID0gcHJpb3JTZWxlY3Rpb25SYW5nZS5zdGFydCksXG4gICAgICAgIChjdXJGb2N1c2VkRWxlbSA9IHByaW9yU2VsZWN0aW9uUmFuZ2UuZW5kKSxcbiAgICAgICAgdm9pZCAwID09PSBjdXJGb2N1c2VkRWxlbSAmJlxuICAgICAgICAgIChjdXJGb2N1c2VkRWxlbSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24pLFxuICAgICAgICBcInNlbGVjdGlvblN0YXJ0XCIgaW4gY29udGFpbmVySW5mbylcbiAgICAgIClcbiAgICAgICAgKGNvbnRhaW5lckluZm8uc2VsZWN0aW9uU3RhcnQgPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uKSxcbiAgICAgICAgICAoY29udGFpbmVySW5mby5zZWxlY3Rpb25FbmQgPSBNYXRoLm1pbihcbiAgICAgICAgICAgIGN1ckZvY3VzZWRFbGVtLFxuICAgICAgICAgICAgY29udGFpbmVySW5mby52YWx1ZS5sZW5ndGhcbiAgICAgICAgICApKTtcbiAgICAgIGVsc2UgaWYgKFxuICAgICAgICAoKGN1ckZvY3VzZWRFbGVtID1cbiAgICAgICAgICAoKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24gPVxuICAgICAgICAgICAgY29udGFpbmVySW5mby5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50KSAmJlxuICAgICAgICAgICAgcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5kZWZhdWx0VmlldykgfHxcbiAgICAgICAgICB3aW5kb3cpLFxuICAgICAgICBjdXJGb2N1c2VkRWxlbS5nZXRTZWxlY3Rpb24pXG4gICAgICApIHtcbiAgICAgICAgY3VyRm9jdXNlZEVsZW0gPSBjdXJGb2N1c2VkRWxlbS5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGNvbnRhaW5lckluZm8udGV4dENvbnRlbnQubGVuZ3RoLFxuICAgICAgICAgIHN0YXJ0ID0gTWF0aC5taW4ocHJpb3JTZWxlY3Rpb25SYW5nZS5zdGFydCwgbGVuZ3RoKTtcbiAgICAgICAgcHJpb3JTZWxlY3Rpb25SYW5nZSA9XG4gICAgICAgICAgdm9pZCAwID09PSBwcmlvclNlbGVjdGlvblJhbmdlLmVuZFxuICAgICAgICAgICAgPyBzdGFydFxuICAgICAgICAgICAgOiBNYXRoLm1pbihwcmlvclNlbGVjdGlvblJhbmdlLmVuZCwgbGVuZ3RoKTtcbiAgICAgICAgIWN1ckZvY3VzZWRFbGVtLmV4dGVuZCAmJlxuICAgICAgICAgIHN0YXJ0ID4gcHJpb3JTZWxlY3Rpb25SYW5nZSAmJlxuICAgICAgICAgICgobGVuZ3RoID0gcHJpb3JTZWxlY3Rpb25SYW5nZSksXG4gICAgICAgICAgKHByaW9yU2VsZWN0aW9uUmFuZ2UgPSBzdGFydCksXG4gICAgICAgICAgKHN0YXJ0ID0gbGVuZ3RoKSk7XG4gICAgICAgIGxlbmd0aCA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQoY29udGFpbmVySW5mbywgc3RhcnQpO1xuICAgICAgICB2YXIgZW5kTWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChcbiAgICAgICAgICBjb250YWluZXJJbmZvLFxuICAgICAgICAgIHByaW9yU2VsZWN0aW9uUmFuZ2VcbiAgICAgICAgKTtcbiAgICAgICAgbGVuZ3RoICYmXG4gICAgICAgICAgZW5kTWFya2VyICYmXG4gICAgICAgICAgKDEgIT09IGN1ckZvY3VzZWRFbGVtLnJhbmdlQ291bnQgfHxcbiAgICAgICAgICAgIGN1ckZvY3VzZWRFbGVtLmFuY2hvck5vZGUgIT09IGxlbmd0aC5ub2RlIHx8XG4gICAgICAgICAgICBjdXJGb2N1c2VkRWxlbS5hbmNob3JPZmZzZXQgIT09IGxlbmd0aC5vZmZzZXQgfHxcbiAgICAgICAgICAgIGN1ckZvY3VzZWRFbGVtLmZvY3VzTm9kZSAhPT0gZW5kTWFya2VyLm5vZGUgfHxcbiAgICAgICAgICAgIGN1ckZvY3VzZWRFbGVtLmZvY3VzT2Zmc2V0ICE9PSBlbmRNYXJrZXIub2Zmc2V0KSAmJlxuICAgICAgICAgICgocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbiA9XG4gICAgICAgICAgICBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmNyZWF0ZVJhbmdlKCkpLFxuICAgICAgICAgIHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uc2V0U3RhcnQobGVuZ3RoLm5vZGUsIGxlbmd0aC5vZmZzZXQpLFxuICAgICAgICAgIGN1ckZvY3VzZWRFbGVtLnJlbW92ZUFsbFJhbmdlcygpLFxuICAgICAgICAgIHN0YXJ0ID4gcHJpb3JTZWxlY3Rpb25SYW5nZVxuICAgICAgICAgICAgPyAoY3VyRm9jdXNlZEVsZW0uYWRkUmFuZ2UocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbiksXG4gICAgICAgICAgICAgIGN1ckZvY3VzZWRFbGVtLmV4dGVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCkpXG4gICAgICAgICAgICA6IChwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLnNldEVuZChcbiAgICAgICAgICAgICAgICBlbmRNYXJrZXIubm9kZSxcbiAgICAgICAgICAgICAgICBlbmRNYXJrZXIub2Zmc2V0XG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIGN1ckZvY3VzZWRFbGVtLmFkZFJhbmdlKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24pKSk7XG4gICAgICB9XG4gICAgcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbiA9IFtdO1xuICAgIGZvciAoXG4gICAgICBjdXJGb2N1c2VkRWxlbSA9IGNvbnRhaW5lckluZm87XG4gICAgICAoY3VyRm9jdXNlZEVsZW0gPSBjdXJGb2N1c2VkRWxlbS5wYXJlbnROb2RlKTtcblxuICAgIClcbiAgICAgIDEgPT09IGN1ckZvY3VzZWRFbGVtLm5vZGVUeXBlICYmXG4gICAgICAgIHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24ucHVzaCh7XG4gICAgICAgICAgZWxlbWVudDogY3VyRm9jdXNlZEVsZW0sXG4gICAgICAgICAgbGVmdDogY3VyRm9jdXNlZEVsZW0uc2Nyb2xsTGVmdCxcbiAgICAgICAgICB0b3A6IGN1ckZvY3VzZWRFbGVtLnNjcm9sbFRvcFxuICAgICAgICB9KTtcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250YWluZXJJbmZvLmZvY3VzICYmIGNvbnRhaW5lckluZm8uZm9jdXMoKTtcbiAgICBmb3IgKFxuICAgICAgY29udGFpbmVySW5mbyA9IDA7XG4gICAgICBjb250YWluZXJJbmZvIDwgcHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbi5sZW5ndGg7XG4gICAgICBjb250YWluZXJJbmZvKytcbiAgICApXG4gICAgICAoY3VyRm9jdXNlZEVsZW0gPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uW2NvbnRhaW5lckluZm9dKSxcbiAgICAgICAgKGN1ckZvY3VzZWRFbGVtLmVsZW1lbnQuc2Nyb2xsTGVmdCA9IGN1ckZvY3VzZWRFbGVtLmxlZnQpLFxuICAgICAgICAoY3VyRm9jdXNlZEVsZW0uZWxlbWVudC5zY3JvbGxUb3AgPSBjdXJGb2N1c2VkRWxlbS50b3ApO1xuICB9XG59XG52YXIgc2tpcFNlbGVjdGlvbkNoYW5nZUV2ZW50ID1cbiAgICBjYW5Vc2VET00gJiYgXCJkb2N1bWVudE1vZGVcIiBpbiBkb2N1bWVudCAmJiAxMSA+PSBkb2N1bWVudC5kb2N1bWVudE1vZGUsXG4gIGFjdGl2ZUVsZW1lbnQgPSBudWxsLFxuICBhY3RpdmVFbGVtZW50SW5zdCA9IG51bGwsXG4gIGxhc3RTZWxlY3Rpb24gPSBudWxsLFxuICBtb3VzZURvd24gPSAhMTtcbmZ1bmN0aW9uIGNvbnN0cnVjdFNlbGVjdEV2ZW50KGRpc3BhdGNoUXVldWUsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICB2YXIgZG9jID1cbiAgICBuYXRpdmVFdmVudFRhcmdldC53aW5kb3cgPT09IG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICA/IG5hdGl2ZUV2ZW50VGFyZ2V0LmRvY3VtZW50XG4gICAgICA6IDkgPT09IG5hdGl2ZUV2ZW50VGFyZ2V0Lm5vZGVUeXBlXG4gICAgICAgID8gbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgOiBuYXRpdmVFdmVudFRhcmdldC5vd25lckRvY3VtZW50O1xuICBtb3VzZURvd24gfHxcbiAgICBudWxsID09IGFjdGl2ZUVsZW1lbnQgfHxcbiAgICBhY3RpdmVFbGVtZW50ICE9PSBnZXRBY3RpdmVFbGVtZW50KGRvYykgfHxcbiAgICAoKGRvYyA9IGFjdGl2ZUVsZW1lbnQpLFxuICAgIFwic2VsZWN0aW9uU3RhcnRcIiBpbiBkb2MgJiYgaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKGRvYylcbiAgICAgID8gKGRvYyA9IHsgc3RhcnQ6IGRvYy5zZWxlY3Rpb25TdGFydCwgZW5kOiBkb2Muc2VsZWN0aW9uRW5kIH0pXG4gICAgICA6ICgoZG9jID0gKFxuICAgICAgICAgIChkb2Mub3duZXJEb2N1bWVudCAmJiBkb2Mub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykgfHxcbiAgICAgICAgICB3aW5kb3dcbiAgICAgICAgKS5nZXRTZWxlY3Rpb24oKSksXG4gICAgICAgIChkb2MgPSB7XG4gICAgICAgICAgYW5jaG9yTm9kZTogZG9jLmFuY2hvck5vZGUsXG4gICAgICAgICAgYW5jaG9yT2Zmc2V0OiBkb2MuYW5jaG9yT2Zmc2V0LFxuICAgICAgICAgIGZvY3VzTm9kZTogZG9jLmZvY3VzTm9kZSxcbiAgICAgICAgICBmb2N1c09mZnNldDogZG9jLmZvY3VzT2Zmc2V0XG4gICAgICAgIH0pKSxcbiAgICAobGFzdFNlbGVjdGlvbiAmJiBzaGFsbG93RXF1YWwobGFzdFNlbGVjdGlvbiwgZG9jKSkgfHxcbiAgICAgICgobGFzdFNlbGVjdGlvbiA9IGRvYyksXG4gICAgICAoZG9jID0gYWNjdW11bGF0ZVR3b1BoYXNlTGlzdGVuZXJzKGFjdGl2ZUVsZW1lbnRJbnN0LCBcIm9uU2VsZWN0XCIpKSxcbiAgICAgIDAgPCBkb2MubGVuZ3RoICYmXG4gICAgICAgICgobmF0aXZlRXZlbnQgPSBuZXcgU3ludGhldGljRXZlbnQoXG4gICAgICAgICAgXCJvblNlbGVjdFwiLFxuICAgICAgICAgIFwic2VsZWN0XCIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICApKSxcbiAgICAgICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHsgZXZlbnQ6IG5hdGl2ZUV2ZW50LCBsaXN0ZW5lcnM6IGRvYyB9KSxcbiAgICAgICAgKG5hdGl2ZUV2ZW50LnRhcmdldCA9IGFjdGl2ZUVsZW1lbnQpKSkpO1xufVxuZnVuY3Rpb24gbWFrZVByZWZpeE1hcChzdHlsZVByb3AsIGV2ZW50TmFtZSkge1xuICB2YXIgcHJlZml4ZXMgPSB7fTtcbiAgcHJlZml4ZXNbc3R5bGVQcm9wLnRvTG93ZXJDYXNlKCldID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHByZWZpeGVzW1wiV2Via2l0XCIgKyBzdHlsZVByb3BdID0gXCJ3ZWJraXRcIiArIGV2ZW50TmFtZTtcbiAgcHJlZml4ZXNbXCJNb3pcIiArIHN0eWxlUHJvcF0gPSBcIm1velwiICsgZXZlbnROYW1lO1xuICByZXR1cm4gcHJlZml4ZXM7XG59XG52YXIgdmVuZG9yUHJlZml4ZXMgPSB7XG4gICAgYW5pbWF0aW9uZW5kOiBtYWtlUHJlZml4TWFwKFwiQW5pbWF0aW9uXCIsIFwiQW5pbWF0aW9uRW5kXCIpLFxuICAgIGFuaW1hdGlvbml0ZXJhdGlvbjogbWFrZVByZWZpeE1hcChcIkFuaW1hdGlvblwiLCBcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxcbiAgICBhbmltYXRpb25zdGFydDogbWFrZVByZWZpeE1hcChcIkFuaW1hdGlvblwiLCBcIkFuaW1hdGlvblN0YXJ0XCIpLFxuICAgIHRyYW5zaXRpb25ydW46IG1ha2VQcmVmaXhNYXAoXCJUcmFuc2l0aW9uXCIsIFwiVHJhbnNpdGlvblJ1blwiKSxcbiAgICB0cmFuc2l0aW9uc3RhcnQ6IG1ha2VQcmVmaXhNYXAoXCJUcmFuc2l0aW9uXCIsIFwiVHJhbnNpdGlvblN0YXJ0XCIpLFxuICAgIHRyYW5zaXRpb25jYW5jZWw6IG1ha2VQcmVmaXhNYXAoXCJUcmFuc2l0aW9uXCIsIFwiVHJhbnNpdGlvbkNhbmNlbFwiKSxcbiAgICB0cmFuc2l0aW9uZW5kOiBtYWtlUHJlZml4TWFwKFwiVHJhbnNpdGlvblwiLCBcIlRyYW5zaXRpb25FbmRcIilcbiAgfSxcbiAgcHJlZml4ZWRFdmVudE5hbWVzID0ge30sXG4gIHN0eWxlID0ge307XG5jYW5Vc2VET00gJiZcbiAgKChzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUpLFxuICBcIkFuaW1hdGlvbkV2ZW50XCIgaW4gd2luZG93IHx8XG4gICAgKGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLFxuICAgIGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLFxuICAgIGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFxuICBcIlRyYW5zaXRpb25FdmVudFwiIGluIHdpbmRvdyB8fFxuICAgIGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO1xuZnVuY3Rpb24gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoZXZlbnROYW1lKSB7XG4gIGlmIChwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXSkgcmV0dXJuIHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdO1xuICBpZiAoIXZlbmRvclByZWZpeGVzW2V2ZW50TmFtZV0pIHJldHVybiBldmVudE5hbWU7XG4gIHZhciBwcmVmaXhNYXAgPSB2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdLFxuICAgIHN0eWxlUHJvcDtcbiAgZm9yIChzdHlsZVByb3AgaW4gcHJlZml4TWFwKVxuICAgIGlmIChwcmVmaXhNYXAuaGFzT3duUHJvcGVydHkoc3R5bGVQcm9wKSAmJiBzdHlsZVByb3AgaW4gc3R5bGUpXG4gICAgICByZXR1cm4gKHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdID0gcHJlZml4TWFwW3N0eWxlUHJvcF0pO1xuICByZXR1cm4gZXZlbnROYW1lO1xufVxudmFyIEFOSU1BVElPTl9FTkQgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcImFuaW1hdGlvbmVuZFwiKSxcbiAgQU5JTUFUSU9OX0lURVJBVElPTiA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLFxuICBBTklNQVRJT05fU1RBUlQgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcImFuaW1hdGlvbnN0YXJ0XCIpLFxuICBUUkFOU0lUSU9OX1JVTiA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwidHJhbnNpdGlvbnJ1blwiKSxcbiAgVFJBTlNJVElPTl9TVEFSVCA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwidHJhbnNpdGlvbnN0YXJ0XCIpLFxuICBUUkFOU0lUSU9OX0NBTkNFTCA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKFwidHJhbnNpdGlvbmNhbmNlbFwiKSxcbiAgVFJBTlNJVElPTl9FTkQgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShcInRyYW5zaXRpb25lbmRcIiksXG4gIHRvcExldmVsRXZlbnRzVG9SZWFjdE5hbWVzID0gbmV3IE1hcCgpLFxuICBzaW1wbGVFdmVudFBsdWdpbkV2ZW50cyA9XG4gICAgXCJhYm9ydCBhdXhDbGljayBiZWZvcmVUb2dnbGUgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZ290UG9pbnRlckNhcHR1cmUgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbG9zdFBvaW50ZXJDYXB0dXJlIG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHBvaW50ZXJDYW5jZWwgcG9pbnRlckRvd24gcG9pbnRlck1vdmUgcG9pbnRlck91dCBwb2ludGVyT3ZlciBwb2ludGVyVXAgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlIHNjcm9sbCBzY3JvbGxFbmQgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXG4gICAgICBcIiBcIlxuICAgICk7XG5mdW5jdGlvbiByZWdpc3RlclNpbXBsZUV2ZW50KGRvbUV2ZW50TmFtZSwgcmVhY3ROYW1lKSB7XG4gIHRvcExldmVsRXZlbnRzVG9SZWFjdE5hbWVzLnNldChkb21FdmVudE5hbWUsIHJlYWN0TmFtZSk7XG4gIHJlZ2lzdGVyVHdvUGhhc2VFdmVudChyZWFjdE5hbWUsIFtkb21FdmVudE5hbWVdKTtcbn1cbnZhciBjb25jdXJyZW50UXVldWVzID0gW10sXG4gIGNvbmN1cnJlbnRRdWV1ZXNJbmRleCA9IDAsXG4gIGNvbmN1cnJlbnRseVVwZGF0ZWRMYW5lcyA9IDA7XG5mdW5jdGlvbiBmaW5pc2hRdWV1ZWluZ0NvbmN1cnJlbnRVcGRhdGVzKCkge1xuICBmb3IgKFxuICAgIHZhciBlbmRJbmRleCA9IGNvbmN1cnJlbnRRdWV1ZXNJbmRleCxcbiAgICAgIGkgPSAoY29uY3VycmVudGx5VXBkYXRlZExhbmVzID0gY29uY3VycmVudFF1ZXVlc0luZGV4ID0gMCk7XG4gICAgaSA8IGVuZEluZGV4O1xuXG4gICkge1xuICAgIHZhciBmaWJlciA9IGNvbmN1cnJlbnRRdWV1ZXNbaV07XG4gICAgY29uY3VycmVudFF1ZXVlc1tpKytdID0gbnVsbDtcbiAgICB2YXIgcXVldWUgPSBjb25jdXJyZW50UXVldWVzW2ldO1xuICAgIGNvbmN1cnJlbnRRdWV1ZXNbaSsrXSA9IG51bGw7XG4gICAgdmFyIHVwZGF0ZSA9IGNvbmN1cnJlbnRRdWV1ZXNbaV07XG4gICAgY29uY3VycmVudFF1ZXVlc1tpKytdID0gbnVsbDtcbiAgICB2YXIgbGFuZSA9IGNvbmN1cnJlbnRRdWV1ZXNbaV07XG4gICAgY29uY3VycmVudFF1ZXVlc1tpKytdID0gbnVsbDtcbiAgICBpZiAobnVsbCAhPT0gcXVldWUgJiYgbnVsbCAhPT0gdXBkYXRlKSB7XG4gICAgICB2YXIgcGVuZGluZyA9IHF1ZXVlLnBlbmRpbmc7XG4gICAgICBudWxsID09PSBwZW5kaW5nXG4gICAgICAgID8gKHVwZGF0ZS5uZXh0ID0gdXBkYXRlKVxuICAgICAgICA6ICgodXBkYXRlLm5leHQgPSBwZW5kaW5nLm5leHQpLCAocGVuZGluZy5uZXh0ID0gdXBkYXRlKSk7XG4gICAgICBxdWV1ZS5wZW5kaW5nID0gdXBkYXRlO1xuICAgIH1cbiAgICAwICE9PSBsYW5lICYmIG1hcmtVcGRhdGVMYW5lRnJvbUZpYmVyVG9Sb290KGZpYmVyLCB1cGRhdGUsIGxhbmUpO1xuICB9XG59XG5mdW5jdGlvbiBlbnF1ZXVlVXBkYXRlJDEoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpIHtcbiAgY29uY3VycmVudFF1ZXVlc1tjb25jdXJyZW50UXVldWVzSW5kZXgrK10gPSBmaWJlcjtcbiAgY29uY3VycmVudFF1ZXVlc1tjb25jdXJyZW50UXVldWVzSW5kZXgrK10gPSBxdWV1ZTtcbiAgY29uY3VycmVudFF1ZXVlc1tjb25jdXJyZW50UXVldWVzSW5kZXgrK10gPSB1cGRhdGU7XG4gIGNvbmN1cnJlbnRRdWV1ZXNbY29uY3VycmVudFF1ZXVlc0luZGV4KytdID0gbGFuZTtcbiAgY29uY3VycmVudGx5VXBkYXRlZExhbmVzIHw9IGxhbmU7XG4gIGZpYmVyLmxhbmVzIHw9IGxhbmU7XG4gIGZpYmVyID0gZmliZXIuYWx0ZXJuYXRlO1xuICBudWxsICE9PSBmaWJlciAmJiAoZmliZXIubGFuZXMgfD0gbGFuZSk7XG59XG5mdW5jdGlvbiBlbnF1ZXVlQ29uY3VycmVudEhvb2tVcGRhdGUoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpIHtcbiAgZW5xdWV1ZVVwZGF0ZSQxKGZpYmVyLCBxdWV1ZSwgdXBkYXRlLCBsYW5lKTtcbiAgcmV0dXJuIGdldFJvb3RGb3JVcGRhdGVkRmliZXIoZmliZXIpO1xufVxuZnVuY3Rpb24gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCBsYW5lKSB7XG4gIGVucXVldWVVcGRhdGUkMShmaWJlciwgbnVsbCwgbnVsbCwgbGFuZSk7XG4gIHJldHVybiBnZXRSb290Rm9yVXBkYXRlZEZpYmVyKGZpYmVyKTtcbn1cbmZ1bmN0aW9uIG1hcmtVcGRhdGVMYW5lRnJvbUZpYmVyVG9Sb290KHNvdXJjZUZpYmVyLCB1cGRhdGUsIGxhbmUpIHtcbiAgc291cmNlRmliZXIubGFuZXMgfD0gbGFuZTtcbiAgdmFyIGFsdGVybmF0ZSA9IHNvdXJjZUZpYmVyLmFsdGVybmF0ZTtcbiAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmIChhbHRlcm5hdGUubGFuZXMgfD0gbGFuZSk7XG4gIGZvciAodmFyIGlzSGlkZGVuID0gITEsIHBhcmVudCA9IHNvdXJjZUZpYmVyLnJldHVybjsgbnVsbCAhPT0gcGFyZW50OyApXG4gICAgKHBhcmVudC5jaGlsZExhbmVzIHw9IGxhbmUpLFxuICAgICAgKGFsdGVybmF0ZSA9IHBhcmVudC5hbHRlcm5hdGUpLFxuICAgICAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmIChhbHRlcm5hdGUuY2hpbGRMYW5lcyB8PSBsYW5lKSxcbiAgICAgIDIyID09PSBwYXJlbnQudGFnICYmXG4gICAgICAgICgoc291cmNlRmliZXIgPSBwYXJlbnQuc3RhdGVOb2RlKSxcbiAgICAgICAgbnVsbCA9PT0gc291cmNlRmliZXIgfHwgc291cmNlRmliZXIuX3Zpc2liaWxpdHkgJiAxIHx8IChpc0hpZGRlbiA9ICEwKSksXG4gICAgICAoc291cmNlRmliZXIgPSBwYXJlbnQpLFxuICAgICAgKHBhcmVudCA9IHBhcmVudC5yZXR1cm4pO1xuICBpc0hpZGRlbiAmJlxuICAgIG51bGwgIT09IHVwZGF0ZSAmJlxuICAgIDMgPT09IHNvdXJjZUZpYmVyLnRhZyAmJlxuICAgICgocGFyZW50ID0gc291cmNlRmliZXIuc3RhdGVOb2RlKSxcbiAgICAoaXNIaWRkZW4gPSAzMSAtIGNsejMyKGxhbmUpKSxcbiAgICAocGFyZW50ID0gcGFyZW50LmhpZGRlblVwZGF0ZXMpLFxuICAgIChzb3VyY2VGaWJlciA9IHBhcmVudFtpc0hpZGRlbl0pLFxuICAgIG51bGwgPT09IHNvdXJjZUZpYmVyXG4gICAgICA/IChwYXJlbnRbaXNIaWRkZW5dID0gW3VwZGF0ZV0pXG4gICAgICA6IHNvdXJjZUZpYmVyLnB1c2godXBkYXRlKSxcbiAgICAodXBkYXRlLmxhbmUgPSBsYW5lIHwgNTM2ODcwOTEyKSk7XG59XG5mdW5jdGlvbiBnZXRSb290Rm9yVXBkYXRlZEZpYmVyKHNvdXJjZUZpYmVyKSB7XG4gIGlmICg1MCA8IG5lc3RlZFVwZGF0ZUNvdW50KVxuICAgIHRocm93IChcbiAgICAgICgobmVzdGVkVXBkYXRlQ291bnQgPSAwKSxcbiAgICAgIChyb290V2l0aE5lc3RlZFVwZGF0ZXMgPSBudWxsKSxcbiAgICAgIEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTg1KSkpXG4gICAgKTtcbiAgZm9yICh2YXIgcGFyZW50ID0gc291cmNlRmliZXIucmV0dXJuOyBudWxsICE9PSBwYXJlbnQ7IClcbiAgICAoc291cmNlRmliZXIgPSBwYXJlbnQpLCAocGFyZW50ID0gc291cmNlRmliZXIucmV0dXJuKTtcbiAgcmV0dXJuIDMgPT09IHNvdXJjZUZpYmVyLnRhZyA/IHNvdXJjZUZpYmVyLnN0YXRlTm9kZSA6IG51bGw7XG59XG52YXIgZW1wdHlDb250ZXh0T2JqZWN0ID0ge30sXG4gIENhcHR1cmVkU3RhY2tzID0gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHZhbHVlLCBzb3VyY2UpIHtcbiAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiB2YWx1ZSAmJiBudWxsICE9PSB2YWx1ZSkge1xuICAgIHZhciBleGlzdGluZyA9IENhcHR1cmVkU3RhY2tzLmdldCh2YWx1ZSk7XG4gICAgaWYgKHZvaWQgMCAhPT0gZXhpc3RpbmcpIHJldHVybiBleGlzdGluZztcbiAgICBzb3VyY2UgPSB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgIHN0YWNrOiBnZXRTdGFja0J5RmliZXJJbkRldkFuZFByb2Qoc291cmNlKVxuICAgIH07XG4gICAgQ2FwdHVyZWRTdGFja3Muc2V0KHZhbHVlLCBzb3VyY2UpO1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgc291cmNlOiBzb3VyY2UsXG4gICAgc3RhY2s6IGdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZChzb3VyY2UpXG4gIH07XG59XG52YXIgZm9ya1N0YWNrID0gW10sXG4gIGZvcmtTdGFja0luZGV4ID0gMCxcbiAgdHJlZUZvcmtQcm92aWRlciA9IG51bGwsXG4gIHRyZWVGb3JrQ291bnQgPSAwLFxuICBpZFN0YWNrID0gW10sXG4gIGlkU3RhY2tJbmRleCA9IDAsXG4gIHRyZWVDb250ZXh0UHJvdmlkZXIgPSBudWxsLFxuICB0cmVlQ29udGV4dElkID0gMSxcbiAgdHJlZUNvbnRleHRPdmVyZmxvdyA9IFwiXCI7XG5mdW5jdGlvbiBwdXNoVHJlZUZvcmsod29ya0luUHJvZ3Jlc3MsIHRvdGFsQ2hpbGRyZW4pIHtcbiAgZm9ya1N0YWNrW2ZvcmtTdGFja0luZGV4KytdID0gdHJlZUZvcmtDb3VudDtcbiAgZm9ya1N0YWNrW2ZvcmtTdGFja0luZGV4KytdID0gdHJlZUZvcmtQcm92aWRlcjtcbiAgdHJlZUZvcmtQcm92aWRlciA9IHdvcmtJblByb2dyZXNzO1xuICB0cmVlRm9ya0NvdW50ID0gdG90YWxDaGlsZHJlbjtcbn1cbmZ1bmN0aW9uIHB1c2hUcmVlSWQod29ya0luUHJvZ3Jlc3MsIHRvdGFsQ2hpbGRyZW4sIGluZGV4KSB7XG4gIGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRJZDtcbiAgaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dE92ZXJmbG93O1xuICBpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0UHJvdmlkZXI7XG4gIHRyZWVDb250ZXh0UHJvdmlkZXIgPSB3b3JrSW5Qcm9ncmVzcztcbiAgdmFyIGJhc2VJZFdpdGhMZWFkaW5nQml0ID0gdHJlZUNvbnRleHRJZDtcbiAgd29ya0luUHJvZ3Jlc3MgPSB0cmVlQ29udGV4dE92ZXJmbG93O1xuICB2YXIgYmFzZUxlbmd0aCA9IDMyIC0gY2x6MzIoYmFzZUlkV2l0aExlYWRpbmdCaXQpIC0gMTtcbiAgYmFzZUlkV2l0aExlYWRpbmdCaXQgJj0gfigxIDw8IGJhc2VMZW5ndGgpO1xuICBpbmRleCArPSAxO1xuICB2YXIgbGVuZ3RoID0gMzIgLSBjbHozMih0b3RhbENoaWxkcmVuKSArIGJhc2VMZW5ndGg7XG4gIGlmICgzMCA8IGxlbmd0aCkge1xuICAgIHZhciBudW1iZXJPZk92ZXJmbG93Qml0cyA9IGJhc2VMZW5ndGggLSAoYmFzZUxlbmd0aCAlIDUpO1xuICAgIGxlbmd0aCA9IChcbiAgICAgIGJhc2VJZFdpdGhMZWFkaW5nQml0ICZcbiAgICAgICgoMSA8PCBudW1iZXJPZk92ZXJmbG93Qml0cykgLSAxKVxuICAgICkudG9TdHJpbmcoMzIpO1xuICAgIGJhc2VJZFdpdGhMZWFkaW5nQml0ID4+PSBudW1iZXJPZk92ZXJmbG93Qml0cztcbiAgICBiYXNlTGVuZ3RoIC09IG51bWJlck9mT3ZlcmZsb3dCaXRzO1xuICAgIHRyZWVDb250ZXh0SWQgPVxuICAgICAgKDEgPDwgKDMyIC0gY2x6MzIodG90YWxDaGlsZHJlbikgKyBiYXNlTGVuZ3RoKSkgfFxuICAgICAgKGluZGV4IDw8IGJhc2VMZW5ndGgpIHxcbiAgICAgIGJhc2VJZFdpdGhMZWFkaW5nQml0O1xuICAgIHRyZWVDb250ZXh0T3ZlcmZsb3cgPSBsZW5ndGggKyB3b3JrSW5Qcm9ncmVzcztcbiAgfSBlbHNlXG4gICAgKHRyZWVDb250ZXh0SWQgPVxuICAgICAgKDEgPDwgbGVuZ3RoKSB8IChpbmRleCA8PCBiYXNlTGVuZ3RoKSB8IGJhc2VJZFdpdGhMZWFkaW5nQml0KSxcbiAgICAgICh0cmVlQ29udGV4dE92ZXJmbG93ID0gd29ya0luUHJvZ3Jlc3MpO1xufVxuZnVuY3Rpb24gcHVzaE1hdGVyaWFsaXplZFRyZWVJZCh3b3JrSW5Qcm9ncmVzcykge1xuICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5yZXR1cm4gJiZcbiAgICAocHVzaFRyZWVGb3JrKHdvcmtJblByb2dyZXNzLCAxKSwgcHVzaFRyZWVJZCh3b3JrSW5Qcm9ncmVzcywgMSwgMCkpO1xufVxuZnVuY3Rpb24gcG9wVHJlZUNvbnRleHQod29ya0luUHJvZ3Jlc3MpIHtcbiAgZm9yICg7IHdvcmtJblByb2dyZXNzID09PSB0cmVlRm9ya1Byb3ZpZGVyOyApXG4gICAgKHRyZWVGb3JrUHJvdmlkZXIgPSBmb3JrU3RhY2tbLS1mb3JrU3RhY2tJbmRleF0pLFxuICAgICAgKGZvcmtTdGFja1tmb3JrU3RhY2tJbmRleF0gPSBudWxsKSxcbiAgICAgICh0cmVlRm9ya0NvdW50ID0gZm9ya1N0YWNrWy0tZm9ya1N0YWNrSW5kZXhdKSxcbiAgICAgIChmb3JrU3RhY2tbZm9ya1N0YWNrSW5kZXhdID0gbnVsbCk7XG4gIGZvciAoOyB3b3JrSW5Qcm9ncmVzcyA9PT0gdHJlZUNvbnRleHRQcm92aWRlcjsgKVxuICAgICh0cmVlQ29udGV4dFByb3ZpZGVyID0gaWRTdGFja1stLWlkU3RhY2tJbmRleF0pLFxuICAgICAgKGlkU3RhY2tbaWRTdGFja0luZGV4XSA9IG51bGwpLFxuICAgICAgKHRyZWVDb250ZXh0T3ZlcmZsb3cgPSBpZFN0YWNrWy0taWRTdGFja0luZGV4XSksXG4gICAgICAoaWRTdGFja1tpZFN0YWNrSW5kZXhdID0gbnVsbCksXG4gICAgICAodHJlZUNvbnRleHRJZCA9IGlkU3RhY2tbLS1pZFN0YWNrSW5kZXhdKSxcbiAgICAgIChpZFN0YWNrW2lkU3RhY2tJbmRleF0gPSBudWxsKTtcbn1cbnZhciBoeWRyYXRpb25QYXJlbnRGaWJlciA9IG51bGwsXG4gIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsLFxuICBpc0h5ZHJhdGluZyA9ICExLFxuICBoeWRyYXRpb25FcnJvcnMgPSBudWxsLFxuICByb290T3JTaW5nbGV0b25Db250ZXh0ID0gITEsXG4gIEh5ZHJhdGlvbk1pc21hdGNoRXhjZXB0aW9uID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1MTkpKTtcbmZ1bmN0aW9uIHRocm93T25IeWRyYXRpb25NaXNtYXRjaChmaWJlcikge1xuICB2YXIgZXJyb3IgPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQxOCwgXCJcIikpO1xuICBxdWV1ZUh5ZHJhdGlvbkVycm9yKGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKGVycm9yLCBmaWJlcikpO1xuICB0aHJvdyBIeWRyYXRpb25NaXNtYXRjaEV4Y2VwdGlvbjtcbn1cbmZ1bmN0aW9uIHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UoZmliZXIpIHtcbiAgdmFyIGluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlLFxuICAgIHR5cGUgPSBmaWJlci50eXBlLFxuICAgIHByb3BzID0gZmliZXIubWVtb2l6ZWRQcm9wcztcbiAgaW5zdGFuY2VbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSBmaWJlcjtcbiAgaW5zdGFuY2VbaW50ZXJuYWxQcm9wc0tleV0gPSBwcm9wcztcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcImRpYWxvZ1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImNhbmNlbFwiLCBpbnN0YW5jZSk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiY2xvc2VcIiwgaW5zdGFuY2UpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlmcmFtZVwiOlxuICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICBjYXNlIFwiZW1iZWRcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJsb2FkXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ2aWRlb1wiOlxuICAgIGNhc2UgXCJhdWRpb1wiOlxuICAgICAgZm9yICh0eXBlID0gMDsgdHlwZSA8IG1lZGlhRXZlbnRUeXBlcy5sZW5ndGg7IHR5cGUrKylcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChtZWRpYUV2ZW50VHlwZXNbdHlwZV0sIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzb3VyY2VcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW1nXCI6XG4gICAgY2FzZSBcImltYWdlXCI6XG4gICAgY2FzZSBcImxpbmtcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJlcnJvclwiLCBpbnN0YW5jZSk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwibG9hZFwiLCBpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZGV0YWlsc1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInRvZ2dsZVwiLCBpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGluc3RhbmNlKTtcbiAgICAgIGluaXRJbnB1dChcbiAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgIHByb3BzLnZhbHVlLFxuICAgICAgICBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgIHByb3BzLmNoZWNrZWQsXG4gICAgICAgIHByb3BzLmRlZmF1bHRDaGVja2VkLFxuICAgICAgICBwcm9wcy50eXBlLFxuICAgICAgICBwcm9wcy5uYW1lLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICAgIHRyYWNrKGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJpbnZhbGlkXCIsIGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ0ZXh0YXJlYVwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImludmFsaWRcIiwgaW5zdGFuY2UpLFxuICAgICAgICBpbml0VGV4dGFyZWEoaW5zdGFuY2UsIHByb3BzLnZhbHVlLCBwcm9wcy5kZWZhdWx0VmFsdWUsIHByb3BzLmNoaWxkcmVuKSxcbiAgICAgICAgdHJhY2soaW5zdGFuY2UpO1xuICB9XG4gIHR5cGUgPSBwcm9wcy5jaGlsZHJlbjtcbiAgKFwic3RyaW5nXCIgIT09IHR5cGVvZiB0eXBlICYmXG4gICAgXCJudW1iZXJcIiAhPT0gdHlwZW9mIHR5cGUgJiZcbiAgICBcImJpZ2ludFwiICE9PSB0eXBlb2YgdHlwZSkgfHxcbiAgaW5zdGFuY2UudGV4dENvbnRlbnQgPT09IFwiXCIgKyB0eXBlIHx8XG4gICEwID09PSBwcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgfHxcbiAgY2hlY2tGb3JVbm1hdGNoZWRUZXh0KGluc3RhbmNlLnRleHRDb250ZW50LCB0eXBlKVxuICAgID8gKG51bGwgIT0gcHJvcHMucG9wb3ZlciAmJlxuICAgICAgICAobGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImJlZm9yZXRvZ2dsZVwiLCBpbnN0YW5jZSksXG4gICAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJ0b2dnbGVcIiwgaW5zdGFuY2UpKSxcbiAgICAgIG51bGwgIT0gcHJvcHMub25TY3JvbGwgJiYgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInNjcm9sbFwiLCBpbnN0YW5jZSksXG4gICAgICBudWxsICE9IHByb3BzLm9uU2Nyb2xsRW5kICYmXG4gICAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJzY3JvbGxlbmRcIiwgaW5zdGFuY2UpLFxuICAgICAgbnVsbCAhPSBwcm9wcy5vbkNsaWNrICYmIChpbnN0YW5jZS5vbmNsaWNrID0gbm9vcCQxKSxcbiAgICAgIChpbnN0YW5jZSA9ICEwKSlcbiAgICA6IChpbnN0YW5jZSA9ICExKTtcbiAgaW5zdGFuY2UgfHwgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKGZpYmVyKTtcbn1cbmZ1bmN0aW9uIHBvcFRvTmV4dEhvc3RQYXJlbnQoZmliZXIpIHtcbiAgZm9yIChoeWRyYXRpb25QYXJlbnRGaWJlciA9IGZpYmVyLnJldHVybjsgaHlkcmF0aW9uUGFyZW50RmliZXI7IClcbiAgICBzd2l0Y2ggKGh5ZHJhdGlvblBhcmVudEZpYmVyLnRhZykge1xuICAgICAgY2FzZSAzOlxuICAgICAgY2FzZSAyNzpcbiAgICAgICAgcm9vdE9yU2luZ2xldG9uQ29udGV4dCA9ICEwO1xuICAgICAgICByZXR1cm47XG4gICAgICBjYXNlIDU6XG4gICAgICBjYXNlIDEzOlxuICAgICAgICByb290T3JTaW5nbGV0b25Db250ZXh0ID0gITE7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gaHlkcmF0aW9uUGFyZW50RmliZXIucmV0dXJuO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBvcEh5ZHJhdGlvblN0YXRlKGZpYmVyKSB7XG4gIGlmIChmaWJlciAhPT0gaHlkcmF0aW9uUGFyZW50RmliZXIpIHJldHVybiAhMTtcbiAgaWYgKCFpc0h5ZHJhdGluZykgcmV0dXJuIHBvcFRvTmV4dEhvc3RQYXJlbnQoZmliZXIpLCAoaXNIeWRyYXRpbmcgPSAhMCksICExO1xuICB2YXIgc2hvdWxkQ2xlYXIgPSAhMSxcbiAgICBKU0NvbXBpbGVyX3RlbXA7XG4gIGlmICgoSlNDb21waWxlcl90ZW1wID0gMyAhPT0gZmliZXIudGFnICYmIDI3ICE9PSBmaWJlci50YWcpKSB7XG4gICAgaWYgKChKU0NvbXBpbGVyX3RlbXAgPSA1ID09PSBmaWJlci50YWcpKVxuICAgICAgKEpTQ29tcGlsZXJfdGVtcCA9IGZpYmVyLnR5cGUpLFxuICAgICAgICAoSlNDb21waWxlcl90ZW1wID1cbiAgICAgICAgICAhKFwiZm9ybVwiICE9PSBKU0NvbXBpbGVyX3RlbXAgJiYgXCJidXR0b25cIiAhPT0gSlNDb21waWxlcl90ZW1wKSB8fFxuICAgICAgICAgIHNob3VsZFNldFRleHRDb250ZW50KGZpYmVyLnR5cGUsIGZpYmVyLm1lbW9pemVkUHJvcHMpKTtcbiAgICBKU0NvbXBpbGVyX3RlbXAgPSAhSlNDb21waWxlcl90ZW1wO1xuICB9XG4gIEpTQ29tcGlsZXJfdGVtcCAmJiAoc2hvdWxkQ2xlYXIgPSAhMCk7XG4gIHNob3VsZENsZWFyICYmIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgJiYgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKGZpYmVyKTtcbiAgcG9wVG9OZXh0SG9zdFBhcmVudChmaWJlcik7XG4gIGlmICgxMyA9PT0gZmliZXIudGFnKSB7XG4gICAgZmliZXIgPSBmaWJlci5tZW1vaXplZFN0YXRlO1xuICAgIGZpYmVyID0gbnVsbCAhPT0gZmliZXIgPyBmaWJlci5kZWh5ZHJhdGVkIDogbnVsbDtcbiAgICBpZiAoIWZpYmVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMxNykpO1xuICAgIGE6IHtcbiAgICAgIGZpYmVyID0gZmliZXIubmV4dFNpYmxpbmc7XG4gICAgICBmb3IgKHNob3VsZENsZWFyID0gMDsgZmliZXI7ICkge1xuICAgICAgICBpZiAoOCA9PT0gZmliZXIubm9kZVR5cGUpXG4gICAgICAgICAgaWYgKCgoSlNDb21waWxlcl90ZW1wID0gZmliZXIuZGF0YSksIFwiLyRcIiA9PT0gSlNDb21waWxlcl90ZW1wKSkge1xuICAgICAgICAgICAgaWYgKDAgPT09IHNob3VsZENsZWFyKSB7XG4gICAgICAgICAgICAgIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShmaWJlci5uZXh0U2libGluZyk7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaG91bGRDbGVhci0tO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgKFwiJFwiICE9PSBKU0NvbXBpbGVyX3RlbXAgJiZcbiAgICAgICAgICAgICAgXCIkIVwiICE9PSBKU0NvbXBpbGVyX3RlbXAgJiZcbiAgICAgICAgICAgICAgXCIkP1wiICE9PSBKU0NvbXBpbGVyX3RlbXApIHx8XG4gICAgICAgICAgICAgIHNob3VsZENsZWFyKys7XG4gICAgICAgIGZpYmVyID0gZmliZXIubmV4dFNpYmxpbmc7XG4gICAgICB9XG4gICAgICBuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gIH0gZWxzZVxuICAgIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBoeWRyYXRpb25QYXJlbnRGaWJlclxuICAgICAgPyBnZXROZXh0SHlkcmF0YWJsZShmaWJlci5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpXG4gICAgICA6IG51bGw7XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIHJlc2V0SHlkcmF0aW9uU3RhdGUoKSB7XG4gIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBoeWRyYXRpb25QYXJlbnRGaWJlciA9IG51bGw7XG4gIGlzSHlkcmF0aW5nID0gITE7XG59XG5mdW5jdGlvbiBxdWV1ZUh5ZHJhdGlvbkVycm9yKGVycm9yKSB7XG4gIG51bGwgPT09IGh5ZHJhdGlvbkVycm9yc1xuICAgID8gKGh5ZHJhdGlvbkVycm9ycyA9IFtlcnJvcl0pXG4gICAgOiBoeWRyYXRpb25FcnJvcnMucHVzaChlcnJvcik7XG59XG52YXIgU3VzcGVuc2VFeGNlcHRpb24gPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ2MCkpLFxuICBTdXNwZW5zZXlDb21taXRFeGNlcHRpb24gPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3NCkpLFxuICBub29wU3VzcGVuc2V5Q29tbWl0VGhlbmFibGUgPSB7IHRoZW46IGZ1bmN0aW9uICgpIHt9IH07XG5mdW5jdGlvbiBpc1RoZW5hYmxlUmVzb2x2ZWQodGhlbmFibGUpIHtcbiAgdGhlbmFibGUgPSB0aGVuYWJsZS5zdGF0dXM7XG4gIHJldHVybiBcImZ1bGZpbGxlZFwiID09PSB0aGVuYWJsZSB8fCBcInJlamVjdGVkXCIgPT09IHRoZW5hYmxlO1xufVxuZnVuY3Rpb24gbm9vcCQzKCkge31cbmZ1bmN0aW9uIHRyYWNrVXNlZFRoZW5hYmxlKHRoZW5hYmxlU3RhdGUsIHRoZW5hYmxlLCBpbmRleCkge1xuICBpbmRleCA9IHRoZW5hYmxlU3RhdGVbaW5kZXhdO1xuICB2b2lkIDAgPT09IGluZGV4XG4gICAgPyB0aGVuYWJsZVN0YXRlLnB1c2godGhlbmFibGUpXG4gICAgOiBpbmRleCAhPT0gdGhlbmFibGUgJiYgKHRoZW5hYmxlLnRoZW4obm9vcCQzLCBub29wJDMpLCAodGhlbmFibGUgPSBpbmRleCkpO1xuICBzd2l0Y2ggKHRoZW5hYmxlLnN0YXR1cykge1xuICAgIGNhc2UgXCJmdWxmaWxsZWRcIjpcbiAgICAgIHJldHVybiB0aGVuYWJsZS52YWx1ZTtcbiAgICBjYXNlIFwicmVqZWN0ZWRcIjpcbiAgICAgIHRoZW5hYmxlU3RhdGUgPSB0aGVuYWJsZS5yZWFzb247XG4gICAgICBpZiAodGhlbmFibGVTdGF0ZSA9PT0gU3VzcGVuc2VFeGNlcHRpb24pXG4gICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDgzKSk7XG4gICAgICB0aHJvdyB0aGVuYWJsZVN0YXRlO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHRoZW5hYmxlLnN0YXR1cykgdGhlbmFibGUudGhlbihub29wJDMsIG5vb3AkMyk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhlbmFibGVTdGF0ZSA9IHdvcmtJblByb2dyZXNzUm9vdDtcbiAgICAgICAgaWYgKG51bGwgIT09IHRoZW5hYmxlU3RhdGUgJiYgMTAwIDwgdGhlbmFibGVTdGF0ZS5zaGVsbFN1c3BlbmRDb3VudGVyKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDgyKSk7XG4gICAgICAgIHRoZW5hYmxlU3RhdGUgPSB0aGVuYWJsZTtcbiAgICAgICAgdGhlbmFibGVTdGF0ZS5zdGF0dXMgPSBcInBlbmRpbmdcIjtcbiAgICAgICAgdGhlbmFibGVTdGF0ZS50aGVuKFxuICAgICAgICAgIGZ1bmN0aW9uIChmdWxmaWxsZWRWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKFwicGVuZGluZ1wiID09PSB0aGVuYWJsZS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgdmFyIGZ1bGZpbGxlZFRoZW5hYmxlID0gdGhlbmFibGU7XG4gICAgICAgICAgICAgIGZ1bGZpbGxlZFRoZW5hYmxlLnN0YXR1cyA9IFwiZnVsZmlsbGVkXCI7XG4gICAgICAgICAgICAgIGZ1bGZpbGxlZFRoZW5hYmxlLnZhbHVlID0gZnVsZmlsbGVkVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChcInBlbmRpbmdcIiA9PT0gdGhlbmFibGUuc3RhdHVzKSB7XG4gICAgICAgICAgICAgIHZhciByZWplY3RlZFRoZW5hYmxlID0gdGhlbmFibGU7XG4gICAgICAgICAgICAgIHJlamVjdGVkVGhlbmFibGUuc3RhdHVzID0gXCJyZWplY3RlZFwiO1xuICAgICAgICAgICAgICByZWplY3RlZFRoZW5hYmxlLnJlYXNvbiA9IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAodGhlbmFibGUuc3RhdHVzKSB7XG4gICAgICAgIGNhc2UgXCJmdWxmaWxsZWRcIjpcbiAgICAgICAgICByZXR1cm4gdGhlbmFibGUudmFsdWU7XG4gICAgICAgIGNhc2UgXCJyZWplY3RlZFwiOlxuICAgICAgICAgIHRoZW5hYmxlU3RhdGUgPSB0aGVuYWJsZS5yZWFzb247XG4gICAgICAgICAgaWYgKHRoZW5hYmxlU3RhdGUgPT09IFN1c3BlbnNlRXhjZXB0aW9uKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0ODMpKTtcbiAgICAgICAgICB0aHJvdyB0aGVuYWJsZVN0YXRlO1xuICAgICAgfVxuICAgICAgc3VzcGVuZGVkVGhlbmFibGUgPSB0aGVuYWJsZTtcbiAgICAgIHRocm93IFN1c3BlbnNlRXhjZXB0aW9uO1xuICB9XG59XG52YXIgc3VzcGVuZGVkVGhlbmFibGUgPSBudWxsO1xuZnVuY3Rpb24gZ2V0U3VzcGVuZGVkVGhlbmFibGUoKSB7XG4gIGlmIChudWxsID09PSBzdXNwZW5kZWRUaGVuYWJsZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NTkpKTtcbiAgdmFyIHRoZW5hYmxlID0gc3VzcGVuZGVkVGhlbmFibGU7XG4gIHN1c3BlbmRlZFRoZW5hYmxlID0gbnVsbDtcbiAgcmV0dXJuIHRoZW5hYmxlO1xufVxudmFyIHRoZW5hYmxlU3RhdGUkMSA9IG51bGwsXG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyJDEgPSAwO1xuZnVuY3Rpb24gdW53cmFwVGhlbmFibGUodGhlbmFibGUpIHtcbiAgdmFyIGluZGV4ID0gdGhlbmFibGVJbmRleENvdW50ZXIkMTtcbiAgdGhlbmFibGVJbmRleENvdW50ZXIkMSArPSAxO1xuICBudWxsID09PSB0aGVuYWJsZVN0YXRlJDEgJiYgKHRoZW5hYmxlU3RhdGUkMSA9IFtdKTtcbiAgcmV0dXJuIHRyYWNrVXNlZFRoZW5hYmxlKHRoZW5hYmxlU3RhdGUkMSwgdGhlbmFibGUsIGluZGV4KTtcbn1cbmZ1bmN0aW9uIGNvZXJjZVJlZih3b3JrSW5Qcm9ncmVzcywgZWxlbWVudCkge1xuICBlbGVtZW50ID0gZWxlbWVudC5wcm9wcy5yZWY7XG4gIHdvcmtJblByb2dyZXNzLnJlZiA9IHZvaWQgMCAhPT0gZWxlbWVudCA/IGVsZW1lbnQgOiBudWxsO1xufVxuZnVuY3Rpb24gdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyLCBuZXdDaGlsZCkge1xuICBpZiAobmV3Q2hpbGQuJCR0eXBlb2YgPT09IFJFQUNUX0xFR0FDWV9FTEVNRU5UX1RZUEUpXG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1MjUpKTtcbiAgcmV0dXJuRmliZXIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3Q2hpbGQpO1xuICB0aHJvdyBFcnJvcihcbiAgICBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKFxuICAgICAgMzEsXG4gICAgICBcIltvYmplY3QgT2JqZWN0XVwiID09PSByZXR1cm5GaWJlclxuICAgICAgICA/IFwib2JqZWN0IHdpdGgga2V5cyB7XCIgKyBPYmplY3Qua2V5cyhuZXdDaGlsZCkuam9pbihcIiwgXCIpICsgXCJ9XCJcbiAgICAgICAgOiByZXR1cm5GaWJlclxuICAgIClcbiAgKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVMYXp5KGxhenlUeXBlKSB7XG4gIHZhciBpbml0ID0gbGF6eVR5cGUuX2luaXQ7XG4gIHJldHVybiBpbml0KGxhenlUeXBlLl9wYXlsb2FkKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNoaWxkUmVjb25jaWxlcihzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gIGZ1bmN0aW9uIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZFRvRGVsZXRlKSB7XG4gICAgaWYgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgICAgIHZhciBkZWxldGlvbnMgPSByZXR1cm5GaWJlci5kZWxldGlvbnM7XG4gICAgICBudWxsID09PSBkZWxldGlvbnNcbiAgICAgICAgPyAoKHJldHVybkZpYmVyLmRlbGV0aW9ucyA9IFtjaGlsZFRvRGVsZXRlXSksIChyZXR1cm5GaWJlci5mbGFncyB8PSAxNikpXG4gICAgICAgIDogZGVsZXRpb25zLnB1c2goY2hpbGRUb0RlbGV0ZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCkge1xuICAgIGlmICghc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykgcmV0dXJuIG51bGw7XG4gICAgZm9yICg7IG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkOyApXG4gICAgICBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpLFxuICAgICAgICAoY3VycmVudEZpcnN0Q2hpbGQgPSBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiBtYXBSZW1haW5pbmdDaGlsZHJlbihjdXJyZW50Rmlyc3RDaGlsZCkge1xuICAgIGZvciAodmFyIGV4aXN0aW5nQ2hpbGRyZW4gPSBuZXcgTWFwKCk7IG51bGwgIT09IGN1cnJlbnRGaXJzdENoaWxkOyApXG4gICAgICBudWxsICE9PSBjdXJyZW50Rmlyc3RDaGlsZC5rZXlcbiAgICAgICAgPyBleGlzdGluZ0NoaWxkcmVuLnNldChjdXJyZW50Rmlyc3RDaGlsZC5rZXksIGN1cnJlbnRGaXJzdENoaWxkKVxuICAgICAgICA6IGV4aXN0aW5nQ2hpbGRyZW4uc2V0KGN1cnJlbnRGaXJzdENoaWxkLmluZGV4LCBjdXJyZW50Rmlyc3RDaGlsZCksXG4gICAgICAgIChjdXJyZW50Rmlyc3RDaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmcpO1xuICAgIHJldHVybiBleGlzdGluZ0NoaWxkcmVuO1xuICB9XG4gIGZ1bmN0aW9uIHVzZUZpYmVyKGZpYmVyLCBwZW5kaW5nUHJvcHMpIHtcbiAgICBmaWJlciA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKGZpYmVyLCBwZW5kaW5nUHJvcHMpO1xuICAgIGZpYmVyLmluZGV4ID0gMDtcbiAgICBmaWJlci5zaWJsaW5nID0gbnVsbDtcbiAgICByZXR1cm4gZmliZXI7XG4gIH1cbiAgZnVuY3Rpb24gcGxhY2VDaGlsZChuZXdGaWJlciwgbGFzdFBsYWNlZEluZGV4LCBuZXdJbmRleCkge1xuICAgIG5ld0ZpYmVyLmluZGV4ID0gbmV3SW5kZXg7XG4gICAgaWYgKCFzaG91bGRUcmFja1NpZGVFZmZlY3RzKVxuICAgICAgcmV0dXJuIChuZXdGaWJlci5mbGFncyB8PSAxMDQ4NTc2KSwgbGFzdFBsYWNlZEluZGV4O1xuICAgIG5ld0luZGV4ID0gbmV3RmliZXIuYWx0ZXJuYXRlO1xuICAgIGlmIChudWxsICE9PSBuZXdJbmRleClcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChuZXdJbmRleCA9IG5ld0luZGV4LmluZGV4KSxcbiAgICAgICAgbmV3SW5kZXggPCBsYXN0UGxhY2VkSW5kZXhcbiAgICAgICAgICA/ICgobmV3RmliZXIuZmxhZ3MgfD0gMzM1NTQ0MzQpLCBsYXN0UGxhY2VkSW5kZXgpXG4gICAgICAgICAgOiBuZXdJbmRleFxuICAgICAgKTtcbiAgICBuZXdGaWJlci5mbGFncyB8PSAzMzU1NDQzNDtcbiAgICByZXR1cm4gbGFzdFBsYWNlZEluZGV4O1xuICB9XG4gIGZ1bmN0aW9uIHBsYWNlU2luZ2xlQ2hpbGQobmV3RmliZXIpIHtcbiAgICBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICBudWxsID09PSBuZXdGaWJlci5hbHRlcm5hdGUgJiZcbiAgICAgIChuZXdGaWJlci5mbGFncyB8PSAzMzU1NDQzNCk7XG4gICAgcmV0dXJuIG5ld0ZpYmVyO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZVRleHROb2RlKHJldHVybkZpYmVyLCBjdXJyZW50LCB0ZXh0Q29udGVudCwgbGFuZXMpIHtcbiAgICBpZiAobnVsbCA9PT0gY3VycmVudCB8fCA2ICE9PSBjdXJyZW50LnRhZylcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChjdXJyZW50ID0gY3JlYXRlRmliZXJGcm9tVGV4dCh0ZXh0Q29udGVudCwgcmV0dXJuRmliZXIubW9kZSwgbGFuZXMpKSxcbiAgICAgICAgKGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICBjdXJyZW50XG4gICAgICApO1xuICAgIGN1cnJlbnQgPSB1c2VGaWJlcihjdXJyZW50LCB0ZXh0Q29udGVudCk7XG4gICAgY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVFbGVtZW50KHJldHVybkZpYmVyLCBjdXJyZW50LCBlbGVtZW50LCBsYW5lcykge1xuICAgIHZhciBlbGVtZW50VHlwZSA9IGVsZW1lbnQudHlwZTtcbiAgICBpZiAoZWxlbWVudFR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUpXG4gICAgICByZXR1cm4gdXBkYXRlRnJhZ21lbnQoXG4gICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICBlbGVtZW50LnByb3BzLmNoaWxkcmVuLFxuICAgICAgICBsYW5lcyxcbiAgICAgICAgZWxlbWVudC5rZXlcbiAgICAgICk7XG4gICAgaWYgKFxuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgKGN1cnJlbnQuZWxlbWVudFR5cGUgPT09IGVsZW1lbnRUeXBlIHx8XG4gICAgICAgIChcIm9iamVjdFwiID09PSB0eXBlb2YgZWxlbWVudFR5cGUgJiZcbiAgICAgICAgICBudWxsICE9PSBlbGVtZW50VHlwZSAmJlxuICAgICAgICAgIGVsZW1lbnRUeXBlLiQkdHlwZW9mID09PSBSRUFDVF9MQVpZX1RZUEUgJiZcbiAgICAgICAgICByZXNvbHZlTGF6eShlbGVtZW50VHlwZSkgPT09IGN1cnJlbnQudHlwZSkpXG4gICAgKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGN1cnJlbnQgPSB1c2VGaWJlcihjdXJyZW50LCBlbGVtZW50LnByb3BzKSksXG4gICAgICAgIGNvZXJjZVJlZihjdXJyZW50LCBlbGVtZW50KSxcbiAgICAgICAgKGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICBjdXJyZW50XG4gICAgICApO1xuICAgIGN1cnJlbnQgPSBjcmVhdGVGaWJlckZyb21UeXBlQW5kUHJvcHMoXG4gICAgICBlbGVtZW50LnR5cGUsXG4gICAgICBlbGVtZW50LmtleSxcbiAgICAgIGVsZW1lbnQucHJvcHMsXG4gICAgICBudWxsLFxuICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgIGxhbmVzXG4gICAgKTtcbiAgICBjb2VyY2VSZWYoY3VycmVudCwgZWxlbWVudCk7XG4gICAgY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVQb3J0YWwocmV0dXJuRmliZXIsIGN1cnJlbnQsIHBvcnRhbCwgbGFuZXMpIHtcbiAgICBpZiAoXG4gICAgICBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICA0ICE9PSBjdXJyZW50LnRhZyB8fFxuICAgICAgY3VycmVudC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyAhPT0gcG9ydGFsLmNvbnRhaW5lckluZm8gfHxcbiAgICAgIGN1cnJlbnQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uICE9PSBwb3J0YWwuaW1wbGVtZW50YXRpb25cbiAgICApXG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudCA9IGNyZWF0ZUZpYmVyRnJvbVBvcnRhbChwb3J0YWwsIHJldHVybkZpYmVyLm1vZGUsIGxhbmVzKSksXG4gICAgICAgIChjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgY3VycmVudFxuICAgICAgKTtcbiAgICBjdXJyZW50ID0gdXNlRmliZXIoY3VycmVudCwgcG9ydGFsLmNoaWxkcmVuIHx8IFtdKTtcbiAgICBjdXJyZW50LnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjdXJyZW50O1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZUZyYWdtZW50KHJldHVybkZpYmVyLCBjdXJyZW50LCBmcmFnbWVudCwgbGFuZXMsIGtleSkge1xuICAgIGlmIChudWxsID09PSBjdXJyZW50IHx8IDcgIT09IGN1cnJlbnQudGFnKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGN1cnJlbnQgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChcbiAgICAgICAgICBmcmFnbWVudCxcbiAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgIGtleVxuICAgICAgICApKSxcbiAgICAgICAgKGN1cnJlbnQucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICBjdXJyZW50XG4gICAgICApO1xuICAgIGN1cnJlbnQgPSB1c2VGaWJlcihjdXJyZW50LCBmcmFnbWVudCk7XG4gICAgY3VycmVudC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgbmV3Q2hpbGQsIGxhbmVzKSB7XG4gICAgaWYgKFxuICAgICAgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBcIlwiICE9PSBuZXdDaGlsZCkgfHxcbiAgICAgIFwibnVtYmVyXCIgPT09IHR5cGVvZiBuZXdDaGlsZCB8fFxuICAgICAgXCJiaWdpbnRcIiA9PT0gdHlwZW9mIG5ld0NoaWxkXG4gICAgKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKG5ld0NoaWxkID0gY3JlYXRlRmliZXJGcm9tVGV4dChcbiAgICAgICAgICBcIlwiICsgbmV3Q2hpbGQsXG4gICAgICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgICAgICBsYW5lc1xuICAgICAgICApKSxcbiAgICAgICAgKG5ld0NoaWxkLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgbmV3Q2hpbGRcbiAgICAgICk7XG4gICAgaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBudWxsICE9PSBuZXdDaGlsZCkge1xuICAgICAgc3dpdGNoIChuZXdDaGlsZC4kJHR5cGVvZikge1xuICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRTpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKGxhbmVzID0gY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzKFxuICAgICAgICAgICAgICBuZXdDaGlsZC50eXBlLFxuICAgICAgICAgICAgICBuZXdDaGlsZC5rZXksXG4gICAgICAgICAgICAgIG5ld0NoaWxkLnByb3BzLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgICAgICBsYW5lc1xuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICBjb2VyY2VSZWYobGFuZXMsIG5ld0NoaWxkKSxcbiAgICAgICAgICAgIChsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICBsYW5lc1xuICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChuZXdDaGlsZCA9IGNyZWF0ZUZpYmVyRnJvbVBvcnRhbChcbiAgICAgICAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICAgIGxhbmVzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIChuZXdDaGlsZC5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICBuZXdDaGlsZFxuICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgIHZhciBpbml0ID0gbmV3Q2hpbGQuX2luaXQ7XG4gICAgICAgICAgbmV3Q2hpbGQgPSBpbml0KG5ld0NoaWxkLl9wYXlsb2FkKTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGQocmV0dXJuRmliZXIsIG5ld0NoaWxkLCBsYW5lcyk7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUltcGwobmV3Q2hpbGQpIHx8IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpKVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIChuZXdDaGlsZCA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgICAgbGFuZXMsXG4gICAgICAgICAgICBudWxsXG4gICAgICAgICAgKSksXG4gICAgICAgICAgKG5ld0NoaWxkLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICBuZXdDaGlsZFxuICAgICAgICApO1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG5ld0NoaWxkLnRoZW4pXG4gICAgICAgIHJldHVybiBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgdW53cmFwVGhlbmFibGUobmV3Q2hpbGQpLCBsYW5lcyk7XG4gICAgICBpZiAobmV3Q2hpbGQuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSlcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkKFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIHJlYWRDb250ZXh0RHVyaW5nUmVjb25jaWxpYXRpb24ocmV0dXJuRmliZXIsIG5ld0NoaWxkKSxcbiAgICAgICAgICBsYW5lc1xuICAgICAgICApO1xuICAgICAgdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyLCBuZXdDaGlsZCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZVNsb3QocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpIHtcbiAgICB2YXIga2V5ID0gbnVsbCAhPT0gb2xkRmliZXIgPyBvbGRGaWJlci5rZXkgOiBudWxsO1xuICAgIGlmIChcbiAgICAgIChcInN0cmluZ1wiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgXCJcIiAhPT0gbmV3Q2hpbGQpIHx8XG4gICAgICBcIm51bWJlclwiID09PSB0eXBlb2YgbmV3Q2hpbGQgfHxcbiAgICAgIFwiYmlnaW50XCIgPT09IHR5cGVvZiBuZXdDaGlsZFxuICAgIClcbiAgICAgIHJldHVybiBudWxsICE9PSBrZXlcbiAgICAgICAgPyBudWxsXG4gICAgICAgIDogdXBkYXRlVGV4dE5vZGUocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBcIlwiICsgbmV3Q2hpbGQsIGxhbmVzKTtcbiAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIG51bGwgIT09IG5ld0NoaWxkKSB7XG4gICAgICBzd2l0Y2ggKG5ld0NoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIHJldHVybiBuZXdDaGlsZC5rZXkgPT09IGtleVxuICAgICAgICAgICAgPyB1cGRhdGVFbGVtZW50KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGxhbmVzKVxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIHJldHVybiBuZXdDaGlsZC5rZXkgPT09IGtleVxuICAgICAgICAgICAgPyB1cGRhdGVQb3J0YWwocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoa2V5ID0gbmV3Q2hpbGQuX2luaXQpLFxuICAgICAgICAgICAgKG5ld0NoaWxkID0ga2V5KG5ld0NoaWxkLl9wYXlsb2FkKSksXG4gICAgICAgICAgICB1cGRhdGVTbG90KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGxhbmVzKVxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUltcGwobmV3Q2hpbGQpIHx8IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpKVxuICAgICAgICByZXR1cm4gbnVsbCAhPT0ga2V5XG4gICAgICAgICAgPyBudWxsXG4gICAgICAgICAgOiB1cGRhdGVGcmFnbWVudChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBsYW5lcywgbnVsbCk7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbmV3Q2hpbGQudGhlbilcbiAgICAgICAgcmV0dXJuIHVwZGF0ZVNsb3QoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgb2xkRmliZXIsXG4gICAgICAgICAgdW53cmFwVGhlbmFibGUobmV3Q2hpbGQpLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICBpZiAobmV3Q2hpbGQuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSlcbiAgICAgICAgcmV0dXJuIHVwZGF0ZVNsb3QoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgb2xkRmliZXIsXG4gICAgICAgICAgcmVhZENvbnRleHREdXJpbmdSZWNvbmNpbGlhdGlvbihyZXR1cm5GaWJlciwgbmV3Q2hpbGQpLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlRnJvbU1hcChcbiAgICBleGlzdGluZ0NoaWxkcmVuLFxuICAgIHJldHVybkZpYmVyLFxuICAgIG5ld0lkeCxcbiAgICBuZXdDaGlsZCxcbiAgICBsYW5lc1xuICApIHtcbiAgICBpZiAoXG4gICAgICAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIFwiXCIgIT09IG5ld0NoaWxkKSB8fFxuICAgICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIG5ld0NoaWxkIHx8XG4gICAgICBcImJpZ2ludFwiID09PSB0eXBlb2YgbmV3Q2hpbGRcbiAgICApXG4gICAgICByZXR1cm4gKFxuICAgICAgICAoZXhpc3RpbmdDaGlsZHJlbiA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KG5ld0lkeCkgfHwgbnVsbCksXG4gICAgICAgIHVwZGF0ZVRleHROb2RlKHJldHVybkZpYmVyLCBleGlzdGluZ0NoaWxkcmVuLCBcIlwiICsgbmV3Q2hpbGQsIGxhbmVzKVxuICAgICAgKTtcbiAgICBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZW9mIG5ld0NoaWxkICYmIG51bGwgIT09IG5ld0NoaWxkKSB7XG4gICAgICBzd2l0Y2ggKG5ld0NoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoZXhpc3RpbmdDaGlsZHJlbiA9XG4gICAgICAgICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KFxuICAgICAgICAgICAgICAgIG51bGwgPT09IG5ld0NoaWxkLmtleSA/IG5ld0lkeCA6IG5ld0NoaWxkLmtleVxuICAgICAgICAgICAgICApIHx8IG51bGwpLFxuICAgICAgICAgICAgdXBkYXRlRWxlbWVudChyZXR1cm5GaWJlciwgZXhpc3RpbmdDaGlsZHJlbiwgbmV3Q2hpbGQsIGxhbmVzKVxuICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChleGlzdGluZ0NoaWxkcmVuID1cbiAgICAgICAgICAgICAgZXhpc3RpbmdDaGlsZHJlbi5nZXQoXG4gICAgICAgICAgICAgICAgbnVsbCA9PT0gbmV3Q2hpbGQua2V5ID8gbmV3SWR4IDogbmV3Q2hpbGQua2V5XG4gICAgICAgICAgICAgICkgfHwgbnVsbCksXG4gICAgICAgICAgICB1cGRhdGVQb3J0YWwocmV0dXJuRmliZXIsIGV4aXN0aW5nQ2hpbGRyZW4sIG5ld0NoaWxkLCBsYW5lcylcbiAgICAgICAgICApO1xuICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICB2YXIgaW5pdCA9IG5ld0NoaWxkLl9pbml0O1xuICAgICAgICAgIG5ld0NoaWxkID0gaW5pdChuZXdDaGlsZC5fcGF5bG9hZCk7XG4gICAgICAgICAgcmV0dXJuIHVwZGF0ZUZyb21NYXAoXG4gICAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLFxuICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICBuZXdJZHgsXG4gICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgIGxhbmVzXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5SW1wbChuZXdDaGlsZCkgfHwgZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKGV4aXN0aW5nQ2hpbGRyZW4gPSBleGlzdGluZ0NoaWxkcmVuLmdldChuZXdJZHgpIHx8IG51bGwpLFxuICAgICAgICAgIHVwZGF0ZUZyYWdtZW50KHJldHVybkZpYmVyLCBleGlzdGluZ0NoaWxkcmVuLCBuZXdDaGlsZCwgbGFuZXMsIG51bGwpXG4gICAgICAgICk7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbmV3Q2hpbGQudGhlbilcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUZyb21NYXAoXG4gICAgICAgICAgZXhpc3RpbmdDaGlsZHJlbixcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBuZXdJZHgsXG4gICAgICAgICAgdW53cmFwVGhlbmFibGUobmV3Q2hpbGQpLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICBpZiAobmV3Q2hpbGQuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSlcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUZyb21NYXAoXG4gICAgICAgICAgZXhpc3RpbmdDaGlsZHJlbixcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBuZXdJZHgsXG4gICAgICAgICAgcmVhZENvbnRleHREdXJpbmdSZWNvbmNpbGlhdGlvbihyZXR1cm5GaWJlciwgbmV3Q2hpbGQpLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRyZW5BcnJheShcbiAgICByZXR1cm5GaWJlcixcbiAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICBuZXdDaGlsZHJlbixcbiAgICBsYW5lc1xuICApIHtcbiAgICBmb3IgKFxuICAgICAgdmFyIHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBudWxsLFxuICAgICAgICBwcmV2aW91c05ld0ZpYmVyID0gbnVsbCxcbiAgICAgICAgb2xkRmliZXIgPSBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgbmV3SWR4ID0gKGN1cnJlbnRGaXJzdENoaWxkID0gMCksXG4gICAgICAgIG5leHRPbGRGaWJlciA9IG51bGw7XG4gICAgICBudWxsICE9PSBvbGRGaWJlciAmJiBuZXdJZHggPCBuZXdDaGlsZHJlbi5sZW5ndGg7XG4gICAgICBuZXdJZHgrK1xuICAgICkge1xuICAgICAgb2xkRmliZXIuaW5kZXggPiBuZXdJZHhcbiAgICAgICAgPyAoKG5leHRPbGRGaWJlciA9IG9sZEZpYmVyKSwgKG9sZEZpYmVyID0gbnVsbCkpXG4gICAgICAgIDogKG5leHRPbGRGaWJlciA9IG9sZEZpYmVyLnNpYmxpbmcpO1xuICAgICAgdmFyIG5ld0ZpYmVyID0gdXBkYXRlU2xvdChcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIG9sZEZpYmVyLFxuICAgICAgICBuZXdDaGlsZHJlbltuZXdJZHhdLFxuICAgICAgICBsYW5lc1xuICAgICAgKTtcbiAgICAgIGlmIChudWxsID09PSBuZXdGaWJlcikge1xuICAgICAgICBudWxsID09PSBvbGRGaWJlciAmJiAob2xkRmliZXIgPSBuZXh0T2xkRmliZXIpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHNob3VsZFRyYWNrU2lkZUVmZmVjdHMgJiZcbiAgICAgICAgb2xkRmliZXIgJiZcbiAgICAgICAgbnVsbCA9PT0gbmV3RmliZXIuYWx0ZXJuYXRlICYmXG4gICAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBvbGRGaWJlcik7XG4gICAgICBjdXJyZW50Rmlyc3RDaGlsZCA9IHBsYWNlQ2hpbGQobmV3RmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdJZHgpO1xuICAgICAgbnVsbCA9PT0gcHJldmlvdXNOZXdGaWJlclxuICAgICAgICA/IChyZXN1bHRpbmdGaXJzdENoaWxkID0gbmV3RmliZXIpXG4gICAgICAgIDogKHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5ld0ZpYmVyKTtcbiAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBuZXdGaWJlcjtcbiAgICAgIG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyO1xuICAgIH1cbiAgICBpZiAobmV3SWR4ID09PSBuZXdDaGlsZHJlbi5sZW5ndGgpXG4gICAgICByZXR1cm4gKFxuICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgb2xkRmliZXIpLFxuICAgICAgICBpc0h5ZHJhdGluZyAmJiBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIG5ld0lkeCksXG4gICAgICAgIHJlc3VsdGluZ0ZpcnN0Q2hpbGRcbiAgICAgICk7XG4gICAgaWYgKG51bGwgPT09IG9sZEZpYmVyKSB7XG4gICAgICBmb3IgKDsgbmV3SWR4IDwgbmV3Q2hpbGRyZW4ubGVuZ3RoOyBuZXdJZHgrKylcbiAgICAgICAgKG9sZEZpYmVyID0gY3JlYXRlQ2hpbGQocmV0dXJuRmliZXIsIG5ld0NoaWxkcmVuW25ld0lkeF0sIGxhbmVzKSksXG4gICAgICAgICAgbnVsbCAhPT0gb2xkRmliZXIgJiZcbiAgICAgICAgICAgICgoY3VycmVudEZpcnN0Q2hpbGQgPSBwbGFjZUNoaWxkKFxuICAgICAgICAgICAgICBvbGRGaWJlcixcbiAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgICAgICAgIG5ld0lkeFxuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICBudWxsID09PSBwcmV2aW91c05ld0ZpYmVyXG4gICAgICAgICAgICAgID8gKHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBvbGRGaWJlcilcbiAgICAgICAgICAgICAgOiAocHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gb2xkRmliZXIpLFxuICAgICAgICAgICAgKHByZXZpb3VzTmV3RmliZXIgPSBvbGRGaWJlcikpO1xuICAgICAgaXNIeWRyYXRpbmcgJiYgcHVzaFRyZWVGb3JrKHJldHVybkZpYmVyLCBuZXdJZHgpO1xuICAgICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgfVxuICAgIGZvciAoXG4gICAgICBvbGRGaWJlciA9IG1hcFJlbWFpbmluZ0NoaWxkcmVuKG9sZEZpYmVyKTtcbiAgICAgIG5ld0lkeCA8IG5ld0NoaWxkcmVuLmxlbmd0aDtcbiAgICAgIG5ld0lkeCsrXG4gICAgKVxuICAgICAgKG5leHRPbGRGaWJlciA9IHVwZGF0ZUZyb21NYXAoXG4gICAgICAgIG9sZEZpYmVyLFxuICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgbmV3SWR4LFxuICAgICAgICBuZXdDaGlsZHJlbltuZXdJZHhdLFxuICAgICAgICBsYW5lc1xuICAgICAgKSksXG4gICAgICAgIG51bGwgIT09IG5leHRPbGRGaWJlciAmJlxuICAgICAgICAgIChzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICAgICAgICBudWxsICE9PSBuZXh0T2xkRmliZXIuYWx0ZXJuYXRlICYmXG4gICAgICAgICAgICBvbGRGaWJlci5kZWxldGUoXG4gICAgICAgICAgICAgIG51bGwgPT09IG5leHRPbGRGaWJlci5rZXkgPyBuZXdJZHggOiBuZXh0T2xkRmliZXIua2V5XG4gICAgICAgICAgICApLFxuICAgICAgICAgIChjdXJyZW50Rmlyc3RDaGlsZCA9IHBsYWNlQ2hpbGQoXG4gICAgICAgICAgICBuZXh0T2xkRmliZXIsXG4gICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICAgIG5ld0lkeFxuICAgICAgICAgICkpLFxuICAgICAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXJcbiAgICAgICAgICAgID8gKHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBuZXh0T2xkRmliZXIpXG4gICAgICAgICAgICA6IChwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBuZXh0T2xkRmliZXIpLFxuICAgICAgICAgIChwcmV2aW91c05ld0ZpYmVyID0gbmV4dE9sZEZpYmVyKSk7XG4gICAgc2hvdWxkVHJhY2tTaWRlRWZmZWN0cyAmJlxuICAgICAgb2xkRmliZXIuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICB9KTtcbiAgICBpc0h5ZHJhdGluZyAmJiBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIG5ld0lkeCk7XG4gICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gIH1cbiAgZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRyZW5JdGVyYXRvcihcbiAgICByZXR1cm5GaWJlcixcbiAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICBuZXdDaGlsZHJlbixcbiAgICBsYW5lc1xuICApIHtcbiAgICBpZiAobnVsbCA9PSBuZXdDaGlsZHJlbikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNTEpKTtcbiAgICBmb3IgKFxuICAgICAgdmFyIHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBudWxsLFxuICAgICAgICBwcmV2aW91c05ld0ZpYmVyID0gbnVsbCxcbiAgICAgICAgb2xkRmliZXIgPSBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgbmV3SWR4ID0gKGN1cnJlbnRGaXJzdENoaWxkID0gMCksXG4gICAgICAgIG5leHRPbGRGaWJlciA9IG51bGwsXG4gICAgICAgIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KCk7XG4gICAgICBudWxsICE9PSBvbGRGaWJlciAmJiAhc3RlcC5kb25lO1xuICAgICAgbmV3SWR4KyssIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KClcbiAgICApIHtcbiAgICAgIG9sZEZpYmVyLmluZGV4ID4gbmV3SWR4XG4gICAgICAgID8gKChuZXh0T2xkRmliZXIgPSBvbGRGaWJlciksIChvbGRGaWJlciA9IG51bGwpKVxuICAgICAgICA6IChuZXh0T2xkRmliZXIgPSBvbGRGaWJlci5zaWJsaW5nKTtcbiAgICAgIHZhciBuZXdGaWJlciA9IHVwZGF0ZVNsb3QocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBzdGVwLnZhbHVlLCBsYW5lcyk7XG4gICAgICBpZiAobnVsbCA9PT0gbmV3RmliZXIpIHtcbiAgICAgICAgbnVsbCA9PT0gb2xkRmliZXIgJiYgKG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICAgIG9sZEZpYmVyICYmXG4gICAgICAgIG51bGwgPT09IG5ld0ZpYmVyLmFsdGVybmF0ZSAmJlxuICAgICAgICBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgb2xkRmliZXIpO1xuICAgICAgY3VycmVudEZpcnN0Q2hpbGQgPSBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3SWR4KTtcbiAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXJcbiAgICAgICAgPyAocmVzdWx0aW5nRmlyc3RDaGlsZCA9IG5ld0ZpYmVyKVxuICAgICAgICA6IChwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBuZXdGaWJlcik7XG4gICAgICBwcmV2aW91c05ld0ZpYmVyID0gbmV3RmliZXI7XG4gICAgICBvbGRGaWJlciA9IG5leHRPbGRGaWJlcjtcbiAgICB9XG4gICAgaWYgKHN0ZXAuZG9uZSlcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBvbGRGaWJlciksXG4gICAgICAgIGlzSHlkcmF0aW5nICYmIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgbmV3SWR4KSxcbiAgICAgICAgcmVzdWx0aW5nRmlyc3RDaGlsZFxuICAgICAgKTtcbiAgICBpZiAobnVsbCA9PT0gb2xkRmliZXIpIHtcbiAgICAgIGZvciAoOyAhc3RlcC5kb25lOyBuZXdJZHgrKywgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKSlcbiAgICAgICAgKHN0ZXAgPSBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgc3RlcC52YWx1ZSwgbGFuZXMpKSxcbiAgICAgICAgICBudWxsICE9PSBzdGVwICYmXG4gICAgICAgICAgICAoKGN1cnJlbnRGaXJzdENoaWxkID0gcGxhY2VDaGlsZChzdGVwLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3SWR4KSksXG4gICAgICAgICAgICBudWxsID09PSBwcmV2aW91c05ld0ZpYmVyXG4gICAgICAgICAgICAgID8gKHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBzdGVwKVxuICAgICAgICAgICAgICA6IChwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBzdGVwKSxcbiAgICAgICAgICAgIChwcmV2aW91c05ld0ZpYmVyID0gc3RlcCkpO1xuICAgICAgaXNIeWRyYXRpbmcgJiYgcHVzaFRyZWVGb3JrKHJldHVybkZpYmVyLCBuZXdJZHgpO1xuICAgICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgfVxuICAgIGZvciAoXG4gICAgICBvbGRGaWJlciA9IG1hcFJlbWFpbmluZ0NoaWxkcmVuKG9sZEZpYmVyKTtcbiAgICAgICFzdGVwLmRvbmU7XG4gICAgICBuZXdJZHgrKywgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKVxuICAgIClcbiAgICAgIChzdGVwID0gdXBkYXRlRnJvbU1hcChvbGRGaWJlciwgcmV0dXJuRmliZXIsIG5ld0lkeCwgc3RlcC52YWx1ZSwgbGFuZXMpKSxcbiAgICAgICAgbnVsbCAhPT0gc3RlcCAmJlxuICAgICAgICAgIChzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmXG4gICAgICAgICAgICBudWxsICE9PSBzdGVwLmFsdGVybmF0ZSAmJlxuICAgICAgICAgICAgb2xkRmliZXIuZGVsZXRlKG51bGwgPT09IHN0ZXAua2V5ID8gbmV3SWR4IDogc3RlcC5rZXkpLFxuICAgICAgICAgIChjdXJyZW50Rmlyc3RDaGlsZCA9IHBsYWNlQ2hpbGQoc3RlcCwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0lkeCkpLFxuICAgICAgICAgIG51bGwgPT09IHByZXZpb3VzTmV3RmliZXJcbiAgICAgICAgICAgID8gKHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBzdGVwKVxuICAgICAgICAgICAgOiAocHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gc3RlcCksXG4gICAgICAgICAgKHByZXZpb3VzTmV3RmliZXIgPSBzdGVwKSk7XG4gICAgc2hvdWxkVHJhY2tTaWRlRWZmZWN0cyAmJlxuICAgICAgb2xkRmliZXIuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICB9KTtcbiAgICBpc0h5ZHJhdGluZyAmJiBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIG5ld0lkeCk7XG4gICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gIH1cbiAgZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRGaWJlcnNJbXBsKFxuICAgIHJldHVybkZpYmVyLFxuICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgIG5ld0NoaWxkLFxuICAgIGxhbmVzXG4gICkge1xuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJlxuICAgICAgbnVsbCAhPT0gbmV3Q2hpbGQgJiZcbiAgICAgIG5ld0NoaWxkLnR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgJiZcbiAgICAgIG51bGwgPT09IG5ld0NoaWxkLmtleSAmJlxuICAgICAgKG5ld0NoaWxkID0gbmV3Q2hpbGQucHJvcHMuY2hpbGRyZW4pO1xuICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgbmV3Q2hpbGQgJiYgbnVsbCAhPT0gbmV3Q2hpbGQpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgYToge1xuICAgICAgICAgICAgZm9yICh2YXIga2V5ID0gbmV3Q2hpbGQua2V5OyBudWxsICE9PSBjdXJyZW50Rmlyc3RDaGlsZDsgKSB7XG4gICAgICAgICAgICAgIGlmIChjdXJyZW50Rmlyc3RDaGlsZC5rZXkgPT09IGtleSkge1xuICAgICAgICAgICAgICAgIGtleSA9IG5ld0NoaWxkLnR5cGU7XG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSkge1xuICAgICAgICAgICAgICAgICAgaWYgKDcgPT09IGN1cnJlbnRGaXJzdENoaWxkLnRhZykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGxhbmVzID0gdXNlRmliZXIoXG4gICAgICAgICAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQucHJvcHMuY2hpbGRyZW5cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgbGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyID0gbGFuZXM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLmVsZW1lbnRUeXBlID09PSBrZXkgfHxcbiAgICAgICAgICAgICAgICAgIChcIm9iamVjdFwiID09PSB0eXBlb2Yga2V5ICYmXG4gICAgICAgICAgICAgICAgICAgIG51bGwgIT09IGtleSAmJlxuICAgICAgICAgICAgICAgICAgICBrZXkuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSAmJlxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlTGF6eShrZXkpID09PSBjdXJyZW50Rmlyc3RDaGlsZC50eXBlKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4oXG4gICAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgbGFuZXMgPSB1c2VGaWJlcihjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQucHJvcHMpO1xuICAgICAgICAgICAgICAgICAgY29lcmNlUmVmKGxhbmVzLCBuZXdDaGlsZCk7XG4gICAgICAgICAgICAgICAgICBsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyID0gbGFuZXM7XG4gICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9IGVsc2UgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQgPSBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3Q2hpbGQudHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRVxuICAgICAgICAgICAgICA/ICgobGFuZXMgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChcbiAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLnByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgICAgICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgICAgICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQua2V5XG4gICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgICAgKGxhbmVzLnJldHVybiA9IHJldHVybkZpYmVyKSxcbiAgICAgICAgICAgICAgICAocmV0dXJuRmliZXIgPSBsYW5lcykpXG4gICAgICAgICAgICAgIDogKChsYW5lcyA9IGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhcbiAgICAgICAgICAgICAgICAgIG5ld0NoaWxkLnR5cGUsXG4gICAgICAgICAgICAgICAgICBuZXdDaGlsZC5rZXksXG4gICAgICAgICAgICAgICAgICBuZXdDaGlsZC5wcm9wcyxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgICAgICAgICAgbGFuZXNcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICBjb2VyY2VSZWYobGFuZXMsIG5ld0NoaWxkKSxcbiAgICAgICAgICAgICAgICAobGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgICAgICAgIChyZXR1cm5GaWJlciA9IGxhbmVzKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwbGFjZVNpbmdsZUNoaWxkKHJldHVybkZpYmVyKTtcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICBhOiB7XG4gICAgICAgICAgICBmb3IgKGtleSA9IG5ld0NoaWxkLmtleTsgbnVsbCAhPT0gY3VycmVudEZpcnN0Q2hpbGQ7ICkge1xuICAgICAgICAgICAgICBpZiAoY3VycmVudEZpcnN0Q2hpbGQua2V5ID09PSBrZXkpXG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgNCA9PT0gY3VycmVudEZpcnN0Q2hpbGQudGFnICYmXG4gICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyA9PT1cbiAgICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQuY29udGFpbmVySW5mbyAmJlxuICAgICAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uID09PVxuICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZC5pbXBsZW1lbnRhdGlvblxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4oXG4gICAgICAgICAgICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgbGFuZXMgPSB1c2VGaWJlcihjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQuY2hpbGRyZW4gfHwgW10pO1xuICAgICAgICAgICAgICAgICAgbGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAgICAgICAgICByZXR1cm5GaWJlciA9IGxhbmVzO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYW5lcyA9IGNyZWF0ZUZpYmVyRnJvbVBvcnRhbChuZXdDaGlsZCwgcmV0dXJuRmliZXIubW9kZSwgbGFuZXMpO1xuICAgICAgICAgICAgbGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAgICByZXR1cm5GaWJlciA9IGxhbmVzO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcGxhY2VTaW5nbGVDaGlsZChyZXR1cm5GaWJlcik7XG4gICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAoa2V5ID0gbmV3Q2hpbGQuX2luaXQpLFxuICAgICAgICAgICAgKG5ld0NoaWxkID0ga2V5KG5ld0NoaWxkLl9wYXlsb2FkKSksXG4gICAgICAgICAgICByZWNvbmNpbGVDaGlsZEZpYmVyc0ltcGwoXG4gICAgICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgICAgICAgIGxhbmVzXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5SW1wbChuZXdDaGlsZCkpXG4gICAgICAgIHJldHVybiByZWNvbmNpbGVDaGlsZHJlbkFycmF5KFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgIG5ld0NoaWxkLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICBpZiAoZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpIHtcbiAgICAgICAga2V5ID0gZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCk7XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBrZXkpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTUwKSk7XG4gICAgICAgIG5ld0NoaWxkID0ga2V5LmNhbGwobmV3Q2hpbGQpO1xuICAgICAgICByZXR1cm4gcmVjb25jaWxlQ2hpbGRyZW5JdGVyYXRvcihcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICBsYW5lc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG5ld0NoaWxkLnRoZW4pXG4gICAgICAgIHJldHVybiByZWNvbmNpbGVDaGlsZEZpYmVyc0ltcGwoXG4gICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgICAgdW53cmFwVGhlbmFibGUobmV3Q2hpbGQpLFxuICAgICAgICAgIGxhbmVzXG4gICAgICAgICk7XG4gICAgICBpZiAobmV3Q2hpbGQuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSlcbiAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkRmliZXJzSW1wbChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgICByZWFkQ29udGV4dER1cmluZ1JlY29uY2lsaWF0aW9uKHJldHVybkZpYmVyLCBuZXdDaGlsZCksXG4gICAgICAgICAgbGFuZXNcbiAgICAgICAgKTtcbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cbiAgICByZXR1cm4gKFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdDaGlsZCAmJiBcIlwiICE9PSBuZXdDaGlsZCkgfHxcbiAgICAgIFwibnVtYmVyXCIgPT09IHR5cGVvZiBuZXdDaGlsZCB8fFxuICAgICAgXCJiaWdpbnRcIiA9PT0gdHlwZW9mIG5ld0NoaWxkXG4gICAgICA/ICgobmV3Q2hpbGQgPSBcIlwiICsgbmV3Q2hpbGQpLFxuICAgICAgICBudWxsICE9PSBjdXJyZW50Rmlyc3RDaGlsZCAmJiA2ID09PSBjdXJyZW50Rmlyc3RDaGlsZC50YWdcbiAgICAgICAgICA/IChkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQuc2libGluZyksXG4gICAgICAgICAgICAobGFuZXMgPSB1c2VGaWJlcihjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQpKSxcbiAgICAgICAgICAgIChsYW5lcy5yZXR1cm4gPSByZXR1cm5GaWJlciksXG4gICAgICAgICAgICAocmV0dXJuRmliZXIgPSBsYW5lcykpXG4gICAgICAgICAgOiAoZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKSxcbiAgICAgICAgICAgIChsYW5lcyA9IGNyZWF0ZUZpYmVyRnJvbVRleHQobmV3Q2hpbGQsIHJldHVybkZpYmVyLm1vZGUsIGxhbmVzKSksXG4gICAgICAgICAgICAobGFuZXMucmV0dXJuID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgICAgKHJldHVybkZpYmVyID0gbGFuZXMpKSxcbiAgICAgICAgcGxhY2VTaW5nbGVDaGlsZChyZXR1cm5GaWJlcikpXG4gICAgICA6IGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0NoaWxkLCBsYW5lcykge1xuICAgIHRyeSB7XG4gICAgICB0aGVuYWJsZUluZGV4Q291bnRlciQxID0gMDtcbiAgICAgIHZhciBmaXJzdENoaWxkRmliZXIgPSByZWNvbmNpbGVDaGlsZEZpYmVyc0ltcGwoXG4gICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgIGxhbmVzXG4gICAgICApO1xuICAgICAgdGhlbmFibGVTdGF0ZSQxID0gbnVsbDtcbiAgICAgIHJldHVybiBmaXJzdENoaWxkRmliZXI7XG4gICAgfSBjYXRjaCAoeCkge1xuICAgICAgaWYgKHggPT09IFN1c3BlbnNlRXhjZXB0aW9uKSB0aHJvdyB4O1xuICAgICAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoMjksIHgsIG51bGwsIHJldHVybkZpYmVyLm1vZGUpO1xuICAgICAgZmliZXIubGFuZXMgPSBsYW5lcztcbiAgICAgIGZpYmVyLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGZpYmVyO1xuICAgIH0gZmluYWxseSB7XG4gICAgfVxuICB9O1xufVxudmFyIHJlY29uY2lsZUNoaWxkRmliZXJzID0gY3JlYXRlQ2hpbGRSZWNvbmNpbGVyKCEwKSxcbiAgbW91bnRDaGlsZEZpYmVycyA9IGNyZWF0ZUNoaWxkUmVjb25jaWxlcighMSksXG4gIGN1cnJlbnRUcmVlSGlkZGVuU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCksXG4gIHByZXZFbnRhbmdsZWRSZW5kZXJMYW5lc0N1cnNvciA9IGNyZWF0ZUN1cnNvcigwKTtcbmZ1bmN0aW9uIHB1c2hIaWRkZW5Db250ZXh0KGZpYmVyLCBjb250ZXh0KSB7XG4gIGZpYmVyID0gZW50YW5nbGVkUmVuZGVyTGFuZXM7XG4gIHB1c2gocHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yLCBmaWJlcik7XG4gIHB1c2goY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvciwgY29udGV4dCk7XG4gIGVudGFuZ2xlZFJlbmRlckxhbmVzID0gZmliZXIgfCBjb250ZXh0LmJhc2VMYW5lcztcbn1cbmZ1bmN0aW9uIHJldXNlSGlkZGVuQ29udGV4dE9uU3RhY2soKSB7XG4gIHB1c2gocHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yLCBlbnRhbmdsZWRSZW5kZXJMYW5lcyk7XG4gIHB1c2goY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvciwgY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvci5jdXJyZW50KTtcbn1cbmZ1bmN0aW9uIHBvcEhpZGRlbkNvbnRleHQoKSB7XG4gIGVudGFuZ2xlZFJlbmRlckxhbmVzID0gcHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yLmN1cnJlbnQ7XG4gIHBvcChjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yKTtcbiAgcG9wKHByZXZFbnRhbmdsZWRSZW5kZXJMYW5lc0N1cnNvcik7XG59XG52YXIgc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCksXG4gIHNoZWxsQm91bmRhcnkgPSBudWxsO1xuZnVuY3Rpb24gcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKGhhbmRsZXIpIHtcbiAgdmFyIGN1cnJlbnQgPSBoYW5kbGVyLmFsdGVybmF0ZTtcbiAgcHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQgJiAxKTtcbiAgcHVzaChzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvciwgaGFuZGxlcik7XG4gIG51bGwgPT09IHNoZWxsQm91bmRhcnkgJiZcbiAgICAobnVsbCA9PT0gY3VycmVudCB8fCBudWxsICE9PSBjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yLmN1cnJlbnRcbiAgICAgID8gKHNoZWxsQm91bmRhcnkgPSBoYW5kbGVyKVxuICAgICAgOiBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiYgKHNoZWxsQm91bmRhcnkgPSBoYW5kbGVyKSk7XG59XG5mdW5jdGlvbiBwdXNoT2Zmc2NyZWVuU3VzcGVuc2VIYW5kbGVyKGZpYmVyKSB7XG4gIGlmICgyMiA9PT0gZmliZXIudGFnKSB7XG4gICAgaWYgKFxuICAgICAgKHB1c2goc3VzcGVuc2VTdGFja0N1cnNvciwgc3VzcGVuc2VTdGFja0N1cnNvci5jdXJyZW50KSxcbiAgICAgIHB1c2goc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IsIGZpYmVyKSxcbiAgICAgIG51bGwgPT09IHNoZWxsQm91bmRhcnkpXG4gICAgKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGZpYmVyLmFsdGVybmF0ZTtcbiAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgIChzaGVsbEJvdW5kYXJ5ID0gZmliZXIpO1xuICAgIH1cbiAgfSBlbHNlIHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayhmaWJlcik7XG59XG5mdW5jdGlvbiByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2soKSB7XG4gIHB1c2goc3VzcGVuc2VTdGFja0N1cnNvciwgc3VzcGVuc2VTdGFja0N1cnNvci5jdXJyZW50KTtcbiAgcHVzaChzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvciwgc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCk7XG59XG5mdW5jdGlvbiBwb3BTdXNwZW5zZUhhbmRsZXIoZmliZXIpIHtcbiAgcG9wKHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yKTtcbiAgc2hlbGxCb3VuZGFyeSA9PT0gZmliZXIgJiYgKHNoZWxsQm91bmRhcnkgPSBudWxsKTtcbiAgcG9wKHN1c3BlbnNlU3RhY2tDdXJzb3IpO1xufVxudmFyIHN1c3BlbnNlU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IoMCk7XG5mdW5jdGlvbiBmaW5kRmlyc3RTdXNwZW5kZWQocm93KSB7XG4gIGZvciAodmFyIG5vZGUgPSByb3c7IG51bGwgIT09IG5vZGU7ICkge1xuICAgIGlmICgxMyA9PT0gbm9kZS50YWcpIHtcbiAgICAgIHZhciBzdGF0ZSA9IG5vZGUubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChcbiAgICAgICAgbnVsbCAhPT0gc3RhdGUgJiZcbiAgICAgICAgKChzdGF0ZSA9IHN0YXRlLmRlaHlkcmF0ZWQpLFxuICAgICAgICBudWxsID09PSBzdGF0ZSB8fCBcIiQ/XCIgPT09IHN0YXRlLmRhdGEgfHwgXCIkIVwiID09PSBzdGF0ZS5kYXRhKVxuICAgICAgKVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9IGVsc2UgaWYgKDE5ID09PSBub2RlLnRhZyAmJiB2b2lkIDAgIT09IG5vZGUubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcikge1xuICAgICAgaWYgKDAgIT09IChub2RlLmZsYWdzICYgMTI4KSkgcmV0dXJuIG5vZGU7XG4gICAgfSBlbHNlIGlmIChudWxsICE9PSBub2RlLmNoaWxkKSB7XG4gICAgICBub2RlLmNoaWxkLnJldHVybiA9IG5vZGU7XG4gICAgICBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAobm9kZSA9PT0gcm93KSBicmVhaztcbiAgICBmb3IgKDsgbnVsbCA9PT0gbm9kZS5zaWJsaW5nOyApIHtcbiAgICAgIGlmIChudWxsID09PSBub2RlLnJldHVybiB8fCBub2RlLnJldHVybiA9PT0gcm93KSByZXR1cm4gbnVsbDtcbiAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICB9XG4gICAgbm9kZS5zaWJsaW5nLnJldHVybiA9IG5vZGUucmV0dXJuO1xuICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG52YXIgQWJvcnRDb250cm9sbGVyTG9jYWwgPVxuICAgIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBBYm9ydENvbnRyb2xsZXJcbiAgICAgID8gQWJvcnRDb250cm9sbGVyXG4gICAgICA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gW10sXG4gICAgICAgICAgICBzaWduYWwgPSAodGhpcy5zaWduYWwgPSB7XG4gICAgICAgICAgICAgIGFib3J0ZWQ6ICExLFxuICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzaWduYWwuYWJvcnRlZCA9ICEwO1xuICAgICAgICAgICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lcigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgc2NoZWR1bGVDYWxsYmFjayQyID0gU2NoZWR1bGVyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssXG4gIE5vcm1hbFByaW9yaXR5ID0gU2NoZWR1bGVyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFxuICBDYWNoZUNvbnRleHQgPSB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0NPTlRFWFRfVFlQRSxcbiAgICBDb25zdW1lcjogbnVsbCxcbiAgICBQcm92aWRlcjogbnVsbCxcbiAgICBfY3VycmVudFZhbHVlOiBudWxsLFxuICAgIF9jdXJyZW50VmFsdWUyOiBudWxsLFxuICAgIF90aHJlYWRDb3VudDogMFxuICB9O1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG4gIHJldHVybiB7XG4gICAgY29udHJvbGxlcjogbmV3IEFib3J0Q29udHJvbGxlckxvY2FsKCksXG4gICAgZGF0YTogbmV3IE1hcCgpLFxuICAgIHJlZkNvdW50OiAwXG4gIH07XG59XG5mdW5jdGlvbiByZWxlYXNlQ2FjaGUoY2FjaGUpIHtcbiAgY2FjaGUucmVmQ291bnQtLTtcbiAgMCA9PT0gY2FjaGUucmVmQ291bnQgJiZcbiAgICBzY2hlZHVsZUNhbGxiYWNrJDIoTm9ybWFsUHJpb3JpdHksIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhY2hlLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICB9KTtcbn1cbnZhciBjdXJyZW50RW50YW5nbGVkTGlzdGVuZXJzID0gbnVsbCxcbiAgY3VycmVudEVudGFuZ2xlZFBlbmRpbmdDb3VudCA9IDAsXG4gIGN1cnJlbnRFbnRhbmdsZWRMYW5lID0gMCxcbiAgY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlID0gbnVsbDtcbmZ1bmN0aW9uIGVudGFuZ2xlQXN5bmNBY3Rpb24odHJhbnNpdGlvbiwgdGhlbmFibGUpIHtcbiAgaWYgKG51bGwgPT09IGN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnMpIHtcbiAgICB2YXIgZW50YW5nbGVkTGlzdGVuZXJzID0gKGN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnMgPSBbXSk7XG4gICAgY3VycmVudEVudGFuZ2xlZFBlbmRpbmdDb3VudCA9IDA7XG4gICAgY3VycmVudEVudGFuZ2xlZExhbmUgPSByZXF1ZXN0VHJhbnNpdGlvbkxhbmUoKTtcbiAgICBjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUgPSB7XG4gICAgICBzdGF0dXM6IFwicGVuZGluZ1wiLFxuICAgICAgdmFsdWU6IHZvaWQgMCxcbiAgICAgIHRoZW46IGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIGVudGFuZ2xlZExpc3RlbmVycy5wdXNoKHJlc29sdmUpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgY3VycmVudEVudGFuZ2xlZFBlbmRpbmdDb3VudCsrO1xuICB0aGVuYWJsZS50aGVuKHBpbmdFbmd0YW5nbGVkQWN0aW9uU2NvcGUsIHBpbmdFbmd0YW5nbGVkQWN0aW9uU2NvcGUpO1xuICByZXR1cm4gdGhlbmFibGU7XG59XG5mdW5jdGlvbiBwaW5nRW5ndGFuZ2xlZEFjdGlvblNjb3BlKCkge1xuICBpZiAoXG4gICAgMCA9PT0gLS1jdXJyZW50RW50YW5nbGVkUGVuZGluZ0NvdW50ICYmXG4gICAgbnVsbCAhPT0gY3VycmVudEVudGFuZ2xlZExpc3RlbmVyc1xuICApIHtcbiAgICBudWxsICE9PSBjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUgJiZcbiAgICAgIChjdXJyZW50RW50YW5nbGVkQWN0aW9uVGhlbmFibGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIik7XG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRFbnRhbmdsZWRMaXN0ZW5lcnM7XG4gICAgY3VycmVudEVudGFuZ2xlZExpc3RlbmVycyA9IG51bGw7XG4gICAgY3VycmVudEVudGFuZ2xlZExhbmUgPSAwO1xuICAgIGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSA9IG51bGw7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspICgwLCBsaXN0ZW5lcnNbaV0pKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNoYWluVGhlbmFibGVWYWx1ZSh0aGVuYWJsZSwgcmVzdWx0KSB7XG4gIHZhciBsaXN0ZW5lcnMgPSBbXSxcbiAgICB0aGVuYWJsZVdpdGhPdmVycmlkZSA9IHtcbiAgICAgIHN0YXR1czogXCJwZW5kaW5nXCIsXG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIHJlYXNvbjogbnVsbCxcbiAgICAgIHRoZW46IGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKHJlc29sdmUpO1xuICAgICAgfVxuICAgIH07XG4gIHRoZW5hYmxlLnRoZW4oXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgdGhlbmFibGVXaXRoT3ZlcnJpZGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIjtcbiAgICAgIHRoZW5hYmxlV2l0aE92ZXJyaWRlLnZhbHVlID0gcmVzdWx0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspICgwLCBsaXN0ZW5lcnNbaV0pKHJlc3VsdCk7XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHRoZW5hYmxlV2l0aE92ZXJyaWRlLnN0YXR1cyA9IFwicmVqZWN0ZWRcIjtcbiAgICAgIHRoZW5hYmxlV2l0aE92ZXJyaWRlLnJlYXNvbiA9IGVycm9yO1xuICAgICAgZm9yIChlcnJvciA9IDA7IGVycm9yIDwgbGlzdGVuZXJzLmxlbmd0aDsgZXJyb3IrKylcbiAgICAgICAgKDAsIGxpc3RlbmVyc1tlcnJvcl0pKHZvaWQgMCk7XG4gICAgfVxuICApO1xuICByZXR1cm4gdGhlbmFibGVXaXRoT3ZlcnJpZGU7XG59XG52YXIgcHJldk9uU3RhcnRUcmFuc2l0aW9uRmluaXNoID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUztcblJlYWN0U2hhcmVkSW50ZXJuYWxzLlMgPSBmdW5jdGlvbiAodHJhbnNpdGlvbiwgcmV0dXJuVmFsdWUpIHtcbiAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlICYmXG4gICAgbnVsbCAhPT0gcmV0dXJuVmFsdWUgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZS50aGVuICYmXG4gICAgZW50YW5nbGVBc3luY0FjdGlvbih0cmFuc2l0aW9uLCByZXR1cm5WYWx1ZSk7XG4gIG51bGwgIT09IHByZXZPblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCAmJlxuICAgIHByZXZPblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCh0cmFuc2l0aW9uLCByZXR1cm5WYWx1ZSk7XG59O1xudmFyIHJlc3VtZWRDYWNoZSA9IGNyZWF0ZUN1cnNvcihudWxsKTtcbmZ1bmN0aW9uIHBlZWtDYWNoZUZyb21Qb29sKCkge1xuICB2YXIgY2FjaGVSZXN1bWVkRnJvbVByZXZpb3VzUmVuZGVyID0gcmVzdW1lZENhY2hlLmN1cnJlbnQ7XG4gIHJldHVybiBudWxsICE9PSBjYWNoZVJlc3VtZWRGcm9tUHJldmlvdXNSZW5kZXJcbiAgICA/IGNhY2hlUmVzdW1lZEZyb21QcmV2aW91c1JlbmRlclxuICAgIDogd29ya0luUHJvZ3Jlc3NSb290LnBvb2xlZENhY2hlO1xufVxuZnVuY3Rpb24gcHVzaFRyYW5zaXRpb24ob2Zmc2NyZWVuV29ya0luUHJvZ3Jlc3MsIHByZXZDYWNoZVBvb2wpIHtcbiAgbnVsbCA9PT0gcHJldkNhY2hlUG9vbFxuICAgID8gcHVzaChyZXN1bWVkQ2FjaGUsIHJlc3VtZWRDYWNoZS5jdXJyZW50KVxuICAgIDogcHVzaChyZXN1bWVkQ2FjaGUsIHByZXZDYWNoZVBvb2wucG9vbCk7XG59XG5mdW5jdGlvbiBnZXRTdXNwZW5kZWRDYWNoZSgpIHtcbiAgdmFyIGNhY2hlRnJvbVBvb2wgPSBwZWVrQ2FjaGVGcm9tUG9vbCgpO1xuICByZXR1cm4gbnVsbCA9PT0gY2FjaGVGcm9tUG9vbFxuICAgID8gbnVsbFxuICAgIDogeyBwYXJlbnQ6IENhY2hlQ29udGV4dC5fY3VycmVudFZhbHVlLCBwb29sOiBjYWNoZUZyb21Qb29sIH07XG59XG52YXIgcmVuZGVyTGFuZXMgPSAwLFxuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbCxcbiAgY3VycmVudEhvb2sgPSBudWxsLFxuICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBudWxsLFxuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID0gITEsXG4gIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyA9ICExLFxuICBzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFViA9ICExLFxuICBsb2NhbElkQ291bnRlciA9IDAsXG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyID0gMCxcbiAgdGhlbmFibGVTdGF0ZSA9IG51bGwsXG4gIGdsb2JhbENsaWVudElkQ291bnRlciA9IDA7XG5mdW5jdGlvbiB0aHJvd0ludmFsaWRIb29rRXJyb3IoKSB7XG4gIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzIxKSk7XG59XG5mdW5jdGlvbiBhcmVIb29rSW5wdXRzRXF1YWwobmV4dERlcHMsIHByZXZEZXBzKSB7XG4gIGlmIChudWxsID09PSBwcmV2RGVwcykgcmV0dXJuICExO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByZXZEZXBzLmxlbmd0aCAmJiBpIDwgbmV4dERlcHMubGVuZ3RoOyBpKyspXG4gICAgaWYgKCFvYmplY3RJcyhuZXh0RGVwc1tpXSwgcHJldkRlcHNbaV0pKSByZXR1cm4gITE7XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIHJlbmRlcldpdGhIb29rcyhcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgcHJvcHMsXG4gIHNlY29uZEFyZyxcbiAgbmV4dFJlbmRlckxhbmVzXG4pIHtcbiAgcmVuZGVyTGFuZXMgPSBuZXh0UmVuZGVyTGFuZXM7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSB3b3JrSW5Qcm9ncmVzcztcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSAwO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5IID1cbiAgICBudWxsID09PSBjdXJyZW50IHx8IG51bGwgPT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZVxuICAgICAgPyBIb29rc0Rpc3BhdGNoZXJPbk1vdW50XG4gICAgICA6IEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlO1xuICBzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFViA9ICExO1xuICBuZXh0UmVuZGVyTGFuZXMgPSBDb21wb25lbnQocHJvcHMsIHNlY29uZEFyZyk7XG4gIHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWID0gITE7XG4gIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyAmJlxuICAgIChuZXh0UmVuZGVyTGFuZXMgPSByZW5kZXJXaXRoSG9va3NBZ2FpbihcbiAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgQ29tcG9uZW50LFxuICAgICAgcHJvcHMsXG4gICAgICBzZWNvbmRBcmdcbiAgICApKTtcbiAgZmluaXNoUmVuZGVyaW5nSG9va3MoY3VycmVudCk7XG4gIHJldHVybiBuZXh0UmVuZGVyTGFuZXM7XG59XG5mdW5jdGlvbiBmaW5pc2hSZW5kZXJpbmdIb29rcyhjdXJyZW50KSB7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkggPSBDb250ZXh0T25seURpc3BhdGNoZXI7XG4gIHZhciBkaWRSZW5kZXJUb29GZXdIb29rcyA9IG51bGwgIT09IGN1cnJlbnRIb29rICYmIG51bGwgIT09IGN1cnJlbnRIb29rLm5leHQ7XG4gIHJlbmRlckxhbmVzID0gMDtcbiAgd29ya0luUHJvZ3Jlc3NIb29rID0gY3VycmVudEhvb2sgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbDtcbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSA9ICExO1xuICB0aGVuYWJsZUluZGV4Q291bnRlciA9IDA7XG4gIHRoZW5hYmxlU3RhdGUgPSBudWxsO1xuICBpZiAoZGlkUmVuZGVyVG9vRmV3SG9va3MpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzAwKSk7XG4gIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICBkaWRSZWNlaXZlVXBkYXRlIHx8XG4gICAgKChjdXJyZW50ID0gY3VycmVudC5kZXBlbmRlbmNpZXMpLFxuICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgIGNoZWNrSWZDb250ZXh0Q2hhbmdlZChjdXJyZW50KSAmJlxuICAgICAgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCkpO1xufVxuZnVuY3Rpb24gcmVuZGVyV2l0aEhvb2tzQWdhaW4od29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgcHJvcHMsIHNlY29uZEFyZykge1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gd29ya0luUHJvZ3Jlc3M7XG4gIHZhciBudW1iZXJPZlJlUmVuZGVycyA9IDA7XG4gIGRvIHtcbiAgICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgJiYgKHRoZW5hYmxlU3RhdGUgPSBudWxsKTtcbiAgICB0aGVuYWJsZUluZGV4Q291bnRlciA9IDA7XG4gICAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzID0gITE7XG4gICAgaWYgKDI1IDw9IG51bWJlck9mUmVSZW5kZXJzKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMwMSkpO1xuICAgIG51bWJlck9mUmVSZW5kZXJzICs9IDE7XG4gICAgd29ya0luUHJvZ3Jlc3NIb29rID0gY3VycmVudEhvb2sgPSBudWxsO1xuICAgIGlmIChudWxsICE9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZTtcbiAgICAgIGNoaWxkcmVuLmxhc3RFZmZlY3QgPSBudWxsO1xuICAgICAgY2hpbGRyZW4uZXZlbnRzID0gbnVsbDtcbiAgICAgIGNoaWxkcmVuLnN0b3JlcyA9IG51bGw7XG4gICAgICBudWxsICE9IGNoaWxkcmVuLm1lbW9DYWNoZSAmJiAoY2hpbGRyZW4ubWVtb0NhY2hlLmluZGV4ID0gMCk7XG4gICAgfVxuICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkggPSBIb29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyO1xuICAgIGNoaWxkcmVuID0gQ29tcG9uZW50KHByb3BzLCBzZWNvbmRBcmcpO1xuICB9IHdoaWxlIChkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MpO1xuICByZXR1cm4gY2hpbGRyZW47XG59XG5mdW5jdGlvbiBUcmFuc2l0aW9uQXdhcmVIb3N0Q29tcG9uZW50KCkge1xuICB2YXIgZGlzcGF0Y2hlciA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgsXG4gICAgbWF5YmVUaGVuYWJsZSA9IGRpc3BhdGNoZXIudXNlU3RhdGUoKVswXTtcbiAgbWF5YmVUaGVuYWJsZSA9XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbWF5YmVUaGVuYWJsZS50aGVuXG4gICAgICA/IHVzZVRoZW5hYmxlKG1heWJlVGhlbmFibGUpXG4gICAgICA6IG1heWJlVGhlbmFibGU7XG4gIGRpc3BhdGNoZXIgPSBkaXNwYXRjaGVyLnVzZVN0YXRlKClbMF07XG4gIChudWxsICE9PSBjdXJyZW50SG9vayA/IGN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGUgOiBudWxsKSAhPT0gZGlzcGF0Y2hlciAmJlxuICAgIChjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmZsYWdzIHw9IDEwMjQpO1xuICByZXR1cm4gbWF5YmVUaGVuYWJsZTtcbn1cbmZ1bmN0aW9uIGNoZWNrRGlkUmVuZGVySWRIb29rKCkge1xuICB2YXIgZGlkUmVuZGVySWRIb29rID0gMCAhPT0gbG9jYWxJZENvdW50ZXI7XG4gIGxvY2FsSWRDb3VudGVyID0gMDtcbiAgcmV0dXJuIGRpZFJlbmRlcklkSG9vaztcbn1cbmZ1bmN0aW9uIGJhaWxvdXRIb29rcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbGFuZXMpIHtcbiAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAtMjA1MztcbiAgY3VycmVudC5sYW5lcyAmPSB+bGFuZXM7XG59XG5mdW5jdGlvbiByZXNldEhvb2tzT25VbndpbmQod29ya0luUHJvZ3Jlc3MpIHtcbiAgaWYgKGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUpIHtcbiAgICBmb3IgKFxuICAgICAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3M7XG5cbiAgICApIHtcbiAgICAgIHZhciBxdWV1ZSA9IHdvcmtJblByb2dyZXNzLnF1ZXVlO1xuICAgICAgbnVsbCAhPT0gcXVldWUgJiYgKHF1ZXVlLnBlbmRpbmcgPSBudWxsKTtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gd29ya0luUHJvZ3Jlc3MubmV4dDtcbiAgICB9XG4gICAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSA9ICExO1xuICB9XG4gIHJlbmRlckxhbmVzID0gMDtcbiAgd29ya0luUHJvZ3Jlc3NIb29rID0gY3VycmVudEhvb2sgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbDtcbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzID0gITE7XG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyID0gbG9jYWxJZENvdW50ZXIgPSAwO1xuICB0aGVuYWJsZVN0YXRlID0gbnVsbDtcbn1cbmZ1bmN0aW9uIG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCkge1xuICB2YXIgaG9vayA9IHtcbiAgICBtZW1vaXplZFN0YXRlOiBudWxsLFxuICAgIGJhc2VTdGF0ZTogbnVsbCxcbiAgICBiYXNlUXVldWU6IG51bGwsXG4gICAgcXVldWU6IG51bGwsXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICBudWxsID09PSB3b3JrSW5Qcm9ncmVzc0hvb2tcbiAgICA/IChjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLm1lbW9pemVkU3RhdGUgPSB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBob29rKVxuICAgIDogKHdvcmtJblByb2dyZXNzSG9vayA9IHdvcmtJblByb2dyZXNzSG9vay5uZXh0ID0gaG9vayk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzc0hvb2s7XG59XG5mdW5jdGlvbiB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKSB7XG4gIGlmIChudWxsID09PSBjdXJyZW50SG9vaykge1xuICAgIHZhciBuZXh0Q3VycmVudEhvb2sgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmFsdGVybmF0ZTtcbiAgICBuZXh0Q3VycmVudEhvb2sgPVxuICAgICAgbnVsbCAhPT0gbmV4dEN1cnJlbnRIb29rID8gbmV4dEN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGUgOiBudWxsO1xuICB9IGVsc2UgbmV4dEN1cnJlbnRIb29rID0gY3VycmVudEhvb2submV4dDtcbiAgdmFyIG5leHRXb3JrSW5Qcm9ncmVzc0hvb2sgPVxuICAgIG51bGwgPT09IHdvcmtJblByb2dyZXNzSG9va1xuICAgICAgPyBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLm1lbW9pemVkU3RhdGVcbiAgICAgIDogd29ya0luUHJvZ3Jlc3NIb29rLm5leHQ7XG4gIGlmIChudWxsICE9PSBuZXh0V29ya0luUHJvZ3Jlc3NIb29rKVxuICAgICh3b3JrSW5Qcm9ncmVzc0hvb2sgPSBuZXh0V29ya0luUHJvZ3Jlc3NIb29rKSxcbiAgICAgIChjdXJyZW50SG9vayA9IG5leHRDdXJyZW50SG9vayk7XG4gIGVsc2Uge1xuICAgIGlmIChudWxsID09PSBuZXh0Q3VycmVudEhvb2spIHtcbiAgICAgIGlmIChudWxsID09PSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmFsdGVybmF0ZSlcbiAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NjcpKTtcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzEwKSk7XG4gICAgfVxuICAgIGN1cnJlbnRIb29rID0gbmV4dEN1cnJlbnRIb29rO1xuICAgIG5leHRDdXJyZW50SG9vayA9IHtcbiAgICAgIG1lbW9pemVkU3RhdGU6IGN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGUsXG4gICAgICBiYXNlU3RhdGU6IGN1cnJlbnRIb29rLmJhc2VTdGF0ZSxcbiAgICAgIGJhc2VRdWV1ZTogY3VycmVudEhvb2suYmFzZVF1ZXVlLFxuICAgICAgcXVldWU6IGN1cnJlbnRIb29rLnF1ZXVlLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG4gICAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3NIb29rXG4gICAgICA/IChjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLm1lbW9pemVkU3RhdGUgPSB3b3JrSW5Qcm9ncmVzc0hvb2sgPVxuICAgICAgICAgIG5leHRDdXJyZW50SG9vaylcbiAgICAgIDogKHdvcmtJblByb2dyZXNzSG9vayA9IHdvcmtJblByb2dyZXNzSG9vay5uZXh0ID0gbmV4dEN1cnJlbnRIb29rKTtcbiAgfVxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3NIb29rO1xufVxudmFyIGNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWU7XG5jcmVhdGVGdW5jdGlvbkNvbXBvbmVudFVwZGF0ZVF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4geyBsYXN0RWZmZWN0OiBudWxsLCBldmVudHM6IG51bGwsIHN0b3JlczogbnVsbCwgbWVtb0NhY2hlOiBudWxsIH07XG59O1xuZnVuY3Rpb24gdXNlVGhlbmFibGUodGhlbmFibGUpIHtcbiAgdmFyIGluZGV4ID0gdGhlbmFibGVJbmRleENvdW50ZXI7XG4gIHRoZW5hYmxlSW5kZXhDb3VudGVyICs9IDE7XG4gIG51bGwgPT09IHRoZW5hYmxlU3RhdGUgJiYgKHRoZW5hYmxlU3RhdGUgPSBbXSk7XG4gIHRoZW5hYmxlID0gdHJhY2tVc2VkVGhlbmFibGUodGhlbmFibGVTdGF0ZSwgdGhlbmFibGUsIGluZGV4KTtcbiAgaW5kZXggPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxO1xuICBudWxsID09PVxuICAgIChudWxsID09PSB3b3JrSW5Qcm9ncmVzc0hvb2tcbiAgICAgID8gaW5kZXgubWVtb2l6ZWRTdGF0ZVxuICAgICAgOiB3b3JrSW5Qcm9ncmVzc0hvb2submV4dCkgJiZcbiAgICAoKGluZGV4ID0gaW5kZXguYWx0ZXJuYXRlKSxcbiAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9XG4gICAgICBudWxsID09PSBpbmRleCB8fCBudWxsID09PSBpbmRleC5tZW1vaXplZFN0YXRlXG4gICAgICAgID8gSG9va3NEaXNwYXRjaGVyT25Nb3VudFxuICAgICAgICA6IEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlKSk7XG4gIHJldHVybiB0aGVuYWJsZTtcbn1cbmZ1bmN0aW9uIHVzZSh1c2FibGUpIHtcbiAgaWYgKG51bGwgIT09IHVzYWJsZSAmJiBcIm9iamVjdFwiID09PSB0eXBlb2YgdXNhYmxlKSB7XG4gICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHVzYWJsZS50aGVuKSByZXR1cm4gdXNlVGhlbmFibGUodXNhYmxlKTtcbiAgICBpZiAodXNhYmxlLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUpIHJldHVybiByZWFkQ29udGV4dCh1c2FibGUpO1xuICB9XG4gIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDM4LCBTdHJpbmcodXNhYmxlKSkpO1xufVxuZnVuY3Rpb24gdXNlTWVtb0NhY2hlKHNpemUpIHtcbiAgdmFyIG1lbW9DYWNoZSA9IG51bGwsXG4gICAgdXBkYXRlUXVldWUgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLnVwZGF0ZVF1ZXVlO1xuICBudWxsICE9PSB1cGRhdGVRdWV1ZSAmJiAobWVtb0NhY2hlID0gdXBkYXRlUXVldWUubWVtb0NhY2hlKTtcbiAgaWYgKG51bGwgPT0gbWVtb0NhY2hlKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmFsdGVybmF0ZTtcbiAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAoKGN1cnJlbnQgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSxcbiAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgKChjdXJyZW50ID0gY3VycmVudC5tZW1vQ2FjaGUpLFxuICAgICAgICBudWxsICE9IGN1cnJlbnQgJiZcbiAgICAgICAgICAobWVtb0NhY2hlID0ge1xuICAgICAgICAgICAgZGF0YTogY3VycmVudC5kYXRhLm1hcChmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFycmF5LnNsaWNlKCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGluZGV4OiAwXG4gICAgICAgICAgfSkpKTtcbiAgfVxuICBudWxsID09IG1lbW9DYWNoZSAmJiAobWVtb0NhY2hlID0geyBkYXRhOiBbXSwgaW5kZXg6IDAgfSk7XG4gIG51bGwgPT09IHVwZGF0ZVF1ZXVlICYmXG4gICAgKCh1cGRhdGVRdWV1ZSA9IGNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUoKSksXG4gICAgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEudXBkYXRlUXVldWUgPSB1cGRhdGVRdWV1ZSkpO1xuICB1cGRhdGVRdWV1ZS5tZW1vQ2FjaGUgPSBtZW1vQ2FjaGU7XG4gIHVwZGF0ZVF1ZXVlID0gbWVtb0NhY2hlLmRhdGFbbWVtb0NhY2hlLmluZGV4XTtcbiAgaWYgKHZvaWQgMCA9PT0gdXBkYXRlUXVldWUpXG4gICAgZm9yIChcbiAgICAgIHVwZGF0ZVF1ZXVlID0gbWVtb0NhY2hlLmRhdGFbbWVtb0NhY2hlLmluZGV4XSA9IEFycmF5KHNpemUpLCBjdXJyZW50ID0gMDtcbiAgICAgIGN1cnJlbnQgPCBzaXplO1xuICAgICAgY3VycmVudCsrXG4gICAgKVxuICAgICAgdXBkYXRlUXVldWVbY3VycmVudF0gPSBSRUFDVF9NRU1PX0NBQ0hFX1NFTlRJTkVMO1xuICBtZW1vQ2FjaGUuaW5kZXgrKztcbiAgcmV0dXJuIHVwZGF0ZVF1ZXVlO1xufVxuZnVuY3Rpb24gYmFzaWNTdGF0ZVJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYWN0aW9uID8gYWN0aW9uKHN0YXRlKSA6IGFjdGlvbjtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVJlZHVjZXIocmVkdWNlcikge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICByZXR1cm4gdXBkYXRlUmVkdWNlckltcGwoaG9vaywgY3VycmVudEhvb2ssIHJlZHVjZXIpO1xufVxuZnVuY3Rpb24gdXBkYXRlUmVkdWNlckltcGwoaG9vaywgY3VycmVudCwgcmVkdWNlcikge1xuICB2YXIgcXVldWUgPSBob29rLnF1ZXVlO1xuICBpZiAobnVsbCA9PT0gcXVldWUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzExKSk7XG4gIHF1ZXVlLmxhc3RSZW5kZXJlZFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgYmFzZVF1ZXVlID0gaG9vay5iYXNlUXVldWUsXG4gICAgcGVuZGluZ1F1ZXVlID0gcXVldWUucGVuZGluZztcbiAgaWYgKG51bGwgIT09IHBlbmRpbmdRdWV1ZSkge1xuICAgIGlmIChudWxsICE9PSBiYXNlUXVldWUpIHtcbiAgICAgIHZhciBiYXNlRmlyc3QgPSBiYXNlUXVldWUubmV4dDtcbiAgICAgIGJhc2VRdWV1ZS5uZXh0ID0gcGVuZGluZ1F1ZXVlLm5leHQ7XG4gICAgICBwZW5kaW5nUXVldWUubmV4dCA9IGJhc2VGaXJzdDtcbiAgICB9XG4gICAgY3VycmVudC5iYXNlUXVldWUgPSBiYXNlUXVldWUgPSBwZW5kaW5nUXVldWU7XG4gICAgcXVldWUucGVuZGluZyA9IG51bGw7XG4gIH1cbiAgcGVuZGluZ1F1ZXVlID0gaG9vay5iYXNlU3RhdGU7XG4gIGlmIChudWxsID09PSBiYXNlUXVldWUpIGhvb2subWVtb2l6ZWRTdGF0ZSA9IHBlbmRpbmdRdWV1ZTtcbiAgZWxzZSB7XG4gICAgY3VycmVudCA9IGJhc2VRdWV1ZS5uZXh0O1xuICAgIHZhciBuZXdCYXNlUXVldWVGaXJzdCA9IChiYXNlRmlyc3QgPSBudWxsKSxcbiAgICAgIG5ld0Jhc2VRdWV1ZUxhc3QgPSBudWxsLFxuICAgICAgdXBkYXRlID0gY3VycmVudCxcbiAgICAgIGRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24kNTQgPSAhMTtcbiAgICBkbyB7XG4gICAgICB2YXIgdXBkYXRlTGFuZSA9IHVwZGF0ZS5sYW5lICYgLTUzNjg3MDkxMztcbiAgICAgIGlmIChcbiAgICAgICAgdXBkYXRlTGFuZSAhPT0gdXBkYXRlLmxhbmVcbiAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIHVwZGF0ZUxhbmUpID09PSB1cGRhdGVMYW5lXG4gICAgICAgICAgOiAocmVuZGVyTGFuZXMgJiB1cGRhdGVMYW5lKSA9PT0gdXBkYXRlTGFuZVxuICAgICAgKSB7XG4gICAgICAgIHZhciByZXZlcnRMYW5lID0gdXBkYXRlLnJldmVydExhbmU7XG4gICAgICAgIGlmICgwID09PSByZXZlcnRMYW5lKVxuICAgICAgICAgIG51bGwgIT09IG5ld0Jhc2VRdWV1ZUxhc3QgJiZcbiAgICAgICAgICAgIChuZXdCYXNlUXVldWVMYXN0ID0gbmV3QmFzZVF1ZXVlTGFzdC5uZXh0ID1cbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxhbmU6IDAsXG4gICAgICAgICAgICAgICAgcmV2ZXJ0TGFuZTogMCxcbiAgICAgICAgICAgICAgICBhY3Rpb246IHVwZGF0ZS5hY3Rpb24sXG4gICAgICAgICAgICAgICAgaGFzRWFnZXJTdGF0ZTogdXBkYXRlLmhhc0VhZ2VyU3RhdGUsXG4gICAgICAgICAgICAgICAgZWFnZXJTdGF0ZTogdXBkYXRlLmVhZ2VyU3RhdGUsXG4gICAgICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHVwZGF0ZUxhbmUgPT09IGN1cnJlbnRFbnRhbmdsZWRMYW5lICYmXG4gICAgICAgICAgICAgIChkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uJDU0ID0gITApO1xuICAgICAgICBlbHNlIGlmICgocmVuZGVyTGFuZXMgJiByZXZlcnRMYW5lKSA9PT0gcmV2ZXJ0TGFuZSkge1xuICAgICAgICAgIHVwZGF0ZSA9IHVwZGF0ZS5uZXh0O1xuICAgICAgICAgIHJldmVydExhbmUgPT09IGN1cnJlbnRFbnRhbmdsZWRMYW5lICYmXG4gICAgICAgICAgICAoZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiQ1NCA9ICEwKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgKHVwZGF0ZUxhbmUgPSB7XG4gICAgICAgICAgICBsYW5lOiAwLFxuICAgICAgICAgICAgcmV2ZXJ0TGFuZTogdXBkYXRlLnJldmVydExhbmUsXG4gICAgICAgICAgICBhY3Rpb246IHVwZGF0ZS5hY3Rpb24sXG4gICAgICAgICAgICBoYXNFYWdlclN0YXRlOiB1cGRhdGUuaGFzRWFnZXJTdGF0ZSxcbiAgICAgICAgICAgIGVhZ2VyU3RhdGU6IHVwZGF0ZS5lYWdlclN0YXRlLFxuICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbnVsbCA9PT0gbmV3QmFzZVF1ZXVlTGFzdFxuICAgICAgICAgICAgICA/ICgobmV3QmFzZVF1ZXVlRmlyc3QgPSBuZXdCYXNlUXVldWVMYXN0ID0gdXBkYXRlTGFuZSksXG4gICAgICAgICAgICAgICAgKGJhc2VGaXJzdCA9IHBlbmRpbmdRdWV1ZSkpXG4gICAgICAgICAgICAgIDogKG5ld0Jhc2VRdWV1ZUxhc3QgPSBuZXdCYXNlUXVldWVMYXN0Lm5leHQgPSB1cGRhdGVMYW5lKSxcbiAgICAgICAgICAgIChjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmxhbmVzIHw9IHJldmVydExhbmUpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSByZXZlcnRMYW5lKTtcbiAgICAgICAgdXBkYXRlTGFuZSA9IHVwZGF0ZS5hY3Rpb247XG4gICAgICAgIHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWICYmXG4gICAgICAgICAgcmVkdWNlcihwZW5kaW5nUXVldWUsIHVwZGF0ZUxhbmUpO1xuICAgICAgICBwZW5kaW5nUXVldWUgPSB1cGRhdGUuaGFzRWFnZXJTdGF0ZVxuICAgICAgICAgID8gdXBkYXRlLmVhZ2VyU3RhdGVcbiAgICAgICAgICA6IHJlZHVjZXIocGVuZGluZ1F1ZXVlLCB1cGRhdGVMYW5lKTtcbiAgICAgIH0gZWxzZVxuICAgICAgICAocmV2ZXJ0TGFuZSA9IHtcbiAgICAgICAgICBsYW5lOiB1cGRhdGVMYW5lLFxuICAgICAgICAgIHJldmVydExhbmU6IHVwZGF0ZS5yZXZlcnRMYW5lLFxuICAgICAgICAgIGFjdGlvbjogdXBkYXRlLmFjdGlvbixcbiAgICAgICAgICBoYXNFYWdlclN0YXRlOiB1cGRhdGUuaGFzRWFnZXJTdGF0ZSxcbiAgICAgICAgICBlYWdlclN0YXRlOiB1cGRhdGUuZWFnZXJTdGF0ZSxcbiAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH0pLFxuICAgICAgICAgIG51bGwgPT09IG5ld0Jhc2VRdWV1ZUxhc3RcbiAgICAgICAgICAgID8gKChuZXdCYXNlUXVldWVGaXJzdCA9IG5ld0Jhc2VRdWV1ZUxhc3QgPSByZXZlcnRMYW5lKSxcbiAgICAgICAgICAgICAgKGJhc2VGaXJzdCA9IHBlbmRpbmdRdWV1ZSkpXG4gICAgICAgICAgICA6IChuZXdCYXNlUXVldWVMYXN0ID0gbmV3QmFzZVF1ZXVlTGFzdC5uZXh0ID0gcmV2ZXJ0TGFuZSksXG4gICAgICAgICAgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubGFuZXMgfD0gdXBkYXRlTGFuZSksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSB1cGRhdGVMYW5lKTtcbiAgICAgIHVwZGF0ZSA9IHVwZGF0ZS5uZXh0O1xuICAgIH0gd2hpbGUgKG51bGwgIT09IHVwZGF0ZSAmJiB1cGRhdGUgIT09IGN1cnJlbnQpO1xuICAgIG51bGwgPT09IG5ld0Jhc2VRdWV1ZUxhc3RcbiAgICAgID8gKGJhc2VGaXJzdCA9IHBlbmRpbmdRdWV1ZSlcbiAgICAgIDogKG5ld0Jhc2VRdWV1ZUxhc3QubmV4dCA9IG5ld0Jhc2VRdWV1ZUZpcnN0KTtcbiAgICBpZiAoXG4gICAgICAhb2JqZWN0SXMocGVuZGluZ1F1ZXVlLCBob29rLm1lbW9pemVkU3RhdGUpICYmXG4gICAgICAoKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCksXG4gICAgICBkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uJDU0ICYmXG4gICAgICAgICgocmVkdWNlciA9IGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSksIG51bGwgIT09IHJlZHVjZXIpKVxuICAgIClcbiAgICAgIHRocm93IHJlZHVjZXI7XG4gICAgaG9vay5tZW1vaXplZFN0YXRlID0gcGVuZGluZ1F1ZXVlO1xuICAgIGhvb2suYmFzZVN0YXRlID0gYmFzZUZpcnN0O1xuICAgIGhvb2suYmFzZVF1ZXVlID0gbmV3QmFzZVF1ZXVlTGFzdDtcbiAgICBxdWV1ZS5sYXN0UmVuZGVyZWRTdGF0ZSA9IHBlbmRpbmdRdWV1ZTtcbiAgfVxuICBudWxsID09PSBiYXNlUXVldWUgJiYgKHF1ZXVlLmxhbmVzID0gMCk7XG4gIHJldHVybiBbaG9vay5tZW1vaXplZFN0YXRlLCBxdWV1ZS5kaXNwYXRjaF07XG59XG5mdW5jdGlvbiByZXJlbmRlclJlZHVjZXIocmVkdWNlcikge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLFxuICAgIHF1ZXVlID0gaG9vay5xdWV1ZTtcbiAgaWYgKG51bGwgPT09IHF1ZXVlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMxMSkpO1xuICBxdWV1ZS5sYXN0UmVuZGVyZWRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGRpc3BhdGNoID0gcXVldWUuZGlzcGF0Y2gsXG4gICAgbGFzdFJlbmRlclBoYXNlVXBkYXRlID0gcXVldWUucGVuZGluZyxcbiAgICBuZXdTdGF0ZSA9IGhvb2subWVtb2l6ZWRTdGF0ZTtcbiAgaWYgKG51bGwgIT09IGxhc3RSZW5kZXJQaGFzZVVwZGF0ZSkge1xuICAgIHF1ZXVlLnBlbmRpbmcgPSBudWxsO1xuICAgIHZhciB1cGRhdGUgPSAobGFzdFJlbmRlclBoYXNlVXBkYXRlID0gbGFzdFJlbmRlclBoYXNlVXBkYXRlLm5leHQpO1xuICAgIGRvIChuZXdTdGF0ZSA9IHJlZHVjZXIobmV3U3RhdGUsIHVwZGF0ZS5hY3Rpb24pKSwgKHVwZGF0ZSA9IHVwZGF0ZS5uZXh0KTtcbiAgICB3aGlsZSAodXBkYXRlICE9PSBsYXN0UmVuZGVyUGhhc2VVcGRhdGUpO1xuICAgIG9iamVjdElzKG5ld1N0YXRlLCBob29rLm1lbW9pemVkU3RhdGUpIHx8IChkaWRSZWNlaXZlVXBkYXRlID0gITApO1xuICAgIGhvb2subWVtb2l6ZWRTdGF0ZSA9IG5ld1N0YXRlO1xuICAgIG51bGwgPT09IGhvb2suYmFzZVF1ZXVlICYmIChob29rLmJhc2VTdGF0ZSA9IG5ld1N0YXRlKTtcbiAgICBxdWV1ZS5sYXN0UmVuZGVyZWRTdGF0ZSA9IG5ld1N0YXRlO1xuICB9XG4gIHJldHVybiBbbmV3U3RhdGUsIGRpc3BhdGNoXTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN5bmNFeHRlcm5hbFN0b3JlKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KSB7XG4gIHZhciBmaWJlciA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEsXG4gICAgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLFxuICAgIGlzSHlkcmF0aW5nJGpzY29tcCQwID0gaXNIeWRyYXRpbmc7XG4gIGlmIChpc0h5ZHJhdGluZyRqc2NvbXAkMCkge1xuICAgIGlmICh2b2lkIDAgPT09IGdldFNlcnZlclNuYXBzaG90KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQwNykpO1xuICAgIGdldFNlcnZlclNuYXBzaG90ID0gZ2V0U2VydmVyU25hcHNob3QoKTtcbiAgfSBlbHNlIGdldFNlcnZlclNuYXBzaG90ID0gZ2V0U25hcHNob3QoKTtcbiAgdmFyIHNuYXBzaG90Q2hhbmdlZCA9ICFvYmplY3RJcyhcbiAgICAoY3VycmVudEhvb2sgfHwgaG9vaykubWVtb2l6ZWRTdGF0ZSxcbiAgICBnZXRTZXJ2ZXJTbmFwc2hvdFxuICApO1xuICBzbmFwc2hvdENoYW5nZWQgJiZcbiAgICAoKGhvb2subWVtb2l6ZWRTdGF0ZSA9IGdldFNlcnZlclNuYXBzaG90KSwgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCkpO1xuICBob29rID0gaG9vay5xdWV1ZTtcbiAgdXBkYXRlRWZmZWN0KHN1YnNjcmliZVRvU3RvcmUuYmluZChudWxsLCBmaWJlciwgaG9vaywgc3Vic2NyaWJlKSwgW1xuICAgIHN1YnNjcmliZVxuICBdKTtcbiAgaWYgKFxuICAgIGhvb2suZ2V0U25hcHNob3QgIT09IGdldFNuYXBzaG90IHx8XG4gICAgc25hcHNob3RDaGFuZ2VkIHx8XG4gICAgKG51bGwgIT09IHdvcmtJblByb2dyZXNzSG9vayAmJiB3b3JrSW5Qcm9ncmVzc0hvb2subWVtb2l6ZWRTdGF0ZS50YWcgJiAxKVxuICApIHtcbiAgICBmaWJlci5mbGFncyB8PSAyMDQ4O1xuICAgIHB1c2hFZmZlY3QoXG4gICAgICA5LFxuICAgICAgdXBkYXRlU3RvcmVJbnN0YW5jZS5iaW5kKFxuICAgICAgICBudWxsLFxuICAgICAgICBmaWJlcixcbiAgICAgICAgaG9vayxcbiAgICAgICAgZ2V0U2VydmVyU25hcHNob3QsXG4gICAgICAgIGdldFNuYXBzaG90XG4gICAgICApLFxuICAgICAgeyBkZXN0cm95OiB2b2lkIDAgfSxcbiAgICAgIG51bGxcbiAgICApO1xuICAgIGlmIChudWxsID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzQ5KSk7XG4gICAgaXNIeWRyYXRpbmckanNjb21wJDAgfHxcbiAgICAgIDAgIT09IChyZW5kZXJMYW5lcyAmIDYwKSB8fFxuICAgICAgcHVzaFN0b3JlQ29uc2lzdGVuY3lDaGVjayhmaWJlciwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KTtcbiAgfVxuICByZXR1cm4gZ2V0U2VydmVyU25hcHNob3Q7XG59XG5mdW5jdGlvbiBwdXNoU3RvcmVDb25zaXN0ZW5jeUNoZWNrKGZpYmVyLCBnZXRTbmFwc2hvdCwgcmVuZGVyZWRTbmFwc2hvdCkge1xuICBmaWJlci5mbGFncyB8PSAxNjM4NDtcbiAgZmliZXIgPSB7IGdldFNuYXBzaG90OiBnZXRTbmFwc2hvdCwgdmFsdWU6IHJlbmRlcmVkU25hcHNob3QgfTtcbiAgZ2V0U25hcHNob3QgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLnVwZGF0ZVF1ZXVlO1xuICBudWxsID09PSBnZXRTbmFwc2hvdFxuICAgID8gKChnZXRTbmFwc2hvdCA9IGNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUoKSksXG4gICAgICAoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS51cGRhdGVRdWV1ZSA9IGdldFNuYXBzaG90KSxcbiAgICAgIChnZXRTbmFwc2hvdC5zdG9yZXMgPSBbZmliZXJdKSlcbiAgICA6ICgocmVuZGVyZWRTbmFwc2hvdCA9IGdldFNuYXBzaG90LnN0b3JlcyksXG4gICAgICBudWxsID09PSByZW5kZXJlZFNuYXBzaG90XG4gICAgICAgID8gKGdldFNuYXBzaG90LnN0b3JlcyA9IFtmaWJlcl0pXG4gICAgICAgIDogcmVuZGVyZWRTbmFwc2hvdC5wdXNoKGZpYmVyKSk7XG59XG5mdW5jdGlvbiB1cGRhdGVTdG9yZUluc3RhbmNlKGZpYmVyLCBpbnN0LCBuZXh0U25hcHNob3QsIGdldFNuYXBzaG90KSB7XG4gIGluc3QudmFsdWUgPSBuZXh0U25hcHNob3Q7XG4gIGluc3QuZ2V0U25hcHNob3QgPSBnZXRTbmFwc2hvdDtcbiAgY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSAmJiBmb3JjZVN0b3JlUmVyZW5kZXIoZmliZXIpO1xufVxuZnVuY3Rpb24gc3Vic2NyaWJlVG9TdG9yZShmaWJlciwgaW5zdCwgc3Vic2NyaWJlKSB7XG4gIHJldHVybiBzdWJzY3JpYmUoZnVuY3Rpb24gKCkge1xuICAgIGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkgJiYgZm9yY2VTdG9yZVJlcmVuZGVyKGZpYmVyKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpIHtcbiAgdmFyIGxhdGVzdEdldFNuYXBzaG90ID0gaW5zdC5nZXRTbmFwc2hvdDtcbiAgaW5zdCA9IGluc3QudmFsdWU7XG4gIHRyeSB7XG4gICAgdmFyIG5leHRWYWx1ZSA9IGxhdGVzdEdldFNuYXBzaG90KCk7XG4gICAgcmV0dXJuICFvYmplY3RJcyhpbnN0LCBuZXh0VmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiAhMDtcbiAgfVxufVxuZnVuY3Rpb24gZm9yY2VTdG9yZVJlcmVuZGVyKGZpYmVyKSB7XG4gIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCAyKTtcbiAgbnVsbCAhPT0gcm9vdCAmJiBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIDIpO1xufVxuZnVuY3Rpb24gbW91bnRTdGF0ZUltcGwoaW5pdGlhbFN0YXRlKSB7XG4gIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluaXRpYWxTdGF0ZSkge1xuICAgIHZhciBpbml0aWFsU3RhdGVJbml0aWFsaXplciA9IGluaXRpYWxTdGF0ZTtcbiAgICBpbml0aWFsU3RhdGUgPSBpbml0aWFsU3RhdGVJbml0aWFsaXplcigpO1xuICAgIGlmIChzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFVikge1xuICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoITApO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaW5pdGlhbFN0YXRlSW5pdGlhbGl6ZXIoKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCExKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaG9vay5tZW1vaXplZFN0YXRlID0gaG9vay5iYXNlU3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gIGhvb2sucXVldWUgPSB7XG4gICAgcGVuZGluZzogbnVsbCxcbiAgICBsYW5lczogMCxcbiAgICBkaXNwYXRjaDogbnVsbCxcbiAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBiYXNpY1N0YXRlUmVkdWNlcixcbiAgICBsYXN0UmVuZGVyZWRTdGF0ZTogaW5pdGlhbFN0YXRlXG4gIH07XG4gIHJldHVybiBob29rO1xufVxuZnVuY3Rpb24gdXBkYXRlT3B0aW1pc3RpY0ltcGwoaG9vaywgY3VycmVudCwgcGFzc3Rocm91Z2gsIHJlZHVjZXIpIHtcbiAgaG9vay5iYXNlU3RhdGUgPSBwYXNzdGhyb3VnaDtcbiAgcmV0dXJuIHVwZGF0ZVJlZHVjZXJJbXBsKFxuICAgIGhvb2ssXG4gICAgY3VycmVudEhvb2ssXG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVkdWNlciA/IHJlZHVjZXIgOiBiYXNpY1N0YXRlUmVkdWNlclxuICApO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hBY3Rpb25TdGF0ZShcbiAgZmliZXIsXG4gIGFjdGlvblF1ZXVlLFxuICBzZXRQZW5kaW5nU3RhdGUsXG4gIHNldFN0YXRlLFxuICBwYXlsb2FkXG4pIHtcbiAgaWYgKGlzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ4NSkpO1xuICBmaWJlciA9IGFjdGlvblF1ZXVlLmFjdGlvbjtcbiAgaWYgKG51bGwgIT09IGZpYmVyKSB7XG4gICAgdmFyIGFjdGlvbk5vZGUgPSB7XG4gICAgICBwYXlsb2FkOiBwYXlsb2FkLFxuICAgICAgYWN0aW9uOiBmaWJlcixcbiAgICAgIG5leHQ6IG51bGwsXG4gICAgICBpc1RyYW5zaXRpb246ICEwLFxuICAgICAgc3RhdHVzOiBcInBlbmRpbmdcIixcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgcmVhc29uOiBudWxsLFxuICAgICAgbGlzdGVuZXJzOiBbXSxcbiAgICAgIHRoZW46IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICBhY3Rpb25Ob2RlLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIG51bGwgIT09IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlRcbiAgICAgID8gc2V0UGVuZGluZ1N0YXRlKCEwKVxuICAgICAgOiAoYWN0aW9uTm9kZS5pc1RyYW5zaXRpb24gPSAhMSk7XG4gICAgc2V0U3RhdGUoYWN0aW9uTm9kZSk7XG4gICAgc2V0UGVuZGluZ1N0YXRlID0gYWN0aW9uUXVldWUucGVuZGluZztcbiAgICBudWxsID09PSBzZXRQZW5kaW5nU3RhdGVcbiAgICAgID8gKChhY3Rpb25Ob2RlLm5leHQgPSBhY3Rpb25RdWV1ZS5wZW5kaW5nID0gYWN0aW9uTm9kZSksXG4gICAgICAgIHJ1bkFjdGlvblN0YXRlQWN0aW9uKGFjdGlvblF1ZXVlLCBhY3Rpb25Ob2RlKSlcbiAgICAgIDogKChhY3Rpb25Ob2RlLm5leHQgPSBzZXRQZW5kaW5nU3RhdGUubmV4dCksXG4gICAgICAgIChhY3Rpb25RdWV1ZS5wZW5kaW5nID0gc2V0UGVuZGluZ1N0YXRlLm5leHQgPSBhY3Rpb25Ob2RlKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJ1bkFjdGlvblN0YXRlQWN0aW9uKGFjdGlvblF1ZXVlLCBub2RlKSB7XG4gIHZhciBhY3Rpb24gPSBub2RlLmFjdGlvbixcbiAgICBwYXlsb2FkID0gbm9kZS5wYXlsb2FkLFxuICAgIHByZXZTdGF0ZSA9IGFjdGlvblF1ZXVlLnN0YXRlO1xuICBpZiAobm9kZS5pc1RyYW5zaXRpb24pIHtcbiAgICB2YXIgcHJldlRyYW5zaXRpb24gPSBSZWFjdFNoYXJlZEludGVybmFscy5ULFxuICAgICAgY3VycmVudFRyYW5zaXRpb24gPSB7fTtcbiAgICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gY3VycmVudFRyYW5zaXRpb247XG4gICAgdHJ5IHtcbiAgICAgIHZhciByZXR1cm5WYWx1ZSA9IGFjdGlvbihwcmV2U3RhdGUsIHBheWxvYWQpLFxuICAgICAgICBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlM7XG4gICAgICBudWxsICE9PSBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCAmJlxuICAgICAgICBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaChjdXJyZW50VHJhbnNpdGlvbiwgcmV0dXJuVmFsdWUpO1xuICAgICAgaGFuZGxlQWN0aW9uUmV0dXJuVmFsdWUoYWN0aW9uUXVldWUsIG5vZGUsIHJldHVyblZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25BY3Rpb25FcnJvcihhY3Rpb25RdWV1ZSwgbm9kZSwgZXJyb3IpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldlRyYW5zaXRpb247XG4gICAgfVxuICB9IGVsc2VcbiAgICB0cnkge1xuICAgICAgKHByZXZUcmFuc2l0aW9uID0gYWN0aW9uKHByZXZTdGF0ZSwgcGF5bG9hZCkpLFxuICAgICAgICBoYW5kbGVBY3Rpb25SZXR1cm5WYWx1ZShhY3Rpb25RdWV1ZSwgbm9kZSwgcHJldlRyYW5zaXRpb24pO1xuICAgIH0gY2F0Y2ggKGVycm9yJDYwKSB7XG4gICAgICBvbkFjdGlvbkVycm9yKGFjdGlvblF1ZXVlLCBub2RlLCBlcnJvciQ2MCk7XG4gICAgfVxufVxuZnVuY3Rpb24gaGFuZGxlQWN0aW9uUmV0dXJuVmFsdWUoYWN0aW9uUXVldWUsIG5vZGUsIHJldHVyblZhbHVlKSB7XG4gIG51bGwgIT09IHJldHVyblZhbHVlICYmXG4gIFwib2JqZWN0XCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZSAmJlxuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZS50aGVuXG4gICAgPyByZXR1cm5WYWx1ZS50aGVuKFxuICAgICAgICBmdW5jdGlvbiAobmV4dFN0YXRlKSB7XG4gICAgICAgICAgb25BY3Rpb25TdWNjZXNzKGFjdGlvblF1ZXVlLCBub2RlLCBuZXh0U3RhdGUpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gb25BY3Rpb25FcnJvcihhY3Rpb25RdWV1ZSwgbm9kZSwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICApXG4gICAgOiBvbkFjdGlvblN1Y2Nlc3MoYWN0aW9uUXVldWUsIG5vZGUsIHJldHVyblZhbHVlKTtcbn1cbmZ1bmN0aW9uIG9uQWN0aW9uU3VjY2VzcyhhY3Rpb25RdWV1ZSwgYWN0aW9uTm9kZSwgbmV4dFN0YXRlKSB7XG4gIGFjdGlvbk5vZGUuc3RhdHVzID0gXCJmdWxmaWxsZWRcIjtcbiAgYWN0aW9uTm9kZS52YWx1ZSA9IG5leHRTdGF0ZTtcbiAgbm90aWZ5QWN0aW9uTGlzdGVuZXJzKGFjdGlvbk5vZGUpO1xuICBhY3Rpb25RdWV1ZS5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgYWN0aW9uTm9kZSA9IGFjdGlvblF1ZXVlLnBlbmRpbmc7XG4gIG51bGwgIT09IGFjdGlvbk5vZGUgJiZcbiAgICAoKG5leHRTdGF0ZSA9IGFjdGlvbk5vZGUubmV4dCksXG4gICAgbmV4dFN0YXRlID09PSBhY3Rpb25Ob2RlXG4gICAgICA/IChhY3Rpb25RdWV1ZS5wZW5kaW5nID0gbnVsbClcbiAgICAgIDogKChuZXh0U3RhdGUgPSBuZXh0U3RhdGUubmV4dCksXG4gICAgICAgIChhY3Rpb25Ob2RlLm5leHQgPSBuZXh0U3RhdGUpLFxuICAgICAgICBydW5BY3Rpb25TdGF0ZUFjdGlvbihhY3Rpb25RdWV1ZSwgbmV4dFN0YXRlKSkpO1xufVxuZnVuY3Rpb24gb25BY3Rpb25FcnJvcihhY3Rpb25RdWV1ZSwgYWN0aW9uTm9kZSwgZXJyb3IpIHtcbiAgdmFyIGxhc3QgPSBhY3Rpb25RdWV1ZS5wZW5kaW5nO1xuICBhY3Rpb25RdWV1ZS5wZW5kaW5nID0gbnVsbDtcbiAgaWYgKG51bGwgIT09IGxhc3QpIHtcbiAgICBsYXN0ID0gbGFzdC5uZXh0O1xuICAgIGRvXG4gICAgICAoYWN0aW9uTm9kZS5zdGF0dXMgPSBcInJlamVjdGVkXCIpLFxuICAgICAgICAoYWN0aW9uTm9kZS5yZWFzb24gPSBlcnJvciksXG4gICAgICAgIG5vdGlmeUFjdGlvbkxpc3RlbmVycyhhY3Rpb25Ob2RlKSxcbiAgICAgICAgKGFjdGlvbk5vZGUgPSBhY3Rpb25Ob2RlLm5leHQpO1xuICAgIHdoaWxlIChhY3Rpb25Ob2RlICE9PSBsYXN0KTtcbiAgfVxuICBhY3Rpb25RdWV1ZS5hY3Rpb24gPSBudWxsO1xufVxuZnVuY3Rpb24gbm90aWZ5QWN0aW9uTGlzdGVuZXJzKGFjdGlvbk5vZGUpIHtcbiAgYWN0aW9uTm9kZSA9IGFjdGlvbk5vZGUubGlzdGVuZXJzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFjdGlvbk5vZGUubGVuZ3RoOyBpKyspICgwLCBhY3Rpb25Ob2RlW2ldKSgpO1xufVxuZnVuY3Rpb24gYWN0aW9uU3RhdGVSZWR1Y2VyKG9sZFN0YXRlLCBuZXdTdGF0ZSkge1xuICByZXR1cm4gbmV3U3RhdGU7XG59XG5mdW5jdGlvbiBtb3VudEFjdGlvblN0YXRlKGFjdGlvbiwgaW5pdGlhbFN0YXRlUHJvcCkge1xuICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICB2YXIgc3NyRm9ybVN0YXRlID0gd29ya0luUHJvZ3Jlc3NSb290LmZvcm1TdGF0ZTtcbiAgICBpZiAobnVsbCAhPT0gc3NyRm9ybVN0YXRlKSB7XG4gICAgICBhOiB7XG4gICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxO1xuICAgICAgICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICAgICAgICBpZiAobmV4dEh5ZHJhdGFibGVJbnN0YW5jZSkge1xuICAgICAgICAgICAgYjoge1xuICAgICAgICAgICAgICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZTtcbiAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICB2YXIgaW5Sb290T3JTaW5nbGV0b24gPSByb290T3JTaW5nbGV0b25Db250ZXh0O1xuICAgICAgICAgICAgICAgIDggIT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMC5ub2RlVHlwZTtcblxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBpZiAoIWluUm9vdE9yU2luZ2xldG9uKSB7XG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwID0gZ2V0TmV4dEh5ZHJhdGFibGUoXG4gICAgICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAubmV4dFNpYmxpbmdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChudWxsID09PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDApIHtcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpblJvb3RPclNpbmdsZXRvbiA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMC5kYXRhO1xuICAgICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAgPVxuICAgICAgICAgICAgICAgIFwiRiFcIiA9PT0gaW5Sb290T3JTaW5nbGV0b24gfHwgXCJGXCIgPT09IGluUm9vdE9yU2luZ2xldG9uXG4gICAgICAgICAgICAgICAgICA/IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMFxuICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCkge1xuICAgICAgICAgICAgICBuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoXG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLm5leHRTaWJsaW5nXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgICAgICAgICAgXCJGIVwiID09PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQkanNjb21wJDAuZGF0YTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gITE7XG4gICAgICB9XG4gICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiYgKGluaXRpYWxTdGF0ZVByb3AgPSBzc3JGb3JtU3RhdGVbMF0pO1xuICAgIH1cbiAgfVxuICBzc3JGb3JtU3RhdGUgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBzc3JGb3JtU3RhdGUubWVtb2l6ZWRTdGF0ZSA9IHNzckZvcm1TdGF0ZS5iYXNlU3RhdGUgPSBpbml0aWFsU3RhdGVQcm9wO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSB7XG4gICAgcGVuZGluZzogbnVsbCxcbiAgICBsYW5lczogMCxcbiAgICBkaXNwYXRjaDogbnVsbCxcbiAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBhY3Rpb25TdGF0ZVJlZHVjZXIsXG4gICAgbGFzdFJlbmRlcmVkU3RhdGU6IGluaXRpYWxTdGF0ZVByb3BcbiAgfTtcbiAgc3NyRm9ybVN0YXRlLnF1ZXVlID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICBzc3JGb3JtU3RhdGUgPSBkaXNwYXRjaFNldFN0YXRlLmJpbmQoXG4gICAgbnVsbCxcbiAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLFxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICApO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQuZGlzcGF0Y2ggPSBzc3JGb3JtU3RhdGU7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IG1vdW50U3RhdGVJbXBsKCExKTtcbiAgaW5Sb290T3JTaW5nbGV0b24gPSBkaXNwYXRjaE9wdGltaXN0aWNTZXRTdGF0ZS5iaW5kKFxuICAgIG51bGwsXG4gICAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSxcbiAgICAhMSxcbiAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQucXVldWVcbiAgKTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwID0ge1xuICAgIHN0YXRlOiBpbml0aWFsU3RhdGVQcm9wLFxuICAgIGRpc3BhdGNoOiBudWxsLFxuICAgIGFjdGlvbjogYWN0aW9uLFxuICAgIHBlbmRpbmc6IG51bGxcbiAgfTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnF1ZXVlID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwO1xuICBzc3JGb3JtU3RhdGUgPSBkaXNwYXRjaEFjdGlvblN0YXRlLmJpbmQoXG4gICAgbnVsbCxcbiAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLFxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCxcbiAgICBpblJvb3RPclNpbmdsZXRvbixcbiAgICBzc3JGb3JtU3RhdGVcbiAgKTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwLmRpc3BhdGNoID0gc3NyRm9ybVN0YXRlO1xuICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQubWVtb2l6ZWRTdGF0ZSA9IGFjdGlvbjtcbiAgcmV0dXJuIFtpbml0aWFsU3RhdGVQcm9wLCBzc3JGb3JtU3RhdGUsICExXTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUFjdGlvblN0YXRlKGFjdGlvbikge1xuICB2YXIgc3RhdGVIb29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHJldHVybiB1cGRhdGVBY3Rpb25TdGF0ZUltcGwoc3RhdGVIb29rLCBjdXJyZW50SG9vaywgYWN0aW9uKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUFjdGlvblN0YXRlSW1wbChzdGF0ZUhvb2ssIGN1cnJlbnRTdGF0ZUhvb2ssIGFjdGlvbikge1xuICBjdXJyZW50U3RhdGVIb29rID0gdXBkYXRlUmVkdWNlckltcGwoXG4gICAgc3RhdGVIb29rLFxuICAgIGN1cnJlbnRTdGF0ZUhvb2ssXG4gICAgYWN0aW9uU3RhdGVSZWR1Y2VyXG4gIClbMF07XG4gIHN0YXRlSG9vayA9IHVwZGF0ZVJlZHVjZXIoYmFzaWNTdGF0ZVJlZHVjZXIpWzBdO1xuICBjdXJyZW50U3RhdGVIb29rID1cbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgY3VycmVudFN0YXRlSG9vayAmJlxuICAgIG51bGwgIT09IGN1cnJlbnRTdGF0ZUhvb2sgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjdXJyZW50U3RhdGVIb29rLnRoZW5cbiAgICAgID8gdXNlVGhlbmFibGUoY3VycmVudFN0YXRlSG9vaylcbiAgICAgIDogY3VycmVudFN0YXRlSG9vaztcbiAgdmFyIGFjdGlvblF1ZXVlSG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLFxuICAgIGFjdGlvblF1ZXVlID0gYWN0aW9uUXVldWVIb29rLnF1ZXVlLFxuICAgIGRpc3BhdGNoID0gYWN0aW9uUXVldWUuZGlzcGF0Y2g7XG4gIGFjdGlvbiAhPT0gYWN0aW9uUXVldWVIb29rLm1lbW9pemVkU3RhdGUgJiZcbiAgICAoKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEuZmxhZ3MgfD0gMjA0OCksXG4gICAgcHVzaEVmZmVjdChcbiAgICAgIDksXG4gICAgICBhY3Rpb25TdGF0ZUFjdGlvbkVmZmVjdC5iaW5kKG51bGwsIGFjdGlvblF1ZXVlLCBhY3Rpb24pLFxuICAgICAgeyBkZXN0cm95OiB2b2lkIDAgfSxcbiAgICAgIG51bGxcbiAgICApKTtcbiAgcmV0dXJuIFtjdXJyZW50U3RhdGVIb29rLCBkaXNwYXRjaCwgc3RhdGVIb29rXTtcbn1cbmZ1bmN0aW9uIGFjdGlvblN0YXRlQWN0aW9uRWZmZWN0KGFjdGlvblF1ZXVlLCBhY3Rpb24pIHtcbiAgYWN0aW9uUXVldWUuYWN0aW9uID0gYWN0aW9uO1xufVxuZnVuY3Rpb24gcmVyZW5kZXJBY3Rpb25TdGF0ZShhY3Rpb24pIHtcbiAgdmFyIHN0YXRlSG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpLFxuICAgIGN1cnJlbnRTdGF0ZUhvb2sgPSBjdXJyZW50SG9vaztcbiAgaWYgKG51bGwgIT09IGN1cnJlbnRTdGF0ZUhvb2spXG4gICAgcmV0dXJuIHVwZGF0ZUFjdGlvblN0YXRlSW1wbChzdGF0ZUhvb2ssIGN1cnJlbnRTdGF0ZUhvb2ssIGFjdGlvbik7XG4gIHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBzdGF0ZUhvb2sgPSBzdGF0ZUhvb2subWVtb2l6ZWRTdGF0ZTtcbiAgY3VycmVudFN0YXRlSG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICB2YXIgZGlzcGF0Y2ggPSBjdXJyZW50U3RhdGVIb29rLnF1ZXVlLmRpc3BhdGNoO1xuICBjdXJyZW50U3RhdGVIb29rLm1lbW9pemVkU3RhdGUgPSBhY3Rpb247XG4gIHJldHVybiBbc3RhdGVIb29rLCBkaXNwYXRjaCwgITFdO1xufVxuZnVuY3Rpb24gcHVzaEVmZmVjdCh0YWcsIGNyZWF0ZSwgaW5zdCwgZGVwcykge1xuICB0YWcgPSB7IHRhZzogdGFnLCBjcmVhdGU6IGNyZWF0ZSwgaW5zdDogaW5zdCwgZGVwczogZGVwcywgbmV4dDogbnVsbCB9O1xuICBjcmVhdGUgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLnVwZGF0ZVF1ZXVlO1xuICBudWxsID09PSBjcmVhdGUgJiZcbiAgICAoKGNyZWF0ZSA9IGNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUoKSksXG4gICAgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEudXBkYXRlUXVldWUgPSBjcmVhdGUpKTtcbiAgaW5zdCA9IGNyZWF0ZS5sYXN0RWZmZWN0O1xuICBudWxsID09PSBpbnN0XG4gICAgPyAoY3JlYXRlLmxhc3RFZmZlY3QgPSB0YWcubmV4dCA9IHRhZylcbiAgICA6ICgoZGVwcyA9IGluc3QubmV4dCksXG4gICAgICAoaW5zdC5uZXh0ID0gdGFnKSxcbiAgICAgICh0YWcubmV4dCA9IGRlcHMpLFxuICAgICAgKGNyZWF0ZS5sYXN0RWZmZWN0ID0gdGFnKSk7XG4gIHJldHVybiB0YWc7XG59XG5mdW5jdGlvbiB1cGRhdGVSZWYoKSB7XG4gIHJldHVybiB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlO1xufVxuZnVuY3Rpb24gbW91bnRFZmZlY3RJbXBsKGZpYmVyRmxhZ3MsIGhvb2tGbGFncywgY3JlYXRlLCBkZXBzKSB7XG4gIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5mbGFncyB8PSBmaWJlckZsYWdzO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBwdXNoRWZmZWN0KFxuICAgIDEgfCBob29rRmxhZ3MsXG4gICAgY3JlYXRlLFxuICAgIHsgZGVzdHJveTogdm9pZCAwIH0sXG4gICAgdm9pZCAwID09PSBkZXBzID8gbnVsbCA6IGRlcHNcbiAgKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUVmZmVjdEltcGwoZmliZXJGbGFncywgaG9va0ZsYWdzLCBjcmVhdGUsIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgZGVwcyA9IHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzO1xuICB2YXIgaW5zdCA9IGhvb2subWVtb2l6ZWRTdGF0ZS5pbnN0O1xuICBudWxsICE9PSBjdXJyZW50SG9vayAmJlxuICBudWxsICE9PSBkZXBzICYmXG4gIGFyZUhvb2tJbnB1dHNFcXVhbChkZXBzLCBjdXJyZW50SG9vay5tZW1vaXplZFN0YXRlLmRlcHMpXG4gICAgPyAoaG9vay5tZW1vaXplZFN0YXRlID0gcHVzaEVmZmVjdChob29rRmxhZ3MsIGNyZWF0ZSwgaW5zdCwgZGVwcykpXG4gICAgOiAoKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEuZmxhZ3MgfD0gZmliZXJGbGFncyksXG4gICAgICAoaG9vay5tZW1vaXplZFN0YXRlID0gcHVzaEVmZmVjdCgxIHwgaG9va0ZsYWdzLCBjcmVhdGUsIGluc3QsIGRlcHMpKSk7XG59XG5mdW5jdGlvbiBtb3VudEVmZmVjdChjcmVhdGUsIGRlcHMpIHtcbiAgbW91bnRFZmZlY3RJbXBsKDgzOTA2NTYsIDgsIGNyZWF0ZSwgZGVwcyk7XG59XG5mdW5jdGlvbiB1cGRhdGVFZmZlY3QoY3JlYXRlLCBkZXBzKSB7XG4gIHVwZGF0ZUVmZmVjdEltcGwoMjA0OCwgOCwgY3JlYXRlLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUluc2VydGlvbkVmZmVjdChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIHVwZGF0ZUVmZmVjdEltcGwoNCwgMiwgY3JlYXRlLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUxheW91dEVmZmVjdChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIHVwZGF0ZUVmZmVjdEltcGwoNCwgNCwgY3JlYXRlLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIGltcGVyYXRpdmVIYW5kbGVFZmZlY3QoY3JlYXRlLCByZWYpIHtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZikge1xuICAgIGNyZWF0ZSA9IGNyZWF0ZSgpO1xuICAgIHZhciByZWZDbGVhbnVwID0gcmVmKGNyZWF0ZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZkNsZWFudXAgPyByZWZDbGVhbnVwKCkgOiByZWYobnVsbCk7XG4gICAgfTtcbiAgfVxuICBpZiAobnVsbCAhPT0gcmVmICYmIHZvaWQgMCAhPT0gcmVmKVxuICAgIHJldHVybiAoXG4gICAgICAoY3JlYXRlID0gY3JlYXRlKCkpLFxuICAgICAgKHJlZi5jdXJyZW50ID0gY3JlYXRlKSxcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgICk7XG59XG5mdW5jdGlvbiB1cGRhdGVJbXBlcmF0aXZlSGFuZGxlKHJlZiwgY3JlYXRlLCBkZXBzKSB7XG4gIGRlcHMgPSBudWxsICE9PSBkZXBzICYmIHZvaWQgMCAhPT0gZGVwcyA/IGRlcHMuY29uY2F0KFtyZWZdKSA6IG51bGw7XG4gIHVwZGF0ZUVmZmVjdEltcGwoNCwgNCwgaW1wZXJhdGl2ZUhhbmRsZUVmZmVjdC5iaW5kKG51bGwsIGNyZWF0ZSwgcmVmKSwgZGVwcyk7XG59XG5mdW5jdGlvbiBtb3VudERlYnVnVmFsdWUoKSB7fVxuZnVuY3Rpb24gdXBkYXRlQ2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgZGVwcyA9IHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzO1xuICB2YXIgcHJldlN0YXRlID0gaG9vay5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gZGVwcyAmJiBhcmVIb29rSW5wdXRzRXF1YWwoZGVwcywgcHJldlN0YXRlWzFdKSlcbiAgICByZXR1cm4gcHJldlN0YXRlWzBdO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBbY2FsbGJhY2ssIGRlcHNdO1xuICByZXR1cm4gY2FsbGJhY2s7XG59XG5mdW5jdGlvbiB1cGRhdGVNZW1vKG5leHRDcmVhdGUsIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgZGVwcyA9IHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzO1xuICB2YXIgcHJldlN0YXRlID0gaG9vay5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gZGVwcyAmJiBhcmVIb29rSW5wdXRzRXF1YWwoZGVwcywgcHJldlN0YXRlWzFdKSlcbiAgICByZXR1cm4gcHJldlN0YXRlWzBdO1xuICBwcmV2U3RhdGUgPSBuZXh0Q3JlYXRlKCk7XG4gIGlmIChzaG91bGREb3VibGVJbnZva2VVc2VyRm5zSW5Ib29rc0RFVikge1xuICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCEwKTtcbiAgICB0cnkge1xuICAgICAgbmV4dENyZWF0ZSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyghMSk7XG4gICAgfVxuICB9XG4gIGhvb2subWVtb2l6ZWRTdGF0ZSA9IFtwcmV2U3RhdGUsIGRlcHNdO1xuICByZXR1cm4gcHJldlN0YXRlO1xufVxuZnVuY3Rpb24gbW91bnREZWZlcnJlZFZhbHVlSW1wbChob29rLCB2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gIGlmICh2b2lkIDAgPT09IGluaXRpYWxWYWx1ZSB8fCAwICE9PSAocmVuZGVyTGFuZXMgJiAxMDczNzQxODI0KSlcbiAgICByZXR1cm4gKGhvb2subWVtb2l6ZWRTdGF0ZSA9IHZhbHVlKTtcbiAgaG9vay5tZW1vaXplZFN0YXRlID0gaW5pdGlhbFZhbHVlO1xuICBob29rID0gcmVxdWVzdERlZmVycmVkTGFuZSgpO1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmxhbmVzIHw9IGhvb2s7XG4gIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyB8PSBob29rO1xuICByZXR1cm4gaW5pdGlhbFZhbHVlO1xufVxuZnVuY3Rpb24gdXBkYXRlRGVmZXJyZWRWYWx1ZUltcGwoaG9vaywgcHJldlZhbHVlLCB2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gIGlmIChvYmplY3RJcyh2YWx1ZSwgcHJldlZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICBpZiAobnVsbCAhPT0gY3VycmVudFRyZWVIaWRkZW5TdGFja0N1cnNvci5jdXJyZW50KVxuICAgIHJldHVybiAoXG4gICAgICAoaG9vayA9IG1vdW50RGVmZXJyZWRWYWx1ZUltcGwoaG9vaywgdmFsdWUsIGluaXRpYWxWYWx1ZSkpLFxuICAgICAgb2JqZWN0SXMoaG9vaywgcHJldlZhbHVlKSB8fCAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSxcbiAgICAgIGhvb2tcbiAgICApO1xuICBpZiAoMCA9PT0gKHJlbmRlckxhbmVzICYgNDIpKVxuICAgIHJldHVybiAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwKSwgKGhvb2subWVtb2l6ZWRTdGF0ZSA9IHZhbHVlKTtcbiAgaG9vayA9IHJlcXVlc3REZWZlcnJlZExhbmUoKTtcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5sYW5lcyB8PSBob29rO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgfD0gaG9vaztcbiAgcmV0dXJuIHByZXZWYWx1ZTtcbn1cbmZ1bmN0aW9uIHN0YXJ0VHJhbnNpdGlvbihmaWJlciwgcXVldWUsIHBlbmRpbmdTdGF0ZSwgZmluaXNoZWRTdGF0ZSwgY2FsbGJhY2spIHtcbiAgdmFyIHByZXZpb3VzUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICBSZWFjdERPTVNoYXJlZEludGVybmFscy5wID1cbiAgICAwICE9PSBwcmV2aW91c1ByaW9yaXR5ICYmIDggPiBwcmV2aW91c1ByaW9yaXR5ID8gcHJldmlvdXNQcmlvcml0eSA6IDg7XG4gIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQsXG4gICAgY3VycmVudFRyYW5zaXRpb24gPSB7fTtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IGN1cnJlbnRUcmFuc2l0aW9uO1xuICBkaXNwYXRjaE9wdGltaXN0aWNTZXRTdGF0ZShmaWJlciwgITEsIHF1ZXVlLCBwZW5kaW5nU3RhdGUpO1xuICB0cnkge1xuICAgIHZhciByZXR1cm5WYWx1ZSA9IGNhbGxiYWNrKCksXG4gICAgICBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlM7XG4gICAgbnVsbCAhPT0gb25TdGFydFRyYW5zaXRpb25GaW5pc2ggJiZcbiAgICAgIG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoKGN1cnJlbnRUcmFuc2l0aW9uLCByZXR1cm5WYWx1ZSk7XG4gICAgaWYgKFxuICAgICAgbnVsbCAhPT0gcmV0dXJuVmFsdWUgJiZcbiAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZSAmJlxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmV0dXJuVmFsdWUudGhlblxuICAgICkge1xuICAgICAgdmFyIHRoZW5hYmxlRm9yRmluaXNoZWRTdGF0ZSA9IGNoYWluVGhlbmFibGVWYWx1ZShcbiAgICAgICAgcmV0dXJuVmFsdWUsXG4gICAgICAgIGZpbmlzaGVkU3RhdGVcbiAgICAgICk7XG4gICAgICBkaXNwYXRjaFNldFN0YXRlSW50ZXJuYWwoXG4gICAgICAgIGZpYmVyLFxuICAgICAgICBxdWV1ZSxcbiAgICAgICAgdGhlbmFibGVGb3JGaW5pc2hlZFN0YXRlLFxuICAgICAgICByZXF1ZXN0VXBkYXRlTGFuZShmaWJlcilcbiAgICAgICk7XG4gICAgfSBlbHNlXG4gICAgICBkaXNwYXRjaFNldFN0YXRlSW50ZXJuYWwoXG4gICAgICAgIGZpYmVyLFxuICAgICAgICBxdWV1ZSxcbiAgICAgICAgZmluaXNoZWRTdGF0ZSxcbiAgICAgICAgcmVxdWVzdFVwZGF0ZUxhbmUoZmliZXIpXG4gICAgICApO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChcbiAgICAgIGZpYmVyLFxuICAgICAgcXVldWUsXG4gICAgICB7IHRoZW46IGZ1bmN0aW9uICgpIHt9LCBzdGF0dXM6IFwicmVqZWN0ZWRcIiwgcmVhc29uOiBlcnJvciB9LFxuICAgICAgcmVxdWVzdFVwZGF0ZUxhbmUoKVxuICAgICk7XG4gIH0gZmluYWxseSB7XG4gICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSBwcmV2aW91c1ByaW9yaXR5KSxcbiAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldlRyYW5zaXRpb24pO1xuICB9XG59XG5mdW5jdGlvbiBub29wJDIoKSB7fVxuZnVuY3Rpb24gc3RhcnRIb3N0VHJhbnNpdGlvbihmb3JtRmliZXIsIHBlbmRpbmdTdGF0ZSwgYWN0aW9uLCBmb3JtRGF0YSkge1xuICBpZiAoNSAhPT0gZm9ybUZpYmVyLnRhZykgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NzYpKTtcbiAgdmFyIHF1ZXVlID0gZW5zdXJlRm9ybUNvbXBvbmVudElzU3RhdGVmdWwoZm9ybUZpYmVyKS5xdWV1ZTtcbiAgc3RhcnRUcmFuc2l0aW9uKFxuICAgIGZvcm1GaWJlcixcbiAgICBxdWV1ZSxcbiAgICBwZW5kaW5nU3RhdGUsXG4gICAgc2hhcmVkTm90UGVuZGluZ09iamVjdCxcbiAgICBudWxsID09PSBhY3Rpb25cbiAgICAgID8gbm9vcCQyXG4gICAgICA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXF1ZXN0Rm9ybVJlc2V0JDEoZm9ybUZpYmVyKTtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGZvcm1EYXRhKTtcbiAgICAgICAgfVxuICApO1xufVxuZnVuY3Rpb24gZW5zdXJlRm9ybUNvbXBvbmVudElzU3RhdGVmdWwoZm9ybUZpYmVyKSB7XG4gIHZhciBleGlzdGluZ1N0YXRlSG9vayA9IGZvcm1GaWJlci5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gZXhpc3RpbmdTdGF0ZUhvb2spIHJldHVybiBleGlzdGluZ1N0YXRlSG9vaztcbiAgZXhpc3RpbmdTdGF0ZUhvb2sgPSB7XG4gICAgbWVtb2l6ZWRTdGF0ZTogc2hhcmVkTm90UGVuZGluZ09iamVjdCxcbiAgICBiYXNlU3RhdGU6IHNoYXJlZE5vdFBlbmRpbmdPYmplY3QsXG4gICAgYmFzZVF1ZXVlOiBudWxsLFxuICAgIHF1ZXVlOiB7XG4gICAgICBwZW5kaW5nOiBudWxsLFxuICAgICAgbGFuZXM6IDAsXG4gICAgICBkaXNwYXRjaDogbnVsbCxcbiAgICAgIGxhc3RSZW5kZXJlZFJlZHVjZXI6IGJhc2ljU3RhdGVSZWR1Y2VyLFxuICAgICAgbGFzdFJlbmRlcmVkU3RhdGU6IHNoYXJlZE5vdFBlbmRpbmdPYmplY3RcbiAgICB9LFxuICAgIG5leHQ6IG51bGxcbiAgfTtcbiAgdmFyIGluaXRpYWxSZXNldFN0YXRlID0ge307XG4gIGV4aXN0aW5nU3RhdGVIb29rLm5leHQgPSB7XG4gICAgbWVtb2l6ZWRTdGF0ZTogaW5pdGlhbFJlc2V0U3RhdGUsXG4gICAgYmFzZVN0YXRlOiBpbml0aWFsUmVzZXRTdGF0ZSxcbiAgICBiYXNlUXVldWU6IG51bGwsXG4gICAgcXVldWU6IHtcbiAgICAgIHBlbmRpbmc6IG51bGwsXG4gICAgICBsYW5lczogMCxcbiAgICAgIGRpc3BhdGNoOiBudWxsLFxuICAgICAgbGFzdFJlbmRlcmVkUmVkdWNlcjogYmFzaWNTdGF0ZVJlZHVjZXIsXG4gICAgICBsYXN0UmVuZGVyZWRTdGF0ZTogaW5pdGlhbFJlc2V0U3RhdGVcbiAgICB9LFxuICAgIG5leHQ6IG51bGxcbiAgfTtcbiAgZm9ybUZpYmVyLm1lbW9pemVkU3RhdGUgPSBleGlzdGluZ1N0YXRlSG9vaztcbiAgZm9ybUZpYmVyID0gZm9ybUZpYmVyLmFsdGVybmF0ZTtcbiAgbnVsbCAhPT0gZm9ybUZpYmVyICYmIChmb3JtRmliZXIubWVtb2l6ZWRTdGF0ZSA9IGV4aXN0aW5nU3RhdGVIb29rKTtcbiAgcmV0dXJuIGV4aXN0aW5nU3RhdGVIb29rO1xufVxuZnVuY3Rpb24gcmVxdWVzdEZvcm1SZXNldCQxKGZvcm1GaWJlcikge1xuICB2YXIgcmVzZXRTdGF0ZVF1ZXVlID0gZW5zdXJlRm9ybUNvbXBvbmVudElzU3RhdGVmdWwoZm9ybUZpYmVyKS5uZXh0LnF1ZXVlO1xuICBkaXNwYXRjaFNldFN0YXRlSW50ZXJuYWwoZm9ybUZpYmVyLCByZXNldFN0YXRlUXVldWUsIHt9LCByZXF1ZXN0VXBkYXRlTGFuZSgpKTtcbn1cbmZ1bmN0aW9uIHVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzKCkge1xuICByZXR1cm4gcmVhZENvbnRleHQoSG9zdFRyYW5zaXRpb25Db250ZXh0KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUlkKCkge1xuICByZXR1cm4gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCkubWVtb2l6ZWRTdGF0ZTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVJlZnJlc2goKSB7XG4gIHJldHVybiB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlO1xufVxuZnVuY3Rpb24gcmVmcmVzaENhY2hlKGZpYmVyKSB7XG4gIGZvciAodmFyIHByb3ZpZGVyID0gZmliZXIucmV0dXJuOyBudWxsICE9PSBwcm92aWRlcjsgKSB7XG4gICAgc3dpdGNoIChwcm92aWRlci50YWcpIHtcbiAgICAgIGNhc2UgMjQ6XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKTtcbiAgICAgICAgZmliZXIgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gICAgICAgIHZhciByb290JDYzID0gZW5xdWV1ZVVwZGF0ZShwcm92aWRlciwgZmliZXIsIGxhbmUpO1xuICAgICAgICBudWxsICE9PSByb290JDYzICYmXG4gICAgICAgICAgKHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290JDYzLCBwcm92aWRlciwgbGFuZSksXG4gICAgICAgICAgZW50YW5nbGVUcmFuc2l0aW9ucyhyb290JDYzLCBwcm92aWRlciwgbGFuZSkpO1xuICAgICAgICBwcm92aWRlciA9IHsgY2FjaGU6IGNyZWF0ZUNhY2hlKCkgfTtcbiAgICAgICAgZmliZXIucGF5bG9hZCA9IHByb3ZpZGVyO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHByb3ZpZGVyID0gcHJvdmlkZXIucmV0dXJuO1xuICB9XG59XG5mdW5jdGlvbiBkaXNwYXRjaFJlZHVjZXJBY3Rpb24oZmliZXIsIHF1ZXVlLCBhY3Rpb24pIHtcbiAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpO1xuICBhY3Rpb24gPSB7XG4gICAgbGFuZTogbGFuZSxcbiAgICByZXZlcnRMYW5lOiAwLFxuICAgIGFjdGlvbjogYWN0aW9uLFxuICAgIGhhc0VhZ2VyU3RhdGU6ICExLFxuICAgIGVhZ2VyU3RhdGU6IG51bGwsXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICBpc1JlbmRlclBoYXNlVXBkYXRlKGZpYmVyKVxuICAgID8gZW5xdWV1ZVJlbmRlclBoYXNlVXBkYXRlKHF1ZXVlLCBhY3Rpb24pXG4gICAgOiAoKGFjdGlvbiA9IGVucXVldWVDb25jdXJyZW50SG9va1VwZGF0ZShmaWJlciwgcXVldWUsIGFjdGlvbiwgbGFuZSkpLFxuICAgICAgbnVsbCAhPT0gYWN0aW9uICYmXG4gICAgICAgIChzY2hlZHVsZVVwZGF0ZU9uRmliZXIoYWN0aW9uLCBmaWJlciwgbGFuZSksXG4gICAgICAgIGVudGFuZ2xlVHJhbnNpdGlvblVwZGF0ZShhY3Rpb24sIHF1ZXVlLCBsYW5lKSkpO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2hTZXRTdGF0ZShmaWJlciwgcXVldWUsIGFjdGlvbikge1xuICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCk7XG4gIGRpc3BhdGNoU2V0U3RhdGVJbnRlcm5hbChmaWJlciwgcXVldWUsIGFjdGlvbiwgbGFuZSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaFNldFN0YXRlSW50ZXJuYWwoZmliZXIsIHF1ZXVlLCBhY3Rpb24sIGxhbmUpIHtcbiAgdmFyIHVwZGF0ZSA9IHtcbiAgICBsYW5lOiBsYW5lLFxuICAgIHJldmVydExhbmU6IDAsXG4gICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgaGFzRWFnZXJTdGF0ZTogITEsXG4gICAgZWFnZXJTdGF0ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIGlmIChpc1JlbmRlclBoYXNlVXBkYXRlKGZpYmVyKSkgZW5xdWV1ZVJlbmRlclBoYXNlVXBkYXRlKHF1ZXVlLCB1cGRhdGUpO1xuICBlbHNlIHtcbiAgICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICAgIGlmIChcbiAgICAgIDAgPT09IGZpYmVyLmxhbmVzICYmXG4gICAgICAobnVsbCA9PT0gYWx0ZXJuYXRlIHx8IDAgPT09IGFsdGVybmF0ZS5sYW5lcykgJiZcbiAgICAgICgoYWx0ZXJuYXRlID0gcXVldWUubGFzdFJlbmRlcmVkUmVkdWNlciksIG51bGwgIT09IGFsdGVybmF0ZSlcbiAgICApXG4gICAgICB0cnkge1xuICAgICAgICB2YXIgY3VycmVudFN0YXRlID0gcXVldWUubGFzdFJlbmRlcmVkU3RhdGUsXG4gICAgICAgICAgZWFnZXJTdGF0ZSA9IGFsdGVybmF0ZShjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgICAgIHVwZGF0ZS5oYXNFYWdlclN0YXRlID0gITA7XG4gICAgICAgIHVwZGF0ZS5lYWdlclN0YXRlID0gZWFnZXJTdGF0ZTtcbiAgICAgICAgaWYgKG9iamVjdElzKGVhZ2VyU3RhdGUsIGN1cnJlbnRTdGF0ZSkpXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGVucXVldWVVcGRhdGUkMShmaWJlciwgcXVldWUsIHVwZGF0ZSwgMCksXG4gICAgICAgICAgICBudWxsID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QgJiYgZmluaXNoUXVldWVpbmdDb25jdXJyZW50VXBkYXRlcygpLFxuICAgICAgICAgICAgITFcbiAgICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICB9XG4gICAgYWN0aW9uID0gZW5xdWV1ZUNvbmN1cnJlbnRIb29rVXBkYXRlKGZpYmVyLCBxdWV1ZSwgdXBkYXRlLCBsYW5lKTtcbiAgICBpZiAobnVsbCAhPT0gYWN0aW9uKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKGFjdGlvbiwgZmliZXIsIGxhbmUpLFxuICAgICAgICBlbnRhbmdsZVRyYW5zaXRpb25VcGRhdGUoYWN0aW9uLCBxdWV1ZSwgbGFuZSksXG4gICAgICAgICEwXG4gICAgICApO1xuICB9XG4gIHJldHVybiAhMTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoT3B0aW1pc3RpY1NldFN0YXRlKGZpYmVyLCB0aHJvd0lmRHVyaW5nUmVuZGVyLCBxdWV1ZSwgYWN0aW9uKSB7XG4gIGFjdGlvbiA9IHtcbiAgICBsYW5lOiAyLFxuICAgIHJldmVydExhbmU6IHJlcXVlc3RUcmFuc2l0aW9uTGFuZSgpLFxuICAgIGFjdGlvbjogYWN0aW9uLFxuICAgIGhhc0VhZ2VyU3RhdGU6ICExLFxuICAgIGVhZ2VyU3RhdGU6IG51bGwsXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICBpZiAoaXNSZW5kZXJQaGFzZVVwZGF0ZShmaWJlcikpIHtcbiAgICBpZiAodGhyb3dJZkR1cmluZ1JlbmRlcikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NzkpKTtcbiAgfSBlbHNlXG4gICAgKHRocm93SWZEdXJpbmdSZW5kZXIgPSBlbnF1ZXVlQ29uY3VycmVudEhvb2tVcGRhdGUoXG4gICAgICBmaWJlcixcbiAgICAgIHF1ZXVlLFxuICAgICAgYWN0aW9uLFxuICAgICAgMlxuICAgICkpLFxuICAgICAgbnVsbCAhPT0gdGhyb3dJZkR1cmluZ1JlbmRlciAmJlxuICAgICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIodGhyb3dJZkR1cmluZ1JlbmRlciwgZmliZXIsIDIpO1xufVxuZnVuY3Rpb24gaXNSZW5kZXJQaGFzZVVwZGF0ZShmaWJlcikge1xuICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlO1xuICByZXR1cm4gKFxuICAgIGZpYmVyID09PSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxIHx8XG4gICAgKG51bGwgIT09IGFsdGVybmF0ZSAmJiBhbHRlcm5hdGUgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEpXG4gICk7XG59XG5mdW5jdGlvbiBlbnF1ZXVlUmVuZGVyUGhhc2VVcGRhdGUocXVldWUsIHVwZGF0ZSkge1xuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgPSBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID1cbiAgICAhMDtcbiAgdmFyIHBlbmRpbmcgPSBxdWV1ZS5wZW5kaW5nO1xuICBudWxsID09PSBwZW5kaW5nXG4gICAgPyAodXBkYXRlLm5leHQgPSB1cGRhdGUpXG4gICAgOiAoKHVwZGF0ZS5uZXh0ID0gcGVuZGluZy5uZXh0KSwgKHBlbmRpbmcubmV4dCA9IHVwZGF0ZSkpO1xuICBxdWV1ZS5wZW5kaW5nID0gdXBkYXRlO1xufVxuZnVuY3Rpb24gZW50YW5nbGVUcmFuc2l0aW9uVXBkYXRlKHJvb3QsIHF1ZXVlLCBsYW5lKSB7XG4gIGlmICgwICE9PSAobGFuZSAmIDQxOTQxNzYpKSB7XG4gICAgdmFyIHF1ZXVlTGFuZXMgPSBxdWV1ZS5sYW5lcztcbiAgICBxdWV1ZUxhbmVzICY9IHJvb3QucGVuZGluZ0xhbmVzO1xuICAgIGxhbmUgfD0gcXVldWVMYW5lcztcbiAgICBxdWV1ZS5sYW5lcyA9IGxhbmU7XG4gICAgbWFya1Jvb3RFbnRhbmdsZWQocm9vdCwgbGFuZSk7XG4gIH1cbn1cbnZhciBDb250ZXh0T25seURpc3BhdGNoZXIgPSB7XG4gIHJlYWRDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgdXNlOiB1c2UsXG4gIHVzZUNhbGxiYWNrOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZUNvbnRleHQ6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlRWZmZWN0OiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZUltcGVyYXRpdmVIYW5kbGU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlTGF5b3V0RWZmZWN0OiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZUluc2VydGlvbkVmZmVjdDogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VNZW1vOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZVJlZHVjZXI6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlUmVmOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZVN0YXRlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZURlYnVnVmFsdWU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlRGVmZXJyZWRWYWx1ZTogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VUcmFuc2l0aW9uOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZUlkOiB0aHJvd0ludmFsaWRIb29rRXJyb3Jcbn07XG5Db250ZXh0T25seURpc3BhdGNoZXIudXNlQ2FjaGVSZWZyZXNoID0gdGhyb3dJbnZhbGlkSG9va0Vycm9yO1xuQ29udGV4dE9ubHlEaXNwYXRjaGVyLnVzZU1lbW9DYWNoZSA9IHRocm93SW52YWxpZEhvb2tFcnJvcjtcbkNvbnRleHRPbmx5RGlzcGF0Y2hlci51c2VIb3N0VHJhbnNpdGlvblN0YXR1cyA9IHRocm93SW52YWxpZEhvb2tFcnJvcjtcbkNvbnRleHRPbmx5RGlzcGF0Y2hlci51c2VGb3JtU3RhdGUgPSB0aHJvd0ludmFsaWRIb29rRXJyb3I7XG5Db250ZXh0T25seURpc3BhdGNoZXIudXNlQWN0aW9uU3RhdGUgPSB0aHJvd0ludmFsaWRIb29rRXJyb3I7XG5Db250ZXh0T25seURpc3BhdGNoZXIudXNlT3B0aW1pc3RpYyA9IHRocm93SW52YWxpZEhvb2tFcnJvcjtcbnZhciBIb29rc0Rpc3BhdGNoZXJPbk1vdW50ID0ge1xuICByZWFkQ29udGV4dDogcmVhZENvbnRleHQsXG4gIHVzZTogdXNlLFxuICB1c2VDYWxsYmFjazogZnVuY3Rpb24gKGNhbGxiYWNrLCBkZXBzKSB7XG4gICAgbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlID0gW1xuICAgICAgY2FsbGJhY2ssXG4gICAgICB2b2lkIDAgPT09IGRlcHMgPyBudWxsIDogZGVwc1xuICAgIF07XG4gICAgcmV0dXJuIGNhbGxiYWNrO1xuICB9LFxuICB1c2VDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgdXNlRWZmZWN0OiBtb3VudEVmZmVjdCxcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogZnVuY3Rpb24gKHJlZiwgY3JlYXRlLCBkZXBzKSB7XG4gICAgZGVwcyA9IG51bGwgIT09IGRlcHMgJiYgdm9pZCAwICE9PSBkZXBzID8gZGVwcy5jb25jYXQoW3JlZl0pIDogbnVsbDtcbiAgICBtb3VudEVmZmVjdEltcGwoXG4gICAgICA0MTk0MzA4LFxuICAgICAgNCxcbiAgICAgIGltcGVyYXRpdmVIYW5kbGVFZmZlY3QuYmluZChudWxsLCBjcmVhdGUsIHJlZiksXG4gICAgICBkZXBzXG4gICAgKTtcbiAgfSxcbiAgdXNlTGF5b3V0RWZmZWN0OiBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gICAgcmV0dXJuIG1vdW50RWZmZWN0SW1wbCg0MTk0MzA4LCA0LCBjcmVhdGUsIGRlcHMpO1xuICB9LFxuICB1c2VJbnNlcnRpb25FZmZlY3Q6IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICBtb3VudEVmZmVjdEltcGwoNCwgMiwgY3JlYXRlLCBkZXBzKTtcbiAgfSxcbiAgdXNlTWVtbzogZnVuY3Rpb24gKG5leHRDcmVhdGUsIGRlcHMpIHtcbiAgICB2YXIgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gICAgZGVwcyA9IHZvaWQgMCA9PT0gZGVwcyA/IG51bGwgOiBkZXBzO1xuICAgIHZhciBuZXh0VmFsdWUgPSBuZXh0Q3JlYXRlKCk7XG4gICAgaWYgKHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWKSB7XG4gICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyghMCk7XG4gICAgICB0cnkge1xuICAgICAgICBuZXh0Q3JlYXRlKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyghMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGhvb2subWVtb2l6ZWRTdGF0ZSA9IFtuZXh0VmFsdWUsIGRlcHNdO1xuICAgIHJldHVybiBuZXh0VmFsdWU7XG4gIH0sXG4gIHVzZVJlZHVjZXI6IGZ1bmN0aW9uIChyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KSB7XG4gICAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgIGlmICh2b2lkIDAgIT09IGluaXQpIHtcbiAgICAgIHZhciBpbml0aWFsU3RhdGUgPSBpbml0KGluaXRpYWxBcmcpO1xuICAgICAgaWYgKHNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWKSB7XG4gICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCEwKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpbml0KGluaXRpYWxBcmcpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKCExKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpbml0aWFsU3RhdGUgPSBpbml0aWFsQXJnO1xuICAgIGhvb2subWVtb2l6ZWRTdGF0ZSA9IGhvb2suYmFzZVN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgIHJlZHVjZXIgPSB7XG4gICAgICBwZW5kaW5nOiBudWxsLFxuICAgICAgbGFuZXM6IDAsXG4gICAgICBkaXNwYXRjaDogbnVsbCxcbiAgICAgIGxhc3RSZW5kZXJlZFJlZHVjZXI6IHJlZHVjZXIsXG4gICAgICBsYXN0UmVuZGVyZWRTdGF0ZTogaW5pdGlhbFN0YXRlXG4gICAgfTtcbiAgICBob29rLnF1ZXVlID0gcmVkdWNlcjtcbiAgICByZWR1Y2VyID0gcmVkdWNlci5kaXNwYXRjaCA9IGRpc3BhdGNoUmVkdWNlckFjdGlvbi5iaW5kKFxuICAgICAgbnVsbCxcbiAgICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEsXG4gICAgICByZWR1Y2VyXG4gICAgKTtcbiAgICByZXR1cm4gW2hvb2subWVtb2l6ZWRTdGF0ZSwgcmVkdWNlcl07XG4gIH0sXG4gIHVzZVJlZjogZnVuY3Rpb24gKGluaXRpYWxWYWx1ZSkge1xuICAgIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICBpbml0aWFsVmFsdWUgPSB7IGN1cnJlbnQ6IGluaXRpYWxWYWx1ZSB9O1xuICAgIHJldHVybiAoaG9vay5tZW1vaXplZFN0YXRlID0gaW5pdGlhbFZhbHVlKTtcbiAgfSxcbiAgdXNlU3RhdGU6IGZ1bmN0aW9uIChpbml0aWFsU3RhdGUpIHtcbiAgICBpbml0aWFsU3RhdGUgPSBtb3VudFN0YXRlSW1wbChpbml0aWFsU3RhdGUpO1xuICAgIHZhciBxdWV1ZSA9IGluaXRpYWxTdGF0ZS5xdWV1ZSxcbiAgICAgIGRpc3BhdGNoID0gZGlzcGF0Y2hTZXRTdGF0ZS5iaW5kKG51bGwsIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEsIHF1ZXVlKTtcbiAgICBxdWV1ZS5kaXNwYXRjaCA9IGRpc3BhdGNoO1xuICAgIHJldHVybiBbaW5pdGlhbFN0YXRlLm1lbW9pemVkU3RhdGUsIGRpc3BhdGNoXTtcbiAgfSxcbiAgdXNlRGVidWdWYWx1ZTogbW91bnREZWJ1Z1ZhbHVlLFxuICB1c2VEZWZlcnJlZFZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIGluaXRpYWxWYWx1ZSkge1xuICAgIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICByZXR1cm4gbW91bnREZWZlcnJlZFZhbHVlSW1wbChob29rLCB2YWx1ZSwgaW5pdGlhbFZhbHVlKTtcbiAgfSxcbiAgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdGF0ZUhvb2sgPSBtb3VudFN0YXRlSW1wbCghMSk7XG4gICAgc3RhdGVIb29rID0gc3RhcnRUcmFuc2l0aW9uLmJpbmQoXG4gICAgICBudWxsLFxuICAgICAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSxcbiAgICAgIHN0YXRlSG9vay5xdWV1ZSxcbiAgICAgICEwLFxuICAgICAgITFcbiAgICApO1xuICAgIG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCkubWVtb2l6ZWRTdGF0ZSA9IHN0YXRlSG9vaztcbiAgICByZXR1cm4gWyExLCBzdGF0ZUhvb2tdO1xuICB9LFxuICB1c2VTeW5jRXh0ZXJuYWxTdG9yZTogZnVuY3Rpb24gKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KSB7XG4gICAgdmFyIGZpYmVyID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSxcbiAgICAgIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICAgIGlmIChpc0h5ZHJhdGluZykge1xuICAgICAgaWYgKHZvaWQgMCA9PT0gZ2V0U2VydmVyU25hcHNob3QpXG4gICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDA3KSk7XG4gICAgICBnZXRTZXJ2ZXJTbmFwc2hvdCA9IGdldFNlcnZlclNuYXBzaG90KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdldFNlcnZlclNuYXBzaG90ID0gZ2V0U25hcHNob3QoKTtcbiAgICAgIGlmIChudWxsID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzQ5KSk7XG4gICAgICAwICE9PSAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA2MCkgfHxcbiAgICAgICAgcHVzaFN0b3JlQ29uc2lzdGVuY3lDaGVjayhmaWJlciwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KTtcbiAgICB9XG4gICAgaG9vay5tZW1vaXplZFN0YXRlID0gZ2V0U2VydmVyU25hcHNob3Q7XG4gICAgdmFyIGluc3QgPSB7IHZhbHVlOiBnZXRTZXJ2ZXJTbmFwc2hvdCwgZ2V0U25hcHNob3Q6IGdldFNuYXBzaG90IH07XG4gICAgaG9vay5xdWV1ZSA9IGluc3Q7XG4gICAgbW91bnRFZmZlY3Qoc3Vic2NyaWJlVG9TdG9yZS5iaW5kKG51bGwsIGZpYmVyLCBpbnN0LCBzdWJzY3JpYmUpLCBbXG4gICAgICBzdWJzY3JpYmVcbiAgICBdKTtcbiAgICBmaWJlci5mbGFncyB8PSAyMDQ4O1xuICAgIHB1c2hFZmZlY3QoXG4gICAgICA5LFxuICAgICAgdXBkYXRlU3RvcmVJbnN0YW5jZS5iaW5kKFxuICAgICAgICBudWxsLFxuICAgICAgICBmaWJlcixcbiAgICAgICAgaW5zdCxcbiAgICAgICAgZ2V0U2VydmVyU25hcHNob3QsXG4gICAgICAgIGdldFNuYXBzaG90XG4gICAgICApLFxuICAgICAgeyBkZXN0cm95OiB2b2lkIDAgfSxcbiAgICAgIG51bGxcbiAgICApO1xuICAgIHJldHVybiBnZXRTZXJ2ZXJTbmFwc2hvdDtcbiAgfSxcbiAgdXNlSWQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCksXG4gICAgICBpZGVudGlmaWVyUHJlZml4ID0gd29ya0luUHJvZ3Jlc3NSb290LmlkZW50aWZpZXJQcmVmaXg7XG4gICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gdHJlZUNvbnRleHRPdmVyZmxvdztcbiAgICAgIHZhciBpZFdpdGhMZWFkaW5nQml0ID0gdHJlZUNvbnRleHRJZDtcbiAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgIChcbiAgICAgICAgICBpZFdpdGhMZWFkaW5nQml0ICYgfigxIDw8ICgzMiAtIGNsejMyKGlkV2l0aExlYWRpbmdCaXQpIC0gMSkpXG4gICAgICAgICkudG9TdHJpbmcoMzIpICsgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICAgICAgaWRlbnRpZmllclByZWZpeCA9XG4gICAgICAgIFwiOlwiICsgaWRlbnRpZmllclByZWZpeCArIFwiUlwiICsgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0O1xuICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gbG9jYWxJZENvdW50ZXIrKztcbiAgICAgIDAgPCBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiZcbiAgICAgICAgKGlkZW50aWZpZXJQcmVmaXggKz0gXCJIXCIgKyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQudG9TdHJpbmcoMzIpKTtcbiAgICAgIGlkZW50aWZpZXJQcmVmaXggKz0gXCI6XCI7XG4gICAgfSBlbHNlXG4gICAgICAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gZ2xvYmFsQ2xpZW50SWRDb3VudGVyKyspLFxuICAgICAgICAoaWRlbnRpZmllclByZWZpeCA9XG4gICAgICAgICAgXCI6XCIgK1xuICAgICAgICAgIGlkZW50aWZpZXJQcmVmaXggK1xuICAgICAgICAgIFwiclwiICtcbiAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQudG9TdHJpbmcoMzIpICtcbiAgICAgICAgICBcIjpcIik7XG4gICAgcmV0dXJuIChob29rLm1lbW9pemVkU3RhdGUgPSBpZGVudGlmaWVyUHJlZml4KTtcbiAgfSxcbiAgdXNlQ2FjaGVSZWZyZXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIChtb3VudFdvcmtJblByb2dyZXNzSG9vaygpLm1lbW9pemVkU3RhdGUgPSByZWZyZXNoQ2FjaGUuYmluZChcbiAgICAgIG51bGwsXG4gICAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxXG4gICAgKSk7XG4gIH1cbn07XG5Ib29rc0Rpc3BhdGNoZXJPbk1vdW50LnVzZU1lbW9DYWNoZSA9IHVzZU1lbW9DYWNoZTtcbkhvb2tzRGlzcGF0Y2hlck9uTW91bnQudXNlSG9zdFRyYW5zaXRpb25TdGF0dXMgPSB1c2VIb3N0VHJhbnNpdGlvblN0YXR1cztcbkhvb2tzRGlzcGF0Y2hlck9uTW91bnQudXNlRm9ybVN0YXRlID0gbW91bnRBY3Rpb25TdGF0ZTtcbkhvb2tzRGlzcGF0Y2hlck9uTW91bnQudXNlQWN0aW9uU3RhdGUgPSBtb3VudEFjdGlvblN0YXRlO1xuSG9va3NEaXNwYXRjaGVyT25Nb3VudC51c2VPcHRpbWlzdGljID0gZnVuY3Rpb24gKHBhc3N0aHJvdWdoKSB7XG4gIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgaG9vay5tZW1vaXplZFN0YXRlID0gaG9vay5iYXNlU3RhdGUgPSBwYXNzdGhyb3VnaDtcbiAgdmFyIHF1ZXVlID0ge1xuICAgIHBlbmRpbmc6IG51bGwsXG4gICAgbGFuZXM6IDAsXG4gICAgZGlzcGF0Y2g6IG51bGwsXG4gICAgbGFzdFJlbmRlcmVkUmVkdWNlcjogbnVsbCxcbiAgICBsYXN0UmVuZGVyZWRTdGF0ZTogbnVsbFxuICB9O1xuICBob29rLnF1ZXVlID0gcXVldWU7XG4gIGhvb2sgPSBkaXNwYXRjaE9wdGltaXN0aWNTZXRTdGF0ZS5iaW5kKFxuICAgIG51bGwsXG4gICAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSxcbiAgICAhMCxcbiAgICBxdWV1ZVxuICApO1xuICBxdWV1ZS5kaXNwYXRjaCA9IGhvb2s7XG4gIHJldHVybiBbcGFzc3Rocm91Z2gsIGhvb2tdO1xufTtcbnZhciBIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZSA9IHtcbiAgcmVhZENvbnRleHQ6IHJlYWRDb250ZXh0LFxuICB1c2U6IHVzZSxcbiAgdXNlQ2FsbGJhY2s6IHVwZGF0ZUNhbGxiYWNrLFxuICB1c2VDb250ZXh0OiByZWFkQ29udGV4dCxcbiAgdXNlRWZmZWN0OiB1cGRhdGVFZmZlY3QsXG4gIHVzZUltcGVyYXRpdmVIYW5kbGU6IHVwZGF0ZUltcGVyYXRpdmVIYW5kbGUsXG4gIHVzZUluc2VydGlvbkVmZmVjdDogdXBkYXRlSW5zZXJ0aW9uRWZmZWN0LFxuICB1c2VMYXlvdXRFZmZlY3Q6IHVwZGF0ZUxheW91dEVmZmVjdCxcbiAgdXNlTWVtbzogdXBkYXRlTWVtbyxcbiAgdXNlUmVkdWNlcjogdXBkYXRlUmVkdWNlcixcbiAgdXNlUmVmOiB1cGRhdGVSZWYsXG4gIHVzZVN0YXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHVwZGF0ZVJlZHVjZXIoYmFzaWNTdGF0ZVJlZHVjZXIpO1xuICB9LFxuICB1c2VEZWJ1Z1ZhbHVlOiBtb3VudERlYnVnVmFsdWUsXG4gIHVzZURlZmVycmVkVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gICAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICByZXR1cm4gdXBkYXRlRGVmZXJyZWRWYWx1ZUltcGwoXG4gICAgICBob29rLFxuICAgICAgY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZSxcbiAgICAgIHZhbHVlLFxuICAgICAgaW5pdGlhbFZhbHVlXG4gICAgKTtcbiAgfSxcbiAgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBib29sZWFuT3JUaGVuYWJsZSA9IHVwZGF0ZVJlZHVjZXIoYmFzaWNTdGF0ZVJlZHVjZXIpWzBdLFxuICAgICAgc3RhcnQgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlO1xuICAgIHJldHVybiBbXG4gICAgICBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIGJvb2xlYW5PclRoZW5hYmxlXG4gICAgICAgID8gYm9vbGVhbk9yVGhlbmFibGVcbiAgICAgICAgOiB1c2VUaGVuYWJsZShib29sZWFuT3JUaGVuYWJsZSksXG4gICAgICBzdGFydFxuICAgIF07XG4gIH0sXG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiB1cGRhdGVTeW5jRXh0ZXJuYWxTdG9yZSxcbiAgdXNlSWQ6IHVwZGF0ZUlkXG59O1xuSG9va3NEaXNwYXRjaGVyT25VcGRhdGUudXNlQ2FjaGVSZWZyZXNoID0gdXBkYXRlUmVmcmVzaDtcbkhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlLnVzZU1lbW9DYWNoZSA9IHVzZU1lbW9DYWNoZTtcbkhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlLnVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzID0gdXNlSG9zdFRyYW5zaXRpb25TdGF0dXM7XG5Ib29rc0Rpc3BhdGNoZXJPblVwZGF0ZS51c2VGb3JtU3RhdGUgPSB1cGRhdGVBY3Rpb25TdGF0ZTtcbkhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlLnVzZUFjdGlvblN0YXRlID0gdXBkYXRlQWN0aW9uU3RhdGU7XG5Ib29rc0Rpc3BhdGNoZXJPblVwZGF0ZS51c2VPcHRpbWlzdGljID0gZnVuY3Rpb24gKHBhc3N0aHJvdWdoLCByZWR1Y2VyKSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHJldHVybiB1cGRhdGVPcHRpbWlzdGljSW1wbChob29rLCBjdXJyZW50SG9vaywgcGFzc3Rocm91Z2gsIHJlZHVjZXIpO1xufTtcbnZhciBIb29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyID0ge1xuICByZWFkQ29udGV4dDogcmVhZENvbnRleHQsXG4gIHVzZTogdXNlLFxuICB1c2VDYWxsYmFjazogdXBkYXRlQ2FsbGJhY2ssXG4gIHVzZUNvbnRleHQ6IHJlYWRDb250ZXh0LFxuICB1c2VFZmZlY3Q6IHVwZGF0ZUVmZmVjdCxcbiAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogdXBkYXRlSW1wZXJhdGl2ZUhhbmRsZSxcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0OiB1cGRhdGVJbnNlcnRpb25FZmZlY3QsXG4gIHVzZUxheW91dEVmZmVjdDogdXBkYXRlTGF5b3V0RWZmZWN0LFxuICB1c2VNZW1vOiB1cGRhdGVNZW1vLFxuICB1c2VSZWR1Y2VyOiByZXJlbmRlclJlZHVjZXIsXG4gIHVzZVJlZjogdXBkYXRlUmVmLFxuICB1c2VTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZXJlbmRlclJlZHVjZXIoYmFzaWNTdGF0ZVJlZHVjZXIpO1xuICB9LFxuICB1c2VEZWJ1Z1ZhbHVlOiBtb3VudERlYnVnVmFsdWUsXG4gIHVzZURlZmVycmVkVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgaW5pdGlhbFZhbHVlKSB7XG4gICAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgICByZXR1cm4gbnVsbCA9PT0gY3VycmVudEhvb2tcbiAgICAgID8gbW91bnREZWZlcnJlZFZhbHVlSW1wbChob29rLCB2YWx1ZSwgaW5pdGlhbFZhbHVlKVxuICAgICAgOiB1cGRhdGVEZWZlcnJlZFZhbHVlSW1wbChcbiAgICAgICAgICBob29rLFxuICAgICAgICAgIGN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGUsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgaW5pdGlhbFZhbHVlXG4gICAgICAgICk7XG4gIH0sXG4gIHVzZVRyYW5zaXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYm9vbGVhbk9yVGhlbmFibGUgPSByZXJlbmRlclJlZHVjZXIoYmFzaWNTdGF0ZVJlZHVjZXIpWzBdLFxuICAgICAgc3RhcnQgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKS5tZW1vaXplZFN0YXRlO1xuICAgIHJldHVybiBbXG4gICAgICBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIGJvb2xlYW5PclRoZW5hYmxlXG4gICAgICAgID8gYm9vbGVhbk9yVGhlbmFibGVcbiAgICAgICAgOiB1c2VUaGVuYWJsZShib29sZWFuT3JUaGVuYWJsZSksXG4gICAgICBzdGFydFxuICAgIF07XG4gIH0sXG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiB1cGRhdGVTeW5jRXh0ZXJuYWxTdG9yZSxcbiAgdXNlSWQ6IHVwZGF0ZUlkXG59O1xuSG9va3NEaXNwYXRjaGVyT25SZXJlbmRlci51c2VDYWNoZVJlZnJlc2ggPSB1cGRhdGVSZWZyZXNoO1xuSG9va3NEaXNwYXRjaGVyT25SZXJlbmRlci51c2VNZW1vQ2FjaGUgPSB1c2VNZW1vQ2FjaGU7XG5Ib29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyLnVzZUhvc3RUcmFuc2l0aW9uU3RhdHVzID0gdXNlSG9zdFRyYW5zaXRpb25TdGF0dXM7XG5Ib29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyLnVzZUZvcm1TdGF0ZSA9IHJlcmVuZGVyQWN0aW9uU3RhdGU7XG5Ib29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyLnVzZUFjdGlvblN0YXRlID0gcmVyZW5kZXJBY3Rpb25TdGF0ZTtcbkhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXIudXNlT3B0aW1pc3RpYyA9IGZ1bmN0aW9uIChwYXNzdGhyb3VnaCwgcmVkdWNlcikge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICBpZiAobnVsbCAhPT0gY3VycmVudEhvb2spXG4gICAgcmV0dXJuIHVwZGF0ZU9wdGltaXN0aWNJbXBsKGhvb2ssIGN1cnJlbnRIb29rLCBwYXNzdGhyb3VnaCwgcmVkdWNlcik7XG4gIGhvb2suYmFzZVN0YXRlID0gcGFzc3Rocm91Z2g7XG4gIHJldHVybiBbcGFzc3Rocm91Z2gsIGhvb2sucXVldWUuZGlzcGF0Y2hdO1xufTtcbmZ1bmN0aW9uIGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgY3RvcixcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLFxuICBuZXh0UHJvcHNcbikge1xuICBjdG9yID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgY3Rvcik7XG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9XG4gICAgbnVsbCA9PT0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIHx8IHZvaWQgMCA9PT0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXG4gICAgICA/IGN0b3JcbiAgICAgIDogYXNzaWduKHt9LCBjdG9yLCBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMpO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1xuICAwID09PSB3b3JrSW5Qcm9ncmVzcy5sYW5lcyAmJlxuICAgICh3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZS5iYXNlU3RhdGUgPSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMpO1xufVxudmFyIGNsYXNzQ29tcG9uZW50VXBkYXRlciA9IHtcbiAgaXNNb3VudGVkOiBmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgcmV0dXJuIChjb21wb25lbnQgPSBjb21wb25lbnQuX3JlYWN0SW50ZXJuYWxzKVxuICAgICAgPyBnZXROZWFyZXN0TW91bnRlZEZpYmVyKGNvbXBvbmVudCkgPT09IGNvbXBvbmVudFxuICAgICAgOiAhMTtcbiAgfSxcbiAgZW5xdWV1ZVNldFN0YXRlOiBmdW5jdGlvbiAoaW5zdCwgcGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgICBpbnN0ID0gaW5zdC5fcmVhY3RJbnRlcm5hbHM7XG4gICAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpLFxuICAgICAgdXBkYXRlID0gY3JlYXRlVXBkYXRlKGxhbmUpO1xuICAgIHVwZGF0ZS5wYXlsb2FkID0gcGF5bG9hZDtcbiAgICB2b2lkIDAgIT09IGNhbGxiYWNrICYmIG51bGwgIT09IGNhbGxiYWNrICYmICh1cGRhdGUuY2FsbGJhY2sgPSBjYWxsYmFjayk7XG4gICAgcGF5bG9hZCA9IGVucXVldWVVcGRhdGUoaW5zdCwgdXBkYXRlLCBsYW5lKTtcbiAgICBudWxsICE9PSBwYXlsb2FkICYmXG4gICAgICAoc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHBheWxvYWQsIGluc3QsIGxhbmUpLFxuICAgICAgZW50YW5nbGVUcmFuc2l0aW9ucyhwYXlsb2FkLCBpbnN0LCBsYW5lKSk7XG4gIH0sXG4gIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uIChpbnN0LCBwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgIGluc3QgPSBpbnN0Ll9yZWFjdEludGVybmFscztcbiAgICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCksXG4gICAgICB1cGRhdGUgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gICAgdXBkYXRlLnRhZyA9IDE7XG4gICAgdXBkYXRlLnBheWxvYWQgPSBwYXlsb2FkO1xuICAgIHZvaWQgMCAhPT0gY2FsbGJhY2sgJiYgbnVsbCAhPT0gY2FsbGJhY2sgJiYgKHVwZGF0ZS5jYWxsYmFjayA9IGNhbGxiYWNrKTtcbiAgICBwYXlsb2FkID0gZW5xdWV1ZVVwZGF0ZShpbnN0LCB1cGRhdGUsIGxhbmUpO1xuICAgIG51bGwgIT09IHBheWxvYWQgJiZcbiAgICAgIChzY2hlZHVsZVVwZGF0ZU9uRmliZXIocGF5bG9hZCwgaW5zdCwgbGFuZSksXG4gICAgICBlbnRhbmdsZVRyYW5zaXRpb25zKHBheWxvYWQsIGluc3QsIGxhbmUpKTtcbiAgfSxcbiAgZW5xdWV1ZUZvcmNlVXBkYXRlOiBmdW5jdGlvbiAoaW5zdCwgY2FsbGJhY2spIHtcbiAgICBpbnN0ID0gaW5zdC5fcmVhY3RJbnRlcm5hbHM7XG4gICAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZSgpLFxuICAgICAgdXBkYXRlID0gY3JlYXRlVXBkYXRlKGxhbmUpO1xuICAgIHVwZGF0ZS50YWcgPSAyO1xuICAgIHZvaWQgMCAhPT0gY2FsbGJhY2sgJiYgbnVsbCAhPT0gY2FsbGJhY2sgJiYgKHVwZGF0ZS5jYWxsYmFjayA9IGNhbGxiYWNrKTtcbiAgICBjYWxsYmFjayA9IGVucXVldWVVcGRhdGUoaW5zdCwgdXBkYXRlLCBsYW5lKTtcbiAgICBudWxsICE9PSBjYWxsYmFjayAmJlxuICAgICAgKHNjaGVkdWxlVXBkYXRlT25GaWJlcihjYWxsYmFjaywgaW5zdCwgbGFuZSksXG4gICAgICBlbnRhbmdsZVRyYW5zaXRpb25zKGNhbGxiYWNrLCBpbnN0LCBsYW5lKSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZShcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIGN0b3IsXG4gIG9sZFByb3BzLFxuICBuZXdQcm9wcyxcbiAgb2xkU3RhdGUsXG4gIG5ld1N0YXRlLFxuICBuZXh0Q29udGV4dFxuKSB7XG4gIHdvcmtJblByb2dyZXNzID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygd29ya0luUHJvZ3Jlc3Muc2hvdWxkQ29tcG9uZW50VXBkYXRlXG4gICAgPyB3b3JrSW5Qcm9ncmVzcy5zaG91bGRDb21wb25lbnRVcGRhdGUobmV3UHJvcHMsIG5ld1N0YXRlLCBuZXh0Q29udGV4dClcbiAgICA6IGN0b3IucHJvdG90eXBlICYmIGN0b3IucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50XG4gICAgICA/ICFzaGFsbG93RXF1YWwob2xkUHJvcHMsIG5ld1Byb3BzKSB8fCAhc2hhbGxvd0VxdWFsKG9sZFN0YXRlLCBuZXdTdGF0ZSlcbiAgICAgIDogITA7XG59XG5mdW5jdGlvbiBjYWxsQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIGluc3RhbmNlLFxuICBuZXdQcm9wcyxcbiAgbmV4dENvbnRleHRcbikge1xuICB3b3JrSW5Qcm9ncmVzcyA9IGluc3RhbmNlLnN0YXRlO1xuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICYmXG4gICAgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcywgbmV4dENvbnRleHQpO1xuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAmJlxuICAgIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzLCBuZXh0Q29udGV4dCk7XG4gIGluc3RhbmNlLnN0YXRlICE9PSB3b3JrSW5Qcm9ncmVzcyAmJlxuICAgIGNsYXNzQ29tcG9uZW50VXBkYXRlci5lbnF1ZXVlUmVwbGFjZVN0YXRlKGluc3RhbmNlLCBpbnN0YW5jZS5zdGF0ZSwgbnVsbCk7XG59XG5mdW5jdGlvbiByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhDb21wb25lbnQsIGJhc2VQcm9wcykge1xuICB2YXIgbmV3UHJvcHMgPSBiYXNlUHJvcHM7XG4gIGlmIChcInJlZlwiIGluIGJhc2VQcm9wcykge1xuICAgIG5ld1Byb3BzID0ge307XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gYmFzZVByb3BzKVxuICAgICAgXCJyZWZcIiAhPT0gcHJvcE5hbWUgJiYgKG5ld1Byb3BzW3Byb3BOYW1lXSA9IGJhc2VQcm9wc1twcm9wTmFtZV0pO1xuICB9XG4gIGlmICgoQ29tcG9uZW50ID0gQ29tcG9uZW50LmRlZmF1bHRQcm9wcykpIHtcbiAgICBuZXdQcm9wcyA9PT0gYmFzZVByb3BzICYmIChuZXdQcm9wcyA9IGFzc2lnbih7fSwgbmV3UHJvcHMpKTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSQ2NyBpbiBDb21wb25lbnQpXG4gICAgICB2b2lkIDAgPT09IG5ld1Byb3BzW3Byb3BOYW1lJDY3XSAmJlxuICAgICAgICAobmV3UHJvcHNbcHJvcE5hbWUkNjddID0gQ29tcG9uZW50W3Byb3BOYW1lJDY3XSk7XG4gIH1cbiAgcmV0dXJuIG5ld1Byb3BzO1xufVxudmFyIHJlcG9ydEdsb2JhbEVycm9yID1cbiAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVwb3J0RXJyb3JcbiAgICA/IHJlcG9ydEVycm9yXG4gICAgOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiB3aW5kb3cgJiZcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3aW5kb3cuRXJyb3JFdmVudFxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgZXZlbnQgPSBuZXcgd2luZG93LkVycm9yRXZlbnQoXCJlcnJvclwiLCB7XG4gICAgICAgICAgICBidWJibGVzOiAhMCxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6ICEwLFxuICAgICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGVycm9yICYmXG4gICAgICAgICAgICAgIG51bGwgIT09IGVycm9yICYmXG4gICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgPyBTdHJpbmcoZXJyb3IubWVzc2FnZSlcbiAgICAgICAgICAgICAgICA6IFN0cmluZyhlcnJvciksXG4gICAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoIXdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBwcm9jZXNzICYmXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcHJvY2Vzcy5lbWl0XG4gICAgICAgICkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdChcInVuY2F1Z2h0RXhjZXB0aW9uXCIsIGVycm9yKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICB9O1xuZnVuY3Rpb24gZGVmYXVsdE9uVW5jYXVnaHRFcnJvcihlcnJvcikge1xuICByZXBvcnRHbG9iYWxFcnJvcihlcnJvcik7XG59XG5mdW5jdGlvbiBkZWZhdWx0T25DYXVnaHRFcnJvcihlcnJvcikge1xuICBjb25zb2xlLmVycm9yKGVycm9yKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRPblJlY292ZXJhYmxlRXJyb3IoZXJyb3IpIHtcbiAgcmVwb3J0R2xvYmFsRXJyb3IoZXJyb3IpO1xufVxuZnVuY3Rpb24gbG9nVW5jYXVnaHRFcnJvcihyb290LCBlcnJvckluZm8pIHtcbiAgdHJ5IHtcbiAgICB2YXIgb25VbmNhdWdodEVycm9yID0gcm9vdC5vblVuY2F1Z2h0RXJyb3I7XG4gICAgb25VbmNhdWdodEVycm9yKGVycm9ySW5mby52YWx1ZSwgeyBjb21wb25lbnRTdGFjazogZXJyb3JJbmZvLnN0YWNrIH0pO1xuICB9IGNhdGNoIChlJDY4KSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBlJDY4O1xuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBsb2dDYXVnaHRFcnJvcihyb290LCBib3VuZGFyeSwgZXJyb3JJbmZvKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9uQ2F1Z2h0RXJyb3IgPSByb290Lm9uQ2F1Z2h0RXJyb3I7XG4gICAgb25DYXVnaHRFcnJvcihlcnJvckluZm8udmFsdWUsIHtcbiAgICAgIGNvbXBvbmVudFN0YWNrOiBlcnJvckluZm8uc3RhY2ssXG4gICAgICBlcnJvckJvdW5kYXJ5OiAxID09PSBib3VuZGFyeS50YWcgPyBib3VuZGFyeS5zdGF0ZU5vZGUgOiBudWxsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUkNjkpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IGUkNjk7XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVJvb3RFcnJvclVwZGF0ZShyb290LCBlcnJvckluZm8sIGxhbmUpIHtcbiAgbGFuZSA9IGNyZWF0ZVVwZGF0ZShsYW5lKTtcbiAgbGFuZS50YWcgPSAzO1xuICBsYW5lLnBheWxvYWQgPSB7IGVsZW1lbnQ6IG51bGwgfTtcbiAgbGFuZS5jYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICBsb2dVbmNhdWdodEVycm9yKHJvb3QsIGVycm9ySW5mbyk7XG4gIH07XG4gIHJldHVybiBsYW5lO1xufVxuZnVuY3Rpb24gY3JlYXRlQ2xhc3NFcnJvclVwZGF0ZShsYW5lKSB7XG4gIGxhbmUgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gIGxhbmUudGFnID0gMztcbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBpbml0aWFsaXplQ2xhc3NFcnJvclVwZGF0ZSh1cGRhdGUsIHJvb3QsIGZpYmVyLCBlcnJvckluZm8pIHtcbiAgdmFyIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvciA9IGZpYmVyLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKSB7XG4gICAgdmFyIGVycm9yID0gZXJyb3JJbmZvLnZhbHVlO1xuICAgIHVwZGF0ZS5wYXlsb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcik7XG4gICAgfTtcbiAgICB1cGRhdGUuY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBsb2dDYXVnaHRFcnJvcihyb290LCBmaWJlciwgZXJyb3JJbmZvKTtcbiAgICB9O1xuICB9XG4gIHZhciBpbnN0ID0gZmliZXIuc3RhdGVOb2RlO1xuICBudWxsICE9PSBpbnN0ICYmXG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5zdC5jb21wb25lbnREaWRDYXRjaCAmJlxuICAgICh1cGRhdGUuY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBsb2dDYXVnaHRFcnJvcihyb290LCBmaWJlciwgZXJyb3JJbmZvKTtcbiAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvciAmJlxuICAgICAgICAobnVsbCA9PT0gbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWRcbiAgICAgICAgICA/IChsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCA9IG5ldyBTZXQoW3RoaXNdKSlcbiAgICAgICAgICA6IGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkLmFkZCh0aGlzKSk7XG4gICAgICB2YXIgc3RhY2sgPSBlcnJvckluZm8uc3RhY2s7XG4gICAgICB0aGlzLmNvbXBvbmVudERpZENhdGNoKGVycm9ySW5mby52YWx1ZSwge1xuICAgICAgICBjb21wb25lbnRTdGFjazogbnVsbCAhPT0gc3RhY2sgPyBzdGFjayA6IFwiXCJcbiAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdGhyb3dFeGNlcHRpb24oXG4gIHJvb3QsXG4gIHJldHVybkZpYmVyLFxuICBzb3VyY2VGaWJlcixcbiAgdmFsdWUsXG4gIHJvb3RSZW5kZXJMYW5lc1xuKSB7XG4gIHNvdXJjZUZpYmVyLmZsYWdzIHw9IDMyNzY4O1xuICBpZiAoXG4gICAgbnVsbCAhPT0gdmFsdWUgJiZcbiAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgdmFsdWUgJiZcbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB2YWx1ZS50aGVuXG4gICkge1xuICAgIHJldHVybkZpYmVyID0gc291cmNlRmliZXIuYWx0ZXJuYXRlO1xuICAgIG51bGwgIT09IHJldHVybkZpYmVyICYmXG4gICAgICBwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIHNvdXJjZUZpYmVyLFxuICAgICAgICByb290UmVuZGVyTGFuZXMsXG4gICAgICAgICEwXG4gICAgICApO1xuICAgIHNvdXJjZUZpYmVyID0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudDtcbiAgICBpZiAobnVsbCAhPT0gc291cmNlRmliZXIpIHtcbiAgICAgIHN3aXRjaCAoc291cmNlRmliZXIudGFnKSB7XG4gICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIG51bGwgPT09IHNoZWxsQm91bmRhcnlcbiAgICAgICAgICAgICAgPyByZW5kZXJEaWRTdXNwZW5kRGVsYXlJZlBvc3NpYmxlKClcbiAgICAgICAgICAgICAgOiBudWxsID09PSBzb3VyY2VGaWJlci5hbHRlcm5hdGUgJiZcbiAgICAgICAgICAgICAgICAwID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzICYmXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAzKSxcbiAgICAgICAgICAgIChzb3VyY2VGaWJlci5mbGFncyAmPSAtMjU3KSxcbiAgICAgICAgICAgIChzb3VyY2VGaWJlci5mbGFncyB8PSA2NTUzNiksXG4gICAgICAgICAgICAoc291cmNlRmliZXIubGFuZXMgPSByb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgdmFsdWUgPT09IG5vb3BTdXNwZW5zZXlDb21taXRUaGVuYWJsZVxuICAgICAgICAgICAgICA/IChzb3VyY2VGaWJlci5mbGFncyB8PSAxNjM4NClcbiAgICAgICAgICAgICAgOiAoKHJldHVybkZpYmVyID0gc291cmNlRmliZXIudXBkYXRlUXVldWUpLFxuICAgICAgICAgICAgICAgIG51bGwgPT09IHJldHVybkZpYmVyXG4gICAgICAgICAgICAgICAgICA/IChzb3VyY2VGaWJlci51cGRhdGVRdWV1ZSA9IG5ldyBTZXQoW3ZhbHVlXSkpXG4gICAgICAgICAgICAgICAgICA6IHJldHVybkZpYmVyLmFkZCh2YWx1ZSksXG4gICAgICAgICAgICAgICAgYXR0YWNoUGluZ0xpc3RlbmVyKHJvb3QsIHZhbHVlLCByb290UmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgICExXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSAyMjpcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHNvdXJjZUZpYmVyLmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAgIHZhbHVlID09PSBub29wU3VzcGVuc2V5Q29tbWl0VGhlbmFibGVcbiAgICAgICAgICAgICAgPyAoc291cmNlRmliZXIuZmxhZ3MgfD0gMTYzODQpXG4gICAgICAgICAgICAgIDogKChyZXR1cm5GaWJlciA9IHNvdXJjZUZpYmVyLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgICAgICAgICBudWxsID09PSByZXR1cm5GaWJlclxuICAgICAgICAgICAgICAgICAgPyAoKHJldHVybkZpYmVyID0ge1xuICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25zOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgIG1hcmtlckluc3RhbmNlczogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICByZXRyeVF1ZXVlOiBuZXcgU2V0KFt2YWx1ZV0pXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAoc291cmNlRmliZXIudXBkYXRlUXVldWUgPSByZXR1cm5GaWJlcikpXG4gICAgICAgICAgICAgICAgICA6ICgoc291cmNlRmliZXIgPSByZXR1cm5GaWJlci5yZXRyeVF1ZXVlKSxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCA9PT0gc291cmNlRmliZXJcbiAgICAgICAgICAgICAgICAgICAgICA/IChyZXR1cm5GaWJlci5yZXRyeVF1ZXVlID0gbmV3IFNldChbdmFsdWVdKSlcbiAgICAgICAgICAgICAgICAgICAgICA6IHNvdXJjZUZpYmVyLmFkZCh2YWx1ZSkpLFxuICAgICAgICAgICAgICAgIGF0dGFjaFBpbmdMaXN0ZW5lcihyb290LCB2YWx1ZSwgcm9vdFJlbmRlckxhbmVzKSksXG4gICAgICAgICAgICAhMVxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQzNSwgc291cmNlRmliZXIudGFnKSk7XG4gICAgfVxuICAgIGF0dGFjaFBpbmdMaXN0ZW5lcihyb290LCB2YWx1ZSwgcm9vdFJlbmRlckxhbmVzKTtcbiAgICByZW5kZXJEaWRTdXNwZW5kRGVsYXlJZlBvc3NpYmxlKCk7XG4gICAgcmV0dXJuICExO1xuICB9XG4gIGlmIChpc0h5ZHJhdGluZylcbiAgICByZXR1cm4gKFxuICAgICAgKHJldHVybkZpYmVyID0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCksXG4gICAgICBudWxsICE9PSByZXR1cm5GaWJlclxuICAgICAgICA/ICgwID09PSAocmV0dXJuRmliZXIuZmxhZ3MgJiA2NTUzNikgJiYgKHJldHVybkZpYmVyLmZsYWdzIHw9IDI1NiksXG4gICAgICAgICAgKHJldHVybkZpYmVyLmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAocmV0dXJuRmliZXIubGFuZXMgPSByb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgIHZhbHVlICE9PSBIeWRyYXRpb25NaXNtYXRjaEV4Y2VwdGlvbiAmJlxuICAgICAgICAgICAgKChyb290ID0gRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MjIpLCB7IGNhdXNlOiB2YWx1ZSB9KSksXG4gICAgICAgICAgICBxdWV1ZUh5ZHJhdGlvbkVycm9yKGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHJvb3QsIHNvdXJjZUZpYmVyKSkpKVxuICAgICAgICA6ICh2YWx1ZSAhPT0gSHlkcmF0aW9uTWlzbWF0Y2hFeGNlcHRpb24gJiZcbiAgICAgICAgICAgICgocmV0dXJuRmliZXIgPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQyMyksIHtcbiAgICAgICAgICAgICAgY2F1c2U6IHZhbHVlXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICBxdWV1ZUh5ZHJhdGlvbkVycm9yKFxuICAgICAgICAgICAgICBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcihyZXR1cm5GaWJlciwgc291cmNlRmliZXIpXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAocm9vdCA9IHJvb3QuY3VycmVudC5hbHRlcm5hdGUpLFxuICAgICAgICAgIChyb290LmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAocm9vdFJlbmRlckxhbmVzICY9IC1yb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgIChyb290LmxhbmVzIHw9IHJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgKHZhbHVlID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIodmFsdWUsIHNvdXJjZUZpYmVyKSksXG4gICAgICAgICAgKHJvb3RSZW5kZXJMYW5lcyA9IGNyZWF0ZVJvb3RFcnJvclVwZGF0ZShcbiAgICAgICAgICAgIHJvb3Quc3RhdGVOb2RlLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICByb290UmVuZGVyTGFuZXNcbiAgICAgICAgICApKSxcbiAgICAgICAgICBlbnF1ZXVlQ2FwdHVyZWRVcGRhdGUocm9vdCwgcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICA0ICE9PSB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzICYmXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDIpKSxcbiAgICAgICExXG4gICAgKTtcbiAgdmFyIHdyYXBwZXJFcnJvciA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNTIwKSwgeyBjYXVzZTogdmFsdWUgfSk7XG4gIHdyYXBwZXJFcnJvciA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHdyYXBwZXJFcnJvciwgc291cmNlRmliZXIpO1xuICBudWxsID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzXG4gICAgPyAod29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9ycyA9IFt3cmFwcGVyRXJyb3JdKVxuICAgIDogd29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9ycy5wdXNoKHdyYXBwZXJFcnJvcik7XG4gIDQgIT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgJiYgKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAyKTtcbiAgaWYgKG51bGwgPT09IHJldHVybkZpYmVyKSByZXR1cm4gITA7XG4gIHZhbHVlID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIodmFsdWUsIHNvdXJjZUZpYmVyKTtcbiAgc291cmNlRmliZXIgPSByZXR1cm5GaWJlcjtcbiAgZG8ge1xuICAgIHN3aXRjaCAoc291cmNlRmliZXIudGFnKSB7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHNvdXJjZUZpYmVyLmZsYWdzIHw9IDY1NTM2KSxcbiAgICAgICAgICAocm9vdCA9IHJvb3RSZW5kZXJMYW5lcyAmIC1yb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgIChzb3VyY2VGaWJlci5sYW5lcyB8PSByb290KSxcbiAgICAgICAgICAocm9vdCA9IGNyZWF0ZVJvb3RFcnJvclVwZGF0ZShzb3VyY2VGaWJlci5zdGF0ZU5vZGUsIHZhbHVlLCByb290KSksXG4gICAgICAgICAgZW5xdWV1ZUNhcHR1cmVkVXBkYXRlKHNvdXJjZUZpYmVyLCByb290KSxcbiAgICAgICAgICAhMVxuICAgICAgICApO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpZiAoXG4gICAgICAgICAgKChyZXR1cm5GaWJlciA9IHNvdXJjZUZpYmVyLnR5cGUpLFxuICAgICAgICAgICh3cmFwcGVyRXJyb3IgPSBzb3VyY2VGaWJlci5zdGF0ZU5vZGUpLFxuICAgICAgICAgIDAgPT09IChzb3VyY2VGaWJlci5mbGFncyAmIDEyOCkgJiZcbiAgICAgICAgICAgIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXR1cm5GaWJlci5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgfHxcbiAgICAgICAgICAgICAgKG51bGwgIT09IHdyYXBwZXJFcnJvciAmJlxuICAgICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHdyYXBwZXJFcnJvci5jb21wb25lbnREaWRDYXRjaCAmJlxuICAgICAgICAgICAgICAgIChudWxsID09PSBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCB8fFxuICAgICAgICAgICAgICAgICAgIWxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkLmhhcyh3cmFwcGVyRXJyb3IpKSkpKVxuICAgICAgICApXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIChzb3VyY2VGaWJlci5mbGFncyB8PSA2NTUzNiksXG4gICAgICAgICAgICAocm9vdFJlbmRlckxhbmVzICY9IC1yb290UmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgKHNvdXJjZUZpYmVyLmxhbmVzIHw9IHJvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAocm9vdFJlbmRlckxhbmVzID0gY3JlYXRlQ2xhc3NFcnJvclVwZGF0ZShyb290UmVuZGVyTGFuZXMpKSxcbiAgICAgICAgICAgIGluaXRpYWxpemVDbGFzc0Vycm9yVXBkYXRlKFxuICAgICAgICAgICAgICByb290UmVuZGVyTGFuZXMsXG4gICAgICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgICAgIHNvdXJjZUZpYmVyLFxuICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGVucXVldWVDYXB0dXJlZFVwZGF0ZShzb3VyY2VGaWJlciwgcm9vdFJlbmRlckxhbmVzKSxcbiAgICAgICAgICAgICExXG4gICAgICAgICAgKTtcbiAgICB9XG4gICAgc291cmNlRmliZXIgPSBzb3VyY2VGaWJlci5yZXR1cm47XG4gIH0gd2hpbGUgKG51bGwgIT09IHNvdXJjZUZpYmVyKTtcbiAgcmV0dXJuICExO1xufVxudmFyIFNlbGVjdGl2ZUh5ZHJhdGlvbkV4Y2VwdGlvbiA9IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDYxKSksXG4gIGRpZFJlY2VpdmVVcGRhdGUgPSAhMTtcbmZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKSB7XG4gIHdvcmtJblByb2dyZXNzLmNoaWxkID1cbiAgICBudWxsID09PSBjdXJyZW50XG4gICAgICA/IG1vdW50Q2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIG51bGwsIG5leHRDaGlsZHJlbiwgcmVuZGVyTGFuZXMpXG4gICAgICA6IHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIGN1cnJlbnQuY2hpbGQsXG4gICAgICAgICAgbmV4dENoaWxkcmVuLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICk7XG59XG5mdW5jdGlvbiB1cGRhdGVGb3J3YXJkUmVmKFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBuZXh0UHJvcHMsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgQ29tcG9uZW50ID0gQ29tcG9uZW50LnJlbmRlcjtcbiAgdmFyIHJlZiA9IHdvcmtJblByb2dyZXNzLnJlZjtcbiAgaWYgKFwicmVmXCIgaW4gbmV4dFByb3BzKSB7XG4gICAgdmFyIHByb3BzV2l0aG91dFJlZiA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBuZXh0UHJvcHMpXG4gICAgICBcInJlZlwiICE9PSBrZXkgJiYgKHByb3BzV2l0aG91dFJlZltrZXldID0gbmV4dFByb3BzW2tleV0pO1xuICB9IGVsc2UgcHJvcHNXaXRob3V0UmVmID0gbmV4dFByb3BzO1xuICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gIG5leHRQcm9wcyA9IHJlbmRlcldpdGhIb29rcyhcbiAgICBjdXJyZW50LFxuICAgIHdvcmtJblByb2dyZXNzLFxuICAgIENvbXBvbmVudCxcbiAgICBwcm9wc1dpdGhvdXRSZWYsXG4gICAgcmVmLFxuICAgIHJlbmRlckxhbmVzXG4gICk7XG4gIGtleSA9IGNoZWNrRGlkUmVuZGVySWRIb29rKCk7XG4gIGlmIChudWxsICE9PSBjdXJyZW50ICYmICFkaWRSZWNlaXZlVXBkYXRlKVxuICAgIHJldHVybiAoXG4gICAgICBiYWlsb3V0SG9va3MoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSxcbiAgICAgIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKVxuICAgICk7XG4gIGlzSHlkcmF0aW5nICYmIGtleSAmJiBwdXNoTWF0ZXJpYWxpemVkVHJlZUlkKHdvcmtJblByb2dyZXNzKTtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTtcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcywgcmVuZGVyTGFuZXMpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5mdW5jdGlvbiB1cGRhdGVNZW1vQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgQ29tcG9uZW50LFxuICBuZXh0UHJvcHMsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICB2YXIgdHlwZSA9IENvbXBvbmVudC50eXBlO1xuICAgIGlmIChcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHR5cGUgJiZcbiAgICAgICFzaG91bGRDb25zdHJ1Y3QodHlwZSkgJiZcbiAgICAgIHZvaWQgMCA9PT0gdHlwZS5kZWZhdWx0UHJvcHMgJiZcbiAgICAgIG51bGwgPT09IENvbXBvbmVudC5jb21wYXJlXG4gICAgKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLnRhZyA9IDE1KSxcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLnR5cGUgPSB0eXBlKSxcbiAgICAgICAgdXBkYXRlU2ltcGxlTWVtb0NvbXBvbmVudChcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgY3VycmVudCA9IGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhcbiAgICAgIENvbXBvbmVudC50eXBlLFxuICAgICAgbnVsbCxcbiAgICAgIG5leHRQcm9wcyxcbiAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgd29ya0luUHJvZ3Jlc3MubW9kZSxcbiAgICAgIHJlbmRlckxhbmVzXG4gICAgKTtcbiAgICBjdXJyZW50LnJlZiA9IHdvcmtJblByb2dyZXNzLnJlZjtcbiAgICBjdXJyZW50LnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICAgIHJldHVybiAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50KTtcbiAgfVxuICB0eXBlID0gY3VycmVudC5jaGlsZDtcbiAgaWYgKCFjaGVja1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dChjdXJyZW50LCByZW5kZXJMYW5lcykpIHtcbiAgICB2YXIgcHJldlByb3BzID0gdHlwZS5tZW1vaXplZFByb3BzO1xuICAgIENvbXBvbmVudCA9IENvbXBvbmVudC5jb21wYXJlO1xuICAgIENvbXBvbmVudCA9IG51bGwgIT09IENvbXBvbmVudCA/IENvbXBvbmVudCA6IHNoYWxsb3dFcXVhbDtcbiAgICBpZiAoQ29tcG9uZW50KHByZXZQcm9wcywgbmV4dFByb3BzKSAmJiBjdXJyZW50LnJlZiA9PT0gd29ya0luUHJvZ3Jlc3MucmVmKVxuICAgICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgfVxuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxO1xuICBjdXJyZW50ID0gY3JlYXRlV29ya0luUHJvZ3Jlc3ModHlwZSwgbmV4dFByb3BzKTtcbiAgY3VycmVudC5yZWYgPSB3b3JrSW5Qcm9ncmVzcy5yZWY7XG4gIGN1cnJlbnQucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gIHJldHVybiAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVNpbXBsZU1lbW9Db21wb25lbnQoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICBDb21wb25lbnQsXG4gIG5leHRQcm9wcyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBpZiAobnVsbCAhPT0gY3VycmVudCkge1xuICAgIHZhciBwcmV2UHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHM7XG4gICAgaWYgKFxuICAgICAgc2hhbGxvd0VxdWFsKHByZXZQcm9wcywgbmV4dFByb3BzKSAmJlxuICAgICAgY3VycmVudC5yZWYgPT09IHdvcmtJblByb2dyZXNzLnJlZlxuICAgIClcbiAgICAgIGlmIChcbiAgICAgICAgKChkaWRSZWNlaXZlVXBkYXRlID0gITEpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzID0gbmV4dFByb3BzID0gcHJldlByb3BzKSxcbiAgICAgICAgY2hlY2tTY2hlZHVsZWRVcGRhdGVPckNvbnRleHQoY3VycmVudCwgcmVuZGVyTGFuZXMpKVxuICAgICAgKVxuICAgICAgICAwICE9PSAoY3VycmVudC5mbGFncyAmIDEzMTA3MikgJiYgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMCk7XG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gY3VycmVudC5sYW5lcyksXG4gICAgICAgICAgYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgICAgICk7XG4gIH1cbiAgcmV0dXJuIHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50KFxuICAgIGN1cnJlbnQsXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgQ29tcG9uZW50LFxuICAgIG5leHRQcm9wcyxcbiAgICByZW5kZXJMYW5lc1xuICApO1xufVxuZnVuY3Rpb24gdXBkYXRlT2Zmc2NyZWVuQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgIG5leHRDaGlsZHJlbiA9IG5leHRQcm9wcy5jaGlsZHJlbixcbiAgICBuZXh0SXNEZXRhY2hlZCA9IDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUuX3BlbmRpbmdWaXNpYmlsaXR5ICYgMiksXG4gICAgcHJldlN0YXRlID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSA6IG51bGw7XG4gIG1hcmtSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICBpZiAoXCJoaWRkZW5cIiA9PT0gbmV4dFByb3BzLm1vZGUgfHwgbmV4dElzRGV0YWNoZWQpIHtcbiAgICBpZiAoMCAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KSkge1xuICAgICAgbmV4dFByb3BzID1cbiAgICAgICAgbnVsbCAhPT0gcHJldlN0YXRlID8gcHJldlN0YXRlLmJhc2VMYW5lcyB8IHJlbmRlckxhbmVzIDogcmVuZGVyTGFuZXM7XG4gICAgICBpZiAobnVsbCAhPT0gY3VycmVudCkge1xuICAgICAgICBuZXh0Q2hpbGRyZW4gPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQuY2hpbGQ7XG4gICAgICAgIGZvciAobmV4dElzRGV0YWNoZWQgPSAwOyBudWxsICE9PSBuZXh0Q2hpbGRyZW47IClcbiAgICAgICAgICAobmV4dElzRGV0YWNoZWQgPVxuICAgICAgICAgICAgbmV4dElzRGV0YWNoZWQgfCBuZXh0Q2hpbGRyZW4ubGFuZXMgfCBuZXh0Q2hpbGRyZW4uY2hpbGRMYW5lcyksXG4gICAgICAgICAgICAobmV4dENoaWxkcmVuID0gbmV4dENoaWxkcmVuLnNpYmxpbmcpO1xuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzID0gbmV4dElzRGV0YWNoZWQgJiB+bmV4dFByb3BzO1xuICAgICAgfSBlbHNlICh3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzID0gMCksICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG51bGwpO1xuICAgICAgcmV0dXJuIGRlZmVySGlkZGVuT2Zmc2NyZWVuQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKDAgIT09IChyZW5kZXJMYW5lcyAmIDUzNjg3MDkxMikpXG4gICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IHsgYmFzZUxhbmVzOiAwLCBjYWNoZVBvb2w6IG51bGwgfSksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICBwdXNoVHJhbnNpdGlvbihcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgbnVsbCAhPT0gcHJldlN0YXRlID8gcHJldlN0YXRlLmNhY2hlUG9vbCA6IG51bGxcbiAgICAgICAgICApLFxuICAgICAgICBudWxsICE9PSBwcmV2U3RhdGVcbiAgICAgICAgICA/IHB1c2hIaWRkZW5Db250ZXh0KHdvcmtJblByb2dyZXNzLCBwcmV2U3RhdGUpXG4gICAgICAgICAgOiByZXVzZUhpZGRlbkNvbnRleHRPblN0YWNrKCksXG4gICAgICAgIHB1c2hPZmZzY3JlZW5TdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiAoXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMgPSA1MzY4NzA5MTIpLFxuICAgICAgICBkZWZlckhpZGRlbk9mZnNjcmVlbkNvbXBvbmVudChcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIG51bGwgIT09IHByZXZTdGF0ZSA/IHByZXZTdGF0ZS5iYXNlTGFuZXMgfCByZW5kZXJMYW5lcyA6IHJlbmRlckxhbmVzLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgIClcbiAgICAgICk7XG4gIH0gZWxzZVxuICAgIG51bGwgIT09IHByZXZTdGF0ZVxuICAgICAgPyAocHVzaFRyYW5zaXRpb24od29ya0luUHJvZ3Jlc3MsIHByZXZTdGF0ZS5jYWNoZVBvb2wpLFxuICAgICAgICBwdXNoSGlkZGVuQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgcHJldlN0YXRlKSxcbiAgICAgICAgcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsKSlcbiAgICAgIDogKG51bGwgIT09IGN1cnJlbnQgJiYgcHVzaFRyYW5zaXRpb24od29ya0luUHJvZ3Jlc3MsIG51bGwpLFxuICAgICAgICByZXVzZUhpZGRlbkNvbnRleHRPblN0YWNrKCksXG4gICAgICAgIHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayh3b3JrSW5Qcm9ncmVzcykpO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIGRlZmVySGlkZGVuT2Zmc2NyZWVuQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgbmV4dEJhc2VMYW5lcyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gcGVla0NhY2hlRnJvbVBvb2woKTtcbiAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICBudWxsID09PSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgID8gbnVsbFxuICAgICAgOiB7IHBhcmVudDogQ2FjaGVDb250ZXh0Ll9jdXJyZW50VmFsdWUsIHBvb2w6IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCB9O1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0ge1xuICAgIGJhc2VMYW5lczogbmV4dEJhc2VMYW5lcyxcbiAgICBjYWNoZVBvb2w6IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICB9O1xuICBudWxsICE9PSBjdXJyZW50ICYmIHB1c2hUcmFuc2l0aW9uKHdvcmtJblByb2dyZXNzLCBudWxsKTtcbiAgcmV1c2VIaWRkZW5Db250ZXh0T25TdGFjaygpO1xuICBwdXNoT2Zmc2NyZWVuU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgIHByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcywgITApO1xuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIG1hcmtSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpIHtcbiAgdmFyIHJlZiA9IHdvcmtJblByb2dyZXNzLnJlZjtcbiAgaWYgKG51bGwgPT09IHJlZilcbiAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICBudWxsICE9PSBjdXJyZW50LnJlZiAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDIwOTc2NjQpO1xuICBlbHNlIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgcmVmICYmIFwib2JqZWN0XCIgIT09IHR5cGVvZiByZWYpXG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI4NCkpO1xuICAgIGlmIChudWxsID09PSBjdXJyZW50IHx8IGN1cnJlbnQucmVmICE9PSByZWYpXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAyMDk3NjY0O1xuICB9XG59XG5mdW5jdGlvbiB1cGRhdGVGdW5jdGlvbkNvbXBvbmVudChcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgbmV4dFByb3BzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgQ29tcG9uZW50ID0gcmVuZGVyV2l0aEhvb2tzKFxuICAgIGN1cnJlbnQsXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgQ29tcG9uZW50LFxuICAgIG5leHRQcm9wcyxcbiAgICB2b2lkIDAsXG4gICAgcmVuZGVyTGFuZXNcbiAgKTtcbiAgbmV4dFByb3BzID0gY2hlY2tEaWRSZW5kZXJJZEhvb2soKTtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgIWRpZFJlY2VpdmVVcGRhdGUpXG4gICAgcmV0dXJuIChcbiAgICAgIGJhaWxvdXRIb29rcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpLFxuICAgICAgYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpXG4gICAgKTtcbiAgaXNIeWRyYXRpbmcgJiYgbmV4dFByb3BzICYmIHB1c2hNYXRlcmlhbGl6ZWRUcmVlSWQod29ya0luUHJvZ3Jlc3MpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cbmZ1bmN0aW9uIHJlcGxheUZ1bmN0aW9uQ29tcG9uZW50KFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgbmV4dFByb3BzLFxuICBDb21wb25lbnQsXG4gIHNlY29uZEFyZyxcbiAgcmVuZGVyTGFuZXNcbikge1xuICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gbnVsbDtcbiAgbmV4dFByb3BzID0gcmVuZGVyV2l0aEhvb2tzQWdhaW4oXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgQ29tcG9uZW50LFxuICAgIG5leHRQcm9wcyxcbiAgICBzZWNvbmRBcmdcbiAgKTtcbiAgZmluaXNoUmVuZGVyaW5nSG9va3MoY3VycmVudCk7XG4gIENvbXBvbmVudCA9IGNoZWNrRGlkUmVuZGVySWRIb29rKCk7XG4gIGlmIChudWxsICE9PSBjdXJyZW50ICYmICFkaWRSZWNlaXZlVXBkYXRlKVxuICAgIHJldHVybiAoXG4gICAgICBiYWlsb3V0SG9va3MoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSxcbiAgICAgIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKVxuICAgICk7XG4gIGlzSHlkcmF0aW5nICYmIENvbXBvbmVudCAmJiBwdXNoTWF0ZXJpYWxpemVkVHJlZUlkKHdvcmtJblByb2dyZXNzKTtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTtcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcywgcmVuZGVyTGFuZXMpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5mdW5jdGlvbiB1cGRhdGVDbGFzc0NvbXBvbmVudChcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIENvbXBvbmVudCxcbiAgbmV4dFByb3BzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gZW1wdHlDb250ZXh0T2JqZWN0LFxuICAgICAgY29udGV4dFR5cGUgPSBDb21wb25lbnQuY29udGV4dFR5cGU7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGNvbnRleHRUeXBlICYmXG4gICAgICBudWxsICE9PSBjb250ZXh0VHlwZSAmJlxuICAgICAgKGNvbnRleHQgPSByZWFkQ29udGV4dChjb250ZXh0VHlwZSkpO1xuICAgIGNvbnRleHQgPSBuZXcgQ29tcG9uZW50KG5leHRQcm9wcywgY29udGV4dCk7XG4gICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9XG4gICAgICBudWxsICE9PSBjb250ZXh0LnN0YXRlICYmIHZvaWQgMCAhPT0gY29udGV4dC5zdGF0ZSA/IGNvbnRleHQuc3RhdGUgOiBudWxsO1xuICAgIGNvbnRleHQudXBkYXRlciA9IGNsYXNzQ29tcG9uZW50VXBkYXRlcjtcbiAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBjb250ZXh0O1xuICAgIGNvbnRleHQuX3JlYWN0SW50ZXJuYWxzID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgY29udGV4dCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICBjb250ZXh0LnByb3BzID0gbmV4dFByb3BzO1xuICAgIGNvbnRleHQuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIGNvbnRleHQucmVmcyA9IHt9O1xuICAgIGluaXRpYWxpemVVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgY29udGV4dFR5cGUgPSBDb21wb25lbnQuY29udGV4dFR5cGU7XG4gICAgY29udGV4dC5jb250ZXh0ID1cbiAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBjb250ZXh0VHlwZSAmJiBudWxsICE9PSBjb250ZXh0VHlwZVxuICAgICAgICA/IHJlYWRDb250ZXh0KGNvbnRleHRUeXBlKVxuICAgICAgICA6IGVtcHR5Q29udGV4dE9iamVjdDtcbiAgICBjb250ZXh0LnN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICBjb250ZXh0VHlwZSA9IENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dFR5cGUgJiZcbiAgICAgIChhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyhcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgY29udGV4dFR5cGUsXG4gICAgICAgIG5leHRQcm9wc1xuICAgICAgKSxcbiAgICAgIChjb250ZXh0LnN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSkpO1xuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgfHxcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgfHxcbiAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsTW91bnQpIHx8XG4gICAgICAoKGNvbnRleHRUeXBlID0gY29udGV4dC5zdGF0ZSksXG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCAmJlxuICAgICAgICBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCgpLFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ICYmXG4gICAgICAgIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLFxuICAgICAgY29udGV4dFR5cGUgIT09IGNvbnRleHQuc3RhdGUgJiZcbiAgICAgICAgY2xhc3NDb21wb25lbnRVcGRhdGVyLmVucXVldWVSZXBsYWNlU3RhdGUoY29udGV4dCwgY29udGV4dC5zdGF0ZSwgbnVsbCksXG4gICAgICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcywgY29udGV4dCwgcmVuZGVyTGFuZXMpLFxuICAgICAgc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpLFxuICAgICAgKGNvbnRleHQuc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSk7XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnREaWRNb3VudCAmJlxuICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQxOTQzMDgpO1xuICAgIG5leHRQcm9wcyA9ICEwO1xuICB9IGVsc2UgaWYgKG51bGwgPT09IGN1cnJlbnQpIHtcbiAgICBjb250ZXh0ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgIHZhciB1bnJlc29sdmVkT2xkUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzLFxuICAgICAgb2xkUHJvcHMgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhDb21wb25lbnQsIHVucmVzb2x2ZWRPbGRQcm9wcyk7XG4gICAgY29udGV4dC5wcm9wcyA9IG9sZFByb3BzO1xuICAgIHZhciBvbGRDb250ZXh0ID0gY29udGV4dC5jb250ZXh0LFxuICAgICAgY29udGV4dFR5cGUkanNjb21wJDAgPSBDb21wb25lbnQuY29udGV4dFR5cGU7XG4gICAgY29udGV4dFR5cGUgPSBlbXB0eUNvbnRleHRPYmplY3Q7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGNvbnRleHRUeXBlJGpzY29tcCQwICYmXG4gICAgICBudWxsICE9PSBjb250ZXh0VHlwZSRqc2NvbXAkMCAmJlxuICAgICAgKGNvbnRleHRUeXBlID0gcmVhZENvbnRleHQoY29udGV4dFR5cGUkanNjb21wJDApKTtcbiAgICB2YXIgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcbiAgICBjb250ZXh0VHlwZSRqc2NvbXAkMCA9XG4gICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgfHxcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7XG4gICAgdW5yZXNvbHZlZE9sZFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzICE9PSB1bnJlc29sdmVkT2xkUHJvcHM7XG4gICAgY29udGV4dFR5cGUkanNjb21wJDAgfHxcbiAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICYmXG4gICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcykgfHxcbiAgICAgICgodW5yZXNvbHZlZE9sZFByb3BzIHx8IG9sZENvbnRleHQgIT09IGNvbnRleHRUeXBlKSAmJlxuICAgICAgICBjYWxsQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICBjb250ZXh0VHlwZVxuICAgICAgICApKTtcbiAgICBoYXNGb3JjZVVwZGF0ZSA9ICExO1xuICAgIHZhciBvbGRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgY29udGV4dC5zdGF0ZSA9IG9sZFN0YXRlO1xuICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCBjb250ZXh0LCByZW5kZXJMYW5lcyk7XG4gICAgc3VzcGVuZElmVXBkYXRlUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbigpO1xuICAgIG9sZENvbnRleHQgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIHVucmVzb2x2ZWRPbGRQcm9wcyB8fCBvbGRTdGF0ZSAhPT0gb2xkQ29udGV4dCB8fCBoYXNGb3JjZVVwZGF0ZVxuICAgICAgPyAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzICYmXG4gICAgICAgICAgKGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsXG4gICAgICAgICAgICBuZXh0UHJvcHNcbiAgICAgICAgICApLFxuICAgICAgICAgIChvbGRDb250ZXh0ID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSkpLFxuICAgICAgICAob2xkUHJvcHMgPVxuICAgICAgICAgIGhhc0ZvcmNlVXBkYXRlIHx8XG4gICAgICAgICAgY2hlY2tTaG91bGRDb21wb25lbnRVcGRhdGUoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICAgIG9sZFByb3BzLFxuICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgb2xkU3RhdGUsXG4gICAgICAgICAgICBvbGRDb250ZXh0LFxuICAgICAgICAgICAgY29udGV4dFR5cGVcbiAgICAgICAgICApKVxuICAgICAgICAgID8gKGNvbnRleHRUeXBlJGpzY29tcCQwIHx8XG4gICAgICAgICAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudFdpbGxNb3VudCkgfHxcbiAgICAgICAgICAgICAgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbE1vdW50ICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb21wb25lbnRXaWxsTW91bnQoKSxcbiAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFxuICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnREaWRNb3VudCAmJlxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDE5NDMwOCkpXG4gICAgICAgICAgOiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnREaWRNb3VudCAmJlxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDE5NDMwOCksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IG5leHRQcm9wcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG9sZENvbnRleHQpKSxcbiAgICAgICAgKGNvbnRleHQucHJvcHMgPSBuZXh0UHJvcHMpLFxuICAgICAgICAoY29udGV4dC5zdGF0ZSA9IG9sZENvbnRleHQpLFxuICAgICAgICAoY29udGV4dC5jb250ZXh0ID0gY29udGV4dFR5cGUpLFxuICAgICAgICAobmV4dFByb3BzID0gb2xkUHJvcHMpKVxuICAgICAgOiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnREaWRNb3VudCAmJlxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0MTk0MzA4KSxcbiAgICAgICAgKG5leHRQcm9wcyA9ICExKSk7XG4gIH0gZWxzZSB7XG4gICAgY29udGV4dCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICBjbG9uZVVwZGF0ZVF1ZXVlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICBjb250ZXh0VHlwZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG4gICAgY29udGV4dFR5cGUkanNjb21wJDAgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhDb21wb25lbnQsIGNvbnRleHRUeXBlKTtcbiAgICBjb250ZXh0LnByb3BzID0gY29udGV4dFR5cGUkanNjb21wJDA7XG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgIG9sZFN0YXRlID0gY29udGV4dC5jb250ZXh0O1xuICAgIG9sZENvbnRleHQgPSBDb21wb25lbnQuY29udGV4dFR5cGU7XG4gICAgb2xkUHJvcHMgPSBlbXB0eUNvbnRleHRPYmplY3Q7XG4gICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIG9sZENvbnRleHQgJiZcbiAgICAgIG51bGwgIT09IG9sZENvbnRleHQgJiZcbiAgICAgIChvbGRQcm9wcyA9IHJlYWRDb250ZXh0KG9sZENvbnRleHQpKTtcbiAgICB1bnJlc29sdmVkT2xkUHJvcHMgPSBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1xuICAgIChvbGRDb250ZXh0ID1cbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHVucmVzb2x2ZWRPbGRQcm9wcyB8fFxuICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSkgfHxcbiAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICYmXG4gICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcykgfHxcbiAgICAgICgoY29udGV4dFR5cGUgIT09IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyB8fCBvbGRTdGF0ZSAhPT0gb2xkUHJvcHMpICYmXG4gICAgICAgIGNhbGxDb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgIG9sZFByb3BzXG4gICAgICAgICkpO1xuICAgIGhhc0ZvcmNlVXBkYXRlID0gITE7XG4gICAgb2xkU3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIGNvbnRleHQuc3RhdGUgPSBvbGRTdGF0ZTtcbiAgICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcywgY29udGV4dCwgcmVuZGVyTGFuZXMpO1xuICAgIHN1c3BlbmRJZlVwZGF0ZVJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24oKTtcbiAgICB2YXIgbmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgIGNvbnRleHRUeXBlICE9PSBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgfHxcbiAgICBvbGRTdGF0ZSAhPT0gbmV3U3RhdGUgfHxcbiAgICBoYXNGb3JjZVVwZGF0ZSB8fFxuICAgIChudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICBudWxsICE9PSBjdXJyZW50LmRlcGVuZGVuY2llcyAmJlxuICAgICAgY2hlY2tJZkNvbnRleHRDaGFuZ2VkKGN1cnJlbnQuZGVwZW5kZW5jaWVzKSlcbiAgICAgID8gKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHVucmVzb2x2ZWRPbGRQcm9wcyAmJlxuICAgICAgICAgIChhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyhcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgdW5yZXNvbHZlZE9sZFByb3BzLFxuICAgICAgICAgICAgbmV4dFByb3BzXG4gICAgICAgICAgKSxcbiAgICAgICAgICAobmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlKSksXG4gICAgICAgIChjb250ZXh0VHlwZSRqc2NvbXAkMCA9XG4gICAgICAgICAgaGFzRm9yY2VVcGRhdGUgfHxcbiAgICAgICAgICBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZShcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgY29udGV4dFR5cGUkanNjb21wJDAsXG4gICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICBvbGRTdGF0ZSxcbiAgICAgICAgICAgIG5ld1N0YXRlLFxuICAgICAgICAgICAgb2xkUHJvcHNcbiAgICAgICAgICApIHx8XG4gICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQuZGVwZW5kZW5jaWVzICYmXG4gICAgICAgICAgICBjaGVja0lmQ29udGV4dENoYW5nZWQoY3VycmVudC5kZXBlbmRlbmNpZXMpKSlcbiAgICAgICAgICA/IChvbGRDb250ZXh0IHx8XG4gICAgICAgICAgICAgIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlICYmXG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsVXBkYXRlKSB8fFxuICAgICAgICAgICAgICAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5jb21wb25lbnRXaWxsVXBkYXRlICYmXG4gICAgICAgICAgICAgICAgY29udGV4dC5jb21wb25lbnRXaWxsVXBkYXRlKG5leHRQcm9wcywgbmV3U3RhdGUsIG9sZFByb3BzKSxcbiAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGV4dC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSAmJlxuICAgICAgICAgICAgICAgIGNvbnRleHQuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoXG4gICAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgICBuZXdTdGF0ZSxcbiAgICAgICAgICAgICAgICAgIG9sZFByb3BzXG4gICAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZFVwZGF0ZSAmJlxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNCksXG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjb250ZXh0LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICYmXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMDI0KSlcbiAgICAgICAgICA6IChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZFVwZGF0ZSB8fFxuICAgICAgICAgICAgICAoY29udGV4dFR5cGUgPT09IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAmJlxuICAgICAgICAgICAgICAgIG9sZFN0YXRlID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHx8XG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0KSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNvbnRleHQuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgfHxcbiAgICAgICAgICAgICAgKGNvbnRleHRUeXBlID09PSBjdXJyZW50Lm1lbW9pemVkUHJvcHMgJiZcbiAgICAgICAgICAgICAgICBvbGRTdGF0ZSA9PT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB8fFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTAyNCksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IG5leHRQcm9wcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG5ld1N0YXRlKSksXG4gICAgICAgIChjb250ZXh0LnByb3BzID0gbmV4dFByb3BzKSxcbiAgICAgICAgKGNvbnRleHQuc3RhdGUgPSBuZXdTdGF0ZSksXG4gICAgICAgIChjb250ZXh0LmNvbnRleHQgPSBvbGRQcm9wcyksXG4gICAgICAgIChuZXh0UHJvcHMgPSBjb250ZXh0VHlwZSRqc2NvbXAkMCkpXG4gICAgICA6IChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjb250ZXh0LmNvbXBvbmVudERpZFVwZGF0ZSB8fFxuICAgICAgICAgIChjb250ZXh0VHlwZSA9PT0gY3VycmVudC5tZW1vaXplZFByb3BzICYmXG4gICAgICAgICAgICBvbGRTdGF0ZSA9PT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB8fFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0KSxcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgY29udGV4dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSB8fFxuICAgICAgICAgIChjb250ZXh0VHlwZSA9PT0gY3VycmVudC5tZW1vaXplZFByb3BzICYmXG4gICAgICAgICAgICBvbGRTdGF0ZSA9PT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB8fFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMDI0KSxcbiAgICAgICAgKG5leHRQcm9wcyA9ICExKSk7XG4gIH1cbiAgY29udGV4dCA9IG5leHRQcm9wcztcbiAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gIG5leHRQcm9wcyA9IDAgIT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOCk7XG4gIGNvbnRleHQgfHwgbmV4dFByb3BzXG4gICAgPyAoKGNvbnRleHQgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUpLFxuICAgICAgKENvbXBvbmVudCA9XG4gICAgICAgIG5leHRQcm9wcyAmJiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yXG4gICAgICAgICAgPyBudWxsXG4gICAgICAgICAgOiBjb250ZXh0LnJlbmRlcigpKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxKSxcbiAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgbmV4dFByb3BzXG4gICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBjdXJyZW50LmNoaWxkLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKSksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICkpKVxuICAgICAgICA6IHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHJlbmRlckxhbmVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gY29udGV4dC5zdGF0ZSksXG4gICAgICAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSlcbiAgICA6IChjdXJyZW50ID0gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApKTtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG5mdW5jdGlvbiBtb3VudEhvc3RSb290V2l0aG91dEh5ZHJhdGluZyhcbiAgY3VycmVudCxcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIG5leHRDaGlsZHJlbixcbiAgcmVuZGVyTGFuZXNcbikge1xuICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDI1NjtcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyTGFuZXMpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG52YXIgU1VTUEVOREVEX01BUktFUiA9IHsgZGVoeWRyYXRlZDogbnVsbCwgdHJlZUNvbnRleHQ6IG51bGwsIHJldHJ5TGFuZTogMCB9O1xuZnVuY3Rpb24gbW91bnRTdXNwZW5zZU9mZnNjcmVlblN0YXRlKHJlbmRlckxhbmVzKSB7XG4gIHJldHVybiB7IGJhc2VMYW5lczogcmVuZGVyTGFuZXMsIGNhY2hlUG9vbDogZ2V0U3VzcGVuZGVkQ2FjaGUoKSB9O1xufVxuZnVuY3Rpb24gZ2V0UmVtYWluaW5nV29ya0luUHJpbWFyeVRyZWUoXG4gIGN1cnJlbnQsXG4gIHByaW1hcnlUcmVlRGlkRGVmZXIsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgY3VycmVudCA9IG51bGwgIT09IGN1cnJlbnQgPyBjdXJyZW50LmNoaWxkTGFuZXMgJiB+cmVuZGVyTGFuZXMgOiAwO1xuICBwcmltYXJ5VHJlZURpZERlZmVyICYmIChjdXJyZW50IHw9IHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lKTtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG5mdW5jdGlvbiB1cGRhdGVTdXNwZW5zZUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICBzaG93RmFsbGJhY2sgPSAhMSxcbiAgICBkaWRTdXNwZW5kID0gMCAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KSxcbiAgICBKU0NvbXBpbGVyX3RlbXA7XG4gIChKU0NvbXBpbGVyX3RlbXAgPSBkaWRTdXNwZW5kKSB8fFxuICAgIChKU0NvbXBpbGVyX3RlbXAgPVxuICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBudWxsID09PSBjdXJyZW50Lm1lbW9pemVkU3RhdGVcbiAgICAgICAgPyAhMVxuICAgICAgICA6IDAgIT09IChzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQgJiAyKSk7XG4gIEpTQ29tcGlsZXJfdGVtcCAmJiAoKHNob3dGYWxsYmFjayA9ICEwKSwgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xMjkpKTtcbiAgSlNDb21waWxlcl90ZW1wID0gMCAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMzIpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAtMzM7XG4gIGlmIChudWxsID09PSBjdXJyZW50KSB7XG4gICAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgICBzaG93RmFsbGJhY2tcbiAgICAgICAgPyBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpXG4gICAgICAgIDogcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGlmIChpc0h5ZHJhdGluZykge1xuICAgICAgICB2YXIgbmV4dEluc3RhbmNlID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSxcbiAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDA7XG4gICAgICAgIGlmICgoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gbmV4dEluc3RhbmNlKSkge1xuICAgICAgICAgIGM6IHtcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9IG5leHRJbnN0YW5jZTtcbiAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgIG5leHRJbnN0YW5jZSA9IHJvb3RPclNpbmdsZXRvbkNvbnRleHQ7XG4gICAgICAgICAgICAgIDggIT09IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5ub2RlVHlwZTtcblxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmICghbmV4dEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgbmV4dEluc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhayBjO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5uZXh0U2libGluZ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwKSB7XG4gICAgICAgICAgICAgICAgbmV4dEluc3RhbmNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhayBjO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0SW5zdGFuY2UgPSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIG51bGwgIT09IG5leHRJbnN0YW5jZVxuICAgICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgZGVoeWRyYXRlZDogbmV4dEluc3RhbmNlLFxuICAgICAgICAgICAgICAgIHRyZWVDb250ZXh0OlxuICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gdHJlZUNvbnRleHRQcm92aWRlclxuICAgICAgICAgICAgICAgICAgICA/IHsgaWQ6IHRyZWVDb250ZXh0SWQsIG92ZXJmbG93OiB0cmVlQ29udGV4dE92ZXJmbG93IH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsLFxuICAgICAgICAgICAgICAgIHJldHJ5TGFuZTogNTM2ODcwOTEyXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoXG4gICAgICAgICAgICAgICAgMTgsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAuc3RhdGVOb2RlID0gbmV4dEluc3RhbmNlKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCksXG4gICAgICAgICAgICAgIChoeWRyYXRpb25QYXJlbnRGaWJlciA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsKSxcbiAgICAgICAgICAgICAgKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9ICEwKSlcbiAgICAgICAgICAgIDogKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9ICExKTtcbiAgICAgICAgfVxuICAgICAgICBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgfHwgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIH1cbiAgICAgIG5leHRJbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgIT09IG5leHRJbnN0YW5jZSAmJlxuICAgICAgICAoKG5leHRJbnN0YW5jZSA9IG5leHRJbnN0YW5jZS5kZWh5ZHJhdGVkKSwgbnVsbCAhPT0gbmV4dEluc3RhbmNlKVxuICAgICAgKVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIFwiJCFcIiA9PT0gbmV4dEluc3RhbmNlLmRhdGFcbiAgICAgICAgICAgID8gKHdvcmtJblByb2dyZXNzLmxhbmVzID0gMTYpXG4gICAgICAgICAgICA6ICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IDUzNjg3MDkxMiksXG4gICAgICAgICAgbnVsbFxuICAgICAgICApO1xuICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICB9XG4gICAgbmV4dEluc3RhbmNlID0gbmV4dFByb3BzLmNoaWxkcmVuO1xuICAgIG5leHRQcm9wcyA9IG5leHRQcm9wcy5mYWxsYmFjaztcbiAgICBpZiAoc2hvd0ZhbGxiYWNrKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKHNob3dGYWxsYmFjayA9IHdvcmtJblByb2dyZXNzLm1vZGUpLFxuICAgICAgICAobmV4dEluc3RhbmNlID0gbW91bnRXb3JrSW5Qcm9ncmVzc09mZnNjcmVlbkZpYmVyKFxuICAgICAgICAgIHsgbW9kZTogXCJoaWRkZW5cIiwgY2hpbGRyZW46IG5leHRJbnN0YW5jZSB9LFxuICAgICAgICAgIHNob3dGYWxsYmFja1xuICAgICAgICApKSxcbiAgICAgICAgKG5leHRQcm9wcyA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICBzaG93RmFsbGJhY2ssXG4gICAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgICAgbnVsbFxuICAgICAgICApKSxcbiAgICAgICAgKG5leHRJbnN0YW5jZS5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChuZXh0UHJvcHMucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAobmV4dEluc3RhbmNlLnNpYmxpbmcgPSBuZXh0UHJvcHMpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBuZXh0SW5zdGFuY2UpLFxuICAgICAgICAoc2hvd0ZhbGxiYWNrID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpLFxuICAgICAgICAoc2hvd0ZhbGxiYWNrLm1lbW9pemVkU3RhdGUgPSBtb3VudFN1c3BlbnNlT2Zmc2NyZWVuU3RhdGUocmVuZGVyTGFuZXMpKSxcbiAgICAgICAgKHNob3dGYWxsYmFjay5jaGlsZExhbmVzID0gZ2V0UmVtYWluaW5nV29ya0luUHJpbWFyeVRyZWUoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSksXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gU1VTUEVOREVEX01BUktFUiksXG4gICAgICAgIG5leHRQcm9wc1xuICAgICAgKTtcbiAgICBwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgIHJldHVybiBtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuKHdvcmtJblByb2dyZXNzLCBuZXh0SW5zdGFuY2UpO1xuICB9XG4gIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgaWYgKFxuICAgIG51bGwgIT09IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCAmJlxuICAgICgobmV4dEluc3RhbmNlID0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLmRlaHlkcmF0ZWQpLFxuICAgIG51bGwgIT09IG5leHRJbnN0YW5jZSlcbiAgKSB7XG4gICAgaWYgKGRpZFN1c3BlbmQpXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDI1NlxuICAgICAgICA/IChwdXNoUHJpbWFyeVRyZWVTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmPSAtMjU3KSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhcbiAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKSkpXG4gICAgICAgIDogbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZVxuICAgICAgICAgID8gKHJldXNlU3VzcGVuc2VIYW5kbGVyT25TdGFjayh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50LmNoaWxkKSxcbiAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMjgpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gbnVsbCkpXG4gICAgICAgICAgOiAocmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIChzaG93RmFsbGJhY2sgPSBuZXh0UHJvcHMuZmFsbGJhY2spLFxuICAgICAgICAgICAgKG5leHRJbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLm1vZGUpLFxuICAgICAgICAgICAgKG5leHRQcm9wcyA9IG1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlcihcbiAgICAgICAgICAgICAgeyBtb2RlOiBcInZpc2libGVcIiwgY2hpbGRyZW46IG5leHRQcm9wcy5jaGlsZHJlbiB9LFxuICAgICAgICAgICAgICBuZXh0SW5zdGFuY2VcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKHNob3dGYWxsYmFjayA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICAgICAgICBzaG93RmFsbGJhY2ssXG4gICAgICAgICAgICAgIG5leHRJbnN0YW5jZSxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICkpLFxuICAgICAgICAgICAgKHNob3dGYWxsYmFjay5mbGFncyB8PSAyKSxcbiAgICAgICAgICAgIChuZXh0UHJvcHMucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgKHNob3dGYWxsYmFjay5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAobmV4dFByb3BzLnNpYmxpbmcgPSBzaG93RmFsbGJhY2spLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbmV4dFByb3BzKSxcbiAgICAgICAgICAgIHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgY3VycmVudC5jaGlsZCxcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICAobmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpLFxuICAgICAgICAgICAgKG5leHRQcm9wcy5tZW1vaXplZFN0YXRlID1cbiAgICAgICAgICAgICAgbW91bnRTdXNwZW5zZU9mZnNjcmVlblN0YXRlKHJlbmRlckxhbmVzKSksXG4gICAgICAgICAgICAobmV4dFByb3BzLmNoaWxkTGFuZXMgPSBnZXRSZW1haW5pbmdXb3JrSW5QcmltYXJ5VHJlZShcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IFNVU1BFTkRFRF9NQVJLRVIpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gc2hvd0ZhbGxiYWNrKSk7XG4gICAgZWxzZSBpZiAoXG4gICAgICAocHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKSxcbiAgICAgIFwiJCFcIiA9PT0gbmV4dEluc3RhbmNlLmRhdGEpXG4gICAgKSB7XG4gICAgICBKU0NvbXBpbGVyX3RlbXAgPVxuICAgICAgICBuZXh0SW5zdGFuY2UubmV4dFNpYmxpbmcgJiYgbmV4dEluc3RhbmNlLm5leHRTaWJsaW5nLmRhdGFzZXQ7XG4gICAgICBpZiAoSlNDb21waWxlcl90ZW1wKSB2YXIgZGlnZXN0ID0gSlNDb21waWxlcl90ZW1wLmRnc3Q7XG4gICAgICBKU0NvbXBpbGVyX3RlbXAgPSBkaWdlc3Q7XG4gICAgICBuZXh0UHJvcHMgPSBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQxOSkpO1xuICAgICAgbmV4dFByb3BzLnN0YWNrID0gXCJcIjtcbiAgICAgIG5leHRQcm9wcy5kaWdlc3QgPSBKU0NvbXBpbGVyX3RlbXA7XG4gICAgICBxdWV1ZUh5ZHJhdGlvbkVycm9yKHsgdmFsdWU6IG5leHRQcm9wcywgc291cmNlOiBudWxsLCBzdGFjazogbnVsbCB9KTtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gcmV0cnlTdXNwZW5zZUNvbXBvbmVudFdpdGhvdXRIeWRyYXRpbmcoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgKGRpZFJlY2VpdmVVcGRhdGUgfHxcbiAgICAgICAgcHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzLCAhMSksXG4gICAgICAoSlNDb21waWxlcl90ZW1wID0gMCAhPT0gKHJlbmRlckxhbmVzICYgY3VycmVudC5jaGlsZExhbmVzKSksXG4gICAgICBkaWRSZWNlaXZlVXBkYXRlIHx8IEpTQ29tcGlsZXJfdGVtcClcbiAgICApIHtcbiAgICAgIEpTQ29tcGlsZXJfdGVtcCA9IHdvcmtJblByb2dyZXNzUm9vdDtcbiAgICAgIGlmIChudWxsICE9PSBKU0NvbXBpbGVyX3RlbXApIHtcbiAgICAgICAgbmV4dFByb3BzID0gcmVuZGVyTGFuZXMgJiAtcmVuZGVyTGFuZXM7XG4gICAgICAgIGlmICgwICE9PSAobmV4dFByb3BzICYgNDIpKSBuZXh0UHJvcHMgPSAxO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgc3dpdGNoIChuZXh0UHJvcHMpIHtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgbmV4dFByb3BzID0gMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgIG5leHRQcm9wcyA9IDQ7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgbmV4dFByb3BzID0gMTY7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMjg6XG4gICAgICAgICAgICBjYXNlIDI1NjpcbiAgICAgICAgICAgIGNhc2UgNTEyOlxuICAgICAgICAgICAgY2FzZSAxMDI0OlxuICAgICAgICAgICAgY2FzZSAyMDQ4OlxuICAgICAgICAgICAgY2FzZSA0MDk2OlxuICAgICAgICAgICAgY2FzZSA4MTkyOlxuICAgICAgICAgICAgY2FzZSAxNjM4NDpcbiAgICAgICAgICAgIGNhc2UgMzI3Njg6XG4gICAgICAgICAgICBjYXNlIDY1NTM2OlxuICAgICAgICAgICAgY2FzZSAxMzEwNzI6XG4gICAgICAgICAgICBjYXNlIDI2MjE0NDpcbiAgICAgICAgICAgIGNhc2UgNTI0Mjg4OlxuICAgICAgICAgICAgY2FzZSAxMDQ4NTc2OlxuICAgICAgICAgICAgY2FzZSAyMDk3MTUyOlxuICAgICAgICAgICAgY2FzZSA0MTk0MzA0OlxuICAgICAgICAgICAgY2FzZSA4Mzg4NjA4OlxuICAgICAgICAgICAgY2FzZSAxNjc3NzIxNjpcbiAgICAgICAgICAgIGNhc2UgMzM1NTQ0MzI6XG4gICAgICAgICAgICAgIG5leHRQcm9wcyA9IDY0O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjY4NDM1NDU2OlxuICAgICAgICAgICAgICBuZXh0UHJvcHMgPSAxMzQyMTc3Mjg7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgbmV4dFByb3BzID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIG5leHRQcm9wcyA9XG4gICAgICAgICAgMCAhPT0gKG5leHRQcm9wcyAmIChKU0NvbXBpbGVyX3RlbXAuc3VzcGVuZGVkTGFuZXMgfCByZW5kZXJMYW5lcykpXG4gICAgICAgICAgICA/IDBcbiAgICAgICAgICAgIDogbmV4dFByb3BzO1xuICAgICAgICBpZiAoMCAhPT0gbmV4dFByb3BzICYmIG5leHRQcm9wcyAhPT0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnJldHJ5TGFuZSlcbiAgICAgICAgICB0aHJvdyAoXG4gICAgICAgICAgICAoKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5yZXRyeUxhbmUgPSBuZXh0UHJvcHMpLFxuICAgICAgICAgICAgZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGN1cnJlbnQsIG5leHRQcm9wcyksXG4gICAgICAgICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIoSlNDb21waWxlcl90ZW1wLCBjdXJyZW50LCBuZXh0UHJvcHMpLFxuICAgICAgICAgICAgU2VsZWN0aXZlSHlkcmF0aW9uRXhjZXB0aW9uKVxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgICBcIiQ/XCIgPT09IG5leHRJbnN0YW5jZS5kYXRhIHx8IHJlbmRlckRpZFN1c3BlbmREZWxheUlmUG9zc2libGUoKTtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gcmV0cnlTdXNwZW5zZUNvbXBvbmVudFdpdGhvdXRIeWRyYXRpbmcoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICB9IGVsc2VcbiAgICAgIFwiJD9cIiA9PT0gbmV4dEluc3RhbmNlLmRhdGFcbiAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEyOCksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZCksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gcmV0cnlEZWh5ZHJhdGVkU3VzcGVuc2VCb3VuZGFyeS5iaW5kKFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIGN1cnJlbnRcbiAgICAgICAgICApKSxcbiAgICAgICAgICAobmV4dEluc3RhbmNlLl9yZWFjdFJldHJ5ID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IG51bGwpKVxuICAgICAgICA6ICgoY3VycmVudCA9IEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC50cmVlQ29udGV4dCksXG4gICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgIG5leHRJbnN0YW5jZS5uZXh0U2libGluZ1xuICAgICAgICAgICkpLFxuICAgICAgICAgIChoeWRyYXRpb25QYXJlbnRGaWJlciA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAoaXNIeWRyYXRpbmcgPSAhMCksXG4gICAgICAgICAgKGh5ZHJhdGlvbkVycm9ycyA9IG51bGwpLFxuICAgICAgICAgIChyb290T3JTaW5nbGV0b25Db250ZXh0ID0gITEpLFxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAgICAgICAgICgoaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dElkKSxcbiAgICAgICAgICAgIChpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0T3ZlcmZsb3cpLFxuICAgICAgICAgICAgKGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRQcm92aWRlciksXG4gICAgICAgICAgICAodHJlZUNvbnRleHRJZCA9IGN1cnJlbnQuaWQpLFxuICAgICAgICAgICAgKHRyZWVDb250ZXh0T3ZlcmZsb3cgPSBjdXJyZW50Lm92ZXJmbG93KSxcbiAgICAgICAgICAgICh0cmVlQ29udGV4dFByb3ZpZGVyID0gd29ya0luUHJvZ3Jlc3MpKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MgPSBtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuKFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICBuZXh0UHJvcHMuY2hpbGRyZW5cbiAgICAgICAgICApKSxcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDA5NikpO1xuICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbiAgfVxuICBpZiAoc2hvd0ZhbGxiYWNrKVxuICAgIHJldHVybiAoXG4gICAgICByZXVzZVN1c3BlbnNlSGFuZGxlck9uU3RhY2sod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgKHNob3dGYWxsYmFjayA9IG5leHRQcm9wcy5mYWxsYmFjayksXG4gICAgICAobmV4dEluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3MubW9kZSksXG4gICAgICAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gY3VycmVudC5jaGlsZCksXG4gICAgICAoZGlnZXN0ID0gSlNDb21waWxlcl90ZW1wJGpzY29tcCQwLnNpYmxpbmcpLFxuICAgICAgKG5leHRQcm9wcyA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMCwge1xuICAgICAgICBtb2RlOiBcImhpZGRlblwiLFxuICAgICAgICBjaGlsZHJlbjogbmV4dFByb3BzLmNoaWxkcmVuXG4gICAgICB9KSksXG4gICAgICAobmV4dFByb3BzLnN1YnRyZWVGbGFncyA9XG4gICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5zdWJ0cmVlRmxhZ3MgJiAzMTQ1NzI4MCksXG4gICAgICBudWxsICE9PSBkaWdlc3RcbiAgICAgICAgPyAoc2hvd0ZhbGxiYWNrID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoZGlnZXN0LCBzaG93RmFsbGJhY2spKVxuICAgICAgICA6ICgoc2hvd0ZhbGxiYWNrID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgICAgICBzaG93RmFsbGJhY2ssXG4gICAgICAgICAgICBuZXh0SW5zdGFuY2UsXG4gICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgICApKSxcbiAgICAgICAgICAoc2hvd0ZhbGxiYWNrLmZsYWdzIHw9IDIpKSxcbiAgICAgIChzaG93RmFsbGJhY2sucmV0dXJuID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgKG5leHRQcm9wcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAobmV4dFByb3BzLnNpYmxpbmcgPSBzaG93RmFsbGJhY2spLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbmV4dFByb3BzKSxcbiAgICAgIChuZXh0UHJvcHMgPSBzaG93RmFsbGJhY2spLFxuICAgICAgKHNob3dGYWxsYmFjayA9IHdvcmtJblByb2dyZXNzLmNoaWxkKSxcbiAgICAgIChuZXh0SW5zdGFuY2UgPSBjdXJyZW50LmNoaWxkLm1lbW9pemVkU3RhdGUpLFxuICAgICAgbnVsbCA9PT0gbmV4dEluc3RhbmNlXG4gICAgICAgID8gKG5leHRJbnN0YW5jZSA9IG1vdW50U3VzcGVuc2VPZmZzY3JlZW5TdGF0ZShyZW5kZXJMYW5lcykpXG4gICAgICAgIDogKChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPSBuZXh0SW5zdGFuY2UuY2FjaGVQb29sKSxcbiAgICAgICAgICBudWxsICE9PSBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDBcbiAgICAgICAgICAgID8gKChkaWdlc3QgPSBDYWNoZUNvbnRleHQuX2N1cnJlbnRWYWx1ZSksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX3RlbXAkanNjb21wJDAgPVxuICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCRqc2NvbXAkMC5wYXJlbnQgIT09IGRpZ2VzdFxuICAgICAgICAgICAgICAgICAgPyB7IHBhcmVudDogZGlnZXN0LCBwb29sOiBkaWdlc3QgfVxuICAgICAgICAgICAgICAgICAgOiBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDApKVxuICAgICAgICAgICAgOiAoSlNDb21waWxlcl90ZW1wJGpzY29tcCQwID0gZ2V0U3VzcGVuZGVkQ2FjaGUoKSksXG4gICAgICAgICAgKG5leHRJbnN0YW5jZSA9IHtcbiAgICAgICAgICAgIGJhc2VMYW5lczogbmV4dEluc3RhbmNlLmJhc2VMYW5lcyB8IHJlbmRlckxhbmVzLFxuICAgICAgICAgICAgY2FjaGVQb29sOiBKU0NvbXBpbGVyX3RlbXAkanNjb21wJDBcbiAgICAgICAgICB9KSksXG4gICAgICAoc2hvd0ZhbGxiYWNrLm1lbW9pemVkU3RhdGUgPSBuZXh0SW5zdGFuY2UpLFxuICAgICAgKHNob3dGYWxsYmFjay5jaGlsZExhbmVzID0gZ2V0UmVtYWluaW5nV29ya0luUHJpbWFyeVRyZWUoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIEpTQ29tcGlsZXJfdGVtcCxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICkpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBTVVNQRU5ERURfTUFSS0VSKSxcbiAgICAgIG5leHRQcm9wc1xuICAgICk7XG4gIHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gIHJlbmRlckxhbmVzID0gY3VycmVudC5jaGlsZDtcbiAgY3VycmVudCA9IHJlbmRlckxhbmVzLnNpYmxpbmc7XG4gIHJlbmRlckxhbmVzID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MocmVuZGVyTGFuZXMsIHtcbiAgICBtb2RlOiBcInZpc2libGVcIixcbiAgICBjaGlsZHJlbjogbmV4dFByb3BzLmNoaWxkcmVuXG4gIH0pO1xuICByZW5kZXJMYW5lcy5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgcmVuZGVyTGFuZXMuc2libGluZyA9IG51bGw7XG4gIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICAoKEpTQ29tcGlsZXJfdGVtcCA9IHdvcmtJblByb2dyZXNzLmRlbGV0aW9ucyksXG4gICAgbnVsbCA9PT0gSlNDb21waWxlcl90ZW1wXG4gICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zID0gW2N1cnJlbnRdKSwgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDE2KSlcbiAgICAgIDogSlNDb21waWxlcl90ZW1wLnB1c2goY3VycmVudCkpO1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlbmRlckxhbmVzO1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgcmV0dXJuIHJlbmRlckxhbmVzO1xufVxuZnVuY3Rpb24gbW91bnRTdXNwZW5zZVByaW1hcnlDaGlsZHJlbih3b3JrSW5Qcm9ncmVzcywgcHJpbWFyeUNoaWxkcmVuKSB7XG4gIHByaW1hcnlDaGlsZHJlbiA9IG1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlcihcbiAgICB7IG1vZGU6IFwidmlzaWJsZVwiLCBjaGlsZHJlbjogcHJpbWFyeUNoaWxkcmVuIH0sXG4gICAgd29ya0luUHJvZ3Jlc3MubW9kZVxuICApO1xuICBwcmltYXJ5Q2hpbGRyZW4ucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gIHJldHVybiAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBwcmltYXJ5Q2hpbGRyZW4pO1xufVxuZnVuY3Rpb24gbW91bnRXb3JrSW5Qcm9ncmVzc09mZnNjcmVlbkZpYmVyKG9mZnNjcmVlblByb3BzLCBtb2RlKSB7XG4gIHJldHVybiBjcmVhdGVGaWJlckZyb21PZmZzY3JlZW4ob2Zmc2NyZWVuUHJvcHMsIG1vZGUsIDAsIG51bGwpO1xufVxuZnVuY3Rpb24gcmV0cnlTdXNwZW5zZUNvbXBvbmVudFdpdGhvdXRIeWRyYXRpbmcoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHJlY29uY2lsZUNoaWxkRmliZXJzKHdvcmtJblByb2dyZXNzLCBjdXJyZW50LmNoaWxkLCBudWxsLCByZW5kZXJMYW5lcyk7XG4gIGN1cnJlbnQgPSBtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuKFxuICAgIHdvcmtJblByb2dyZXNzLFxuICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlblxuICApO1xuICBjdXJyZW50LmZsYWdzIHw9IDI7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsO1xuICByZXR1cm4gY3VycmVudDtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlU3VzcGVuc2VXb3JrT25GaWJlcihmaWJlciwgcmVuZGVyTGFuZXMsIHByb3BhZ2F0aW9uUm9vdCkge1xuICBmaWJlci5sYW5lcyB8PSByZW5kZXJMYW5lcztcbiAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcbiAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmIChhbHRlcm5hdGUubGFuZXMgfD0gcmVuZGVyTGFuZXMpO1xuICBzY2hlZHVsZUNvbnRleHRXb3JrT25QYXJlbnRQYXRoKGZpYmVyLnJldHVybiwgcmVuZGVyTGFuZXMsIHByb3BhZ2F0aW9uUm9vdCk7XG59XG5mdW5jdGlvbiBpbml0U3VzcGVuc2VMaXN0UmVuZGVyU3RhdGUoXG4gIHdvcmtJblByb2dyZXNzLFxuICBpc0JhY2t3YXJkcyxcbiAgdGFpbCxcbiAgbGFzdENvbnRlbnRSb3csXG4gIHRhaWxNb2RlXG4pIHtcbiAgdmFyIHJlbmRlclN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgbnVsbCA9PT0gcmVuZGVyU3RhdGVcbiAgICA/ICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0ge1xuICAgICAgICBpc0JhY2t3YXJkczogaXNCYWNrd2FyZHMsXG4gICAgICAgIHJlbmRlcmluZzogbnVsbCxcbiAgICAgICAgcmVuZGVyaW5nU3RhcnRUaW1lOiAwLFxuICAgICAgICBsYXN0OiBsYXN0Q29udGVudFJvdyxcbiAgICAgICAgdGFpbDogdGFpbCxcbiAgICAgICAgdGFpbE1vZGU6IHRhaWxNb2RlXG4gICAgICB9KVxuICAgIDogKChyZW5kZXJTdGF0ZS5pc0JhY2t3YXJkcyA9IGlzQmFja3dhcmRzKSxcbiAgICAgIChyZW5kZXJTdGF0ZS5yZW5kZXJpbmcgPSBudWxsKSxcbiAgICAgIChyZW5kZXJTdGF0ZS5yZW5kZXJpbmdTdGFydFRpbWUgPSAwKSxcbiAgICAgIChyZW5kZXJTdGF0ZS5sYXN0ID0gbGFzdENvbnRlbnRSb3cpLFxuICAgICAgKHJlbmRlclN0YXRlLnRhaWwgPSB0YWlsKSxcbiAgICAgIChyZW5kZXJTdGF0ZS50YWlsTW9kZSA9IHRhaWxNb2RlKSk7XG59XG5mdW5jdGlvbiB1cGRhdGVTdXNwZW5zZUxpc3RDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSB7XG4gIHZhciBuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgcmV2ZWFsT3JkZXIgPSBuZXh0UHJvcHMucmV2ZWFsT3JkZXIsXG4gICAgdGFpbE1vZGUgPSBuZXh0UHJvcHMudGFpbDtcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcy5jaGlsZHJlbiwgcmVuZGVyTGFuZXMpO1xuICBuZXh0UHJvcHMgPSBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gIGlmICgwICE9PSAobmV4dFByb3BzICYgMikpXG4gICAgKG5leHRQcm9wcyA9IChuZXh0UHJvcHMgJiAxKSB8IDIpLCAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KTtcbiAgZWxzZSB7XG4gICAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgMCAhPT0gKGN1cnJlbnQuZmxhZ3MgJiAxMjgpKVxuICAgICAgYTogZm9yIChjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7IG51bGwgIT09IGN1cnJlbnQ7ICkge1xuICAgICAgICBpZiAoMTMgPT09IGN1cnJlbnQudGFnKVxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAgICAgc2NoZWR1bGVTdXNwZW5zZVdvcmtPbkZpYmVyKGN1cnJlbnQsIHJlbmRlckxhbmVzLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIGVsc2UgaWYgKDE5ID09PSBjdXJyZW50LnRhZylcbiAgICAgICAgICBzY2hlZHVsZVN1c3BlbnNlV29ya09uRmliZXIoY3VycmVudCwgcmVuZGVyTGFuZXMsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgZWxzZSBpZiAobnVsbCAhPT0gY3VycmVudC5jaGlsZCkge1xuICAgICAgICAgIGN1cnJlbnQuY2hpbGQucmV0dXJuID0gY3VycmVudDtcbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5jaGlsZDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudCA9PT0gd29ya0luUHJvZ3Jlc3MpIGJyZWFrIGE7XG4gICAgICAgIGZvciAoOyBudWxsID09PSBjdXJyZW50LnNpYmxpbmc7ICkge1xuICAgICAgICAgIGlmIChudWxsID09PSBjdXJyZW50LnJldHVybiB8fCBjdXJyZW50LnJldHVybiA9PT0gd29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50LnNpYmxpbmcucmV0dXJuID0gY3VycmVudC5yZXR1cm47XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnNpYmxpbmc7XG4gICAgICB9XG4gICAgbmV4dFByb3BzICY9IDE7XG4gIH1cbiAgcHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBuZXh0UHJvcHMpO1xuICBzd2l0Y2ggKHJldmVhbE9yZGVyKSB7XG4gICAgY2FzZSBcImZvcndhcmRzXCI6XG4gICAgICByZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgZm9yIChyZXZlYWxPcmRlciA9IG51bGw7IG51bGwgIT09IHJlbmRlckxhbmVzOyApXG4gICAgICAgIChjdXJyZW50ID0gcmVuZGVyTGFuZXMuYWx0ZXJuYXRlKSxcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgICAgICBudWxsID09PSBmaW5kRmlyc3RTdXNwZW5kZWQoY3VycmVudCkgJiZcbiAgICAgICAgICAgIChyZXZlYWxPcmRlciA9IHJlbmRlckxhbmVzKSxcbiAgICAgICAgICAocmVuZGVyTGFuZXMgPSByZW5kZXJMYW5lcy5zaWJsaW5nKTtcbiAgICAgIHJlbmRlckxhbmVzID0gcmV2ZWFsT3JkZXI7XG4gICAgICBudWxsID09PSByZW5kZXJMYW5lc1xuICAgICAgICA/ICgocmV2ZWFsT3JkZXIgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCksICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG51bGwpKVxuICAgICAgICA6ICgocmV2ZWFsT3JkZXIgPSByZW5kZXJMYW5lcy5zaWJsaW5nKSwgKHJlbmRlckxhbmVzLnNpYmxpbmcgPSBudWxsKSk7XG4gICAgICBpbml0U3VzcGVuc2VMaXN0UmVuZGVyU3RhdGUoXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAhMSxcbiAgICAgICAgcmV2ZWFsT3JkZXIsXG4gICAgICAgIHJlbmRlckxhbmVzLFxuICAgICAgICB0YWlsTW9kZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJiYWNrd2FyZHNcIjpcbiAgICAgIHJlbmRlckxhbmVzID0gbnVsbDtcbiAgICAgIHJldmVhbE9yZGVyID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICBmb3IgKHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbDsgbnVsbCAhPT0gcmV2ZWFsT3JkZXI7ICkge1xuICAgICAgICBjdXJyZW50ID0gcmV2ZWFsT3JkZXIuYWx0ZXJuYXRlO1xuICAgICAgICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiBudWxsID09PSBmaW5kRmlyc3RTdXNwZW5kZWQoY3VycmVudCkpIHtcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJldmVhbE9yZGVyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSByZXZlYWxPcmRlci5zaWJsaW5nO1xuICAgICAgICByZXZlYWxPcmRlci5zaWJsaW5nID0gcmVuZGVyTGFuZXM7XG4gICAgICAgIHJlbmRlckxhbmVzID0gcmV2ZWFsT3JkZXI7XG4gICAgICAgIHJldmVhbE9yZGVyID0gY3VycmVudDtcbiAgICAgIH1cbiAgICAgIGluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZShcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICEwLFxuICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgdGFpbE1vZGVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwidG9nZXRoZXJcIjpcbiAgICAgIGluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZSh3b3JrSW5Qcm9ncmVzcywgITEsIG51bGwsIG51bGwsIHZvaWQgMCk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuZnVuY3Rpb24gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgbnVsbCAhPT0gY3VycmVudCAmJiAod29ya0luUHJvZ3Jlc3MuZGVwZW5kZW5jaWVzID0gY3VycmVudC5kZXBlbmRlbmNpZXMpO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgfD0gd29ya0luUHJvZ3Jlc3MubGFuZXM7XG4gIGlmICgwID09PSAocmVuZGVyTGFuZXMgJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzKSlcbiAgICBpZiAobnVsbCAhPT0gY3VycmVudCkge1xuICAgICAgaWYgKFxuICAgICAgICAocHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAhMVxuICAgICAgICApLFxuICAgICAgICAwID09PSAocmVuZGVyTGFuZXMgJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzKSlcbiAgICAgIClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHJldHVybiBudWxsO1xuICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZCAhPT0gY3VycmVudC5jaGlsZClcbiAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1MykpO1xuICBpZiAobnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpIHtcbiAgICBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgcmVuZGVyTGFuZXMgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhjdXJyZW50LCBjdXJyZW50LnBlbmRpbmdQcm9wcyk7XG4gICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZW5kZXJMYW5lcztcbiAgICBmb3IgKHJlbmRlckxhbmVzLnJldHVybiA9IHdvcmtJblByb2dyZXNzOyBudWxsICE9PSBjdXJyZW50LnNpYmxpbmc7IClcbiAgICAgIChjdXJyZW50ID0gY3VycmVudC5zaWJsaW5nKSxcbiAgICAgICAgKHJlbmRlckxhbmVzID0gcmVuZGVyTGFuZXMuc2libGluZyA9XG4gICAgICAgICAgY3JlYXRlV29ya0luUHJvZ3Jlc3MoY3VycmVudCwgY3VycmVudC5wZW5kaW5nUHJvcHMpKSxcbiAgICAgICAgKHJlbmRlckxhbmVzLnJldHVybiA9IHdvcmtJblByb2dyZXNzKTtcbiAgICByZW5kZXJMYW5lcy5zaWJsaW5nID0gbnVsbDtcbiAgfVxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5mdW5jdGlvbiBjaGVja1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dChjdXJyZW50LCByZW5kZXJMYW5lcykge1xuICBpZiAoMCAhPT0gKGN1cnJlbnQubGFuZXMgJiByZW5kZXJMYW5lcykpIHJldHVybiAhMDtcbiAgY3VycmVudCA9IGN1cnJlbnQuZGVwZW5kZW5jaWVzO1xuICByZXR1cm4gbnVsbCAhPT0gY3VycmVudCAmJiBjaGVja0lmQ29udGV4dENoYW5nZWQoY3VycmVudCkgPyAhMCA6ICExO1xufVxuZnVuY3Rpb24gYXR0ZW1wdEVhcmx5QmFpbG91dElmTm9TY2hlZHVsZWRVcGRhdGUoXG4gIGN1cnJlbnQsXG4gIHdvcmtJblByb2dyZXNzLFxuICByZW5kZXJMYW5lc1xuKSB7XG4gIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgY2FzZSAzOlxuICAgICAgcHVzaEhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtcbiAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgQ2FjaGVDb250ZXh0LCBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGUpO1xuICAgICAgcmVzZXRIeWRyYXRpb25TdGF0ZSgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNzpcbiAgICBjYXNlIDU6XG4gICAgICBwdXNoSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgcHVzaEhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTA6XG4gICAgICBwdXNoUHJvdmlkZXIoXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzLnZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIHZhciBzdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAobnVsbCAhPT0gc3RhdGUpIHtcbiAgICAgICAgaWYgKG51bGwgIT09IHN0YXRlLmRlaHlkcmF0ZWQpXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAgIG51bGxcbiAgICAgICAgICApO1xuICAgICAgICBpZiAoMCAhPT0gKHJlbmRlckxhbmVzICYgd29ya0luUHJvZ3Jlc3MuY2hpbGQuY2hpbGRMYW5lcykpXG4gICAgICAgICAgcmV0dXJuIHVwZGF0ZVN1c3BlbnNlQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG4gICAgICAgIHB1c2hQcmltYXJ5VHJlZVN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIGN1cnJlbnQgPSBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIG51bGwgIT09IGN1cnJlbnQgPyBjdXJyZW50LnNpYmxpbmcgOiBudWxsO1xuICAgICAgfVxuICAgICAgcHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTk6XG4gICAgICB2YXIgZGlkU3VzcGVuZEJlZm9yZSA9IDAgIT09IChjdXJyZW50LmZsYWdzICYgMTI4KTtcbiAgICAgIHN0YXRlID0gMCAhPT0gKHJlbmRlckxhbmVzICYgd29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyk7XG4gICAgICBzdGF0ZSB8fFxuICAgICAgICAocHJvcGFnYXRlUGFyZW50Q29udGV4dENoYW5nZXMoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAhMVxuICAgICAgICApLFxuICAgICAgICAoc3RhdGUgPSAwICE9PSAocmVuZGVyTGFuZXMgJiB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzKSkpO1xuICAgICAgaWYgKGRpZFN1c3BlbmRCZWZvcmUpIHtcbiAgICAgICAgaWYgKHN0YXRlKVxuICAgICAgICAgIHJldHVybiB1cGRhdGVTdXNwZW5zZUxpc3RDb21wb25lbnQoXG4gICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICk7XG4gICAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEyODtcbiAgICAgIH1cbiAgICAgIGRpZFN1c3BlbmRCZWZvcmUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgbnVsbCAhPT0gZGlkU3VzcGVuZEJlZm9yZSAmJlxuICAgICAgICAoKGRpZFN1c3BlbmRCZWZvcmUucmVuZGVyaW5nID0gbnVsbCksXG4gICAgICAgIChkaWRTdXNwZW5kQmVmb3JlLnRhaWwgPSBudWxsKSxcbiAgICAgICAgKGRpZFN1c3BlbmRCZWZvcmUubGFzdEVmZmVjdCA9IG51bGwpKTtcbiAgICAgIHB1c2goc3VzcGVuc2VTdGFja0N1cnNvciwgc3VzcGVuc2VTdGFja0N1cnNvci5jdXJyZW50KTtcbiAgICAgIGlmIChzdGF0ZSkgYnJlYWs7XG4gICAgICBlbHNlIHJldHVybiBudWxsO1xuICAgIGNhc2UgMjI6XG4gICAgY2FzZSAyMzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IDApLFxuICAgICAgICB1cGRhdGVPZmZzY3JlZW5Db21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKVxuICAgICAgKTtcbiAgICBjYXNlIDI0OlxuICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDYWNoZUNvbnRleHQsIGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gIH1cbiAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbn1cbmZ1bmN0aW9uIGJlZ2luV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgaWYgKG51bGwgIT09IGN1cnJlbnQpXG4gICAgaWYgKGN1cnJlbnQubWVtb2l6ZWRQcm9wcyAhPT0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzKVxuICAgICAgZGlkUmVjZWl2ZVVwZGF0ZSA9ICEwO1xuICAgIGVsc2Uge1xuICAgICAgaWYgKFxuICAgICAgICAhY2hlY2tTY2hlZHVsZWRVcGRhdGVPckNvbnRleHQoY3VycmVudCwgcmVuZGVyTGFuZXMpICYmXG4gICAgICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDEyOClcbiAgICAgIClcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAoZGlkUmVjZWl2ZVVwZGF0ZSA9ICExKSxcbiAgICAgICAgICBhdHRlbXB0RWFybHlCYWlsb3V0SWZOb1NjaGVkdWxlZFVwZGF0ZShcbiAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgZGlkUmVjZWl2ZVVwZGF0ZSA9IDAgIT09IChjdXJyZW50LmZsYWdzICYgMTMxMDcyKSA/ICEwIDogITE7XG4gICAgfVxuICBlbHNlXG4gICAgKGRpZFJlY2VpdmVVcGRhdGUgPSAhMSksXG4gICAgICBpc0h5ZHJhdGluZyAmJlxuICAgICAgICAwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMDQ4NTc2KSAmJlxuICAgICAgICBwdXNoVHJlZUlkKHdvcmtJblByb2dyZXNzLCB0cmVlRm9ya0NvdW50LCB3b3JrSW5Qcm9ncmVzcy5pbmRleCk7XG4gIHdvcmtJblByb2dyZXNzLmxhbmVzID0gMDtcbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIDE2OlxuICAgICAgYToge1xuICAgICAgICBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgICB2YXIgbGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlLFxuICAgICAgICAgIGluaXQgPSBsYXp5Q29tcG9uZW50Ll9pbml0O1xuICAgICAgICBsYXp5Q29tcG9uZW50ID0gaW5pdChsYXp5Q29tcG9uZW50Ll9wYXlsb2FkKTtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSA9IGxhenlDb21wb25lbnQ7XG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBsYXp5Q29tcG9uZW50KVxuICAgICAgICAgIHNob3VsZENvbnN0cnVjdChsYXp5Q29tcG9uZW50KVxuICAgICAgICAgICAgPyAoKGN1cnJlbnQgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhsYXp5Q29tcG9uZW50LCBjdXJyZW50KSksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy50YWcgPSAxKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzID0gdXBkYXRlQ2xhc3NDb21wb25lbnQoXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgKSkpXG4gICAgICAgICAgICA6ICgod29ya0luUHJvZ3Jlc3MudGFnID0gMCksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50KFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICkpKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKHZvaWQgMCAhPT0gbGF6eUNvbXBvbmVudCAmJiBudWxsICE9PSBsYXp5Q29tcG9uZW50KVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAoKGluaXQgPSBsYXp5Q29tcG9uZW50LiQkdHlwZW9mKSwgaW5pdCA9PT0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50YWcgPSAxMTtcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSB1cGRhdGVGb3J3YXJkUmVmKFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGluaXQgPT09IFJFQUNUX01FTU9fVFlQRSkge1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50YWcgPSAxNDtcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSB1cGRhdGVNZW1vQ29tcG9uZW50KFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPVxuICAgICAgICAgICAgZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKGxhenlDb21wb25lbnQpIHx8IGxhenlDb21wb25lbnQ7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMDYsIHdvcmtJblByb2dyZXNzLCBcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gdXBkYXRlRnVuY3Rpb25Db21wb25lbnQoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChsYXp5Q29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MudHlwZSksXG4gICAgICAgIChpbml0ID0gcmVzb2x2ZUNsYXNzQ29tcG9uZW50UHJvcHMoXG4gICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHNcbiAgICAgICAgKSksXG4gICAgICAgIHVwZGF0ZUNsYXNzQ29tcG9uZW50KFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICBpbml0LFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgY2FzZSAzOlxuICAgICAgYToge1xuICAgICAgICBwdXNoSG9zdENvbnRhaW5lcihcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUuY29udGFpbmVySW5mb1xuICAgICAgICApO1xuICAgICAgICBpZiAobnVsbCA9PT0gY3VycmVudCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzODcpKTtcbiAgICAgICAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgICAgICAgaW5pdCA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICAgIGxhenlDb21wb25lbnQgPSBpbml0LmVsZW1lbnQ7XG4gICAgICAgIGNsb25lVXBkYXRlUXVldWUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIG5leHRQcm9wcywgbnVsbCwgcmVuZGVyTGFuZXMpO1xuICAgICAgICB2YXIgbmV4dFN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgbmV4dFByb3BzID0gbmV4dFN0YXRlLmNhY2hlO1xuICAgICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENhY2hlQ29udGV4dCwgbmV4dFByb3BzKTtcbiAgICAgICAgbmV4dFByb3BzICE9PSBpbml0LmNhY2hlICYmXG4gICAgICAgICAgcHJvcGFnYXRlQ29udGV4dENoYW5nZXMoXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgIFtDYWNoZUNvbnRleHRdLFxuICAgICAgICAgICAgcmVuZGVyTGFuZXMsXG4gICAgICAgICAgICAhMFxuICAgICAgICAgICk7XG4gICAgICAgIHN1c3BlbmRJZlVwZGF0ZVJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24oKTtcbiAgICAgICAgbmV4dFByb3BzID0gbmV4dFN0YXRlLmVsZW1lbnQ7XG4gICAgICAgIGlmIChpbml0LmlzRGVoeWRyYXRlZClcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoKGluaXQgPSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQ6IG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgaXNEZWh5ZHJhdGVkOiAhMSxcbiAgICAgICAgICAgICAgY2FjaGU6IG5leHRTdGF0ZS5jYWNoZVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUuYmFzZVN0YXRlID0gaW5pdCksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGluaXQpLFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAyNTYpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IG1vdW50SG9zdFJvb3RXaXRob3V0SHlkcmF0aW5nKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfSBlbHNlIGlmIChuZXh0UHJvcHMgIT09IGxhenlDb21wb25lbnQpIHtcbiAgICAgICAgICAgIGxhenlDb21wb25lbnQgPSBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcihcbiAgICAgICAgICAgICAgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0MjQpKSxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBxdWV1ZUh5ZHJhdGlvbkVycm9yKGxhenlDb21wb25lbnQpO1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSBtb3VudEhvc3RSb290V2l0aG91dEh5ZHJhdGluZyhcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGRcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25QYXJlbnRGaWJlciA9IHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICAgIGlzSHlkcmF0aW5nID0gITAsXG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uRXJyb3JzID0gbnVsbCxcbiAgICAgICAgICAgICAgICByb290T3JTaW5nbGV0b25Db250ZXh0ID0gITAsXG4gICAgICAgICAgICAgICAgcmVuZGVyTGFuZXMgPSBtb3VudENoaWxkRmliZXJzKFxuICAgICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gcmVuZGVyTGFuZXM7XG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzO1xuXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgIChyZW5kZXJMYW5lcy5mbGFncyA9IChyZW5kZXJMYW5lcy5mbGFncyAmIC0zKSB8IDQwOTYpLFxuICAgICAgICAgICAgICAgIChyZW5kZXJMYW5lcyA9IHJlbmRlckxhbmVzLnNpYmxpbmcpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICAgICAgaWYgKG5leHRQcm9wcyA9PT0gbGF6eUNvbXBvbmVudCkge1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKFxuICAgICAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzLCByZW5kZXJMYW5lcyk7XG4gICAgICAgIH1cbiAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcztcbiAgICBjYXNlIDI2OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgICAgICA/IChyZW5kZXJMYW5lcyA9IGdldFJlc291cmNlKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgICAgICAgIG51bGxcbiAgICAgICAgICAgICkpXG4gICAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gcmVuZGVyTGFuZXMpXG4gICAgICAgICAgICA6IGlzSHlkcmF0aW5nIHx8XG4gICAgICAgICAgICAgICgocmVuZGVyTGFuZXMgPSB3b3JrSW5Qcm9ncmVzcy50eXBlKSxcbiAgICAgICAgICAgICAgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMpLFxuICAgICAgICAgICAgICAobGF6eUNvbXBvbmVudCA9IGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihcbiAgICAgICAgICAgICAgICByb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50XG4gICAgICAgICAgICAgICkuY3JlYXRlRWxlbWVudChyZW5kZXJMYW5lcykpLFxuICAgICAgICAgICAgICAobGF6eUNvbXBvbmVudFtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgKGxhenlDb21wb25lbnRbaW50ZXJuYWxQcm9wc0tleV0gPSBjdXJyZW50KSxcbiAgICAgICAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMobGF6eUNvbXBvbmVudCwgcmVuZGVyTGFuZXMsIGN1cnJlbnQpLFxuICAgICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGxhenlDb21wb25lbnQpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gbGF6eUNvbXBvbmVudCkpXG4gICAgICAgICAgOiAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGdldFJlc291cmNlKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgICAgICAgY3VycmVudC5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgICApKSxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDI3OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgcHVzaEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudCAmJlxuICAgICAgICAgIGlzSHlkcmF0aW5nICYmXG4gICAgICAgICAgKChsYXp5Q29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID1cbiAgICAgICAgICAgIHJlc29sdmVTaW5nbGV0b25JbnN0YW5jZShcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgICByb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50XG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAoaHlkcmF0aW9uUGFyZW50RmliZXIgPSB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgKHJvb3RPclNpbmdsZXRvbkNvbnRleHQgPSAhMCksXG4gICAgICAgICAgKG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBnZXROZXh0SHlkcmF0YWJsZShcbiAgICAgICAgICAgIGxhenlDb21wb25lbnQuZmlyc3RDaGlsZFxuICAgICAgICAgICkpKSxcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pLFxuICAgICAgICBudWxsICE9PSBjdXJyZW50IHx8IGlzSHlkcmF0aW5nXG4gICAgICAgICAgPyByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZWNvbmNpbGVDaGlsZEZpYmVycyhcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgNTpcbiAgICAgIGlmIChudWxsID09PSBjdXJyZW50ICYmIGlzSHlkcmF0aW5nKSB7XG4gICAgICAgIGlmICgoaW5pdCA9IGxhenlDb21wb25lbnQgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlKSlcbiAgICAgICAgICAobGF6eUNvbXBvbmVudCA9IGNhbkh5ZHJhdGVJbnN0YW5jZShcbiAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgcm9vdE9yU2luZ2xldG9uQ29udGV4dFxuICAgICAgICAgICkpLFxuICAgICAgICAgICAgbnVsbCAhPT0gbGF6eUNvbXBvbmVudFxuICAgICAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gbGF6eUNvbXBvbmVudCksXG4gICAgICAgICAgICAgICAgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIChuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGUoXG4gICAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50LmZpcnN0Q2hpbGRcbiAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAocm9vdE9yU2luZ2xldG9uQ29udGV4dCA9ICExKSxcbiAgICAgICAgICAgICAgICAoaW5pdCA9ICEwKSlcbiAgICAgICAgICAgICAgOiAoaW5pdCA9ICExKTtcbiAgICAgICAgaW5pdCB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2god29ya0luUHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgICAgcHVzaEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGluaXQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgbmV4dFN0YXRlID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyA6IG51bGw7XG4gICAgICBsYXp5Q29tcG9uZW50ID0gbmV4dFByb3BzLmNoaWxkcmVuO1xuICAgICAgc2hvdWxkU2V0VGV4dENvbnRlbnQoaW5pdCwgbmV4dFByb3BzKVxuICAgICAgICA/IChsYXp5Q29tcG9uZW50ID0gbnVsbClcbiAgICAgICAgOiBudWxsICE9PSBuZXh0U3RhdGUgJiZcbiAgICAgICAgICBzaG91bGRTZXRUZXh0Q29udGVudChpbml0LCBuZXh0U3RhdGUpICYmXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDMyKTtcbiAgICAgIG51bGwgIT09IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgKChpbml0ID0gcmVuZGVyV2l0aEhvb2tzKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgVHJhbnNpdGlvbkF3YXJlSG9zdENvbXBvbmVudCxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSksXG4gICAgICAgIChIb3N0VHJhbnNpdGlvbkNvbnRleHQuX2N1cnJlbnRWYWx1ZSA9IGluaXQpKTtcbiAgICAgIG1hcmtSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIGxhenlDb21wb25lbnQsIHJlbmRlckxhbmVzKTtcbiAgICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICBjYXNlIDY6XG4gICAgICBpZiAobnVsbCA9PT0gY3VycmVudCAmJiBpc0h5ZHJhdGluZykge1xuICAgICAgICBpZiAoKGN1cnJlbnQgPSByZW5kZXJMYW5lcyA9IG5leHRIeWRyYXRhYmxlSW5zdGFuY2UpKVxuICAgICAgICAgIChyZW5kZXJMYW5lcyA9IGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UoXG4gICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgICAgIHJvb3RPclNpbmdsZXRvbkNvbnRleHRcbiAgICAgICAgICApKSxcbiAgICAgICAgICAgIG51bGwgIT09IHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSByZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAgICAgKGh5ZHJhdGlvblBhcmVudEZpYmVyID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICAgIChuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gbnVsbCksXG4gICAgICAgICAgICAgICAgKGN1cnJlbnQgPSAhMCkpXG4gICAgICAgICAgICAgIDogKGN1cnJlbnQgPSAhMSk7XG4gICAgICAgIGN1cnJlbnQgfHwgdGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgMTM6XG4gICAgICByZXR1cm4gdXBkYXRlU3VzcGVuc2VDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwdXNoSG9zdENvbnRhaW5lcihcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUuY29udGFpbmVySW5mb1xuICAgICAgICApLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyksXG4gICAgICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgICAgICA/ICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgICAgICkpXG4gICAgICAgICAgOiByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgIGxhenlDb21wb25lbnQsXG4gICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICApLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZFxuICAgICAgKTtcbiAgICBjYXNlIDExOlxuICAgICAgcmV0dXJuIHVwZGF0ZUZvcndhcmRSZWYoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsXG4gICAgICAgIHJlbmRlckxhbmVzXG4gICAgICApO1xuICAgIGNhc2UgNzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgODpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMTI6XG4gICAgICByZXR1cm4gKFxuICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICApLFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZFxuICAgICAgKTtcbiAgICBjYXNlIDEwOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMpLFxuICAgICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnR5cGUsIGxhenlDb21wb25lbnQudmFsdWUpLFxuICAgICAgICByZWNvbmNpbGVDaGlsZHJlbihcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIGxhenlDb21wb25lbnQuY2hpbGRyZW4sXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSA5OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGluaXQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlLl9jb250ZXh0KSxcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pLFxuICAgICAgICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIChpbml0ID0gcmVhZENvbnRleHQoaW5pdCkpLFxuICAgICAgICAobGF6eUNvbXBvbmVudCA9IGxhenlDb21wb25lbnQoaW5pdCkpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMSksXG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBsYXp5Q29tcG9uZW50LCByZW5kZXJMYW5lcyksXG4gICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkXG4gICAgICApO1xuICAgIGNhc2UgMTQ6XG4gICAgICByZXR1cm4gdXBkYXRlTWVtb0NvbXBvbmVudChcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgY2FzZSAxNTpcbiAgICAgIHJldHVybiB1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLFxuICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgKTtcbiAgICBjYXNlIDE5OlxuICAgICAgcmV0dXJuIHVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICAgIGNhc2UgMjI6XG4gICAgICByZXR1cm4gdXBkYXRlT2Zmc2NyZWVuQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG4gICAgY2FzZSAyNDpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKGxhenlDb21wb25lbnQgPSByZWFkQ29udGV4dChDYWNoZUNvbnRleHQpKSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudFxuICAgICAgICAgID8gKChpbml0ID0gcGVla0NhY2hlRnJvbVBvb2woKSksXG4gICAgICAgICAgICBudWxsID09PSBpbml0ICYmXG4gICAgICAgICAgICAgICgoaW5pdCA9IHdvcmtJblByb2dyZXNzUm9vdCksXG4gICAgICAgICAgICAgIChuZXh0UHJvcHMgPSBjcmVhdGVDYWNoZSgpKSxcbiAgICAgICAgICAgICAgKGluaXQucG9vbGVkQ2FjaGUgPSBuZXh0UHJvcHMpLFxuICAgICAgICAgICAgICBuZXh0UHJvcHMucmVmQ291bnQrKyxcbiAgICAgICAgICAgICAgbnVsbCAhPT0gbmV4dFByb3BzICYmIChpbml0LnBvb2xlZENhY2hlTGFuZXMgfD0gcmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgICAoaW5pdCA9IG5leHRQcm9wcykpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgICAgICAgICAgIHBhcmVudDogbGF6eUNvbXBvbmVudCxcbiAgICAgICAgICAgICAgY2FjaGU6IGluaXRcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgaW5pdGlhbGl6ZVVwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgQ2FjaGVDb250ZXh0LCBpbml0KSlcbiAgICAgICAgICA6ICgwICE9PSAoY3VycmVudC5sYW5lcyAmIHJlbmRlckxhbmVzKSAmJlxuICAgICAgICAgICAgICAoY2xvbmVVcGRhdGVRdWV1ZShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbnVsbCwgbnVsbCwgcmVuZGVyTGFuZXMpLFxuICAgICAgICAgICAgICBzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKCkpLFxuICAgICAgICAgICAgKGluaXQgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpLFxuICAgICAgICAgICAgKG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUpLFxuICAgICAgICAgICAgaW5pdC5wYXJlbnQgIT09IGxhenlDb21wb25lbnRcbiAgICAgICAgICAgICAgPyAoKGluaXQgPSB7IHBhcmVudDogbGF6eUNvbXBvbmVudCwgY2FjaGU6IGxhenlDb21wb25lbnQgfSksXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBpbml0KSxcbiAgICAgICAgICAgICAgICAwID09PSB3b3JrSW5Qcm9ncmVzcy5sYW5lcyAmJlxuICAgICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPVxuICAgICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZS5iYXNlU3RhdGUgPVxuICAgICAgICAgICAgICAgICAgICAgIGluaXQpLFxuICAgICAgICAgICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgQ2FjaGVDb250ZXh0LCBsYXp5Q29tcG9uZW50KSlcbiAgICAgICAgICAgICAgOiAoKGxhenlDb21wb25lbnQgPSBuZXh0UHJvcHMuY2FjaGUpLFxuICAgICAgICAgICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgQ2FjaGVDb250ZXh0LCBsYXp5Q29tcG9uZW50KSxcbiAgICAgICAgICAgICAgICBsYXp5Q29tcG9uZW50ICE9PSBpbml0LmNhY2hlICYmXG4gICAgICAgICAgICAgICAgICBwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyhcbiAgICAgICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgICAgIFtDYWNoZUNvbnRleHRdLFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgICAgICAgICAgITBcbiAgICAgICAgICAgICAgICAgICkpKSxcbiAgICAgICAgcmVjb25jaWxlQ2hpbGRyZW4oXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgcmVuZGVyTGFuZXNcbiAgICAgICAgKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRcbiAgICAgICk7XG4gICAgY2FzZSAyOTpcbiAgICAgIHRocm93IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgfVxuICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1Niwgd29ya0luUHJvZ3Jlc3MudGFnKSk7XG59XG52YXIgdmFsdWVDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCksXG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gbnVsbCxcbiAgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gbnVsbDtcbmZ1bmN0aW9uIHB1c2hQcm92aWRlcihwcm92aWRlckZpYmVyLCBjb250ZXh0LCBuZXh0VmFsdWUpIHtcbiAgcHVzaCh2YWx1ZUN1cnNvciwgY29udGV4dC5fY3VycmVudFZhbHVlKTtcbiAgY29udGV4dC5fY3VycmVudFZhbHVlID0gbmV4dFZhbHVlO1xufVxuZnVuY3Rpb24gcG9wUHJvdmlkZXIoY29udGV4dCkge1xuICBjb250ZXh0Ll9jdXJyZW50VmFsdWUgPSB2YWx1ZUN1cnNvci5jdXJyZW50O1xuICBwb3AodmFsdWVDdXJzb3IpO1xufVxuZnVuY3Rpb24gc2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aChwYXJlbnQsIHJlbmRlckxhbmVzLCBwcm9wYWdhdGlvblJvb3QpIHtcbiAgZm9yICg7IG51bGwgIT09IHBhcmVudDsgKSB7XG4gICAgdmFyIGFsdGVybmF0ZSA9IHBhcmVudC5hbHRlcm5hdGU7XG4gICAgKHBhcmVudC5jaGlsZExhbmVzICYgcmVuZGVyTGFuZXMpICE9PSByZW5kZXJMYW5lc1xuICAgICAgPyAoKHBhcmVudC5jaGlsZExhbmVzIHw9IHJlbmRlckxhbmVzKSxcbiAgICAgICAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmIChhbHRlcm5hdGUuY2hpbGRMYW5lcyB8PSByZW5kZXJMYW5lcykpXG4gICAgICA6IG51bGwgIT09IGFsdGVybmF0ZSAmJlxuICAgICAgICAoYWx0ZXJuYXRlLmNoaWxkTGFuZXMgJiByZW5kZXJMYW5lcykgIT09IHJlbmRlckxhbmVzICYmXG4gICAgICAgIChhbHRlcm5hdGUuY2hpbGRMYW5lcyB8PSByZW5kZXJMYW5lcyk7XG4gICAgaWYgKHBhcmVudCA9PT0gcHJvcGFnYXRpb25Sb290KSBicmVhaztcbiAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICB9XG59XG5mdW5jdGlvbiBwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyhcbiAgd29ya0luUHJvZ3Jlc3MsXG4gIGNvbnRleHRzLFxuICByZW5kZXJMYW5lcyxcbiAgZm9yY2VQcm9wYWdhdGVFbnRpcmVUcmVlXG4pIHtcbiAgdmFyIGZpYmVyID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gIG51bGwgIT09IGZpYmVyICYmIChmaWJlci5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcyk7XG4gIGZvciAoOyBudWxsICE9PSBmaWJlcjsgKSB7XG4gICAgdmFyIGxpc3QgPSBmaWJlci5kZXBlbmRlbmNpZXM7XG4gICAgaWYgKG51bGwgIT09IGxpc3QpIHtcbiAgICAgIHZhciBuZXh0RmliZXIgPSBmaWJlci5jaGlsZDtcbiAgICAgIGxpc3QgPSBsaXN0LmZpcnN0Q29udGV4dDtcbiAgICAgIGE6IGZvciAoOyBudWxsICE9PSBsaXN0OyApIHtcbiAgICAgICAgdmFyIGRlcGVuZGVuY3kgPSBsaXN0O1xuICAgICAgICBsaXN0ID0gZmliZXI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGV4dHMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgaWYgKGRlcGVuZGVuY3kuY29udGV4dCA9PT0gY29udGV4dHNbaV0pIHtcbiAgICAgICAgICAgIGxpc3QubGFuZXMgfD0gcmVuZGVyTGFuZXM7XG4gICAgICAgICAgICBkZXBlbmRlbmN5ID0gbGlzdC5hbHRlcm5hdGU7XG4gICAgICAgICAgICBudWxsICE9PSBkZXBlbmRlbmN5ICYmIChkZXBlbmRlbmN5LmxhbmVzIHw9IHJlbmRlckxhbmVzKTtcbiAgICAgICAgICAgIHNjaGVkdWxlQ29udGV4dFdvcmtPblBhcmVudFBhdGgoXG4gICAgICAgICAgICAgIGxpc3QucmV0dXJuLFxuICAgICAgICAgICAgICByZW5kZXJMYW5lcyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBmb3JjZVByb3BhZ2F0ZUVudGlyZVRyZWUgfHwgKG5leHRGaWJlciA9IG51bGwpO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9XG4gICAgICAgIGxpc3QgPSBkZXBlbmRlbmN5Lm5leHQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgxOCA9PT0gZmliZXIudGFnKSB7XG4gICAgICBuZXh0RmliZXIgPSBmaWJlci5yZXR1cm47XG4gICAgICBpZiAobnVsbCA9PT0gbmV4dEZpYmVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM0MSkpO1xuICAgICAgbmV4dEZpYmVyLmxhbmVzIHw9IHJlbmRlckxhbmVzO1xuICAgICAgbGlzdCA9IG5leHRGaWJlci5hbHRlcm5hdGU7XG4gICAgICBudWxsICE9PSBsaXN0ICYmIChsaXN0LmxhbmVzIHw9IHJlbmRlckxhbmVzKTtcbiAgICAgIHNjaGVkdWxlQ29udGV4dFdvcmtPblBhcmVudFBhdGgobmV4dEZpYmVyLCByZW5kZXJMYW5lcywgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgbmV4dEZpYmVyID0gbnVsbDtcbiAgICB9IGVsc2UgbmV4dEZpYmVyID0gZmliZXIuY2hpbGQ7XG4gICAgaWYgKG51bGwgIT09IG5leHRGaWJlcikgbmV4dEZpYmVyLnJldHVybiA9IGZpYmVyO1xuICAgIGVsc2VcbiAgICAgIGZvciAobmV4dEZpYmVyID0gZmliZXI7IG51bGwgIT09IG5leHRGaWJlcjsgKSB7XG4gICAgICAgIGlmIChuZXh0RmliZXIgPT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgICAgbmV4dEZpYmVyID0gbnVsbDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBmaWJlciA9IG5leHRGaWJlci5zaWJsaW5nO1xuICAgICAgICBpZiAobnVsbCAhPT0gZmliZXIpIHtcbiAgICAgICAgICBmaWJlci5yZXR1cm4gPSBuZXh0RmliZXIucmV0dXJuO1xuICAgICAgICAgIG5leHRGaWJlciA9IGZpYmVyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5leHRGaWJlciA9IG5leHRGaWJlci5yZXR1cm47XG4gICAgICB9XG4gICAgZmliZXIgPSBuZXh0RmliZXI7XG4gIH1cbn1cbmZ1bmN0aW9uIHByb3BhZ2F0ZVBhcmVudENvbnRleHRDaGFuZ2VzKFxuICBjdXJyZW50LFxuICB3b3JrSW5Qcm9ncmVzcyxcbiAgcmVuZGVyTGFuZXMsXG4gIGZvcmNlUHJvcGFnYXRlRW50aXJlVHJlZVxuKSB7XG4gIGN1cnJlbnQgPSBudWxsO1xuICBmb3IgKFxuICAgIHZhciBwYXJlbnQgPSB3b3JrSW5Qcm9ncmVzcywgaXNJbnNpZGVQcm9wYWdhdGlvbkJhaWxvdXQgPSAhMTtcbiAgICBudWxsICE9PSBwYXJlbnQ7XG5cbiAgKSB7XG4gICAgaWYgKCFpc0luc2lkZVByb3BhZ2F0aW9uQmFpbG91dClcbiAgICAgIGlmICgwICE9PSAocGFyZW50LmZsYWdzICYgNTI0Mjg4KSkgaXNJbnNpZGVQcm9wYWdhdGlvbkJhaWxvdXQgPSAhMDtcbiAgICAgIGVsc2UgaWYgKDAgIT09IChwYXJlbnQuZmxhZ3MgJiAyNjIxNDQpKSBicmVhaztcbiAgICBpZiAoMTAgPT09IHBhcmVudC50YWcpIHtcbiAgICAgIHZhciBjdXJyZW50UGFyZW50ID0gcGFyZW50LmFsdGVybmF0ZTtcbiAgICAgIGlmIChudWxsID09PSBjdXJyZW50UGFyZW50KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDM4NykpO1xuICAgICAgY3VycmVudFBhcmVudCA9IGN1cnJlbnRQYXJlbnQubWVtb2l6ZWRQcm9wcztcbiAgICAgIGlmIChudWxsICE9PSBjdXJyZW50UGFyZW50KSB7XG4gICAgICAgIHZhciBjb250ZXh0ID0gcGFyZW50LnR5cGU7XG4gICAgICAgIG9iamVjdElzKHBhcmVudC5wZW5kaW5nUHJvcHMudmFsdWUsIGN1cnJlbnRQYXJlbnQudmFsdWUpIHx8XG4gICAgICAgICAgKG51bGwgIT09IGN1cnJlbnQgPyBjdXJyZW50LnB1c2goY29udGV4dCkgOiAoY3VycmVudCA9IFtjb250ZXh0XSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyZW50ID09PSBob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yLmN1cnJlbnQpIHtcbiAgICAgIGN1cnJlbnRQYXJlbnQgPSBwYXJlbnQuYWx0ZXJuYXRlO1xuICAgICAgaWYgKG51bGwgPT09IGN1cnJlbnRQYXJlbnQpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzg3KSk7XG4gICAgICBjdXJyZW50UGFyZW50Lm1lbW9pemVkU3RhdGUubWVtb2l6ZWRTdGF0ZSAhPT1cbiAgICAgICAgcGFyZW50Lm1lbW9pemVkU3RhdGUubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAobnVsbCAhPT0gY3VycmVudFxuICAgICAgICAgID8gY3VycmVudC5wdXNoKEhvc3RUcmFuc2l0aW9uQ29udGV4dClcbiAgICAgICAgICA6IChjdXJyZW50ID0gW0hvc3RUcmFuc2l0aW9uQ29udGV4dF0pKTtcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnJldHVybjtcbiAgfVxuICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgcHJvcGFnYXRlQ29udGV4dENoYW5nZXMoXG4gICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgIGN1cnJlbnQsXG4gICAgICByZW5kZXJMYW5lcyxcbiAgICAgIGZvcmNlUHJvcGFnYXRlRW50aXJlVHJlZVxuICAgICk7XG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDI2MjE0NDtcbn1cbmZ1bmN0aW9uIGNoZWNrSWZDb250ZXh0Q2hhbmdlZChjdXJyZW50RGVwZW5kZW5jaWVzKSB7XG4gIGZvciAoXG4gICAgY3VycmVudERlcGVuZGVuY2llcyA9IGN1cnJlbnREZXBlbmRlbmNpZXMuZmlyc3RDb250ZXh0O1xuICAgIG51bGwgIT09IGN1cnJlbnREZXBlbmRlbmNpZXM7XG5cbiAgKSB7XG4gICAgaWYgKFxuICAgICAgIW9iamVjdElzKFxuICAgICAgICBjdXJyZW50RGVwZW5kZW5jaWVzLmNvbnRleHQuX2N1cnJlbnRWYWx1ZSxcbiAgICAgICAgY3VycmVudERlcGVuZGVuY2llcy5tZW1vaXplZFZhbHVlXG4gICAgICApXG4gICAgKVxuICAgICAgcmV0dXJuICEwO1xuICAgIGN1cnJlbnREZXBlbmRlbmNpZXMgPSBjdXJyZW50RGVwZW5kZW5jaWVzLm5leHQ7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MpIHtcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSB3b3JrSW5Qcm9ncmVzcztcbiAgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzcy5kZXBlbmRlbmNpZXM7XG4gIG51bGwgIT09IHdvcmtJblByb2dyZXNzICYmICh3b3JrSW5Qcm9ncmVzcy5maXJzdENvbnRleHQgPSBudWxsKTtcbn1cbmZ1bmN0aW9uIHJlYWRDb250ZXh0KGNvbnRleHQpIHtcbiAgcmV0dXJuIHJlYWRDb250ZXh0Rm9yQ29uc3VtZXIoY3VycmVudGx5UmVuZGVyaW5nRmliZXIsIGNvbnRleHQpO1xufVxuZnVuY3Rpb24gcmVhZENvbnRleHREdXJpbmdSZWNvbmNpbGlhdGlvbihjb25zdW1lciwgY29udGV4dCkge1xuICBudWxsID09PSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciAmJiBwcmVwYXJlVG9SZWFkQ29udGV4dChjb25zdW1lcik7XG4gIHJldHVybiByZWFkQ29udGV4dEZvckNvbnN1bWVyKGNvbnN1bWVyLCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHJlYWRDb250ZXh0Rm9yQ29uc3VtZXIoY29uc3VtZXIsIGNvbnRleHQpIHtcbiAgdmFyIHZhbHVlID0gY29udGV4dC5fY3VycmVudFZhbHVlO1xuICBjb250ZXh0ID0geyBjb250ZXh0OiBjb250ZXh0LCBtZW1vaXplZFZhbHVlOiB2YWx1ZSwgbmV4dDogbnVsbCB9O1xuICBpZiAobnVsbCA9PT0gbGFzdENvbnRleHREZXBlbmRlbmN5KSB7XG4gICAgaWYgKG51bGwgPT09IGNvbnN1bWVyKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMwOCkpO1xuICAgIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGNvbnRleHQ7XG4gICAgY29uc3VtZXIuZGVwZW5kZW5jaWVzID0geyBsYW5lczogMCwgZmlyc3RDb250ZXh0OiBjb250ZXh0IH07XG4gICAgY29uc3VtZXIuZmxhZ3MgfD0gNTI0Mjg4O1xuICB9IGVsc2UgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gbGFzdENvbnRleHREZXBlbmRlbmN5Lm5leHQgPSBjb250ZXh0O1xuICByZXR1cm4gdmFsdWU7XG59XG52YXIgaGFzRm9yY2VVcGRhdGUgPSAhMTtcbmZ1bmN0aW9uIGluaXRpYWxpemVVcGRhdGVRdWV1ZShmaWJlcikge1xuICBmaWJlci51cGRhdGVRdWV1ZSA9IHtcbiAgICBiYXNlU3RhdGU6IGZpYmVyLm1lbW9pemVkU3RhdGUsXG4gICAgZmlyc3RCYXNlVXBkYXRlOiBudWxsLFxuICAgIGxhc3RCYXNlVXBkYXRlOiBudWxsLFxuICAgIHNoYXJlZDogeyBwZW5kaW5nOiBudWxsLCBsYW5lczogMCwgaGlkZGVuQ2FsbGJhY2tzOiBudWxsIH0sXG4gICAgY2FsbGJhY2tzOiBudWxsXG4gIH07XG59XG5mdW5jdGlvbiBjbG9uZVVwZGF0ZVF1ZXVlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSB7XG4gIGN1cnJlbnQgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlO1xuICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9PT0gY3VycmVudCAmJlxuICAgICh3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IHtcbiAgICAgIGJhc2VTdGF0ZTogY3VycmVudC5iYXNlU3RhdGUsXG4gICAgICBmaXJzdEJhc2VVcGRhdGU6IGN1cnJlbnQuZmlyc3RCYXNlVXBkYXRlLFxuICAgICAgbGFzdEJhc2VVcGRhdGU6IGN1cnJlbnQubGFzdEJhc2VVcGRhdGUsXG4gICAgICBzaGFyZWQ6IGN1cnJlbnQuc2hhcmVkLFxuICAgICAgY2FsbGJhY2tzOiBudWxsXG4gICAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVVcGRhdGUobGFuZSkge1xuICByZXR1cm4geyBsYW5lOiBsYW5lLCB0YWc6IDAsIHBheWxvYWQ6IG51bGwsIGNhbGxiYWNrOiBudWxsLCBuZXh0OiBudWxsIH07XG59XG5mdW5jdGlvbiBlbnF1ZXVlVXBkYXRlKGZpYmVyLCB1cGRhdGUsIGxhbmUpIHtcbiAgdmFyIHVwZGF0ZVF1ZXVlID0gZmliZXIudXBkYXRlUXVldWU7XG4gIGlmIChudWxsID09PSB1cGRhdGVRdWV1ZSkgcmV0dXJuIG51bGw7XG4gIHVwZGF0ZVF1ZXVlID0gdXBkYXRlUXVldWUuc2hhcmVkO1xuICBpZiAoMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiAyKSkge1xuICAgIHZhciBwZW5kaW5nID0gdXBkYXRlUXVldWUucGVuZGluZztcbiAgICBudWxsID09PSBwZW5kaW5nXG4gICAgICA/ICh1cGRhdGUubmV4dCA9IHVwZGF0ZSlcbiAgICAgIDogKCh1cGRhdGUubmV4dCA9IHBlbmRpbmcubmV4dCksIChwZW5kaW5nLm5leHQgPSB1cGRhdGUpKTtcbiAgICB1cGRhdGVRdWV1ZS5wZW5kaW5nID0gdXBkYXRlO1xuICAgIHVwZGF0ZSA9IGdldFJvb3RGb3JVcGRhdGVkRmliZXIoZmliZXIpO1xuICAgIG1hcmtVcGRhdGVMYW5lRnJvbUZpYmVyVG9Sb290KGZpYmVyLCBudWxsLCBsYW5lKTtcbiAgICByZXR1cm4gdXBkYXRlO1xuICB9XG4gIGVucXVldWVVcGRhdGUkMShmaWJlciwgdXBkYXRlUXVldWUsIHVwZGF0ZSwgbGFuZSk7XG4gIHJldHVybiBnZXRSb290Rm9yVXBkYXRlZEZpYmVyKGZpYmVyKTtcbn1cbmZ1bmN0aW9uIGVudGFuZ2xlVHJhbnNpdGlvbnMocm9vdCwgZmliZXIsIGxhbmUpIHtcbiAgZmliZXIgPSBmaWJlci51cGRhdGVRdWV1ZTtcbiAgaWYgKG51bGwgIT09IGZpYmVyICYmICgoZmliZXIgPSBmaWJlci5zaGFyZWQpLCAwICE9PSAobGFuZSAmIDQxOTQxNzYpKSkge1xuICAgIHZhciBxdWV1ZUxhbmVzID0gZmliZXIubGFuZXM7XG4gICAgcXVldWVMYW5lcyAmPSByb290LnBlbmRpbmdMYW5lcztcbiAgICBsYW5lIHw9IHF1ZXVlTGFuZXM7XG4gICAgZmliZXIubGFuZXMgPSBsYW5lO1xuICAgIG1hcmtSb290RW50YW5nbGVkKHJvb3QsIGxhbmUpO1xuICB9XG59XG5mdW5jdGlvbiBlbnF1ZXVlQ2FwdHVyZWRVcGRhdGUod29ya0luUHJvZ3Jlc3MsIGNhcHR1cmVkVXBkYXRlKSB7XG4gIHZhciBxdWV1ZSA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlLFxuICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGU7XG4gIGlmIChcbiAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgKChjdXJyZW50ID0gY3VycmVudC51cGRhdGVRdWV1ZSksIHF1ZXVlID09PSBjdXJyZW50KVxuICApIHtcbiAgICB2YXIgbmV3Rmlyc3QgPSBudWxsLFxuICAgICAgbmV3TGFzdCA9IG51bGw7XG4gICAgcXVldWUgPSBxdWV1ZS5maXJzdEJhc2VVcGRhdGU7XG4gICAgaWYgKG51bGwgIT09IHF1ZXVlKSB7XG4gICAgICBkbyB7XG4gICAgICAgIHZhciBjbG9uZSA9IHtcbiAgICAgICAgICBsYW5lOiBxdWV1ZS5sYW5lLFxuICAgICAgICAgIHRhZzogcXVldWUudGFnLFxuICAgICAgICAgIHBheWxvYWQ6IHF1ZXVlLnBheWxvYWQsXG4gICAgICAgICAgY2FsbGJhY2s6IG51bGwsXG4gICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICB9O1xuICAgICAgICBudWxsID09PSBuZXdMYXN0XG4gICAgICAgICAgPyAobmV3Rmlyc3QgPSBuZXdMYXN0ID0gY2xvbmUpXG4gICAgICAgICAgOiAobmV3TGFzdCA9IG5ld0xhc3QubmV4dCA9IGNsb25lKTtcbiAgICAgICAgcXVldWUgPSBxdWV1ZS5uZXh0O1xuICAgICAgfSB3aGlsZSAobnVsbCAhPT0gcXVldWUpO1xuICAgICAgbnVsbCA9PT0gbmV3TGFzdFxuICAgICAgICA/IChuZXdGaXJzdCA9IG5ld0xhc3QgPSBjYXB0dXJlZFVwZGF0ZSlcbiAgICAgICAgOiAobmV3TGFzdCA9IG5ld0xhc3QubmV4dCA9IGNhcHR1cmVkVXBkYXRlKTtcbiAgICB9IGVsc2UgbmV3Rmlyc3QgPSBuZXdMYXN0ID0gY2FwdHVyZWRVcGRhdGU7XG4gICAgcXVldWUgPSB7XG4gICAgICBiYXNlU3RhdGU6IGN1cnJlbnQuYmFzZVN0YXRlLFxuICAgICAgZmlyc3RCYXNlVXBkYXRlOiBuZXdGaXJzdCxcbiAgICAgIGxhc3RCYXNlVXBkYXRlOiBuZXdMYXN0LFxuICAgICAgc2hhcmVkOiBjdXJyZW50LnNoYXJlZCxcbiAgICAgIGNhbGxiYWNrczogY3VycmVudC5jYWxsYmFja3NcbiAgICB9O1xuICAgIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gcXVldWU7XG4gICAgcmV0dXJuO1xuICB9XG4gIHdvcmtJblByb2dyZXNzID0gcXVldWUubGFzdEJhc2VVcGRhdGU7XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzXG4gICAgPyAocXVldWUuZmlyc3RCYXNlVXBkYXRlID0gY2FwdHVyZWRVcGRhdGUpXG4gICAgOiAod29ya0luUHJvZ3Jlc3MubmV4dCA9IGNhcHR1cmVkVXBkYXRlKTtcbiAgcXVldWUubGFzdEJhc2VVcGRhdGUgPSBjYXB0dXJlZFVwZGF0ZTtcbn1cbnZhciBkaWRSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uID0gITE7XG5mdW5jdGlvbiBzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uKCkge1xuICBpZiAoZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbikge1xuICAgIHZhciBlbnRhbmdsZWRBY3Rpb25UaGVuYWJsZSA9IGN1cnJlbnRFbnRhbmdsZWRBY3Rpb25UaGVuYWJsZTtcbiAgICBpZiAobnVsbCAhPT0gZW50YW5nbGVkQWN0aW9uVGhlbmFibGUpIHRocm93IGVudGFuZ2xlZEFjdGlvblRoZW5hYmxlO1xuICB9XG59XG5mdW5jdGlvbiBwcm9jZXNzVXBkYXRlUXVldWUoXG4gIHdvcmtJblByb2dyZXNzJGpzY29tcCQwLFxuICBwcm9wcyxcbiAgaW5zdGFuY2UkanNjb21wJDAsXG4gIHJlbmRlckxhbmVzXG4pIHtcbiAgZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiA9ICExO1xuICB2YXIgcXVldWUgPSB3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMC51cGRhdGVRdWV1ZTtcbiAgaGFzRm9yY2VVcGRhdGUgPSAhMTtcbiAgdmFyIGZpcnN0QmFzZVVwZGF0ZSA9IHF1ZXVlLmZpcnN0QmFzZVVwZGF0ZSxcbiAgICBsYXN0QmFzZVVwZGF0ZSA9IHF1ZXVlLmxhc3RCYXNlVXBkYXRlLFxuICAgIHBlbmRpbmdRdWV1ZSA9IHF1ZXVlLnNoYXJlZC5wZW5kaW5nO1xuICBpZiAobnVsbCAhPT0gcGVuZGluZ1F1ZXVlKSB7XG4gICAgcXVldWUuc2hhcmVkLnBlbmRpbmcgPSBudWxsO1xuICAgIHZhciBsYXN0UGVuZGluZ1VwZGF0ZSA9IHBlbmRpbmdRdWV1ZSxcbiAgICAgIGZpcnN0UGVuZGluZ1VwZGF0ZSA9IGxhc3RQZW5kaW5nVXBkYXRlLm5leHQ7XG4gICAgbGFzdFBlbmRpbmdVcGRhdGUubmV4dCA9IG51bGw7XG4gICAgbnVsbCA9PT0gbGFzdEJhc2VVcGRhdGVcbiAgICAgID8gKGZpcnN0QmFzZVVwZGF0ZSA9IGZpcnN0UGVuZGluZ1VwZGF0ZSlcbiAgICAgIDogKGxhc3RCYXNlVXBkYXRlLm5leHQgPSBmaXJzdFBlbmRpbmdVcGRhdGUpO1xuICAgIGxhc3RCYXNlVXBkYXRlID0gbGFzdFBlbmRpbmdVcGRhdGU7XG4gICAgdmFyIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcyRqc2NvbXAkMC5hbHRlcm5hdGU7XG4gICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgKChjdXJyZW50ID0gY3VycmVudC51cGRhdGVRdWV1ZSksXG4gICAgICAocGVuZGluZ1F1ZXVlID0gY3VycmVudC5sYXN0QmFzZVVwZGF0ZSksXG4gICAgICBwZW5kaW5nUXVldWUgIT09IGxhc3RCYXNlVXBkYXRlICYmXG4gICAgICAgIChudWxsID09PSBwZW5kaW5nUXVldWVcbiAgICAgICAgICA/IChjdXJyZW50LmZpcnN0QmFzZVVwZGF0ZSA9IGZpcnN0UGVuZGluZ1VwZGF0ZSlcbiAgICAgICAgICA6IChwZW5kaW5nUXVldWUubmV4dCA9IGZpcnN0UGVuZGluZ1VwZGF0ZSksXG4gICAgICAgIChjdXJyZW50Lmxhc3RCYXNlVXBkYXRlID0gbGFzdFBlbmRpbmdVcGRhdGUpKSk7XG4gIH1cbiAgaWYgKG51bGwgIT09IGZpcnN0QmFzZVVwZGF0ZSkge1xuICAgIHZhciBuZXdTdGF0ZSA9IHF1ZXVlLmJhc2VTdGF0ZTtcbiAgICBsYXN0QmFzZVVwZGF0ZSA9IDA7XG4gICAgY3VycmVudCA9IGZpcnN0UGVuZGluZ1VwZGF0ZSA9IGxhc3RQZW5kaW5nVXBkYXRlID0gbnVsbDtcbiAgICBwZW5kaW5nUXVldWUgPSBmaXJzdEJhc2VVcGRhdGU7XG4gICAgZG8ge1xuICAgICAgdmFyIHVwZGF0ZUxhbmUgPSBwZW5kaW5nUXVldWUubGFuZSAmIC01MzY4NzA5MTMsXG4gICAgICAgIGlzSGlkZGVuVXBkYXRlID0gdXBkYXRlTGFuZSAhPT0gcGVuZGluZ1F1ZXVlLmxhbmU7XG4gICAgICBpZiAoXG4gICAgICAgIGlzSGlkZGVuVXBkYXRlXG4gICAgICAgICAgPyAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiB1cGRhdGVMYW5lKSA9PT0gdXBkYXRlTGFuZVxuICAgICAgICAgIDogKHJlbmRlckxhbmVzICYgdXBkYXRlTGFuZSkgPT09IHVwZGF0ZUxhbmVcbiAgICAgICkge1xuICAgICAgICAwICE9PSB1cGRhdGVMYW5lICYmXG4gICAgICAgICAgdXBkYXRlTGFuZSA9PT0gY3VycmVudEVudGFuZ2xlZExhbmUgJiZcbiAgICAgICAgICAoZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiA9ICEwKTtcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgIChjdXJyZW50ID0gY3VycmVudC5uZXh0ID1cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbGFuZTogMCxcbiAgICAgICAgICAgICAgdGFnOiBwZW5kaW5nUXVldWUudGFnLFxuICAgICAgICAgICAgICBwYXlsb2FkOiBwZW5kaW5nUXVldWUucGF5bG9hZCxcbiAgICAgICAgICAgICAgY2FsbGJhY2s6IG51bGwsXG4gICAgICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBhOiB7XG4gICAgICAgICAgdmFyIHdvcmtJblByb2dyZXNzID0gd29ya0luUHJvZ3Jlc3MkanNjb21wJDAsXG4gICAgICAgICAgICB1cGRhdGUgPSBwZW5kaW5nUXVldWU7XG4gICAgICAgICAgdXBkYXRlTGFuZSA9IHByb3BzO1xuICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGluc3RhbmNlJGpzY29tcCQwO1xuICAgICAgICAgIHN3aXRjaCAodXBkYXRlLnRhZykge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IHVwZGF0ZS5wYXlsb2FkO1xuICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IHdvcmtJblByb2dyZXNzLmNhbGwoaW5zdGFuY2UsIG5ld1N0YXRlLCB1cGRhdGVMYW5lKTtcbiAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG5ld1N0YXRlID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzID0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgLTY1NTM3KSB8IDEyODtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSB1cGRhdGUucGF5bG9hZDtcbiAgICAgICAgICAgICAgdXBkYXRlTGFuZSA9XG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygd29ya0luUHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICAgID8gd29ya0luUHJvZ3Jlc3MuY2FsbChpbnN0YW5jZSwgbmV3U3RhdGUsIHVwZGF0ZUxhbmUpXG4gICAgICAgICAgICAgICAgICA6IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gdXBkYXRlTGFuZSB8fCB2b2lkIDAgPT09IHVwZGF0ZUxhbmUpIGJyZWFrIGE7XG4gICAgICAgICAgICAgIG5ld1N0YXRlID0gYXNzaWduKHt9LCBuZXdTdGF0ZSwgdXBkYXRlTGFuZSk7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgIGhhc0ZvcmNlVXBkYXRlID0gITA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUxhbmUgPSBwZW5kaW5nUXVldWUuY2FsbGJhY2s7XG4gICAgICAgIG51bGwgIT09IHVwZGF0ZUxhbmUgJiZcbiAgICAgICAgICAoKHdvcmtJblByb2dyZXNzJGpzY29tcCQwLmZsYWdzIHw9IDY0KSxcbiAgICAgICAgICBpc0hpZGRlblVwZGF0ZSAmJiAod29ya0luUHJvZ3Jlc3MkanNjb21wJDAuZmxhZ3MgfD0gODE5MiksXG4gICAgICAgICAgKGlzSGlkZGVuVXBkYXRlID0gcXVldWUuY2FsbGJhY2tzKSxcbiAgICAgICAgICBudWxsID09PSBpc0hpZGRlblVwZGF0ZVxuICAgICAgICAgICAgPyAocXVldWUuY2FsbGJhY2tzID0gW3VwZGF0ZUxhbmVdKVxuICAgICAgICAgICAgOiBpc0hpZGRlblVwZGF0ZS5wdXNoKHVwZGF0ZUxhbmUpKTtcbiAgICAgIH0gZWxzZVxuICAgICAgICAoaXNIaWRkZW5VcGRhdGUgPSB7XG4gICAgICAgICAgbGFuZTogdXBkYXRlTGFuZSxcbiAgICAgICAgICB0YWc6IHBlbmRpbmdRdWV1ZS50YWcsXG4gICAgICAgICAgcGF5bG9hZDogcGVuZGluZ1F1ZXVlLnBheWxvYWQsXG4gICAgICAgICAgY2FsbGJhY2s6IHBlbmRpbmdRdWV1ZS5jYWxsYmFjayxcbiAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgIH0pLFxuICAgICAgICAgIG51bGwgPT09IGN1cnJlbnRcbiAgICAgICAgICAgID8gKChmaXJzdFBlbmRpbmdVcGRhdGUgPSBjdXJyZW50ID0gaXNIaWRkZW5VcGRhdGUpLFxuICAgICAgICAgICAgICAobGFzdFBlbmRpbmdVcGRhdGUgPSBuZXdTdGF0ZSkpXG4gICAgICAgICAgICA6IChjdXJyZW50ID0gY3VycmVudC5uZXh0ID0gaXNIaWRkZW5VcGRhdGUpLFxuICAgICAgICAgIChsYXN0QmFzZVVwZGF0ZSB8PSB1cGRhdGVMYW5lKTtcbiAgICAgIHBlbmRpbmdRdWV1ZSA9IHBlbmRpbmdRdWV1ZS5uZXh0O1xuICAgICAgaWYgKG51bGwgPT09IHBlbmRpbmdRdWV1ZSlcbiAgICAgICAgaWYgKCgocGVuZGluZ1F1ZXVlID0gcXVldWUuc2hhcmVkLnBlbmRpbmcpLCBudWxsID09PSBwZW5kaW5nUXVldWUpKVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgKGlzSGlkZGVuVXBkYXRlID0gcGVuZGluZ1F1ZXVlKSxcbiAgICAgICAgICAgIChwZW5kaW5nUXVldWUgPSBpc0hpZGRlblVwZGF0ZS5uZXh0KSxcbiAgICAgICAgICAgIChpc0hpZGRlblVwZGF0ZS5uZXh0ID0gbnVsbCksXG4gICAgICAgICAgICAocXVldWUubGFzdEJhc2VVcGRhdGUgPSBpc0hpZGRlblVwZGF0ZSksXG4gICAgICAgICAgICAocXVldWUuc2hhcmVkLnBlbmRpbmcgPSBudWxsKTtcbiAgICB9IHdoaWxlICgxKTtcbiAgICBudWxsID09PSBjdXJyZW50ICYmIChsYXN0UGVuZGluZ1VwZGF0ZSA9IG5ld1N0YXRlKTtcbiAgICBxdWV1ZS5iYXNlU3RhdGUgPSBsYXN0UGVuZGluZ1VwZGF0ZTtcbiAgICBxdWV1ZS5maXJzdEJhc2VVcGRhdGUgPSBmaXJzdFBlbmRpbmdVcGRhdGU7XG4gICAgcXVldWUubGFzdEJhc2VVcGRhdGUgPSBjdXJyZW50O1xuICAgIG51bGwgPT09IGZpcnN0QmFzZVVwZGF0ZSAmJiAocXVldWUuc2hhcmVkLmxhbmVzID0gMCk7XG4gICAgd29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzIHw9IGxhc3RCYXNlVXBkYXRlO1xuICAgIHdvcmtJblByb2dyZXNzJGpzY29tcCQwLmxhbmVzID0gbGFzdEJhc2VVcGRhdGU7XG4gICAgd29ya0luUHJvZ3Jlc3MkanNjb21wJDAubWVtb2l6ZWRTdGF0ZSA9IG5ld1N0YXRlO1xuICB9XG59XG5mdW5jdGlvbiBjYWxsQ2FsbGJhY2soY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGNhbGxiYWNrKVxuICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTkxLCBjYWxsYmFjaykpO1xuICBjYWxsYmFjay5jYWxsKGNvbnRleHQpO1xufVxuZnVuY3Rpb24gY29tbWl0Q2FsbGJhY2tzKHVwZGF0ZVF1ZXVlLCBjb250ZXh0KSB7XG4gIHZhciBjYWxsYmFja3MgPSB1cGRhdGVRdWV1ZS5jYWxsYmFja3M7XG4gIGlmIChudWxsICE9PSBjYWxsYmFja3MpXG4gICAgZm9yIChcbiAgICAgIHVwZGF0ZVF1ZXVlLmNhbGxiYWNrcyA9IG51bGwsIHVwZGF0ZVF1ZXVlID0gMDtcbiAgICAgIHVwZGF0ZVF1ZXVlIDwgY2FsbGJhY2tzLmxlbmd0aDtcbiAgICAgIHVwZGF0ZVF1ZXVlKytcbiAgICApXG4gICAgICBjYWxsQ2FsbGJhY2soY2FsbGJhY2tzW3VwZGF0ZVF1ZXVlXSwgY29udGV4dCk7XG59XG5mdW5jdGlvbiBjb21taXRIb29rRWZmZWN0TGlzdE1vdW50KGZsYWdzLCBmaW5pc2hlZFdvcmspIHtcbiAgdHJ5IHtcbiAgICB2YXIgdXBkYXRlUXVldWUgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUsXG4gICAgICBsYXN0RWZmZWN0ID0gbnVsbCAhPT0gdXBkYXRlUXVldWUgPyB1cGRhdGVRdWV1ZS5sYXN0RWZmZWN0IDogbnVsbDtcbiAgICBpZiAobnVsbCAhPT0gbGFzdEVmZmVjdCkge1xuICAgICAgdmFyIGZpcnN0RWZmZWN0ID0gbGFzdEVmZmVjdC5uZXh0O1xuICAgICAgdXBkYXRlUXVldWUgPSBmaXJzdEVmZmVjdDtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKCh1cGRhdGVRdWV1ZS50YWcgJiBmbGFncykgPT09IGZsYWdzKSB7XG4gICAgICAgICAgbGFzdEVmZmVjdCA9IHZvaWQgMDtcbiAgICAgICAgICB2YXIgY3JlYXRlID0gdXBkYXRlUXVldWUuY3JlYXRlLFxuICAgICAgICAgICAgaW5zdCA9IHVwZGF0ZVF1ZXVlLmluc3Q7XG4gICAgICAgICAgbGFzdEVmZmVjdCA9IGNyZWF0ZSgpO1xuICAgICAgICAgIGluc3QuZGVzdHJveSA9IGxhc3RFZmZlY3Q7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlUXVldWUgPSB1cGRhdGVRdWV1ZS5uZXh0O1xuICAgICAgfSB3aGlsZSAodXBkYXRlUXVldWUgIT09IGZpcnN0RWZmZWN0KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudChcbiAgZmxhZ3MsXG4gIGZpbmlzaGVkV29yayxcbiAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciRqc2NvbXAkMFxuKSB7XG4gIHRyeSB7XG4gICAgdmFyIHVwZGF0ZVF1ZXVlID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlLFxuICAgICAgbGFzdEVmZmVjdCA9IG51bGwgIT09IHVwZGF0ZVF1ZXVlID8gdXBkYXRlUXVldWUubGFzdEVmZmVjdCA6IG51bGw7XG4gICAgaWYgKG51bGwgIT09IGxhc3RFZmZlY3QpIHtcbiAgICAgIHZhciBmaXJzdEVmZmVjdCA9IGxhc3RFZmZlY3QubmV4dDtcbiAgICAgIHVwZGF0ZVF1ZXVlID0gZmlyc3RFZmZlY3Q7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICgodXBkYXRlUXVldWUudGFnICYgZmxhZ3MpID09PSBmbGFncykge1xuICAgICAgICAgIHZhciBpbnN0ID0gdXBkYXRlUXVldWUuaW5zdCxcbiAgICAgICAgICAgIGRlc3Ryb3kgPSBpbnN0LmRlc3Ryb3k7XG4gICAgICAgICAgaWYgKHZvaWQgMCAhPT0gZGVzdHJveSkge1xuICAgICAgICAgICAgaW5zdC5kZXN0cm95ID0gdm9pZCAwO1xuICAgICAgICAgICAgbGFzdEVmZmVjdCA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgICAgIHZhciBuZWFyZXN0TW91bnRlZEFuY2VzdG9yID0gbmVhcmVzdE1vdW50ZWRBbmNlc3RvciRqc2NvbXAkMDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGRlc3Ryb3koKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKFxuICAgICAgICAgICAgICAgIGxhc3RFZmZlY3QsXG4gICAgICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICAgICAgICBlcnJvclxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVRdWV1ZSA9IHVwZGF0ZVF1ZXVlLm5leHQ7XG4gICAgICB9IHdoaWxlICh1cGRhdGVRdWV1ZSAhPT0gZmlyc3RFZmZlY3QpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgfVxufVxuZnVuY3Rpb24gY29tbWl0Q2xhc3NDYWxsYmFja3MoZmluaXNoZWRXb3JrKSB7XG4gIHZhciB1cGRhdGVRdWV1ZSA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZTtcbiAgaWYgKG51bGwgIT09IHVwZGF0ZVF1ZXVlKSB7XG4gICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICB0cnkge1xuICAgICAgY29tbWl0Q2FsbGJhY2tzKHVwZGF0ZVF1ZXVlLCBpbnN0YW5jZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50KFxuICBjdXJyZW50LFxuICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICBpbnN0YW5jZVxuKSB7XG4gIGluc3RhbmNlLnByb3BzID0gcmVzb2x2ZUNsYXNzQ29tcG9uZW50UHJvcHMoXG4gICAgY3VycmVudC50eXBlLFxuICAgIGN1cnJlbnQubWVtb2l6ZWRQcm9wc1xuICApO1xuICBpbnN0YW5jZS5zdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgdHJ5IHtcbiAgICBpbnN0YW5jZS5jb21wb25lbnRXaWxsVW5tb3VudCgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yKTtcbiAgfVxufVxuZnVuY3Rpb24gc2FmZWx5QXR0YWNoUmVmKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcmVmID0gY3VycmVudC5yZWY7XG4gICAgaWYgKG51bGwgIT09IHJlZikge1xuICAgICAgdmFyIGluc3RhbmNlID0gY3VycmVudC5zdGF0ZU5vZGU7XG4gICAgICBzd2l0Y2ggKGN1cnJlbnQudGFnKSB7XG4gICAgICAgIGNhc2UgMjY6XG4gICAgICAgIGNhc2UgMjc6XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICB2YXIgaW5zdGFuY2VUb1VzZSA9IGluc3RhbmNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGluc3RhbmNlVG9Vc2UgPSBpbnN0YW5jZTtcbiAgICAgIH1cbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZlxuICAgICAgICA/IChjdXJyZW50LnJlZkNsZWFudXAgPSByZWYoaW5zdGFuY2VUb1VzZSkpXG4gICAgICAgIDogKHJlZi5jdXJyZW50ID0gaW5zdGFuY2VUb1VzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yKTtcbiAgfVxufVxuZnVuY3Rpb24gc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpIHtcbiAgdmFyIHJlZiA9IGN1cnJlbnQucmVmLFxuICAgIHJlZkNsZWFudXAgPSBjdXJyZW50LnJlZkNsZWFudXA7XG4gIGlmIChudWxsICE9PSByZWYpXG4gICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJlZkNsZWFudXApXG4gICAgICB0cnkge1xuICAgICAgICByZWZDbGVhbnVwKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihjdXJyZW50LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBlcnJvcik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAoY3VycmVudC5yZWZDbGVhbnVwID0gbnVsbCksXG4gICAgICAgICAgKGN1cnJlbnQgPSBjdXJyZW50LmFsdGVybmF0ZSksXG4gICAgICAgICAgbnVsbCAhPSBjdXJyZW50ICYmIChjdXJyZW50LnJlZkNsZWFudXAgPSBudWxsKTtcbiAgICAgIH1cbiAgICBlbHNlIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZWYpXG4gICAgICB0cnkge1xuICAgICAgICByZWYobnVsbCk7XG4gICAgICB9IGNhdGNoIChlcnJvciQxMTIpIHtcbiAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IkMTEyKTtcbiAgICAgIH1cbiAgICBlbHNlIHJlZi5jdXJyZW50ID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGNvbW1pdEhvc3RNb3VudChmaW5pc2hlZFdvcmspIHtcbiAgdmFyIHR5cGUgPSBmaW5pc2hlZFdvcmsudHlwZSxcbiAgICBwcm9wcyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLFxuICAgIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgdHJ5IHtcbiAgICBhOiBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJidXR0b25cIjpcbiAgICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgIHByb3BzLmF1dG9Gb2N1cyAmJiBpbnN0YW5jZS5mb2N1cygpO1xuICAgICAgICBicmVhayBhO1xuICAgICAgY2FzZSBcImltZ1wiOlxuICAgICAgICBwcm9wcy5zcmNcbiAgICAgICAgICA/IChpbnN0YW5jZS5zcmMgPSBwcm9wcy5zcmMpXG4gICAgICAgICAgOiBwcm9wcy5zcmNTZXQgJiYgKGluc3RhbmNlLnNyY3NldCA9IHByb3BzLnNyY1NldCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRIb3N0VXBkYXRlKGZpbmlzaGVkV29yaywgbmV3UHJvcHMsIG9sZFByb3BzKSB7XG4gIHRyeSB7XG4gICAgdmFyIGRvbUVsZW1lbnQgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgIHVwZGF0ZVByb3BlcnRpZXMoZG9tRWxlbWVudCwgZmluaXNoZWRXb3JrLnR5cGUsIG9sZFByb3BzLCBuZXdQcm9wcyk7XG4gICAgZG9tRWxlbWVudFtpbnRlcm5hbFByb3BzS2V5XSA9IG5ld1Byb3BzO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICB9XG59XG5mdW5jdGlvbiBpc0hvc3RQYXJlbnQoZmliZXIpIHtcbiAgcmV0dXJuIChcbiAgICA1ID09PSBmaWJlci50YWcgfHxcbiAgICAzID09PSBmaWJlci50YWcgfHxcbiAgICAyNiA9PT0gZmliZXIudGFnIHx8XG4gICAgMjcgPT09IGZpYmVyLnRhZyB8fFxuICAgIDQgPT09IGZpYmVyLnRhZ1xuICApO1xufVxuZnVuY3Rpb24gZ2V0SG9zdFNpYmxpbmcoZmliZXIpIHtcbiAgYTogZm9yICg7Oykge1xuICAgIGZvciAoOyBudWxsID09PSBmaWJlci5zaWJsaW5nOyApIHtcbiAgICAgIGlmIChudWxsID09PSBmaWJlci5yZXR1cm4gfHwgaXNIb3N0UGFyZW50KGZpYmVyLnJldHVybikpIHJldHVybiBudWxsO1xuICAgICAgZmliZXIgPSBmaWJlci5yZXR1cm47XG4gICAgfVxuICAgIGZpYmVyLnNpYmxpbmcucmV0dXJuID0gZmliZXIucmV0dXJuO1xuICAgIGZvciAoXG4gICAgICBmaWJlciA9IGZpYmVyLnNpYmxpbmc7XG4gICAgICA1ICE9PSBmaWJlci50YWcgJiZcbiAgICAgIDYgIT09IGZpYmVyLnRhZyAmJlxuICAgICAgMjcgIT09IGZpYmVyLnRhZyAmJlxuICAgICAgMTggIT09IGZpYmVyLnRhZztcblxuICAgICkge1xuICAgICAgaWYgKGZpYmVyLmZsYWdzICYgMikgY29udGludWUgYTtcbiAgICAgIGlmIChudWxsID09PSBmaWJlci5jaGlsZCB8fCA0ID09PSBmaWJlci50YWcpIGNvbnRpbnVlIGE7XG4gICAgICBlbHNlIChmaWJlci5jaGlsZC5yZXR1cm4gPSBmaWJlciksIChmaWJlciA9IGZpYmVyLmNoaWxkKTtcbiAgICB9XG4gICAgaWYgKCEoZmliZXIuZmxhZ3MgJiAyKSkgcmV0dXJuIGZpYmVyLnN0YXRlTm9kZTtcbiAgfVxufVxuZnVuY3Rpb24gaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlSW50b0NvbnRhaW5lcihub2RlLCBiZWZvcmUsIHBhcmVudCkge1xuICB2YXIgdGFnID0gbm9kZS50YWc7XG4gIGlmICg1ID09PSB0YWcgfHwgNiA9PT0gdGFnKVxuICAgIChub2RlID0gbm9kZS5zdGF0ZU5vZGUpLFxuICAgICAgYmVmb3JlXG4gICAgICAgID8gOCA9PT0gcGFyZW50Lm5vZGVUeXBlXG4gICAgICAgICAgPyBwYXJlbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgYmVmb3JlKVxuICAgICAgICAgIDogcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBiZWZvcmUpXG4gICAgICAgIDogKDggPT09IHBhcmVudC5ub2RlVHlwZVxuICAgICAgICAgICAgPyAoKGJlZm9yZSA9IHBhcmVudC5wYXJlbnROb2RlKSwgYmVmb3JlLmluc2VydEJlZm9yZShub2RlLCBwYXJlbnQpKVxuICAgICAgICAgICAgOiAoKGJlZm9yZSA9IHBhcmVudCksIGJlZm9yZS5hcHBlbmRDaGlsZChub2RlKSksXG4gICAgICAgICAgKHBhcmVudCA9IHBhcmVudC5fcmVhY3RSb290Q29udGFpbmVyKSxcbiAgICAgICAgICAobnVsbCAhPT0gcGFyZW50ICYmIHZvaWQgMCAhPT0gcGFyZW50KSB8fFxuICAgICAgICAgICAgbnVsbCAhPT0gYmVmb3JlLm9uY2xpY2sgfHxcbiAgICAgICAgICAgIChiZWZvcmUub25jbGljayA9IG5vb3AkMSkpO1xuICBlbHNlIGlmICg0ICE9PSB0YWcgJiYgMjcgIT09IHRhZyAmJiAoKG5vZGUgPSBub2RlLmNoaWxkKSwgbnVsbCAhPT0gbm9kZSkpXG4gICAgZm9yIChcbiAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZUludG9Db250YWluZXIobm9kZSwgYmVmb3JlLCBwYXJlbnQpLFxuICAgICAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICAgICAgbnVsbCAhPT0gbm9kZTtcblxuICAgIClcbiAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZUludG9Db250YWluZXIobm9kZSwgYmVmb3JlLCBwYXJlbnQpLFxuICAgICAgICAobm9kZSA9IG5vZGUuc2libGluZyk7XG59XG5mdW5jdGlvbiBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGUobm9kZSwgYmVmb3JlLCBwYXJlbnQpIHtcbiAgdmFyIHRhZyA9IG5vZGUudGFnO1xuICBpZiAoNSA9PT0gdGFnIHx8IDYgPT09IHRhZylcbiAgICAobm9kZSA9IG5vZGUuc3RhdGVOb2RlKSxcbiAgICAgIGJlZm9yZSA/IHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgYmVmb3JlKSA6IHBhcmVudC5hcHBlbmRDaGlsZChub2RlKTtcbiAgZWxzZSBpZiAoNCAhPT0gdGFnICYmIDI3ICE9PSB0YWcgJiYgKChub2RlID0gbm9kZS5jaGlsZCksIG51bGwgIT09IG5vZGUpKVxuICAgIGZvciAoXG4gICAgICBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGUobm9kZSwgYmVmb3JlLCBwYXJlbnQpLCBub2RlID0gbm9kZS5zaWJsaW5nO1xuICAgICAgbnVsbCAhPT0gbm9kZTtcblxuICAgIClcbiAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShub2RlLCBiZWZvcmUsIHBhcmVudCksIChub2RlID0gbm9kZS5zaWJsaW5nKTtcbn1cbnZhciBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4gPSAhMSxcbiAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9ICExLFxuICBuZWVkc0Zvcm1SZXNldCA9ICExLFxuICBQb3NzaWJseVdlYWtTZXQgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBXZWFrU2V0ID8gV2Vha1NldCA6IFNldCxcbiAgbmV4dEVmZmVjdCA9IG51bGwsXG4gIHNob3VsZEZpcmVBZnRlckFjdGl2ZUluc3RhbmNlQmx1ciA9ICExO1xuZnVuY3Rpb24gY29tbWl0QmVmb3JlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpcnN0Q2hpbGQpIHtcbiAgcm9vdCA9IHJvb3QuY29udGFpbmVySW5mbztcbiAgZXZlbnRzRW5hYmxlZCA9IF9lbmFibGVkO1xuICByb290ID0gZ2V0QWN0aXZlRWxlbWVudERlZXAocm9vdCk7XG4gIGlmIChoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMocm9vdCkpIHtcbiAgICBpZiAoXCJzZWxlY3Rpb25TdGFydFwiIGluIHJvb3QpXG4gICAgICB2YXIgSlNDb21waWxlcl90ZW1wID0ge1xuICAgICAgICBzdGFydDogcm9vdC5zZWxlY3Rpb25TdGFydCxcbiAgICAgICAgZW5kOiByb290LnNlbGVjdGlvbkVuZFxuICAgICAgfTtcbiAgICBlbHNlXG4gICAgICBhOiB7XG4gICAgICAgIEpTQ29tcGlsZXJfdGVtcCA9XG4gICAgICAgICAgKChKU0NvbXBpbGVyX3RlbXAgPSByb290Lm93bmVyRG9jdW1lbnQpICYmXG4gICAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAuZGVmYXVsdFZpZXcpIHx8XG4gICAgICAgICAgd2luZG93O1xuICAgICAgICB2YXIgc2VsZWN0aW9uID1cbiAgICAgICAgICBKU0NvbXBpbGVyX3RlbXAuZ2V0U2VsZWN0aW9uICYmIEpTQ29tcGlsZXJfdGVtcC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgaWYgKHNlbGVjdGlvbiAmJiAwICE9PSBzZWxlY3Rpb24ucmFuZ2VDb3VudCkge1xuICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCA9IHNlbGVjdGlvbi5hbmNob3JOb2RlO1xuICAgICAgICAgIHZhciBhbmNob3JPZmZzZXQgPSBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LFxuICAgICAgICAgICAgZm9jdXNOb2RlID0gc2VsZWN0aW9uLmZvY3VzTm9kZTtcbiAgICAgICAgICBzZWxlY3Rpb24gPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcC5ub2RlVHlwZSwgZm9jdXNOb2RlLm5vZGVUeXBlO1xuICAgICAgICAgIH0gY2F0Y2ggKGUkMjApIHtcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCA9IG51bGw7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbGVuZ3RoID0gMCxcbiAgICAgICAgICAgIHN0YXJ0ID0gLTEsXG4gICAgICAgICAgICBlbmQgPSAtMSxcbiAgICAgICAgICAgIGluZGV4V2l0aGluQW5jaG9yID0gMCxcbiAgICAgICAgICAgIGluZGV4V2l0aGluRm9jdXMgPSAwLFxuICAgICAgICAgICAgbm9kZSA9IHJvb3QsXG4gICAgICAgICAgICBwYXJlbnROb2RlID0gbnVsbDtcbiAgICAgICAgICBiOiBmb3IgKDs7KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuZXh0OyA7ICkge1xuICAgICAgICAgICAgICBub2RlICE9PSBKU0NvbXBpbGVyX3RlbXAgfHxcbiAgICAgICAgICAgICAgICAoMCAhPT0gYW5jaG9yT2Zmc2V0ICYmIDMgIT09IG5vZGUubm9kZVR5cGUpIHx8XG4gICAgICAgICAgICAgICAgKHN0YXJ0ID0gbGVuZ3RoICsgYW5jaG9yT2Zmc2V0KTtcbiAgICAgICAgICAgICAgbm9kZSAhPT0gZm9jdXNOb2RlIHx8XG4gICAgICAgICAgICAgICAgKDAgIT09IHNlbGVjdGlvbiAmJiAzICE9PSBub2RlLm5vZGVUeXBlKSB8fFxuICAgICAgICAgICAgICAgIChlbmQgPSBsZW5ndGggKyBzZWxlY3Rpb24pO1xuICAgICAgICAgICAgICAzID09PSBub2RlLm5vZGVUeXBlICYmIChsZW5ndGggKz0gbm9kZS5ub2RlVmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICAgICAgaWYgKG51bGwgPT09IChuZXh0ID0gbm9kZS5maXJzdENoaWxkKSkgYnJlYWs7XG4gICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBub2RlO1xuICAgICAgICAgICAgICBub2RlID0gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgICAgaWYgKG5vZGUgPT09IHJvb3QpIGJyZWFrIGI7XG4gICAgICAgICAgICAgIHBhcmVudE5vZGUgPT09IEpTQ29tcGlsZXJfdGVtcCAmJlxuICAgICAgICAgICAgICAgICsraW5kZXhXaXRoaW5BbmNob3IgPT09IGFuY2hvck9mZnNldCAmJlxuICAgICAgICAgICAgICAgIChzdGFydCA9IGxlbmd0aCk7XG4gICAgICAgICAgICAgIHBhcmVudE5vZGUgPT09IGZvY3VzTm9kZSAmJlxuICAgICAgICAgICAgICAgICsraW5kZXhXaXRoaW5Gb2N1cyA9PT0gc2VsZWN0aW9uICYmXG4gICAgICAgICAgICAgICAgKGVuZCA9IGxlbmd0aCk7XG4gICAgICAgICAgICAgIGlmIChudWxsICE9PSAobmV4dCA9IG5vZGUubmV4dFNpYmxpbmcpKSBicmVhaztcbiAgICAgICAgICAgICAgbm9kZSA9IHBhcmVudE5vZGU7XG4gICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2RlID0gbmV4dDtcbiAgICAgICAgICB9XG4gICAgICAgICAgSlNDb21waWxlcl90ZW1wID1cbiAgICAgICAgICAgIC0xID09PSBzdGFydCB8fCAtMSA9PT0gZW5kID8gbnVsbCA6IHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9O1xuICAgICAgICB9IGVsc2UgSlNDb21waWxlcl90ZW1wID0gbnVsbDtcbiAgICAgIH1cbiAgICBKU0NvbXBpbGVyX3RlbXAgPSBKU0NvbXBpbGVyX3RlbXAgfHwgeyBzdGFydDogMCwgZW5kOiAwIH07XG4gIH0gZWxzZSBKU0NvbXBpbGVyX3RlbXAgPSBudWxsO1xuICBzZWxlY3Rpb25JbmZvcm1hdGlvbiA9IHsgZm9jdXNlZEVsZW06IHJvb3QsIHNlbGVjdGlvblJhbmdlOiBKU0NvbXBpbGVyX3RlbXAgfTtcbiAgX2VuYWJsZWQgPSAhMTtcbiAgZm9yIChuZXh0RWZmZWN0ID0gZmlyc3RDaGlsZDsgbnVsbCAhPT0gbmV4dEVmZmVjdDsgKVxuICAgIGlmIChcbiAgICAgICgoZmlyc3RDaGlsZCA9IG5leHRFZmZlY3QpLFxuICAgICAgKHJvb3QgPSBmaXJzdENoaWxkLmNoaWxkKSxcbiAgICAgIDAgIT09IChmaXJzdENoaWxkLnN1YnRyZWVGbGFncyAmIDEwMjgpICYmIG51bGwgIT09IHJvb3QpXG4gICAgKVxuICAgICAgKHJvb3QucmV0dXJuID0gZmlyc3RDaGlsZCksIChuZXh0RWZmZWN0ID0gcm9vdCk7XG4gICAgZWxzZVxuICAgICAgZm9yICg7IG51bGwgIT09IG5leHRFZmZlY3Q7ICkge1xuICAgICAgICBmaXJzdENoaWxkID0gbmV4dEVmZmVjdDtcbiAgICAgICAgZm9jdXNOb2RlID0gZmlyc3RDaGlsZC5hbHRlcm5hdGU7XG4gICAgICAgIHJvb3QgPSBmaXJzdENoaWxkLmZsYWdzO1xuICAgICAgICBzd2l0Y2ggKGZpcnN0Q2hpbGQudGFnKSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgaWYgKDAgIT09IChyb290ICYgMTAyNCkgJiYgbnVsbCAhPT0gZm9jdXNOb2RlKSB7XG4gICAgICAgICAgICAgIHJvb3QgPSB2b2lkIDA7XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcCA9IGZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICAgIGFuY2hvck9mZnNldCA9IGZvY3VzTm9kZS5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgICBmb2N1c05vZGUgPSBmb2N1c05vZGUubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICAgICAgc2VsZWN0aW9uID0gSlNDb21waWxlcl90ZW1wLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzb2x2ZWRQcmV2UHJvcHMgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhcbiAgICAgICAgICAgICAgICAgIEpTQ29tcGlsZXJfdGVtcC50eXBlLFxuICAgICAgICAgICAgICAgICAgYW5jaG9yT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLmVsZW1lbnRUeXBlID09PSBKU0NvbXBpbGVyX3RlbXAudHlwZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcm9vdCA9IHNlbGVjdGlvbi5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShcbiAgICAgICAgICAgICAgICAgIHJlc29sdmVkUHJldlByb3BzLFxuICAgICAgICAgICAgICAgICAgZm9jdXNOb2RlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24uX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUgPSByb290O1xuICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKFxuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLFxuICAgICAgICAgICAgICAgICAgSlNDb21waWxlcl90ZW1wLnJldHVybixcbiAgICAgICAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgaWYgKDAgIT09IChyb290ICYgMTAyNCkpXG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoKHJvb3QgPSBmaXJzdENoaWxkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxcbiAgICAgICAgICAgICAgICAoSlNDb21waWxlcl90ZW1wID0gcm9vdC5ub2RlVHlwZSksXG4gICAgICAgICAgICAgICAgOSA9PT0gSlNDb21waWxlcl90ZW1wKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgY2xlYXJDb250YWluZXJTcGFyaW5nbHkocm9vdCk7XG4gICAgICAgICAgICAgIGVsc2UgaWYgKDEgPT09IEpTQ29tcGlsZXJfdGVtcClcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHJvb3Qubm9kZU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJIRUFEXCI6XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiSFRNTFwiOlxuICAgICAgICAgICAgICAgICAgY2FzZSBcIkJPRFlcIjpcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJDb250YWluZXJTcGFyaW5nbHkocm9vdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcm9vdC50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIGNhc2UgMTc6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaWYgKDAgIT09IChyb290ICYgMTAyNCkpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTYzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcm9vdCA9IGZpcnN0Q2hpbGQuc2libGluZztcbiAgICAgICAgaWYgKG51bGwgIT09IHJvb3QpIHtcbiAgICAgICAgICByb290LnJldHVybiA9IGZpcnN0Q2hpbGQucmV0dXJuO1xuICAgICAgICAgIG5leHRFZmZlY3QgPSByb290O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5leHRFZmZlY3QgPSBmaXJzdENoaWxkLnJldHVybjtcbiAgICAgIH1cbiAgcmVzb2x2ZWRQcmV2UHJvcHMgPSBzaG91bGRGaXJlQWZ0ZXJBY3RpdmVJbnN0YW5jZUJsdXI7XG4gIHNob3VsZEZpcmVBZnRlckFjdGl2ZUluc3RhbmNlQmx1ciA9ICExO1xuICByZXR1cm4gcmVzb2x2ZWRQcmV2UHJvcHM7XG59XG5mdW5jdGlvbiBjb21taXRMYXlvdXRFZmZlY3RPbkZpYmVyKGZpbmlzaGVkUm9vdCwgY3VycmVudCwgZmluaXNoZWRXb3JrKSB7XG4gIHZhciBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTE6XG4gICAgY2FzZSAxNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNCAmJiBjb21taXRIb29rRWZmZWN0TGlzdE1vdW50KDUsIGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBpZiAoZmxhZ3MgJiA0KVxuICAgICAgICBpZiAoKChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlKSwgbnVsbCA9PT0gY3VycmVudCkpXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5jb21wb25lbnREaWRNb3VudCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2UHJvcHMgPSByZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyhcbiAgICAgICAgICAgIGZpbmlzaGVkV29yay50eXBlLFxuICAgICAgICAgICAgY3VycmVudC5tZW1vaXplZFByb3BzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmaW5pc2hlZFJvb3QuY29tcG9uZW50RGlkVXBkYXRlKFxuICAgICAgICAgICAgICBwcmV2UHJvcHMsXG4gICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvciQxMTEpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGZpbmlzaGVkV29yay5yZXR1cm4sXG4gICAgICAgICAgICAgIGVycm9yJDExMVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGZsYWdzICYgNjQgJiYgY29tbWl0Q2xhc3NDYWxsYmFja3MoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmIHNhZmVseUF0dGFjaFJlZihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgaWYgKGZsYWdzICYgNjQgJiYgKChmbGFncyA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSksIG51bGwgIT09IGZsYWdzKSkge1xuICAgICAgICBmaW5pc2hlZFJvb3QgPSBudWxsO1xuICAgICAgICBpZiAobnVsbCAhPT0gZmluaXNoZWRXb3JrLmNoaWxkKVxuICAgICAgICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLmNoaWxkLnRhZykge1xuICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290ID0gZmluaXNoZWRXb3JrLmNoaWxkLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkV29yay5jaGlsZC5zdGF0ZU5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbW1pdENhbGxiYWNrcyhmbGFncywgZmluaXNoZWRSb290KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNjpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmIHNhZmVseUF0dGFjaFJlZihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNzpcbiAgICBjYXNlIDU6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBudWxsID09PSBjdXJyZW50ICYmIGZsYWdzICYgNCAmJiBjb21taXRIb3N0TW91bnQoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmIHNhZmVseUF0dGFjaFJlZihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTM6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBmbGFncyAmIDQgJiYgY29tbWl0U3VzcGVuc2VIeWRyYXRpb25DYWxsYmFja3MoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMjpcbiAgICAgIHByZXZQcm9wcyA9XG4gICAgICAgIG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlIHx8IG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbjtcbiAgICAgIGlmICghcHJldlByb3BzKSB7XG4gICAgICAgIGN1cnJlbnQgPVxuICAgICAgICAgIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkgfHxcbiAgICAgICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgICB2YXIgcHJldk9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9IG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbixcbiAgICAgICAgICBwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW47XG4gICAgICAgIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9IHByZXZQcm9wcztcbiAgICAgICAgKG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBjdXJyZW50KSAmJiAhcHJldk9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW5cbiAgICAgICAgICA/IHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgICAwICE9PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDg3NzIpXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiByZWN1cnNpdmVseVRyYXZlcnNlTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9IHByZXZPZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW47XG4gICAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbjtcbiAgICAgIH1cbiAgICAgIGZsYWdzICYgNTEyICYmXG4gICAgICAgIChcIm1hbnVhbFwiID09PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcy5tb2RlXG4gICAgICAgICAgPyBzYWZlbHlBdHRhY2hSZWYoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKVxuICAgICAgICAgIDogc2FmZWx5RGV0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybikpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgfVxufVxuZnVuY3Rpb24gZGV0YWNoRmliZXJBZnRlckVmZmVjdHMoZmliZXIpIHtcbiAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcbiAgbnVsbCAhPT0gYWx0ZXJuYXRlICYmXG4gICAgKChmaWJlci5hbHRlcm5hdGUgPSBudWxsKSwgZGV0YWNoRmliZXJBZnRlckVmZmVjdHMoYWx0ZXJuYXRlKSk7XG4gIGZpYmVyLmNoaWxkID0gbnVsbDtcbiAgZmliZXIuZGVsZXRpb25zID0gbnVsbDtcbiAgZmliZXIuc2libGluZyA9IG51bGw7XG4gIDUgPT09IGZpYmVyLnRhZyAmJlxuICAgICgoYWx0ZXJuYXRlID0gZmliZXIuc3RhdGVOb2RlKSxcbiAgICBudWxsICE9PSBhbHRlcm5hdGUgJiYgZGV0YWNoRGVsZXRlZEluc3RhbmNlKGFsdGVybmF0ZSkpO1xuICBmaWJlci5zdGF0ZU5vZGUgPSBudWxsO1xuICBmaWJlci5yZXR1cm4gPSBudWxsO1xuICBmaWJlci5kZXBlbmRlbmNpZXMgPSBudWxsO1xuICBmaWJlci5tZW1vaXplZFByb3BzID0gbnVsbDtcbiAgZmliZXIubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIGZpYmVyLnBlbmRpbmdQcm9wcyA9IG51bGw7XG4gIGZpYmVyLnN0YXRlTm9kZSA9IG51bGw7XG4gIGZpYmVyLnVwZGF0ZVF1ZXVlID0gbnVsbDtcbn1cbnZhciBob3N0UGFyZW50ID0gbnVsbCxcbiAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gITE7XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICBmaW5pc2hlZFJvb3QsXG4gIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gIHBhcmVudFxuKSB7XG4gIGZvciAocGFyZW50ID0gcGFyZW50LmNoaWxkOyBudWxsICE9PSBwYXJlbnQ7IClcbiAgICBjb21taXREZWxldGlvbkVmZmVjdHNPbkZpYmVyKGZpbmlzaGVkUm9vdCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgcGFyZW50KSxcbiAgICAgIChwYXJlbnQgPSBwYXJlbnQuc2libGluZyk7XG59XG5mdW5jdGlvbiBjb21taXREZWxldGlvbkVmZmVjdHNPbkZpYmVyKFxuICBmaW5pc2hlZFJvb3QsXG4gIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gIGRlbGV0ZWRGaWJlclxuKSB7XG4gIGlmIChpbmplY3RlZEhvb2sgJiYgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaW5qZWN0ZWRIb29rLm9uQ29tbWl0RmliZXJVbm1vdW50KVxuICAgIHRyeSB7XG4gICAgICBpbmplY3RlZEhvb2sub25Db21taXRGaWJlclVubW91bnQocmVuZGVyZXJJRCwgZGVsZXRlZEZpYmVyKTtcbiAgICB9IGNhdGNoIChlcnIpIHt9XG4gIHN3aXRjaCAoZGVsZXRlZEZpYmVyLnRhZykge1xuICAgIGNhc2UgMjY6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIHNhZmVseURldGFjaFJlZihkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBkZWxldGVkRmliZXIubWVtb2l6ZWRTdGF0ZVxuICAgICAgICA/IGRlbGV0ZWRGaWJlci5tZW1vaXplZFN0YXRlLmNvdW50LS1cbiAgICAgICAgOiBkZWxldGVkRmliZXIuc3RhdGVOb2RlICYmXG4gICAgICAgICAgKChkZWxldGVkRmliZXIgPSBkZWxldGVkRmliZXIuc3RhdGVOb2RlKSxcbiAgICAgICAgICBkZWxldGVkRmliZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkZWxldGVkRmliZXIpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjc6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIHNhZmVseURldGFjaFJlZihkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgdmFyIHByZXZIb3N0UGFyZW50ID0gaG9zdFBhcmVudCxcbiAgICAgICAgcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IGhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGhvc3RQYXJlbnQgPSBkZWxldGVkRmliZXIuc3RhdGVOb2RlO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBkZWxldGVkRmliZXIgPSBkZWxldGVkRmliZXIuc3RhdGVOb2RlO1xuICAgICAgZm9yIChcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciA9IGRlbGV0ZWRGaWJlci5hdHRyaWJ1dGVzO1xuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLmxlbmd0aDtcblxuICAgICAgKVxuICAgICAgICBkZWxldGVkRmliZXIucmVtb3ZlQXR0cmlidXRlTm9kZShuZWFyZXN0TW91bnRlZEFuY2VzdG9yWzBdKTtcbiAgICAgIGRldGFjaERlbGV0ZWRJbnN0YW5jZShkZWxldGVkRmliZXIpO1xuICAgICAgaG9zdFBhcmVudCA9IHByZXZIb3N0UGFyZW50O1xuICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lcjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgY2FzZSA2OlxuICAgICAgcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IGhvc3RQYXJlbnQ7XG4gICAgICB2YXIgcHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lciQxMTkgPSBob3N0UGFyZW50SXNDb250YWluZXI7XG4gICAgICBob3N0UGFyZW50ID0gbnVsbDtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgaG9zdFBhcmVudCA9IHByZXZIb3N0UGFyZW50SXNDb250YWluZXI7XG4gICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSBwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyJDExOTtcbiAgICAgIGlmIChudWxsICE9PSBob3N0UGFyZW50KVxuICAgICAgICBpZiAoaG9zdFBhcmVudElzQ29udGFpbmVyKVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAoZmluaXNoZWRSb290ID0gaG9zdFBhcmVudCksXG4gICAgICAgICAgICAgIChwcmV2SG9zdFBhcmVudCA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUpLFxuICAgICAgICAgICAgICA4ID09PSBmaW5pc2hlZFJvb3Qubm9kZVR5cGVcbiAgICAgICAgICAgICAgICA/IGZpbmlzaGVkUm9vdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHByZXZIb3N0UGFyZW50KVxuICAgICAgICAgICAgICAgIDogZmluaXNoZWRSb290LnJlbW92ZUNoaWxkKHByZXZIb3N0UGFyZW50KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoXG4gICAgICAgICAgICAgIGRlbGV0ZWRGaWJlcixcbiAgICAgICAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGhvc3RQYXJlbnQucmVtb3ZlQ2hpbGQoZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKFxuICAgICAgICAgICAgICBkZWxldGVkRmliZXIsXG4gICAgICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgICAgIGVycm9yXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTg6XG4gICAgICBudWxsICE9PSBob3N0UGFyZW50ICYmXG4gICAgICAgIChob3N0UGFyZW50SXNDb250YWluZXJcbiAgICAgICAgICA/ICgobmVhcmVzdE1vdW50ZWRBbmNlc3RvciA9IGhvc3RQYXJlbnQpLFxuICAgICAgICAgICAgKGRlbGV0ZWRGaWJlciA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUpLFxuICAgICAgICAgICAgOCA9PT0gbmVhcmVzdE1vdW50ZWRBbmNlc3Rvci5ub2RlVHlwZVxuICAgICAgICAgICAgICA/IGNsZWFyU3VzcGVuc2VCb3VuZGFyeShcbiAgICAgICAgICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IucGFyZW50Tm9kZSxcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgOiAxID09PSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLm5vZGVUeXBlICYmXG4gICAgICAgICAgICAgICAgY2xlYXJTdXNwZW5zZUJvdW5kYXJ5KG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGRlbGV0ZWRGaWJlciksXG4gICAgICAgICAgICByZXRyeUlmQmxvY2tlZE9uKG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpKVxuICAgICAgICAgIDogY2xlYXJTdXNwZW5zZUJvdW5kYXJ5KGhvc3RQYXJlbnQsIGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHByZXZIb3N0UGFyZW50ID0gaG9zdFBhcmVudDtcbiAgICAgIHByZXZIb3N0UGFyZW50SXNDb250YWluZXIgPSBob3N0UGFyZW50SXNDb250YWluZXI7XG4gICAgICBob3N0UGFyZW50ID0gZGVsZXRlZEZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gITA7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgIGRlbGV0ZWRGaWJlclxuICAgICAgKTtcbiAgICAgIGhvc3RQYXJlbnQgPSBwcmV2SG9zdFBhcmVudDtcbiAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IHByZXZIb3N0UGFyZW50SXNDb250YWluZXI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE0OlxuICAgIGNhc2UgMTU6XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCgyLCBkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoNCwgZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICAoc2FmZWx5RGV0YWNoUmVmKGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciksXG4gICAgICAgIChwcmV2SG9zdFBhcmVudCA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUpLFxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBwcmV2SG9zdFBhcmVudC5jb21wb25lbnRXaWxsVW5tb3VudCAmJlxuICAgICAgICAgIHNhZmVseUNhbGxDb21wb25lbnRXaWxsVW5tb3VudChcbiAgICAgICAgICAgIGRlbGV0ZWRGaWJlcixcbiAgICAgICAgICAgIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsXG4gICAgICAgICAgICBwcmV2SG9zdFBhcmVudFxuICAgICAgICAgICkpO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIxOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICBkZWxldGVkRmliZXJcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPVxuICAgICAgICAocHJldkhvc3RQYXJlbnQgPSBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuKSB8fFxuICAgICAgICBudWxsICE9PSBkZWxldGVkRmliZXIubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IHByZXZIb3N0UGFyZW50O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoXG4gICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgbmVhcmVzdE1vdW50ZWRBbmNlc3RvcixcbiAgICAgICAgZGVsZXRlZEZpYmVyXG4gICAgICApO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRTdXNwZW5zZUh5ZHJhdGlvbkNhbGxiYWNrcyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yaykge1xuICBpZiAoXG4gICAgbnVsbCA9PT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgJiZcbiAgICAoKGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkV29yay5hbHRlcm5hdGUpLFxuICAgIG51bGwgIT09IGZpbmlzaGVkUm9vdCAmJlxuICAgICAgKChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFJvb3QubWVtb2l6ZWRTdGF0ZSksXG4gICAgICBudWxsICE9PSBmaW5pc2hlZFJvb3QgJiZcbiAgICAgICAgKChmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFJvb3QuZGVoeWRyYXRlZCksIG51bGwgIT09IGZpbmlzaGVkUm9vdCkpKVxuICApXG4gICAgdHJ5IHtcbiAgICAgIHJldHJ5SWZCbG9ja2VkT24oZmluaXNoZWRSb290KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0UmV0cnlDYWNoZShmaW5pc2hlZFdvcmspIHtcbiAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgY2FzZSAxMzpcbiAgICBjYXNlIDE5OlxuICAgICAgdmFyIHJldHJ5Q2FjaGUgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgbnVsbCA9PT0gcmV0cnlDYWNoZSAmJlxuICAgICAgICAocmV0cnlDYWNoZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUgPSBuZXcgUG9zc2libHlXZWFrU2V0KCkpO1xuICAgICAgcmV0dXJuIHJldHJ5Q2FjaGU7XG4gICAgY2FzZSAyMjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChmaW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlKSxcbiAgICAgICAgKHJldHJ5Q2FjaGUgPSBmaW5pc2hlZFdvcmsuX3JldHJ5Q2FjaGUpLFxuICAgICAgICBudWxsID09PSByZXRyeUNhY2hlICYmXG4gICAgICAgICAgKHJldHJ5Q2FjaGUgPSBmaW5pc2hlZFdvcmsuX3JldHJ5Q2FjaGUgPSBuZXcgUG9zc2libHlXZWFrU2V0KCkpLFxuICAgICAgICByZXRyeUNhY2hlXG4gICAgICApO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQzNSwgZmluaXNoZWRXb3JrLnRhZykpO1xuICB9XG59XG5mdW5jdGlvbiBhdHRhY2hTdXNwZW5zZVJldHJ5TGlzdGVuZXJzKGZpbmlzaGVkV29yaywgd2FrZWFibGVzKSB7XG4gIHZhciByZXRyeUNhY2hlID0gZ2V0UmV0cnlDYWNoZShmaW5pc2hlZFdvcmspO1xuICB3YWtlYWJsZXMuZm9yRWFjaChmdW5jdGlvbiAod2FrZWFibGUpIHtcbiAgICB2YXIgcmV0cnkgPSByZXNvbHZlUmV0cnlXYWtlYWJsZS5iaW5kKG51bGwsIGZpbmlzaGVkV29yaywgd2FrZWFibGUpO1xuICAgIHJldHJ5Q2FjaGUuaGFzKHdha2VhYmxlKSB8fFxuICAgICAgKHJldHJ5Q2FjaGUuYWRkKHdha2VhYmxlKSwgd2FrZWFibGUudGhlbihyZXRyeSwgcmV0cnkpKTtcbiAgfSk7XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QkanNjb21wJDAsIHBhcmVudEZpYmVyKSB7XG4gIHZhciBkZWxldGlvbnMgPSBwYXJlbnRGaWJlci5kZWxldGlvbnM7XG4gIGlmIChudWxsICE9PSBkZWxldGlvbnMpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWxldGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZFRvRGVsZXRlID0gZGVsZXRpb25zW2ldLFxuICAgICAgICByb290ID0gcm9vdCRqc2NvbXAkMCxcbiAgICAgICAgcmV0dXJuRmliZXIgPSBwYXJlbnRGaWJlcixcbiAgICAgICAgcGFyZW50ID0gcmV0dXJuRmliZXI7XG4gICAgICBhOiBmb3IgKDsgbnVsbCAhPT0gcGFyZW50OyApIHtcbiAgICAgICAgc3dpdGNoIChwYXJlbnQudGFnKSB7XG4gICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBob3N0UGFyZW50ID0gcGFyZW50LnN0YXRlTm9kZTtcbiAgICAgICAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICExO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBob3N0UGFyZW50ID0gcGFyZW50LnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICAgICAgICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gITA7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGhvc3RQYXJlbnQgPSBwYXJlbnQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICAgICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSAhMDtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChudWxsID09PSBob3N0UGFyZW50KSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MCkpO1xuICAgICAgY29tbWl0RGVsZXRpb25FZmZlY3RzT25GaWJlcihyb290LCByZXR1cm5GaWJlciwgY2hpbGRUb0RlbGV0ZSk7XG4gICAgICBob3N0UGFyZW50ID0gbnVsbDtcbiAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9ICExO1xuICAgICAgcm9vdCA9IGNoaWxkVG9EZWxldGUuYWx0ZXJuYXRlO1xuICAgICAgbnVsbCAhPT0gcm9vdCAmJiAocm9vdC5yZXR1cm4gPSBudWxsKTtcbiAgICAgIGNoaWxkVG9EZWxldGUucmV0dXJuID0gbnVsbDtcbiAgICB9XG4gIGlmIChwYXJlbnRGaWJlci5zdWJ0cmVlRmxhZ3MgJiAxMzg3OClcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApXG4gICAgICBjb21taXRNdXRhdGlvbkVmZmVjdHNPbkZpYmVyKHBhcmVudEZpYmVyLCByb290JGpzY29tcCQwKSxcbiAgICAgICAgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyk7XG59XG52YXIgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBudWxsO1xuZnVuY3Rpb24gY29tbWl0TXV0YXRpb25FZmZlY3RzT25GaWJlcihmaW5pc2hlZFdvcmssIHJvb3QpIHtcbiAgdmFyIGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLFxuICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE0OlxuICAgIGNhc2UgMTU6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAoY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDMsIGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiksXG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoMywgZmluaXNoZWRXb3JrKSxcbiAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KDUsIGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybikpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmbGFncyAmIDUxMiAmJlxuICAgICAgICAob2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fFxuICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgICBzYWZlbHlEZXRhY2hSZWYoY3VycmVudCwgY3VycmVudC5yZXR1cm4pKTtcbiAgICAgIGZsYWdzICYgNjQgJiZcbiAgICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuICYmXG4gICAgICAgICgoZmluaXNoZWRXb3JrID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrICYmXG4gICAgICAgICAgKChmbGFncyA9IGZpbmlzaGVkV29yay5jYWxsYmFja3MpLFxuICAgICAgICAgIG51bGwgIT09IGZsYWdzICYmXG4gICAgICAgICAgICAoKGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsuc2hhcmVkLmhpZGRlbkNhbGxiYWNrcyksXG4gICAgICAgICAgICAoZmluaXNoZWRXb3JrLnNoYXJlZC5oaWRkZW5DYWxsYmFja3MgPVxuICAgICAgICAgICAgICBudWxsID09PSBjdXJyZW50ID8gZmxhZ3MgOiBjdXJyZW50LmNvbmNhdChmbGFncykpKSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNjpcbiAgICAgIHZhciBob2lzdGFibGVSb290ID0gY3VycmVudEhvaXN0YWJsZVJvb3Q7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGZsYWdzICYgNTEyICYmXG4gICAgICAgIChvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIHx8XG4gICAgICAgICAgbnVsbCA9PT0gY3VycmVudCB8fFxuICAgICAgICAgIHNhZmVseURldGFjaFJlZihjdXJyZW50LCBjdXJyZW50LnJldHVybikpO1xuICAgICAgaWYgKGZsYWdzICYgNCkge1xuICAgICAgICB2YXIgY3VycmVudFJlc291cmNlID0gbnVsbCAhPT0gY3VycmVudCA/IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSA6IG51bGw7XG4gICAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGU7XG4gICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KVxuICAgICAgICAgIGlmIChudWxsID09PSBmbGFncylcbiAgICAgICAgICAgIGlmIChudWxsID09PSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlKSB7XG4gICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICBmbGFncyA9IGZpbmlzaGVkV29yay50eXBlO1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgICAgICBob2lzdGFibGVSb290ID0gaG9pc3RhYmxlUm9vdC5vd25lckRvY3VtZW50IHx8IGhvaXN0YWJsZVJvb3Q7XG4gICAgICAgICAgICAgICAgYjogc3dpdGNoIChmbGFncykge1xuICAgICAgICAgICAgICAgICAgY2FzZSBcInRpdGxlXCI6XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSA9XG4gICAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRpdGxlXCIpWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgIWN1cnJlbnRSZXNvdXJjZSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZVtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0gfHxcbiAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2VbaW50ZXJuYWxJbnN0YW5jZUtleV0gfHxcbiAgICAgICAgICAgICAgICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UubmFtZXNwYWNlVVJJIHx8XG4gICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmhhc0F0dHJpYnV0ZShcIml0ZW1wcm9wXCIpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAoY3VycmVudFJlc291cmNlID0gaG9pc3RhYmxlUm9vdC5jcmVhdGVFbGVtZW50KGZsYWdzKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBob2lzdGFibGVSb290LmhlYWQuaW5zZXJ0QmVmb3JlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QucXVlcnlTZWxlY3RvcihcImhlYWQgPiB0aXRsZVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoY3VycmVudFJlc291cmNlLCBmbGFncywgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgICAgICAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShjdXJyZW50UmVzb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICBmbGFncyA9IGN1cnJlbnRSZXNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXliZU5vZGVzID0gZ2V0SHlkcmF0YWJsZUhvaXN0YWJsZUNhY2hlKFxuICAgICAgICAgICAgICAgICAgICAgIFwibGlua1wiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiaHJlZlwiLFxuICAgICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3RcbiAgICAgICAgICAgICAgICAgICAgKS5nZXQoZmxhZ3MgKyAoY3VycmVudC5ocmVmIHx8IFwiXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1heWJlTm9kZXMpXG4gICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXliZU5vZGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoKGN1cnJlbnRSZXNvdXJjZSA9IG1heWJlTm9kZXNbaV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LmhyZWYgPyBudWxsIDogY3VycmVudC5ocmVmKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJyZWxcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LnJlbCA/IG51bGwgOiBjdXJyZW50LnJlbCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwidGl0bGVcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LnRpdGxlID8gbnVsbCA6IGN1cnJlbnQudGl0bGUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmdldEF0dHJpYnV0ZShcImNyb3Nzb3JpZ2luXCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG51bGwgPT0gY3VycmVudC5jcm9zc09yaWdpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjdXJyZW50LmNyb3NzT3JpZ2luKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtYXliZU5vZGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlID0gaG9pc3RhYmxlUm9vdC5jcmVhdGVFbGVtZW50KGZsYWdzKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoY3VycmVudFJlc291cmNlLCBmbGFncywgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QuaGVhZC5hcHBlbmRDaGlsZChjdXJyZW50UmVzb3VyY2UpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCJtZXRhXCI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAobWF5YmVOb2RlcyA9IGdldEh5ZHJhdGFibGVIb2lzdGFibGVDYWNoZShcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibWV0YVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjb250ZW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBob2lzdGFibGVSb290XG4gICAgICAgICAgICAgICAgICAgICAgKS5nZXQoZmxhZ3MgKyAoY3VycmVudC5jb250ZW50IHx8IFwiXCIpKSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtYXliZU5vZGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoKGN1cnJlbnRSZXNvdXJjZSA9IG1heWJlTm9kZXNbaV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LmNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIlwiICsgY3VycmVudC5jb250ZW50KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZS5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG51bGwgPT0gY3VycmVudC5uYW1lID8gbnVsbCA6IGN1cnJlbnQubmFtZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwicHJvcGVydHlcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50LnByb3BlcnR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGN1cnJlbnQucHJvcGVydHkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlc291cmNlLmdldEF0dHJpYnV0ZShcImh0dHAtZXF1aXZcIikgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobnVsbCA9PSBjdXJyZW50Lmh0dHBFcXVpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjdXJyZW50Lmh0dHBFcXVpdikgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UuZ2V0QXR0cmlidXRlKFwiY2hhcnNldFwiKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChudWxsID09IGN1cnJlbnQuY2hhclNldFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjdXJyZW50LmNoYXJTZXQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlTm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UgPSBob2lzdGFibGVSb290LmNyZWF0ZUVsZW1lbnQoZmxhZ3MpO1xuICAgICAgICAgICAgICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhjdXJyZW50UmVzb3VyY2UsIGZsYWdzLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5oZWFkLmFwcGVuZENoaWxkKGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NjgsIGZsYWdzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGZpbmlzaGVkV29yaztcbiAgICAgICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGN1cnJlbnRSZXNvdXJjZSk7XG4gICAgICAgICAgICAgICAgZmxhZ3MgPSBjdXJyZW50UmVzb3VyY2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnN0YXRlTm9kZSA9IGZsYWdzO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgIG1vdW50SG9pc3RhYmxlKFxuICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnR5cGUsXG4gICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnN0YXRlTm9kZVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGZpbmlzaGVkV29yay5zdGF0ZU5vZGUgPSBhY3F1aXJlUmVzb3VyY2UoXG4gICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgICAgIGZsYWdzLFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSAhPT0gZmxhZ3NcbiAgICAgICAgICAgID8gKG51bGwgPT09IGN1cnJlbnRSZXNvdXJjZVxuICAgICAgICAgICAgICAgID8gbnVsbCAhPT0gY3VycmVudC5zdGF0ZU5vZGUgJiZcbiAgICAgICAgICAgICAgICAgICgoY3VycmVudCA9IGN1cnJlbnQuc3RhdGVOb2RlKSxcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjdXJyZW50KSlcbiAgICAgICAgICAgICAgICA6IGN1cnJlbnRSZXNvdXJjZS5jb3VudC0tLFxuICAgICAgICAgICAgICBudWxsID09PSBmbGFnc1xuICAgICAgICAgICAgICAgID8gbW91bnRIb2lzdGFibGUoXG4gICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yay50eXBlLFxuICAgICAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiBhY3F1aXJlUmVzb3VyY2UoXG4gICAgICAgICAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLFxuICAgICAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wc1xuICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgIDogbnVsbCA9PT0gZmxhZ3MgJiZcbiAgICAgICAgICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSAmJlxuICAgICAgICAgICAgICBjb21taXRIb3N0VXBkYXRlKFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHNcbiAgICAgICAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjc6XG4gICAgICBpZiAoZmxhZ3MgJiA0ICYmIG51bGwgPT09IGZpbmlzaGVkV29yay5hbHRlcm5hdGUpIHtcbiAgICAgICAgaG9pc3RhYmxlUm9vdCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgIGN1cnJlbnRSZXNvdXJjZSA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGZvciAodmFyIG5vZGUgPSBob2lzdGFibGVSb290LmZpcnN0Q2hpbGQ7IG5vZGU7ICkge1xuICAgICAgICAgICAgdmFyIG5leHROb2RlID0gbm9kZS5uZXh0U2libGluZyxcbiAgICAgICAgICAgICAgbm9kZU5hbWUgPSBub2RlLm5vZGVOYW1lO1xuICAgICAgICAgICAgbm9kZVtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0gfHxcbiAgICAgICAgICAgICAgXCJIRUFEXCIgPT09IG5vZGVOYW1lIHx8XG4gICAgICAgICAgICAgIFwiQk9EWVwiID09PSBub2RlTmFtZSB8fFxuICAgICAgICAgICAgICBcIlNDUklQVFwiID09PSBub2RlTmFtZSB8fFxuICAgICAgICAgICAgICBcIlNUWUxFXCIgPT09IG5vZGVOYW1lIHx8XG4gICAgICAgICAgICAgIChcIkxJTktcIiA9PT0gbm9kZU5hbWUgJiZcbiAgICAgICAgICAgICAgICBcInN0eWxlc2hlZXRcIiA9PT0gbm9kZS5yZWwudG9Mb3dlckNhc2UoKSkgfHxcbiAgICAgICAgICAgICAgaG9pc3RhYmxlUm9vdC5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgICAgICAgIG5vZGUgPSBuZXh0Tm9kZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIHZhciB0eXBlID0gZmluaXNoZWRXb3JrLnR5cGUsIGF0dHJpYnV0ZXMgPSBob2lzdGFibGVSb290LmF0dHJpYnV0ZXM7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzLmxlbmd0aDtcblxuICAgICAgICAgIClcbiAgICAgICAgICAgIGhvaXN0YWJsZVJvb3QucmVtb3ZlQXR0cmlidXRlTm9kZShhdHRyaWJ1dGVzWzBdKTtcbiAgICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhob2lzdGFibGVSb290LCB0eXBlLCBjdXJyZW50UmVzb3VyY2UpO1xuICAgICAgICAgIGhvaXN0YWJsZVJvb3RbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSBmaW5pc2hlZFdvcms7XG4gICAgICAgICAgaG9pc3RhYmxlUm9vdFtpbnRlcm5hbFByb3BzS2V5XSA9IGN1cnJlbnRSZXNvdXJjZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGNhc2UgNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmxhZ3MgJiA1MTIgJiZcbiAgICAgICAgKG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgICBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQsIGN1cnJlbnQucmV0dXJuKSk7XG4gICAgICBpZiAoZmluaXNoZWRXb3JrLmZsYWdzICYgMzIpIHtcbiAgICAgICAgaG9pc3RhYmxlUm9vdCA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoaG9pc3RhYmxlUm9vdCwgXCJcIik7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICBudWxsICE9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUgJiZcbiAgICAgICAgKChob2lzdGFibGVSb290ID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMpLFxuICAgICAgICBjb21taXRIb3N0VXBkYXRlKFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBob2lzdGFibGVSb290LFxuICAgICAgICAgIG51bGwgIT09IGN1cnJlbnQgPyBjdXJyZW50Lm1lbW9pemVkUHJvcHMgOiBob2lzdGFibGVSb290XG4gICAgICAgICkpO1xuICAgICAgZmxhZ3MgJiAxMDI0ICYmIChuZWVkc0Zvcm1SZXNldCA9ICEwKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNjpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgaWYgKGZsYWdzICYgNCkge1xuICAgICAgICBpZiAobnVsbCA9PT0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZSlcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2MikpO1xuICAgICAgICBmbGFncyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICBjdXJyZW50ID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjdXJyZW50Lm5vZGVWYWx1ZSA9IGZsYWdzO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICB0YWdDYWNoZXMgPSBudWxsO1xuICAgICAgaG9pc3RhYmxlUm9vdCA9IGN1cnJlbnRIb2lzdGFibGVSb290O1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBnZXRIb2lzdGFibGVSb290KHJvb3QuY29udGFpbmVySW5mbyk7XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IGhvaXN0YWJsZVJvb3Q7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGlmIChmbGFncyAmIDQgJiYgbnVsbCAhPT0gY3VycmVudCAmJiBjdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHJ5SWZCbG9ja2VkT24ocm9vdC5jb250YWluZXJJbmZvKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgbmVlZHNGb3JtUmVzZXQgJiZcbiAgICAgICAgKChuZWVkc0Zvcm1SZXNldCA9ICExKSwgcmVjdXJzaXZlbHlSZXNldEZvcm1zKGZpbmlzaGVkV29yaykpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgZmxhZ3MgPSBjdXJyZW50SG9pc3RhYmxlUm9vdDtcbiAgICAgIGN1cnJlbnRIb2lzdGFibGVSb290ID0gZ2V0SG9pc3RhYmxlUm9vdChcbiAgICAgICAgZmluaXNoZWRXb3JrLnN0YXRlTm9kZS5jb250YWluZXJJbmZvXG4gICAgICApO1xuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBjdXJyZW50SG9pc3RhYmxlUm9vdCA9IGZsYWdzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmluaXNoZWRXb3JrLmNoaWxkLmZsYWdzICYgODE5MiAmJlxuICAgICAgICAobnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUpICE9PVxuICAgICAgICAgIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkgJiZcbiAgICAgICAgKGdsb2JhbE1vc3RSZWNlbnRGYWxsYmFja1RpbWUgPSBub3coKSk7XG4gICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgKChmbGFncyA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSksXG4gICAgICAgIG51bGwgIT09IGZsYWdzICYmXG4gICAgICAgICAgKChmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUgPSBudWxsKSxcbiAgICAgICAgICBhdHRhY2hTdXNwZW5zZVJldHJ5TGlzdGVuZXJzKGZpbmlzaGVkV29yaywgZmxhZ3MpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgZmxhZ3MgJiA1MTIgJiZcbiAgICAgICAgKG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHxcbiAgICAgICAgICBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQsIGN1cnJlbnQucmV0dXJuKSk7XG4gICAgICBub2RlID0gbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGU7XG4gICAgICBuZXh0Tm9kZSA9IG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICAgICAgbm9kZU5hbWUgPSBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW47XG4gICAgICB0eXBlID0gb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbjtcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9IG5vZGVOYW1lIHx8IG5vZGU7XG4gICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gdHlwZSB8fCBuZXh0Tm9kZTtcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSB0eXBlO1xuICAgICAgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gbm9kZU5hbWU7XG4gICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIHJvb3QgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgcm9vdC5fY3VycmVudCA9IGZpbmlzaGVkV29yaztcbiAgICAgIHJvb3QuX3Zpc2liaWxpdHkgJj0gLTM7XG4gICAgICByb290Ll92aXNpYmlsaXR5IHw9IHJvb3QuX3BlbmRpbmdWaXNpYmlsaXR5ICYgMjtcbiAgICAgIGlmIChcbiAgICAgICAgZmxhZ3MgJiA4MTkyICYmXG4gICAgICAgICgocm9vdC5fdmlzaWJpbGl0eSA9IG5vZGVcbiAgICAgICAgICA/IHJvb3QuX3Zpc2liaWxpdHkgJiAtMlxuICAgICAgICAgIDogcm9vdC5fdmlzaWJpbGl0eSB8IDEpLFxuICAgICAgICBub2RlICYmXG4gICAgICAgICAgKChyb290ID0gb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuIHx8IG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4pLFxuICAgICAgICAgIG51bGwgPT09IGN1cnJlbnQgfHxcbiAgICAgICAgICAgIG5leHROb2RlIHx8XG4gICAgICAgICAgICByb290IHx8XG4gICAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspKSxcbiAgICAgICAgbnVsbCA9PT0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMgfHxcbiAgICAgICAgICBcIm1hbnVhbFwiICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcy5tb2RlKVxuICAgICAgKVxuICAgICAgICBhOiBmb3IgKGN1cnJlbnQgPSBudWxsLCByb290ID0gZmluaXNoZWRXb3JrOyA7ICkge1xuICAgICAgICAgIGlmICg1ID09PSByb290LnRhZyB8fCAyNiA9PT0gcm9vdC50YWcgfHwgMjcgPT09IHJvb3QudGFnKSB7XG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgICBuZXh0Tm9kZSA9IGN1cnJlbnQgPSByb290O1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICgoKGhvaXN0YWJsZVJvb3QgPSBuZXh0Tm9kZS5zdGF0ZU5vZGUpLCBub2RlKSlcbiAgICAgICAgICAgICAgICAgIChjdXJyZW50UmVzb3VyY2UgPSBob2lzdGFibGVSb290LnN0eWxlKSxcbiAgICAgICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY3VycmVudFJlc291cmNlLnNldFByb3BlcnR5XG4gICAgICAgICAgICAgICAgICAgICAgPyBjdXJyZW50UmVzb3VyY2Uuc2V0UHJvcGVydHkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGlzcGxheVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5vbmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbXBvcnRhbnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIDogKGN1cnJlbnRSZXNvdXJjZS5kaXNwbGF5ID0gXCJub25lXCIpO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgbWF5YmVOb2RlcyA9IG5leHROb2RlLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgICAgIGkgPSBuZXh0Tm9kZS5tZW1vaXplZFByb3BzLnN0eWxlO1xuICAgICAgICAgICAgICAgICAgdmFyIGRpc3BsYXkgPVxuICAgICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IGkgJiYgbnVsbCAhPT0gaSAmJiBpLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKVxuICAgICAgICAgICAgICAgICAgICAgID8gaS5kaXNwbGF5XG4gICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgbWF5YmVOb2Rlcy5zdHlsZS5kaXNwbGF5ID1cbiAgICAgICAgICAgICAgICAgICAgbnVsbCA9PSBkaXNwbGF5IHx8IFwiYm9vbGVhblwiID09PSB0eXBlb2YgZGlzcGxheVxuICAgICAgICAgICAgICAgICAgICAgID8gXCJcIlxuICAgICAgICAgICAgICAgICAgICAgIDogKFwiXCIgKyBkaXNwbGF5KS50cmltKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKG5leHROb2RlLCBuZXh0Tm9kZS5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoNiA9PT0gcm9vdC50YWcpIHtcbiAgICAgICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICAgIG5leHROb2RlID0gcm9vdDtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBuZXh0Tm9kZS5zdGF0ZU5vZGUubm9kZVZhbHVlID0gbm9kZVxuICAgICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgICA6IG5leHROb2RlLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IobmV4dE5vZGUsIG5leHROb2RlLnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICgoMjIgIT09IHJvb3QudGFnICYmIDIzICE9PSByb290LnRhZykgfHxcbiAgICAgICAgICAgICAgbnVsbCA9PT0gcm9vdC5tZW1vaXplZFN0YXRlIHx8XG4gICAgICAgICAgICAgIHJvb3QgPT09IGZpbmlzaGVkV29yaykgJiZcbiAgICAgICAgICAgIG51bGwgIT09IHJvb3QuY2hpbGRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJvb3QuY2hpbGQucmV0dXJuID0gcm9vdDtcbiAgICAgICAgICAgIHJvb3QgPSByb290LmNoaWxkO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyb290ID09PSBmaW5pc2hlZFdvcmspIGJyZWFrIGE7XG4gICAgICAgICAgZm9yICg7IG51bGwgPT09IHJvb3Quc2libGluZzsgKSB7XG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gcm9vdC5yZXR1cm4gfHwgcm9vdC5yZXR1cm4gPT09IGZpbmlzaGVkV29yaykgYnJlYWsgYTtcbiAgICAgICAgICAgIGN1cnJlbnQgPT09IHJvb3QgJiYgKGN1cnJlbnQgPSBudWxsKTtcbiAgICAgICAgICAgIHJvb3QgPSByb290LnJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudCA9PT0gcm9vdCAmJiAoY3VycmVudCA9IG51bGwpO1xuICAgICAgICAgIHJvb3Quc2libGluZy5yZXR1cm4gPSByb290LnJldHVybjtcbiAgICAgICAgICByb290ID0gcm9vdC5zaWJsaW5nO1xuICAgICAgICB9XG4gICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgKChmbGFncyA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSksXG4gICAgICAgIG51bGwgIT09IGZsYWdzICYmXG4gICAgICAgICAgKChjdXJyZW50ID0gZmxhZ3MucmV0cnlRdWV1ZSksXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJlxuICAgICAgICAgICAgKChmbGFncy5yZXRyeVF1ZXVlID0gbnVsbCksXG4gICAgICAgICAgICBhdHRhY2hTdXNwZW5zZVJldHJ5TGlzdGVuZXJzKGZpbmlzaGVkV29yaywgY3VycmVudCkpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE5OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBmbGFncyAmIDQgJiZcbiAgICAgICAgKChmbGFncyA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSksXG4gICAgICAgIG51bGwgIT09IGZsYWdzICYmXG4gICAgICAgICAgKChmaW5pc2hlZFdvcmsudXBkYXRlUXVldWUgPSBudWxsKSxcbiAgICAgICAgICBhdHRhY2hTdXNwZW5zZVJldHJ5TGlzdGVuZXJzKGZpbmlzaGVkV29yaywgZmxhZ3MpKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIxOlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKSxcbiAgICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspIHtcbiAgdmFyIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICBpZiAoZmxhZ3MgJiAyKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICgyNyAhPT0gZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgICBhOiB7XG4gICAgICAgICAgZm9yICh2YXIgcGFyZW50ID0gZmluaXNoZWRXb3JrLnJldHVybjsgbnVsbCAhPT0gcGFyZW50OyApIHtcbiAgICAgICAgICAgIGlmIChpc0hvc3RQYXJlbnQocGFyZW50KSkge1xuICAgICAgICAgICAgICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gcGFyZW50O1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjApKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC50YWcpIHtcbiAgICAgICAgICBjYXNlIDI3OlxuICAgICAgICAgICAgdmFyIHBhcmVudCRqc2NvbXAkMCA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5zdGF0ZU5vZGUsXG4gICAgICAgICAgICAgIGJlZm9yZSA9IGdldEhvc3RTaWJsaW5nKGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgICBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGUoZmluaXNoZWRXb3JrLCBiZWZvcmUsIHBhcmVudCRqc2NvbXAkMCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICB2YXIgcGFyZW50JDExMyA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5zdGF0ZU5vZGU7XG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQuZmxhZ3MgJiAzMiAmJlxuICAgICAgICAgICAgICAoc2V0VGV4dENvbnRlbnQocGFyZW50JDExMywgXCJcIiksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQuZmxhZ3MgJj0gLTMzKSk7XG4gICAgICAgICAgICB2YXIgYmVmb3JlJDExNCA9IGdldEhvc3RTaWJsaW5nKGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgICBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGUoZmluaXNoZWRXb3JrLCBiZWZvcmUkMTE0LCBwYXJlbnQkMTEzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICB2YXIgcGFyZW50JDExNSA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxcbiAgICAgICAgICAgICAgYmVmb3JlJDExNiA9IGdldEhvc3RTaWJsaW5nKGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgICBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGVJbnRvQ29udGFpbmVyKFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGJlZm9yZSQxMTYsXG4gICAgICAgICAgICAgIHBhcmVudCQxMTVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjEpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICB9XG4gICAgZmluaXNoZWRXb3JrLmZsYWdzICY9IC0zO1xuICB9XG4gIGZsYWdzICYgNDA5NiAmJiAoZmluaXNoZWRXb3JrLmZsYWdzICY9IC00MDk3KTtcbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5UmVzZXRGb3JtcyhwYXJlbnRGaWJlcikge1xuICBpZiAocGFyZW50RmliZXIuc3VidHJlZUZsYWdzICYgMTAyNClcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICAgIHZhciBmaWJlciA9IHBhcmVudEZpYmVyO1xuICAgICAgcmVjdXJzaXZlbHlSZXNldEZvcm1zKGZpYmVyKTtcbiAgICAgIDUgPT09IGZpYmVyLnRhZyAmJiBmaWJlci5mbGFncyAmIDEwMjQgJiYgZmliZXIuc3RhdGVOb2RlLnJlc2V0KCk7XG4gICAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZUxheW91dEVmZmVjdHMocm9vdCwgcGFyZW50RmliZXIpIHtcbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDg3NzIpXG4gICAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKVxuICAgICAgY29tbWl0TGF5b3V0RWZmZWN0T25GaWJlcihyb290LCBwYXJlbnRGaWJlci5hbHRlcm5hdGUsIHBhcmVudEZpYmVyKSxcbiAgICAgICAgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZyk7XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhwYXJlbnRGaWJlcikge1xuICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICB2YXIgZmluaXNoZWRXb3JrID0gcGFyZW50RmliZXI7XG4gICAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDExOlxuICAgICAgY2FzZSAxNDpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg0LCBmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxVbm1vdW50ICYmXG4gICAgICAgICAgc2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50KFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgZmluaXNoZWRXb3JrLnJldHVybixcbiAgICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgICAgKTtcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2FwcGVhckxheW91dEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI2OlxuICAgICAgY2FzZSAyNzpcbiAgICAgIGNhc2UgNTpcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNhcHBlYXJMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyMjpcbiAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIG51bGwgPT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2FwcGVhckxheW91dEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzYXBwZWFyTGF5b3V0RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgIH1cbiAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gIGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgcGFyZW50RmliZXIsXG4gIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbikge1xuICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzID1cbiAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzICYmIDAgIT09IChwYXJlbnRGaWJlci5zdWJ0cmVlRmxhZ3MgJiA4NzcyKTtcbiAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBwYXJlbnRGaWJlci5hbHRlcm5hdGUsXG4gICAgICBmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFJvb3QkanNjb21wJDAsXG4gICAgICBmaW5pc2hlZFdvcmsgPSBwYXJlbnRGaWJlcixcbiAgICAgIGZsYWdzID0gZmluaXNoZWRXb3JrLmZsYWdzO1xuICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxMTpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoNCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGN1cnJlbnQgPSBmaW5pc2hlZFdvcms7XG4gICAgICAgIGZpbmlzaGVkUm9vdCA9IGN1cnJlbnQuc3RhdGVOb2RlO1xuICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZmluaXNoZWRSb290LmNvbXBvbmVudERpZE1vdW50KVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmaW5pc2hlZFJvb3QuY29tcG9uZW50RGlkTW91bnQoKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgY3VycmVudC5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBmaW5pc2hlZFdvcms7XG4gICAgICAgIGZpbmlzaGVkUm9vdCA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG4gICAgICAgIGlmIChudWxsICE9PSBmaW5pc2hlZFJvb3QpIHtcbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBjdXJyZW50LnN0YXRlTm9kZTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGhpZGRlbkNhbGxiYWNrcyA9IGZpbmlzaGVkUm9vdC5zaGFyZWQuaGlkZGVuQ2FsbGJhY2tzO1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IGhpZGRlbkNhbGxiYWNrcylcbiAgICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFJvb3Quc2hhcmVkLmhpZGRlbkNhbGxiYWNrcyA9IG51bGwsIGZpbmlzaGVkUm9vdCA9IDA7XG4gICAgICAgICAgICAgICAgZmluaXNoZWRSb290IDwgaGlkZGVuQ2FsbGJhY2tzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QrK1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgY2FsbENhbGxiYWNrKGhpZGRlbkNhbGxiYWNrc1tmaW5pc2hlZFJvb3RdLCBpbnN0YW5jZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQsIGN1cnJlbnQucmV0dXJuLCBlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiZcbiAgICAgICAgICBmbGFncyAmIDY0ICYmXG4gICAgICAgICAgY29tbWl0Q2xhc3NDYWxsYmFja3MoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyNjpcbiAgICAgIGNhc2UgMjc6XG4gICAgICBjYXNlIDU6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiZcbiAgICAgICAgICBudWxsID09PSBjdXJyZW50ICYmXG4gICAgICAgICAgZmxhZ3MgJiA0ICYmXG4gICAgICAgICAgY29tbWl0SG9zdE1vdW50KGZpbmlzaGVkV29yayk7XG4gICAgICAgIHNhZmVseUF0dGFjaFJlZihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTI6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxMzpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJlxuICAgICAgICAgIGZsYWdzICYgNCAmJlxuICAgICAgICAgIGNvbW1pdFN1c3BlbnNlSHlkcmF0aW9uQ2FsbGJhY2tzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIyOlxuICAgICAgICBudWxsID09PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMoXG4gICAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICAgKTtcbiAgICAgICAgc2FmZWx5QXR0YWNoUmVmKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlYXBwZWFyTGF5b3V0RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICB9XG4gICAgcGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRPZmZzY3JlZW5QYXNzaXZlTW91bnRFZmZlY3RzKGN1cnJlbnQsIGZpbmlzaGVkV29yaykge1xuICB2YXIgcHJldmlvdXNDYWNoZSA9IG51bGw7XG4gIG51bGwgIT09IGN1cnJlbnQgJiZcbiAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGVQb29sICYmXG4gICAgKHByZXZpb3VzQ2FjaGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuY2FjaGVQb29sLnBvb2wpO1xuICBjdXJyZW50ID0gbnVsbDtcbiAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUgJiZcbiAgICBudWxsICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAoY3VycmVudCA9IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKTtcbiAgY3VycmVudCAhPT0gcHJldmlvdXNDYWNoZSAmJlxuICAgIChudWxsICE9IGN1cnJlbnQgJiYgY3VycmVudC5yZWZDb3VudCsrLFxuICAgIG51bGwgIT0gcHJldmlvdXNDYWNoZSAmJiByZWxlYXNlQ2FjaGUocHJldmlvdXNDYWNoZSkpO1xufVxuZnVuY3Rpb24gY29tbWl0Q2FjaGVQYXNzaXZlTW91bnRFZmZlY3QoY3VycmVudCwgZmluaXNoZWRXb3JrKSB7XG4gIGN1cnJlbnQgPSBudWxsO1xuICBudWxsICE9PSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlICYmXG4gICAgKGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUuY2FjaGUpO1xuICBmaW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZS5jYWNoZTtcbiAgZmluaXNoZWRXb3JrICE9PSBjdXJyZW50ICYmXG4gICAgKGZpbmlzaGVkV29yay5yZWZDb3VudCsrLCBudWxsICE9IGN1cnJlbnQgJiYgcmVsZWFzZUNhY2hlKGN1cnJlbnQpKTtcbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICByb290LFxuICBwYXJlbnRGaWJlcixcbiAgY29tbWl0dGVkTGFuZXMsXG4gIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4pIHtcbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEwMjU2KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7IClcbiAgICAgIGNvbW1pdFBhc3NpdmVNb3VudE9uRmliZXIoXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHBhcmVudEZpYmVyLFxuICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICksXG4gICAgICAgIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmcpO1xufVxuZnVuY3Rpb24gY29tbWl0UGFzc2l2ZU1vdW50T25GaWJlcihcbiAgZmluaXNoZWRSb290LFxuICBmaW5pc2hlZFdvcmssXG4gIGNvbW1pdHRlZExhbmVzLFxuICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuKSB7XG4gIHZhciBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTE6XG4gICAgY2FzZSAxNTpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICApO1xuICAgICAgZmxhZ3MgJiAyMDQ4ICYmIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoOSwgZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICApO1xuICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgICgoZmluaXNoZWRSb290ID0gbnVsbCksXG4gICAgICAgIG51bGwgIT09IGZpbmlzaGVkV29yay5hbHRlcm5hdGUgJiZcbiAgICAgICAgICAoZmluaXNoZWRSb290ID0gZmluaXNoZWRXb3JrLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlLmNhY2hlKSxcbiAgICAgICAgKGZpbmlzaGVkV29yayA9IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlLmNhY2hlKSxcbiAgICAgICAgZmluaXNoZWRXb3JrICE9PSBmaW5pc2hlZFJvb3QgJiZcbiAgICAgICAgICAoZmluaXNoZWRXb3JrLnJlZkNvdW50KyssXG4gICAgICAgICAgbnVsbCAhPSBmaW5pc2hlZFJvb3QgJiYgcmVsZWFzZUNhY2hlKGZpbmlzaGVkUm9vdCkpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTI6XG4gICAgICBpZiAoZmxhZ3MgJiAyMDQ4KSB7XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICAgKTtcbiAgICAgICAgZmluaXNoZWRSb290ID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgX2ZpbmlzaGVkV29yayRtZW1vaXplMiA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzLFxuICAgICAgICAgICAgaWQgPSBfZmluaXNoZWRXb3JrJG1lbW9pemUyLmlkLFxuICAgICAgICAgICAgb25Qb3N0Q29tbWl0ID0gX2ZpbmlzaGVkV29yayRtZW1vaXplMi5vblBvc3RDb21taXQ7XG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygb25Qb3N0Q29tbWl0ICYmXG4gICAgICAgICAgICBvblBvc3RDb21taXQoXG4gICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICBudWxsID09PSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlID8gXCJtb3VudFwiIDogXCJ1cGRhdGVcIixcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LnBhc3NpdmVFZmZlY3REdXJhdGlvbixcbiAgICAgICAgICAgICAgLTBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZVxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIzOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMjpcbiAgICAgIF9maW5pc2hlZFdvcmskbWVtb2l6ZTIgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgbnVsbCAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGVcbiAgICAgICAgPyBfZmluaXNoZWRXb3JrJG1lbW9pemUyLl92aXNpYmlsaXR5ICYgNFxuICAgICAgICAgID8gcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IHJlY3Vyc2l2ZWx5VHJhdmVyc2VBdG9taWNQYXNzaXZlRWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yaylcbiAgICAgICAgOiBfZmluaXNoZWRXb3JrJG1lbW9pemUyLl92aXNpYmlsaXR5ICYgNFxuICAgICAgICAgID8gcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnNcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6ICgoX2ZpbmlzaGVkV29yayRtZW1vaXplMi5fdmlzaWJpbGl0eSB8PSA0KSxcbiAgICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICAgICAgMCAhPT0gKGZpbmlzaGVkV29yay5zdWJ0cmVlRmxhZ3MgJiAxMDI1NilcbiAgICAgICAgICAgICkpO1xuICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgIGNvbW1pdE9mZnNjcmVlblBhc3NpdmVNb3VudEVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRXb3JrLmFsdGVybmF0ZSxcbiAgICAgICAgICBmaW5pc2hlZFdvcmtcbiAgICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjQ6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9uc1xuICAgICAgKTtcbiAgICAgIGZsYWdzICYgMjA0OCAmJlxuICAgICAgICBjb21taXRDYWNoZVBhc3NpdmVNb3VudEVmZmVjdChmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLCBmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zXG4gICAgICApO1xuICB9XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gIGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgcGFyZW50RmliZXIsXG4gIGNvbW1pdHRlZExhbmVzJGpzY29tcCQwLFxuICBjb21taXR0ZWRUcmFuc2l0aW9ucyRqc2NvbXAkMCxcbiAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuKSB7XG4gIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgPVxuICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHMgJiYgMCAhPT0gKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEwMjU2KTtcbiAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKSB7XG4gICAgdmFyIGZpbmlzaGVkUm9vdCA9IGZpbmlzaGVkUm9vdCRqc2NvbXAkMCxcbiAgICAgIGZpbmlzaGVkV29yayA9IHBhcmVudEZpYmVyLFxuICAgICAgY29tbWl0dGVkTGFuZXMgPSBjb21taXR0ZWRMYW5lcyRqc2NvbXAkMCxcbiAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zID0gY29tbWl0dGVkVHJhbnNpdGlvbnMkanNjb21wJDAsXG4gICAgICBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTE6XG4gICAgICBjYXNlIDE1OlxuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gICAgICAgICAgZmluaXNoZWRSb290LFxuICAgICAgICAgIGZpbmlzaGVkV29yayxcbiAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICBjb21taXR0ZWRUcmFuc2l0aW9ucyxcbiAgICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzXG4gICAgICAgICk7XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoOCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIzOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjI6XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG4gICAgICAgIG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlXG4gICAgICAgICAgPyBpbnN0YW5jZS5fdmlzaWJpbGl0eSAmIDRcbiAgICAgICAgICAgID8gcmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMsXG4gICAgICAgICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICA6IHJlY3Vyc2l2ZWx5VHJhdmVyc2VBdG9taWNQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgICAgICAgZmluaXNoZWRXb3JrXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICA6ICgoaW5zdGFuY2UuX3Zpc2liaWxpdHkgfD0gNCksXG4gICAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlUmVjb25uZWN0UGFzc2l2ZUVmZmVjdHMoXG4gICAgICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgICAgICBjb21taXR0ZWRMYW5lcyxcbiAgICAgICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMsXG4gICAgICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgICAgICkpO1xuICAgICAgICBpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzICYmXG4gICAgICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgICAgY29tbWl0T2Zmc2NyZWVuUGFzc2l2ZU1vdW50RWZmZWN0cyhcbiAgICAgICAgICAgIGZpbmlzaGVkV29yay5hbHRlcm5hdGUsXG4gICAgICAgICAgICBmaW5pc2hlZFdvcmtcbiAgICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjQ6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWNvbm5lY3RQYXNzaXZlRWZmZWN0cyhcbiAgICAgICAgICBmaW5pc2hlZFJvb3QsXG4gICAgICAgICAgZmluaXNoZWRXb3JrLFxuICAgICAgICAgIGNvbW1pdHRlZExhbmVzLFxuICAgICAgICAgIGNvbW1pdHRlZFRyYW5zaXRpb25zLFxuICAgICAgICAgIGluY2x1ZGVXb3JrSW5Qcm9ncmVzc0VmZmVjdHNcbiAgICAgICAgKTtcbiAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0cyAmJlxuICAgICAgICAgIGZsYWdzICYgMjA0OCAmJlxuICAgICAgICAgIGNvbW1pdENhY2hlUGFzc2l2ZU1vdW50RWZmZWN0KGZpbmlzaGVkV29yay5hbHRlcm5hdGUsIGZpbmlzaGVkV29yayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzKFxuICAgICAgICAgIGZpbmlzaGVkUm9vdCxcbiAgICAgICAgICBmaW5pc2hlZFdvcmssXG4gICAgICAgICAgY29tbWl0dGVkTGFuZXMsXG4gICAgICAgICAgY29tbWl0dGVkVHJhbnNpdGlvbnMsXG4gICAgICAgICAgaW5jbHVkZVdvcmtJblByb2dyZXNzRWZmZWN0c1xuICAgICAgICApO1xuICAgIH1cbiAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmc7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5VHJhdmVyc2VBdG9taWNQYXNzaXZlRWZmZWN0cyhcbiAgZmluaXNoZWRSb290JGpzY29tcCQwLFxuICBwYXJlbnRGaWJlclxuKSB7XG4gIGlmIChwYXJlbnRGaWJlci5zdWJ0cmVlRmxhZ3MgJiAxMDI1NilcbiAgICBmb3IgKHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuY2hpbGQ7IG51bGwgIT09IHBhcmVudEZpYmVyOyApIHtcbiAgICAgIHZhciBmaW5pc2hlZFJvb3QgPSBmaW5pc2hlZFJvb3QkanNjb21wJDAsXG4gICAgICAgIGZpbmlzaGVkV29yayA9IHBhcmVudEZpYmVyLFxuICAgICAgICBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFncztcbiAgICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VBdG9taWNQYXNzaXZlRWZmZWN0cyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgZmxhZ3MgJiAyMDQ4ICYmXG4gICAgICAgICAgICBjb21taXRPZmZzY3JlZW5QYXNzaXZlTW91bnRFZmZlY3RzKFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlLFxuICAgICAgICAgICAgICBmaW5pc2hlZFdvcmtcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjQ6XG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICBmbGFncyAmIDIwNDggJiZcbiAgICAgICAgICAgIGNvbW1pdENhY2hlUGFzc2l2ZU1vdW50RWZmZWN0KGZpbmlzaGVkV29yay5hbHRlcm5hdGUsIGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgIH1cbiAgICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIuc2libGluZztcbiAgICB9XG59XG52YXIgc3VzcGVuc2V5Q29tbWl0RmxhZyA9IDgxOTI7XG5mdW5jdGlvbiByZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQocGFyZW50RmliZXIpIHtcbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIHN1c3BlbnNleUNvbW1pdEZsYWcpXG4gICAgZm9yIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLmNoaWxkOyBudWxsICE9PSBwYXJlbnRGaWJlcjsgKVxuICAgICAgYWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdE9uRmliZXIocGFyZW50RmliZXIpLFxuICAgICAgICAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nKTtcbn1cbmZ1bmN0aW9uIGFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXRPbkZpYmVyKGZpYmVyKSB7XG4gIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgY2FzZSAyNjpcbiAgICAgIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcik7XG4gICAgICBmaWJlci5mbGFncyAmIHN1c3BlbnNleUNvbW1pdEZsYWcgJiZcbiAgICAgICAgbnVsbCAhPT0gZmliZXIubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICBzdXNwZW5kUmVzb3VyY2UoXG4gICAgICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QsXG4gICAgICAgICAgZmliZXIubWVtb2l6ZWRTdGF0ZSxcbiAgICAgICAgICBmaWJlci5tZW1vaXplZFByb3BzXG4gICAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICByZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQoZmliZXIpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgIGNhc2UgNDpcbiAgICAgIHZhciBwcmV2aW91c0hvaXN0YWJsZVJvb3QgPSBjdXJyZW50SG9pc3RhYmxlUm9vdDtcbiAgICAgIGN1cnJlbnRIb2lzdGFibGVSb290ID0gZ2V0SG9pc3RhYmxlUm9vdChmaWJlci5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7XG4gICAgICByZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQoZmliZXIpO1xuICAgICAgY3VycmVudEhvaXN0YWJsZVJvb3QgPSBwcmV2aW91c0hvaXN0YWJsZVJvb3Q7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgbnVsbCA9PT0gZmliZXIubWVtb2l6ZWRTdGF0ZSAmJlxuICAgICAgICAoKHByZXZpb3VzSG9pc3RhYmxlUm9vdCA9IGZpYmVyLmFsdGVybmF0ZSksXG4gICAgICAgIG51bGwgIT09IHByZXZpb3VzSG9pc3RhYmxlUm9vdCAmJlxuICAgICAgICBudWxsICE9PSBwcmV2aW91c0hvaXN0YWJsZVJvb3QubWVtb2l6ZWRTdGF0ZVxuICAgICAgICAgID8gKChwcmV2aW91c0hvaXN0YWJsZVJvb3QgPSBzdXNwZW5zZXlDb21taXRGbGFnKSxcbiAgICAgICAgICAgIChzdXNwZW5zZXlDb21taXRGbGFnID0gMTY3NzcyMTYpLFxuICAgICAgICAgICAgcmVjdXJzaXZlbHlBY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0KGZpYmVyKSxcbiAgICAgICAgICAgIChzdXNwZW5zZXlDb21taXRGbGFnID0gcHJldmlvdXNIb2lzdGFibGVSb290KSlcbiAgICAgICAgICA6IHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcikpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5QWNjdW11bGF0ZVN1c3BlbnNleUNvbW1pdChmaWJlcik7XG4gIH1cbn1cbmZ1bmN0aW9uIGRldGFjaEFsdGVybmF0ZVNpYmxpbmdzKHBhcmVudEZpYmVyKSB7XG4gIHZhciBwcmV2aW91c0ZpYmVyID0gcGFyZW50RmliZXIuYWx0ZXJuYXRlO1xuICBpZiAoXG4gICAgbnVsbCAhPT0gcHJldmlvdXNGaWJlciAmJlxuICAgICgocGFyZW50RmliZXIgPSBwcmV2aW91c0ZpYmVyLmNoaWxkKSwgbnVsbCAhPT0gcGFyZW50RmliZXIpXG4gICkge1xuICAgIHByZXZpb3VzRmliZXIuY2hpbGQgPSBudWxsO1xuICAgIGRvXG4gICAgICAocHJldmlvdXNGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmcpLFxuICAgICAgICAocGFyZW50RmliZXIuc2libGluZyA9IG51bGwpLFxuICAgICAgICAocGFyZW50RmliZXIgPSBwcmV2aW91c0ZpYmVyKTtcbiAgICB3aGlsZSAobnVsbCAhPT0gcGFyZW50RmliZXIpO1xuICB9XG59XG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzKHBhcmVudEZpYmVyKSB7XG4gIHZhciBkZWxldGlvbnMgPSBwYXJlbnRGaWJlci5kZWxldGlvbnM7XG4gIGlmICgwICE9PSAocGFyZW50RmliZXIuZmxhZ3MgJiAxNikpIHtcbiAgICBpZiAobnVsbCAhPT0gZGVsZXRpb25zKVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWxldGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkVG9EZWxldGUgPSBkZWxldGlvbnNbaV07XG4gICAgICAgIG5leHRFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICAgICAgICBjb21taXRQYXNzaXZlVW5tb3VudEVmZmVjdHNJbnNpZGVPZkRlbGV0ZWRUcmVlX2JlZ2luKFxuICAgICAgICAgIGNoaWxkVG9EZWxldGUsXG4gICAgICAgICAgcGFyZW50RmliZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICBkZXRhY2hBbHRlcm5hdGVTaWJsaW5ncyhwYXJlbnRGaWJlcik7XG4gIH1cbiAgaWYgKHBhcmVudEZpYmVyLnN1YnRyZWVGbGFncyAmIDEwMjU2KVxuICAgIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7IClcbiAgICAgIGNvbW1pdFBhc3NpdmVVbm1vdW50T25GaWJlcihwYXJlbnRGaWJlciksXG4gICAgICAgIChwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnNpYmxpbmcpO1xufVxuZnVuY3Rpb24gY29tbWl0UGFzc2l2ZVVubW91bnRPbkZpYmVyKGZpbmlzaGVkV29yaykge1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE1OlxuICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgZmluaXNoZWRXb3JrLmZsYWdzICYgMjA0OCAmJlxuICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoOSwgZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlVW5tb3VudEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTI6XG4gICAgICByZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzKGZpbmlzaGVkV29yayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgIG51bGwgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlICYmXG4gICAgICBpbnN0YW5jZS5fdmlzaWJpbGl0eSAmIDQgJiZcbiAgICAgIChudWxsID09PSBmaW5pc2hlZFdvcmsucmV0dXJuIHx8IDEzICE9PSBmaW5pc2hlZFdvcmsucmV0dXJuLnRhZylcbiAgICAgICAgPyAoKGluc3RhbmNlLl92aXNpYmlsaXR5ICY9IC01KSxcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzKGZpbmlzaGVkV29yaykpXG4gICAgICAgIDogcmVjdXJzaXZlbHlUcmF2ZXJzZVBhc3NpdmVVbm1vdW50RWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlVW5tb3VudEVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZURpc2Nvbm5lY3RQYXNzaXZlRWZmZWN0cyhwYXJlbnRGaWJlcikge1xuICB2YXIgZGVsZXRpb25zID0gcGFyZW50RmliZXIuZGVsZXRpb25zO1xuICBpZiAoMCAhPT0gKHBhcmVudEZpYmVyLmZsYWdzICYgMTYpKSB7XG4gICAgaWYgKG51bGwgIT09IGRlbGV0aW9ucylcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVsZXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGlsZFRvRGVsZXRlID0gZGVsZXRpb25zW2ldO1xuICAgICAgICBuZXh0RWZmZWN0ID0gY2hpbGRUb0RlbGV0ZTtcbiAgICAgICAgY29tbWl0UGFzc2l2ZVVubW91bnRFZmZlY3RzSW5zaWRlT2ZEZWxldGVkVHJlZV9iZWdpbihcbiAgICAgICAgICBjaGlsZFRvRGVsZXRlLFxuICAgICAgICAgIHBhcmVudEZpYmVyXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgZGV0YWNoQWx0ZXJuYXRlU2libGluZ3MocGFyZW50RmliZXIpO1xuICB9XG4gIGZvciAocGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5jaGlsZDsgbnVsbCAhPT0gcGFyZW50RmliZXI7ICkge1xuICAgIGRlbGV0aW9ucyA9IHBhcmVudEZpYmVyO1xuICAgIHN3aXRjaCAoZGVsZXRpb25zLnRhZykge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxMTpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg4LCBkZWxldGlvbnMsIGRlbGV0aW9ucy5yZXR1cm4pO1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzKGRlbGV0aW9ucyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyMjpcbiAgICAgICAgaSA9IGRlbGV0aW9ucy5zdGF0ZU5vZGU7XG4gICAgICAgIGkuX3Zpc2liaWxpdHkgJiA0ICYmXG4gICAgICAgICAgKChpLl92aXNpYmlsaXR5ICY9IC01KSxcbiAgICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGlzY29ubmVjdFBhc3NpdmVFZmZlY3RzKGRlbGV0aW9ucykpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMoZGVsZXRpb25zKTtcbiAgICB9XG4gICAgcGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5zaWJsaW5nO1xuICB9XG59XG5mdW5jdGlvbiBjb21taXRQYXNzaXZlVW5tb3VudEVmZmVjdHNJbnNpZGVPZkRlbGV0ZWRUcmVlX2JlZ2luKFxuICBkZWxldGVkU3VidHJlZVJvb3QsXG4gIG5lYXJlc3RNb3VudGVkQW5jZXN0b3Jcbikge1xuICBmb3IgKDsgbnVsbCAhPT0gbmV4dEVmZmVjdDsgKSB7XG4gICAgdmFyIGZpYmVyID0gbmV4dEVmZmVjdDtcbiAgICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxMTpcbiAgICAgIGNhc2UgMTU6XG4gICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCg4LCBmaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyMzpcbiAgICAgIGNhc2UgMjI6XG4gICAgICAgIGlmIChcbiAgICAgICAgICBudWxsICE9PSBmaWJlci5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgbnVsbCAhPT0gZmliZXIubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2xcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIGNhY2hlID0gZmliZXIubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wucG9vbDtcbiAgICAgICAgICBudWxsICE9IGNhY2hlICYmIGNhY2hlLnJlZkNvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI0OlxuICAgICAgICByZWxlYXNlQ2FjaGUoZmliZXIubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gICAgfVxuICAgIGNhY2hlID0gZmliZXIuY2hpbGQ7XG4gICAgaWYgKG51bGwgIT09IGNhY2hlKSAoY2FjaGUucmV0dXJuID0gZmliZXIpLCAobmV4dEVmZmVjdCA9IGNhY2hlKTtcbiAgICBlbHNlXG4gICAgICBhOiBmb3IgKGZpYmVyID0gZGVsZXRlZFN1YnRyZWVSb290OyBudWxsICE9PSBuZXh0RWZmZWN0OyApIHtcbiAgICAgICAgY2FjaGUgPSBuZXh0RWZmZWN0O1xuICAgICAgICB2YXIgc2libGluZyA9IGNhY2hlLnNpYmxpbmcsXG4gICAgICAgICAgcmV0dXJuRmliZXIgPSBjYWNoZS5yZXR1cm47XG4gICAgICAgIGRldGFjaEZpYmVyQWZ0ZXJFZmZlY3RzKGNhY2hlKTtcbiAgICAgICAgaWYgKGNhY2hlID09PSBmaWJlcikge1xuICAgICAgICAgIG5leHRFZmZlY3QgPSBudWxsO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bGwgIT09IHNpYmxpbmcpIHtcbiAgICAgICAgICBzaWJsaW5nLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgICAgIG5leHRFZmZlY3QgPSBzaWJsaW5nO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dEVmZmVjdCA9IHJldHVybkZpYmVyO1xuICAgICAgfVxuICB9XG59XG5mdW5jdGlvbiBGaWJlck5vZGUodGFnLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSkge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5rZXkgPSBrZXk7XG4gIHRoaXMuc2libGluZyA9XG4gICAgdGhpcy5jaGlsZCA9XG4gICAgdGhpcy5yZXR1cm4gPVxuICAgIHRoaXMuc3RhdGVOb2RlID1cbiAgICB0aGlzLnR5cGUgPVxuICAgIHRoaXMuZWxlbWVudFR5cGUgPVxuICAgICAgbnVsbDtcbiAgdGhpcy5pbmRleCA9IDA7XG4gIHRoaXMucmVmQ2xlYW51cCA9IHRoaXMucmVmID0gbnVsbDtcbiAgdGhpcy5wZW5kaW5nUHJvcHMgPSBwZW5kaW5nUHJvcHM7XG4gIHRoaXMuZGVwZW5kZW5jaWVzID1cbiAgICB0aGlzLm1lbW9pemVkU3RhdGUgPVxuICAgIHRoaXMudXBkYXRlUXVldWUgPVxuICAgIHRoaXMubWVtb2l6ZWRQcm9wcyA9XG4gICAgICBudWxsO1xuICB0aGlzLm1vZGUgPSBtb2RlO1xuICB0aGlzLnN1YnRyZWVGbGFncyA9IHRoaXMuZmxhZ3MgPSAwO1xuICB0aGlzLmRlbGV0aW9ucyA9IG51bGw7XG4gIHRoaXMuY2hpbGRMYW5lcyA9IHRoaXMubGFuZXMgPSAwO1xuICB0aGlzLmFsdGVybmF0ZSA9IG51bGw7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckltcGxDbGFzcyh0YWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKSB7XG4gIHJldHVybiBuZXcgRmliZXJOb2RlKHRhZywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpO1xufVxuZnVuY3Rpb24gc2hvdWxkQ29uc3RydWN0KENvbXBvbmVudCkge1xuICBDb21wb25lbnQgPSBDb21wb25lbnQucHJvdG90eXBlO1xuICByZXR1cm4gISghQ29tcG9uZW50IHx8ICFDb21wb25lbnQuaXNSZWFjdENvbXBvbmVudCk7XG59XG5mdW5jdGlvbiBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhjdXJyZW50LCBwZW5kaW5nUHJvcHMpIHtcbiAgdmFyIHdvcmtJblByb2dyZXNzID0gY3VycmVudC5hbHRlcm5hdGU7XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzXG4gICAgPyAoKHdvcmtJblByb2dyZXNzID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoXG4gICAgICAgIGN1cnJlbnQudGFnLFxuICAgICAgICBwZW5kaW5nUHJvcHMsXG4gICAgICAgIGN1cnJlbnQua2V5LFxuICAgICAgICBjdXJyZW50Lm1vZGVcbiAgICAgICkpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlID0gY3VycmVudC5lbGVtZW50VHlwZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudHlwZSA9IGN1cnJlbnQudHlwZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudC5zdGF0ZU5vZGUpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSA9IGN1cnJlbnQpLFxuICAgICAgKGN1cnJlbnQuYWx0ZXJuYXRlID0gd29ya0luUHJvZ3Jlc3MpKVxuICAgIDogKCh3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMgPSBwZW5kaW5nUHJvcHMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnR5cGUgPSBjdXJyZW50LnR5cGUpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzID0gMCksXG4gICAgICAod29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gMCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zID0gbnVsbCkpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IGN1cnJlbnQuZmxhZ3MgJiAzMTQ1NzI4MDtcbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IGN1cnJlbnQuY2hpbGRMYW5lcztcbiAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSBjdXJyZW50LmxhbmVzO1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQuY2hpbGQ7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHM7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gY3VycmVudC51cGRhdGVRdWV1ZTtcbiAgcGVuZGluZ1Byb3BzID0gY3VycmVudC5kZXBlbmRlbmNpZXM7XG4gIHdvcmtJblByb2dyZXNzLmRlcGVuZGVuY2llcyA9XG4gICAgbnVsbCA9PT0gcGVuZGluZ1Byb3BzXG4gICAgICA/IG51bGxcbiAgICAgIDogeyBsYW5lczogcGVuZGluZ1Byb3BzLmxhbmVzLCBmaXJzdENvbnRleHQ6IHBlbmRpbmdQcm9wcy5maXJzdENvbnRleHQgfTtcbiAgd29ya0luUHJvZ3Jlc3Muc2libGluZyA9IGN1cnJlbnQuc2libGluZztcbiAgd29ya0luUHJvZ3Jlc3MuaW5kZXggPSBjdXJyZW50LmluZGV4O1xuICB3b3JrSW5Qcm9ncmVzcy5yZWYgPSBjdXJyZW50LnJlZjtcbiAgd29ya0luUHJvZ3Jlc3MucmVmQ2xlYW51cCA9IGN1cnJlbnQucmVmQ2xlYW51cDtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xufVxuZnVuY3Rpb24gcmVzZXRXb3JrSW5Qcm9ncmVzcyh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gMzE0NTcyODI7XG4gIHZhciBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlO1xuICBudWxsID09PSBjdXJyZW50XG4gICAgPyAoKHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMgPSAwKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IHJlbmRlckxhbmVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnN1YnRyZWVGbGFncyA9IDApLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBudWxsKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbCksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBudWxsKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5kZXBlbmRlbmNpZXMgPSBudWxsKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBudWxsKSlcbiAgICA6ICgod29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IGN1cnJlbnQuY2hpbGRMYW5lcyksXG4gICAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSBjdXJyZW50LmxhbmVzKSxcbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGN1cnJlbnQuY2hpbGQpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnN1YnRyZWVGbGFncyA9IDApLFxuICAgICAgKHdvcmtJblByb2dyZXNzLmRlbGV0aW9ucyA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHMpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpLFxuICAgICAgKHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gY3VycmVudC51cGRhdGVRdWV1ZSksXG4gICAgICAod29ya0luUHJvZ3Jlc3MudHlwZSA9IGN1cnJlbnQudHlwZSksXG4gICAgICAocmVuZGVyTGFuZXMgPSBjdXJyZW50LmRlcGVuZGVuY2llcyksXG4gICAgICAod29ya0luUHJvZ3Jlc3MuZGVwZW5kZW5jaWVzID1cbiAgICAgICAgbnVsbCA9PT0gcmVuZGVyTGFuZXNcbiAgICAgICAgICA/IG51bGxcbiAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgbGFuZXM6IHJlbmRlckxhbmVzLmxhbmVzLFxuICAgICAgICAgICAgICBmaXJzdENvbnRleHQ6IHJlbmRlckxhbmVzLmZpcnN0Q29udGV4dFxuICAgICAgICAgICAgfSkpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21UeXBlQW5kUHJvcHMoXG4gIHR5cGUsXG4gIGtleSxcbiAgcGVuZGluZ1Byb3BzLFxuICBvd25lcixcbiAgbW9kZSxcbiAgbGFuZXNcbikge1xuICB2YXIgZmliZXJUYWcgPSAwO1xuICBvd25lciA9IHR5cGU7XG4gIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB0eXBlKSBzaG91bGRDb25zdHJ1Y3QodHlwZSkgJiYgKGZpYmVyVGFnID0gMSk7XG4gIGVsc2UgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiB0eXBlKVxuICAgIGZpYmVyVGFnID0gaXNIb3N0SG9pc3RhYmxlVHlwZShcbiAgICAgIHR5cGUsXG4gICAgICBwZW5kaW5nUHJvcHMsXG4gICAgICBjb250ZXh0U3RhY2tDdXJzb3IuY3VycmVudFxuICAgIClcbiAgICAgID8gMjZcbiAgICAgIDogXCJodG1sXCIgPT09IHR5cGUgfHwgXCJoZWFkXCIgPT09IHR5cGUgfHwgXCJib2R5XCIgPT09IHR5cGVcbiAgICAgICAgPyAyN1xuICAgICAgICA6IDU7XG4gIGVsc2VcbiAgICBhOiBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgUkVBQ1RfRlJBR01FTlRfVFlQRTpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KHBlbmRpbmdQcm9wcy5jaGlsZHJlbiwgbW9kZSwgbGFuZXMsIGtleSk7XG4gICAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6XG4gICAgICAgIGZpYmVyVGFnID0gODtcbiAgICAgICAgbW9kZSB8PSAyNDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFJFQUNUX1BST0ZJTEVSX1RZUEU6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHR5cGUgPSBjcmVhdGVGaWJlckltcGxDbGFzcygxMiwgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUgfCAyKSksXG4gICAgICAgICAgKHR5cGUuZWxlbWVudFR5cGUgPSBSRUFDVF9QUk9GSUxFUl9UWVBFKSxcbiAgICAgICAgICAodHlwZS5sYW5lcyA9IGxhbmVzKSxcbiAgICAgICAgICB0eXBlXG4gICAgICAgICk7XG4gICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHR5cGUgPSBjcmVhdGVGaWJlckltcGxDbGFzcygxMywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpKSxcbiAgICAgICAgICAodHlwZS5lbGVtZW50VHlwZSA9IFJFQUNUX1NVU1BFTlNFX1RZUEUpLFxuICAgICAgICAgICh0eXBlLmxhbmVzID0gbGFuZXMpLFxuICAgICAgICAgIHR5cGVcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFOlxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICh0eXBlID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoMTksIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKSksXG4gICAgICAgICAgKHR5cGUuZWxlbWVudFR5cGUgPSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUpLFxuICAgICAgICAgICh0eXBlLmxhbmVzID0gbGFuZXMpLFxuICAgICAgICAgIHR5cGVcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgUkVBQ1RfT0ZGU0NSRUVOX1RZUEU6XG4gICAgICAgIHJldHVybiBjcmVhdGVGaWJlckZyb21PZmZzY3JlZW4ocGVuZGluZ1Byb3BzLCBtb2RlLCBsYW5lcywga2V5KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgdHlwZSAmJiBudWxsICE9PSB0eXBlKVxuICAgICAgICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgICAgICAgY2FzZSBSRUFDVF9QUk9WSURFUl9UWVBFOlxuICAgICAgICAgICAgY2FzZSBSRUFDVF9DT05URVhUX1RZUEU6XG4gICAgICAgICAgICAgIGZpYmVyVGFnID0gMTA7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBjYXNlIFJFQUNUX0NPTlNVTUVSX1RZUEU6XG4gICAgICAgICAgICAgIGZpYmVyVGFnID0gOTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTpcbiAgICAgICAgICAgICAgZmliZXJUYWcgPSAxMTtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgUkVBQ1RfTUVNT19UWVBFOlxuICAgICAgICAgICAgICBmaWJlclRhZyA9IDE0O1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAgICAgIGZpYmVyVGFnID0gMTY7XG4gICAgICAgICAgICAgIG93bmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9XG4gICAgICAgIGZpYmVyVGFnID0gMjk7XG4gICAgICAgIHBlbmRpbmdQcm9wcyA9IEVycm9yKFxuICAgICAgICAgIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTMwLCBudWxsID09PSB0eXBlID8gXCJudWxsXCIgOiB0eXBlb2YgdHlwZSwgXCJcIilcbiAgICAgICAgKTtcbiAgICAgICAgb3duZXIgPSBudWxsO1xuICAgIH1cbiAga2V5ID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoZmliZXJUYWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKTtcbiAga2V5LmVsZW1lbnRUeXBlID0gdHlwZTtcbiAga2V5LnR5cGUgPSBvd25lcjtcbiAga2V5LmxhbmVzID0gbGFuZXM7XG4gIHJldHVybiBrZXk7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21GcmFnbWVudChlbGVtZW50cywgbW9kZSwgbGFuZXMsIGtleSkge1xuICBlbGVtZW50cyA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDcsIGVsZW1lbnRzLCBrZXksIG1vZGUpO1xuICBlbGVtZW50cy5sYW5lcyA9IGxhbmVzO1xuICByZXR1cm4gZWxlbWVudHM7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21PZmZzY3JlZW4ocGVuZGluZ1Byb3BzLCBtb2RlLCBsYW5lcywga2V5KSB7XG4gIHBlbmRpbmdQcm9wcyA9IGNyZWF0ZUZpYmVySW1wbENsYXNzKDIyLCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSk7XG4gIHBlbmRpbmdQcm9wcy5lbGVtZW50VHlwZSA9IFJFQUNUX09GRlNDUkVFTl9UWVBFO1xuICBwZW5kaW5nUHJvcHMubGFuZXMgPSBsYW5lcztcbiAgdmFyIHByaW1hcnlDaGlsZEluc3RhbmNlID0ge1xuICAgIF92aXNpYmlsaXR5OiAxLFxuICAgIF9wZW5kaW5nVmlzaWJpbGl0eTogMSxcbiAgICBfcGVuZGluZ01hcmtlcnM6IG51bGwsXG4gICAgX3JldHJ5Q2FjaGU6IG51bGwsXG4gICAgX3RyYW5zaXRpb25zOiBudWxsLFxuICAgIF9jdXJyZW50OiBudWxsLFxuICAgIGRldGFjaDogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGZpYmVyID0gcHJpbWFyeUNoaWxkSW5zdGFuY2UuX2N1cnJlbnQ7XG4gICAgICBpZiAobnVsbCA9PT0gZmliZXIpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDU2KSk7XG4gICAgICBpZiAoMCA9PT0gKHByaW1hcnlDaGlsZEluc3RhbmNlLl9wZW5kaW5nVmlzaWJpbGl0eSAmIDIpKSB7XG4gICAgICAgIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCAyKTtcbiAgICAgICAgbnVsbCAhPT0gcm9vdCAmJlxuICAgICAgICAgICgocHJpbWFyeUNoaWxkSW5zdGFuY2UuX3BlbmRpbmdWaXNpYmlsaXR5IHw9IDIpLFxuICAgICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgMikpO1xuICAgICAgfVxuICAgIH0sXG4gICAgYXR0YWNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZmliZXIgPSBwcmltYXJ5Q2hpbGRJbnN0YW5jZS5fY3VycmVudDtcbiAgICAgIGlmIChudWxsID09PSBmaWJlcikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NTYpKTtcbiAgICAgIGlmICgwICE9PSAocHJpbWFyeUNoaWxkSW5zdGFuY2UuX3BlbmRpbmdWaXNpYmlsaXR5ICYgMikpIHtcbiAgICAgICAgdmFyIHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIDIpO1xuICAgICAgICBudWxsICE9PSByb290ICYmXG4gICAgICAgICAgKChwcmltYXJ5Q2hpbGRJbnN0YW5jZS5fcGVuZGluZ1Zpc2liaWxpdHkgJj0gLTMpLFxuICAgICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgMikpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcGVuZGluZ1Byb3BzLnN0YXRlTm9kZSA9IHByaW1hcnlDaGlsZEluc3RhbmNlO1xuICByZXR1cm4gcGVuZGluZ1Byb3BzO1xufVxuZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tVGV4dChjb250ZW50LCBtb2RlLCBsYW5lcykge1xuICBjb250ZW50ID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoNiwgY29udGVudCwgbnVsbCwgbW9kZSk7XG4gIGNvbnRlbnQubGFuZXMgPSBsYW5lcztcbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21Qb3J0YWwocG9ydGFsLCBtb2RlLCBsYW5lcykge1xuICBtb2RlID0gY3JlYXRlRmliZXJJbXBsQ2xhc3MoXG4gICAgNCxcbiAgICBudWxsICE9PSBwb3J0YWwuY2hpbGRyZW4gPyBwb3J0YWwuY2hpbGRyZW4gOiBbXSxcbiAgICBwb3J0YWwua2V5LFxuICAgIG1vZGVcbiAgKTtcbiAgbW9kZS5sYW5lcyA9IGxhbmVzO1xuICBtb2RlLnN0YXRlTm9kZSA9IHtcbiAgICBjb250YWluZXJJbmZvOiBwb3J0YWwuY29udGFpbmVySW5mbyxcbiAgICBwZW5kaW5nQ2hpbGRyZW46IG51bGwsXG4gICAgaW1wbGVtZW50YXRpb246IHBvcnRhbC5pbXBsZW1lbnRhdGlvblxuICB9O1xuICByZXR1cm4gbW9kZTtcbn1cbmZ1bmN0aW9uIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpIHtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gNDtcbn1cbmZ1bmN0aW9uIHByZWxvYWRSZXNvdXJjZUFuZFN1c3BlbmRJZk5lZWRlZCh3b3JrSW5Qcm9ncmVzcywgcmVzb3VyY2UpIHtcbiAgaWYgKFwic3R5bGVzaGVldFwiICE9PSByZXNvdXJjZS50eXBlIHx8IDAgIT09IChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nICYgNCkpXG4gICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gLTE2Nzc3MjE3O1xuICBlbHNlIGlmICgoKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDE2Nzc3MjE2KSwgIXByZWxvYWRSZXNvdXJjZShyZXNvdXJjZSkpKSB7XG4gICAgcmVzb3VyY2UgPSBzdXNwZW5zZUhhbmRsZXJTdGFja0N1cnNvci5jdXJyZW50O1xuICAgIGlmIChcbiAgICAgIG51bGwgIT09IHJlc291cmNlICYmXG4gICAgICAoKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNDE5NDE3NikgPT09XG4gICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lc1xuICAgICAgICA/IG51bGwgIT09IHNoZWxsQm91bmRhcnlcbiAgICAgICAgOiAoKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNjI5MTQ1NjApICE9PVxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiZcbiAgICAgICAgICAgIDAgPT09ICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDUzNjg3MDkxMikpIHx8XG4gICAgICAgICAgcmVzb3VyY2UgIT09IHNoZWxsQm91bmRhcnkpXG4gICAgKVxuICAgICAgdGhyb3cgKFxuICAgICAgICAoKHN1c3BlbmRlZFRoZW5hYmxlID0gbm9vcFN1c3BlbnNleUNvbW1pdFRoZW5hYmxlKSxcbiAgICAgICAgU3VzcGVuc2V5Q29tbWl0RXhjZXB0aW9uKVxuICAgICAgKTtcbiAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA4MTkyO1xuICB9XG59XG5mdW5jdGlvbiBzY2hlZHVsZVJldHJ5RWZmZWN0KHdvcmtJblByb2dyZXNzLCByZXRyeVF1ZXVlKSB7XG4gIG51bGwgIT09IHJldHJ5UXVldWUgJiYgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDQpO1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIDE2Mzg0ICYmXG4gICAgKChyZXRyeVF1ZXVlID1cbiAgICAgIDIyICE9PSB3b3JrSW5Qcm9ncmVzcy50YWcgPyBjbGFpbU5leHRSZXRyeUxhbmUoKSA6IDUzNjg3MDkxMiksXG4gICAgKHdvcmtJblByb2dyZXNzLmxhbmVzIHw9IHJldHJ5UXVldWUpLFxuICAgICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMgfD0gcmV0cnlRdWV1ZSkpO1xufVxuZnVuY3Rpb24gY3V0T2ZmVGFpbElmTmVlZGVkKHJlbmRlclN0YXRlLCBoYXNSZW5kZXJlZEFUYWlsRmFsbGJhY2spIHtcbiAgaWYgKCFpc0h5ZHJhdGluZylcbiAgICBzd2l0Y2ggKHJlbmRlclN0YXRlLnRhaWxNb2RlKSB7XG4gICAgICBjYXNlIFwiaGlkZGVuXCI6XG4gICAgICAgIGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjayA9IHJlbmRlclN0YXRlLnRhaWw7XG4gICAgICAgIGZvciAodmFyIGxhc3RUYWlsTm9kZSA9IG51bGw7IG51bGwgIT09IGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjazsgKVxuICAgICAgICAgIG51bGwgIT09IGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjay5hbHRlcm5hdGUgJiZcbiAgICAgICAgICAgIChsYXN0VGFpbE5vZGUgPSBoYXNSZW5kZXJlZEFUYWlsRmFsbGJhY2spLFxuICAgICAgICAgICAgKGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjayA9IGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjay5zaWJsaW5nKTtcbiAgICAgICAgbnVsbCA9PT0gbGFzdFRhaWxOb2RlXG4gICAgICAgICAgPyAocmVuZGVyU3RhdGUudGFpbCA9IG51bGwpXG4gICAgICAgICAgOiAobGFzdFRhaWxOb2RlLnNpYmxpbmcgPSBudWxsKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiY29sbGFwc2VkXCI6XG4gICAgICAgIGxhc3RUYWlsTm9kZSA9IHJlbmRlclN0YXRlLnRhaWw7XG4gICAgICAgIGZvciAodmFyIGxhc3RUYWlsTm9kZSQxMzEgPSBudWxsOyBudWxsICE9PSBsYXN0VGFpbE5vZGU7IClcbiAgICAgICAgICBudWxsICE9PSBsYXN0VGFpbE5vZGUuYWx0ZXJuYXRlICYmIChsYXN0VGFpbE5vZGUkMTMxID0gbGFzdFRhaWxOb2RlKSxcbiAgICAgICAgICAgIChsYXN0VGFpbE5vZGUgPSBsYXN0VGFpbE5vZGUuc2libGluZyk7XG4gICAgICAgIG51bGwgPT09IGxhc3RUYWlsTm9kZSQxMzFcbiAgICAgICAgICA/IGhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjayB8fCBudWxsID09PSByZW5kZXJTdGF0ZS50YWlsXG4gICAgICAgICAgICA/IChyZW5kZXJTdGF0ZS50YWlsID0gbnVsbClcbiAgICAgICAgICAgIDogKHJlbmRlclN0YXRlLnRhaWwuc2libGluZyA9IG51bGwpXG4gICAgICAgICAgOiAobGFzdFRhaWxOb2RlJDEzMS5zaWJsaW5nID0gbnVsbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gYnViYmxlUHJvcGVydGllcyhjb21wbGV0ZWRXb3JrKSB7XG4gIHZhciBkaWRCYWlsb3V0ID1cbiAgICAgIG51bGwgIT09IGNvbXBsZXRlZFdvcmsuYWx0ZXJuYXRlICYmXG4gICAgICBjb21wbGV0ZWRXb3JrLmFsdGVybmF0ZS5jaGlsZCA9PT0gY29tcGxldGVkV29yay5jaGlsZCxcbiAgICBuZXdDaGlsZExhbmVzID0gMCxcbiAgICBzdWJ0cmVlRmxhZ3MgPSAwO1xuICBpZiAoZGlkQmFpbG91dClcbiAgICBmb3IgKHZhciBjaGlsZCQxMzIgPSBjb21wbGV0ZWRXb3JrLmNoaWxkOyBudWxsICE9PSBjaGlsZCQxMzI7IClcbiAgICAgIChuZXdDaGlsZExhbmVzIHw9IGNoaWxkJDEzMi5sYW5lcyB8IGNoaWxkJDEzMi5jaGlsZExhbmVzKSxcbiAgICAgICAgKHN1YnRyZWVGbGFncyB8PSBjaGlsZCQxMzIuc3VidHJlZUZsYWdzICYgMzE0NTcyODApLFxuICAgICAgICAoc3VidHJlZUZsYWdzIHw9IGNoaWxkJDEzMi5mbGFncyAmIDMxNDU3MjgwKSxcbiAgICAgICAgKGNoaWxkJDEzMi5yZXR1cm4gPSBjb21wbGV0ZWRXb3JrKSxcbiAgICAgICAgKGNoaWxkJDEzMiA9IGNoaWxkJDEzMi5zaWJsaW5nKTtcbiAgZWxzZVxuICAgIGZvciAoY2hpbGQkMTMyID0gY29tcGxldGVkV29yay5jaGlsZDsgbnVsbCAhPT0gY2hpbGQkMTMyOyApXG4gICAgICAobmV3Q2hpbGRMYW5lcyB8PSBjaGlsZCQxMzIubGFuZXMgfCBjaGlsZCQxMzIuY2hpbGRMYW5lcyksXG4gICAgICAgIChzdWJ0cmVlRmxhZ3MgfD0gY2hpbGQkMTMyLnN1YnRyZWVGbGFncyksXG4gICAgICAgIChzdWJ0cmVlRmxhZ3MgfD0gY2hpbGQkMTMyLmZsYWdzKSxcbiAgICAgICAgKGNoaWxkJDEzMi5yZXR1cm4gPSBjb21wbGV0ZWRXb3JrKSxcbiAgICAgICAgKGNoaWxkJDEzMiA9IGNoaWxkJDEzMi5zaWJsaW5nKTtcbiAgY29tcGxldGVkV29yay5zdWJ0cmVlRmxhZ3MgfD0gc3VidHJlZUZsYWdzO1xuICBjb21wbGV0ZWRXb3JrLmNoaWxkTGFuZXMgPSBuZXdDaGlsZExhbmVzO1xuICByZXR1cm4gZGlkQmFpbG91dDtcbn1cbmZ1bmN0aW9uIGNvbXBsZXRlV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIG5ld1Byb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICBwb3BUcmVlQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgY2FzZSAxNjpcbiAgICBjYXNlIDE1OlxuICAgIGNhc2UgMDpcbiAgICBjYXNlIDExOlxuICAgIGNhc2UgNzpcbiAgICBjYXNlIDg6XG4gICAgY2FzZSAxMjpcbiAgICBjYXNlIDk6XG4gICAgY2FzZSAxNDpcbiAgICAgIHJldHVybiBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSwgbnVsbDtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksIG51bGw7XG4gICAgY2FzZSAzOlxuICAgICAgcmVuZGVyTGFuZXMgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gICAgICBuZXdQcm9wcyA9IG51bGw7XG4gICAgICBudWxsICE9PSBjdXJyZW50ICYmIChuZXdQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZSk7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlLmNhY2hlICE9PSBuZXdQcm9wcyAmJlxuICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMjA0OCk7XG4gICAgICBwb3BQcm92aWRlcihDYWNoZUNvbnRleHQpO1xuICAgICAgcG9wSG9zdENvbnRhaW5lcigpO1xuICAgICAgcmVuZGVyTGFuZXMucGVuZGluZ0NvbnRleHQgJiZcbiAgICAgICAgKChyZW5kZXJMYW5lcy5jb250ZXh0ID0gcmVuZGVyTGFuZXMucGVuZGluZ0NvbnRleHQpLFxuICAgICAgICAocmVuZGVyTGFuZXMucGVuZGluZ0NvbnRleHQgPSBudWxsKSk7XG4gICAgICBpZiAobnVsbCA9PT0gY3VycmVudCB8fCBudWxsID09PSBjdXJyZW50LmNoaWxkKVxuICAgICAgICBwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA/IG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgOiBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgICAgICAoY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCAmJlxuICAgICAgICAgICAgICAwID09PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAyNTYpKSB8fFxuICAgICAgICAgICAgKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAxMDI0KSxcbiAgICAgICAgICAgIG51bGwgIT09IGh5ZHJhdGlvbkVycm9ycyAmJlxuICAgICAgICAgICAgICAocXVldWVSZWNvdmVyYWJsZUVycm9ycyhoeWRyYXRpb25FcnJvcnMpLFxuICAgICAgICAgICAgICAoaHlkcmF0aW9uRXJyb3JzID0gbnVsbCkpKTtcbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAyNjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChyZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUpLFxuICAgICAgICBudWxsID09PSBjdXJyZW50XG4gICAgICAgICAgPyAobWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICBudWxsICE9PSByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICA/IChidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICBwcmVsb2FkUmVzb3VyY2VBbmRTdXNwZW5kSWZOZWVkZWQod29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSlcbiAgICAgICAgICAgICAgOiAoYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xNjc3NzIxNykpKVxuICAgICAgICAgIDogcmVuZGVyTGFuZXNcbiAgICAgICAgICAgID8gcmVuZGVyTGFuZXMgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZVxuICAgICAgICAgICAgICA/IChtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgICBwcmVsb2FkUmVzb3VyY2VBbmRTdXNwZW5kSWZOZWVkZWQod29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSlcbiAgICAgICAgICAgICAgOiAoYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xNjc3NzIxNykpXG4gICAgICAgICAgICA6IChjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IG5ld1Byb3BzICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xNjc3NzIxNykpLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjc6XG4gICAgICBwb3BIb3N0Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZW5kZXJMYW5lcyA9IHJvb3RJbnN0YW5jZVN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgICB2YXIgdHlwZSA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAgICBpZiAobnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSlcbiAgICAgICAgY3VycmVudC5tZW1vaXplZFByb3BzICE9PSBuZXdQcm9wcyAmJiBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoIW5ld1Byb3BzKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT09IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSlcbiAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTY2KSk7XG4gICAgICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50O1xuICAgICAgICBwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA/IHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQpXG4gICAgICAgICAgOiAoKGN1cnJlbnQgPSByZXNvbHZlU2luZ2xldG9uSW5zdGFuY2UodHlwZSwgbmV3UHJvcHMsIHJlbmRlckxhbmVzKSksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudCksXG4gICAgICAgICAgICBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKSk7XG4gICAgICB9XG4gICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgNTpcbiAgICAgIHBvcEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJlbmRlckxhbmVzID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgIGlmIChudWxsICE9PSBjdXJyZW50ICYmIG51bGwgIT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IG5ld1Byb3BzICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGlmICghbmV3UHJvcHMpIHtcbiAgICAgICAgICBpZiAobnVsbCA9PT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNjYpKTtcbiAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY29udGV4dFN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gICAgICAgIGlmIChwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcykpXG4gICAgICAgICAgcHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgY3VycmVudCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHR5cGUgPSBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIoXG4gICAgICAgICAgICByb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50XG4gICAgICAgICAgKTtcbiAgICAgICAgICBzd2l0Y2ggKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgY3VycmVudCA9IHR5cGUuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgY3VycmVudCA9IHR5cGUuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLFxuICAgICAgICAgICAgICAgIHJlbmRlckxhbmVzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc3dpdGNoIChyZW5kZXJMYW5lcykge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzdmdcIjpcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0eXBlLmNyZWF0ZUVsZW1lbnROUyhcbiAgICAgICAgICAgICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJtYXRoXCI6XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ID0gdHlwZS5jcmVhdGVFbGVtZW50TlMoXG4gICAgICAgICAgICAgICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJMYW5lc1xuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0eXBlLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50LmlubmVySFRNTCA9IFwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCI7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5yZW1vdmVDaGlsZChjdXJyZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9XG4gICAgICAgICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdQcm9wcy5pc1xuICAgICAgICAgICAgICAgICAgICAgID8gdHlwZS5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIsIHsgaXM6IG5ld1Byb3BzLmlzIH0pXG4gICAgICAgICAgICAgICAgICAgICAgOiB0eXBlLmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XG4gICAgICAgICAgICAgICAgICBuZXdQcm9wcy5tdWx0aXBsZVxuICAgICAgICAgICAgICAgICAgICA/IChjdXJyZW50Lm11bHRpcGxlID0gITApXG4gICAgICAgICAgICAgICAgICAgIDogbmV3UHJvcHMuc2l6ZSAmJiAoY3VycmVudC5zaXplID0gbmV3UHJvcHMuc2l6ZSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgY3VycmVudCA9XG4gICAgICAgICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBuZXdQcm9wcy5pc1xuICAgICAgICAgICAgICAgICAgICAgID8gdHlwZS5jcmVhdGVFbGVtZW50KHJlbmRlckxhbmVzLCB7IGlzOiBuZXdQcm9wcy5pcyB9KVxuICAgICAgICAgICAgICAgICAgICAgIDogdHlwZS5jcmVhdGVFbGVtZW50KHJlbmRlckxhbmVzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50W2ludGVybmFsSW5zdGFuY2VLZXldID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgY3VycmVudFtpbnRlcm5hbFByb3BzS2V5XSA9IG5ld1Byb3BzO1xuICAgICAgICAgIGE6IGZvciAodHlwZSA9IHdvcmtJblByb2dyZXNzLmNoaWxkOyBudWxsICE9PSB0eXBlOyApIHtcbiAgICAgICAgICAgIGlmICg1ID09PSB0eXBlLnRhZyB8fCA2ID09PSB0eXBlLnRhZylcbiAgICAgICAgICAgICAgY3VycmVudC5hcHBlbmRDaGlsZCh0eXBlLnN0YXRlTm9kZSk7XG4gICAgICAgICAgICBlbHNlIGlmICg0ICE9PSB0eXBlLnRhZyAmJiAyNyAhPT0gdHlwZS50YWcgJiYgbnVsbCAhPT0gdHlwZS5jaGlsZCkge1xuICAgICAgICAgICAgICB0eXBlLmNoaWxkLnJldHVybiA9IHR5cGU7XG4gICAgICAgICAgICAgIHR5cGUgPSB0eXBlLmNoaWxkO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlID09PSB3b3JrSW5Qcm9ncmVzcykgYnJlYWsgYTtcbiAgICAgICAgICAgIGZvciAoOyBudWxsID09PSB0eXBlLnNpYmxpbmc7ICkge1xuICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gdHlwZS5yZXR1cm4gfHwgdHlwZS5yZXR1cm4gPT09IHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgIHR5cGUgPSB0eXBlLnJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHR5cGUuc2libGluZy5yZXR1cm4gPSB0eXBlLnJldHVybjtcbiAgICAgICAgICAgIHR5cGUgPSB0eXBlLnNpYmxpbmc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgYTogc3dpdGNoIChcbiAgICAgICAgICAgIChzZXRJbml0aWFsUHJvcGVydGllcyhjdXJyZW50LCByZW5kZXJMYW5lcywgbmV3UHJvcHMpLCByZW5kZXJMYW5lcylcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNhc2UgXCJidXR0b25cIjpcbiAgICAgICAgICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgICAgICAgIGN1cnJlbnQgPSAhIW5ld1Byb3BzLmF1dG9Gb2N1cztcbiAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgIGNhc2UgXCJpbWdcIjpcbiAgICAgICAgICAgICAgY3VycmVudCA9ICEwO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgY3VycmVudCA9ICExO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50ICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzICY9IC0xNjc3NzIxNztcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgNjpcbiAgICAgIGlmIChjdXJyZW50ICYmIG51bGwgIT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICBjdXJyZW50Lm1lbW9pemVkUHJvcHMgIT09IG5ld1Byb3BzICYmIG1hcmtVcGRhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChcInN0cmluZ1wiICE9PSB0eXBlb2YgbmV3UHJvcHMgJiYgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTY2KSk7XG4gICAgICAgIGN1cnJlbnQgPSByb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50O1xuICAgICAgICBpZiAocG9wSHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpKSB7XG4gICAgICAgICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICAgICAgICByZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgbmV3UHJvcHMgPSBudWxsO1xuICAgICAgICAgIHR5cGUgPSBoeWRyYXRpb25QYXJlbnRGaWJlcjtcbiAgICAgICAgICBpZiAobnVsbCAhPT0gdHlwZSlcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZS50YWcpIHtcbiAgICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIG5ld1Byb3BzID0gdHlwZS5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnRbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICBjdXJyZW50ID1cbiAgICAgICAgICAgIGN1cnJlbnQubm9kZVZhbHVlID09PSByZW5kZXJMYW5lcyB8fFxuICAgICAgICAgICAgKG51bGwgIT09IG5ld1Byb3BzICYmICEwID09PSBuZXdQcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcpIHx8XG4gICAgICAgICAgICBjaGVja0ZvclVubWF0Y2hlZFRleHQoY3VycmVudC5ub2RlVmFsdWUsIHJlbmRlckxhbmVzKVxuICAgICAgICAgICAgICA/ICEwXG4gICAgICAgICAgICAgIDogITE7XG4gICAgICAgICAgY3VycmVudCB8fCB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2god29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAoY3VycmVudCA9XG4gICAgICAgICAgICBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIoY3VycmVudCkuY3JlYXRlVGV4dE5vZGUoXG4gICAgICAgICAgICAgIG5ld1Byb3BzXG4gICAgICAgICAgICApKSxcbiAgICAgICAgICAgIChjdXJyZW50W2ludGVybmFsSW5zdGFuY2VLZXldID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGN1cnJlbnQpO1xuICAgICAgfVxuICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIDEzOlxuICAgICAgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKFxuICAgICAgICBudWxsID09PSBjdXJyZW50IHx8XG4gICAgICAgIChudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgJiZcbiAgICAgICAgICBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZClcbiAgICAgICkge1xuICAgICAgICB0eXBlID0gcG9wSHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICBpZiAobnVsbCAhPT0gbmV3UHJvcHMgJiYgbnVsbCAhPT0gbmV3UHJvcHMuZGVoeWRyYXRlZCkge1xuICAgICAgICAgIGlmIChudWxsID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAoIXR5cGUpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzE4KSk7XG4gICAgICAgICAgICB0eXBlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICAgIHR5cGUgPSBudWxsICE9PSB0eXBlID8gdHlwZS5kZWh5ZHJhdGVkIDogbnVsbDtcbiAgICAgICAgICAgIGlmICghdHlwZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMTcpKTtcbiAgICAgICAgICAgIHR5cGVbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIHJlc2V0SHlkcmF0aW9uU3RhdGUoKSxcbiAgICAgICAgICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgMTI4KSAmJlxuICAgICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbCksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA0KTtcbiAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICB0eXBlID0gITE7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIG51bGwgIT09IGh5ZHJhdGlvbkVycm9ycyAmJlxuICAgICAgICAgICAgKHF1ZXVlUmVjb3ZlcmFibGVFcnJvcnMoaHlkcmF0aW9uRXJyb3JzKSwgKGh5ZHJhdGlvbkVycm9ycyA9IG51bGwpKSxcbiAgICAgICAgICAgICh0eXBlID0gITApO1xuICAgICAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgICBpZiAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAyNTYpXG4gICAgICAgICAgICByZXR1cm4gcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKSwgd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGlmICgwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpKVxuICAgICAgICByZXR1cm4gKHdvcmtJblByb2dyZXNzLmxhbmVzID0gcmVuZGVyTGFuZXMpLCB3b3JrSW5Qcm9ncmVzcztcbiAgICAgIHJlbmRlckxhbmVzID0gbnVsbCAhPT0gbmV3UHJvcHM7XG4gICAgICBjdXJyZW50ID0gbnVsbCAhPT0gY3VycmVudCAmJiBudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAocmVuZGVyTGFuZXMpIHtcbiAgICAgICAgbmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgICAgdHlwZSA9IG51bGw7XG4gICAgICAgIG51bGwgIT09IG5ld1Byb3BzLmFsdGVybmF0ZSAmJlxuICAgICAgICAgIG51bGwgIT09IG5ld1Byb3BzLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgbnVsbCAhPT0gbmV3UHJvcHMuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUuY2FjaGVQb29sICYmXG4gICAgICAgICAgKHR5cGUgPSBuZXdQcm9wcy5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wucG9vbCk7XG4gICAgICAgIHZhciBjYWNoZSQxNDQgPSBudWxsO1xuICAgICAgICBudWxsICE9PSBuZXdQcm9wcy5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgbnVsbCAhPT0gbmV3UHJvcHMubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAgICAgICAoY2FjaGUkMTQ0ID0gbmV3UHJvcHMubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wucG9vbCk7XG4gICAgICAgIGNhY2hlJDE0NCAhPT0gdHlwZSAmJiAobmV3UHJvcHMuZmxhZ3MgfD0gMjA0OCk7XG4gICAgICB9XG4gICAgICByZW5kZXJMYW5lcyAhPT0gY3VycmVudCAmJlxuICAgICAgICByZW5kZXJMYW5lcyAmJlxuICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQuZmxhZ3MgfD0gODE5Mik7XG4gICAgICBzY2hlZHVsZVJldHJ5RWZmZWN0KHdvcmtJblByb2dyZXNzLCB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSk7XG4gICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHBvcEhvc3RDb250YWluZXIoKSxcbiAgICAgICAgbnVsbCA9PT0gY3VycmVudCAmJlxuICAgICAgICAgIGxpc3RlblRvQWxsU3VwcG9ydGVkRXZlbnRzKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxcbiAgICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAxMDpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHBvcFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLnR5cGUpLCBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSwgbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDE5OlxuICAgICAgcG9wKHN1c3BlbnNlU3RhY2tDdXJzb3IpO1xuICAgICAgdHlwZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAobnVsbCA9PT0gdHlwZSkgcmV0dXJuIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLCBudWxsO1xuICAgICAgbmV3UHJvcHMgPSAwICE9PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpO1xuICAgICAgY2FjaGUkMTQ0ID0gdHlwZS5yZW5kZXJpbmc7XG4gICAgICBpZiAobnVsbCA9PT0gY2FjaGUkMTQ0KVxuICAgICAgICBpZiAobmV3UHJvcHMpIGN1dE9mZlRhaWxJZk5lZWRlZCh0eXBlLCAhMSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIDAgIT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgfHxcbiAgICAgICAgICAgIChudWxsICE9PSBjdXJyZW50ICYmIDAgIT09IChjdXJyZW50LmZsYWdzICYgMTI4KSlcbiAgICAgICAgICApXG4gICAgICAgICAgICBmb3IgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDsgbnVsbCAhPT0gY3VycmVudDsgKSB7XG4gICAgICAgICAgICAgIGNhY2hlJDE0NCA9IGZpbmRGaXJzdFN1c3BlbmRlZChjdXJyZW50KTtcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT09IGNhY2hlJDE0NCkge1xuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEyODtcbiAgICAgICAgICAgICAgICBjdXRPZmZUYWlsSWZOZWVkZWQodHlwZSwgITEpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjYWNoZSQxNDQudXBkYXRlUXVldWU7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50O1xuICAgICAgICAgICAgICAgIHNjaGVkdWxlUmV0cnlFZmZlY3Qod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnN1YnRyZWVGbGFncyA9IDA7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IHJlbmRlckxhbmVzO1xuICAgICAgICAgICAgICAgIGZvciAocmVuZGVyTGFuZXMgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDsgbnVsbCAhPT0gcmVuZGVyTGFuZXM7IClcbiAgICAgICAgICAgICAgICAgIHJlc2V0V29ya0luUHJvZ3Jlc3MocmVuZGVyTGFuZXMsIGN1cnJlbnQpLFxuICAgICAgICAgICAgICAgICAgICAocmVuZGVyTGFuZXMgPSByZW5kZXJMYW5lcy5zaWJsaW5nKTtcbiAgICAgICAgICAgICAgICBwdXNoKFxuICAgICAgICAgICAgICAgICAgc3VzcGVuc2VTdGFja0N1cnNvcixcbiAgICAgICAgICAgICAgICAgIChzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQgJiAxKSB8IDJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5zaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIG51bGwgIT09IHR5cGUudGFpbCAmJlxuICAgICAgICAgICAgbm93KCkgPiB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJUYXJnZXRUaW1lICYmXG4gICAgICAgICAgICAoKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEyOCksXG4gICAgICAgICAgICAobmV3UHJvcHMgPSAhMCksXG4gICAgICAgICAgICBjdXRPZmZUYWlsSWZOZWVkZWQodHlwZSwgITEpLFxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmxhbmVzID0gNDE5NDMwNCkpO1xuICAgICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKCFuZXdQcm9wcylcbiAgICAgICAgICBpZiAoKChjdXJyZW50ID0gZmluZEZpcnN0U3VzcGVuZGVkKGNhY2hlJDE0NCkpLCBudWxsICE9PSBjdXJyZW50KSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAoKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDEyOCksXG4gICAgICAgICAgICAgIChuZXdQcm9wcyA9ICEwKSxcbiAgICAgICAgICAgICAgKGN1cnJlbnQgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gY3VycmVudCksXG4gICAgICAgICAgICAgIHNjaGVkdWxlUmV0cnlFZmZlY3Qod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQpLFxuICAgICAgICAgICAgICBjdXRPZmZUYWlsSWZOZWVkZWQodHlwZSwgITApLFxuICAgICAgICAgICAgICBudWxsID09PSB0eXBlLnRhaWwgJiZcbiAgICAgICAgICAgICAgICBcImhpZGRlblwiID09PSB0eXBlLnRhaWxNb2RlICYmXG4gICAgICAgICAgICAgICAgIWNhY2hlJDE0NC5hbHRlcm5hdGUgJiZcbiAgICAgICAgICAgICAgICAhaXNIeWRyYXRpbmcpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgIHJldHVybiBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKSwgbnVsbDtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIDIgKiBub3coKSAtIHR5cGUucmVuZGVyaW5nU3RhcnRUaW1lID5cbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyVGFyZ2V0VGltZSAmJlxuICAgICAgICAgICAgICA1MzY4NzA5MTIgIT09IHJlbmRlckxhbmVzICYmXG4gICAgICAgICAgICAgICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMTI4KSxcbiAgICAgICAgICAgICAgKG5ld1Byb3BzID0gITApLFxuICAgICAgICAgICAgICBjdXRPZmZUYWlsSWZOZWVkZWQodHlwZSwgITEpLFxuICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MubGFuZXMgPSA0MTk0MzA0KSk7XG4gICAgICAgIHR5cGUuaXNCYWNrd2FyZHNcbiAgICAgICAgICA/ICgoY2FjaGUkMTQ0LnNpYmxpbmcgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZCksXG4gICAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjYWNoZSQxNDQpKVxuICAgICAgICAgIDogKChjdXJyZW50ID0gdHlwZS5sYXN0KSxcbiAgICAgICAgICAgIG51bGwgIT09IGN1cnJlbnRcbiAgICAgICAgICAgICAgPyAoY3VycmVudC5zaWJsaW5nID0gY2FjaGUkMTQ0KVxuICAgICAgICAgICAgICA6ICh3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGNhY2hlJDE0NCksXG4gICAgICAgICAgICAodHlwZS5sYXN0ID0gY2FjaGUkMTQ0KSk7XG4gICAgICB9XG4gICAgICBpZiAobnVsbCAhPT0gdHlwZS50YWlsKVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcyA9IHR5cGUudGFpbCksXG4gICAgICAgICAgKHR5cGUucmVuZGVyaW5nID0gd29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAgICh0eXBlLnRhaWwgPSB3b3JrSW5Qcm9ncmVzcy5zaWJsaW5nKSxcbiAgICAgICAgICAodHlwZS5yZW5kZXJpbmdTdGFydFRpbWUgPSBub3coKSksXG4gICAgICAgICAgKHdvcmtJblByb2dyZXNzLnNpYmxpbmcgPSBudWxsKSxcbiAgICAgICAgICAoY3VycmVudCA9IHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCksXG4gICAgICAgICAgcHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBuZXdQcm9wcyA/IChjdXJyZW50ICYgMSkgfCAyIDogY3VycmVudCAmIDEpLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzXG4gICAgICAgICk7XG4gICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgMjI6XG4gICAgY2FzZSAyMzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcih3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgIHBvcEhpZGRlbkNvbnRleHQoKSxcbiAgICAgICAgKG5ld1Byb3BzID0gbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnRcbiAgICAgICAgICA/IChudWxsICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpICE9PSBuZXdQcm9wcyAmJlxuICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IDgxOTIpXG4gICAgICAgICAgOiBuZXdQcm9wcyAmJiAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gODE5MiksXG4gICAgICAgIG5ld1Byb3BzXG4gICAgICAgICAgPyAwICE9PSAocmVuZGVyTGFuZXMgJiA1MzY4NzA5MTIpICYmXG4gICAgICAgICAgICAwID09PSAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgJiAxMjgpICYmXG4gICAgICAgICAgICAoYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyksXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdWJ0cmVlRmxhZ3MgJiA2ICYmICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSA4MTkyKSlcbiAgICAgICAgICA6IGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICAocmVuZGVyTGFuZXMgPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSksXG4gICAgICAgIG51bGwgIT09IHJlbmRlckxhbmVzICYmXG4gICAgICAgICAgc2NoZWR1bGVSZXRyeUVmZmVjdCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMucmV0cnlRdWV1ZSksXG4gICAgICAgIChyZW5kZXJMYW5lcyA9IG51bGwpLFxuICAgICAgICBudWxsICE9PSBjdXJyZW50ICYmXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgbnVsbCAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbCAmJlxuICAgICAgICAgIChyZW5kZXJMYW5lcyA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wucG9vbCksXG4gICAgICAgIChuZXdQcm9wcyA9IG51bGwpLFxuICAgICAgICBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlICYmXG4gICAgICAgICAgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZS5jYWNoZVBvb2wgJiZcbiAgICAgICAgICAobmV3UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlLmNhY2hlUG9vbC5wb29sKSxcbiAgICAgICAgbmV3UHJvcHMgIT09IHJlbmRlckxhbmVzICYmICh3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSAyMDQ4KSxcbiAgICAgICAgbnVsbCAhPT0gY3VycmVudCAmJiBwb3AocmVzdW1lZENhY2hlKSxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDI0OlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHJlbmRlckxhbmVzID0gbnVsbCksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgKHJlbmRlckxhbmVzID0gY3VycmVudC5tZW1vaXplZFN0YXRlLmNhY2hlKSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZS5jYWNoZSAhPT0gcmVuZGVyTGFuZXMgJiZcbiAgICAgICAgICAod29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gMjA0OCksXG4gICAgICAgIHBvcFByb3ZpZGVyKENhY2hlQ29udGV4dCksXG4gICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMjU6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE1Niwgd29ya0luUHJvZ3Jlc3MudGFnKSk7XG59XG5mdW5jdGlvbiB1bndpbmRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSB7XG4gIHBvcFRyZWVDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gKFxuICAgICAgICAoY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmZsYWdzKSxcbiAgICAgICAgY3VycmVudCAmIDY1NTM2XG4gICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzLmZsYWdzID0gKGN1cnJlbnQgJiAtNjU1MzcpIHwgMTI4KSwgd29ya0luUHJvZ3Jlc3MpXG4gICAgICAgICAgOiBudWxsXG4gICAgICApO1xuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHBvcFByb3ZpZGVyKENhY2hlQ29udGV4dCksXG4gICAgICAgIHBvcEhvc3RDb250YWluZXIoKSxcbiAgICAgICAgKGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5mbGFncyksXG4gICAgICAgIDAgIT09IChjdXJyZW50ICYgNjU1MzYpICYmIDAgPT09IChjdXJyZW50ICYgMTI4KVxuICAgICAgICAgID8gKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IChjdXJyZW50ICYgLTY1NTM3KSB8IDEyOCksIHdvcmtJblByb2dyZXNzKVxuICAgICAgICAgIDogbnVsbFxuICAgICAgKTtcbiAgICBjYXNlIDI2OlxuICAgIGNhc2UgMjc6XG4gICAgY2FzZSA1OlxuICAgICAgcmV0dXJuIHBvcEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKSwgbnVsbDtcbiAgICBjYXNlIDEzOlxuICAgICAgcG9wU3VzcGVuc2VIYW5kbGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnQgJiYgbnVsbCAhPT0gY3VycmVudC5kZWh5ZHJhdGVkKSB7XG4gICAgICAgIGlmIChudWxsID09PSB3b3JrSW5Qcm9ncmVzcy5hbHRlcm5hdGUpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzNDApKTtcbiAgICAgICAgcmVzZXRIeWRyYXRpb25TdGF0ZSgpO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmZsYWdzO1xuICAgICAgcmV0dXJuIGN1cnJlbnQgJiA2NTUzNlxuICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAoY3VycmVudCAmIC02NTUzNykgfCAxMjgpLCB3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgOiBudWxsO1xuICAgIGNhc2UgMTk6XG4gICAgICByZXR1cm4gcG9wKHN1c3BlbnNlU3RhY2tDdXJzb3IpLCBudWxsO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiBwb3BIb3N0Q29udGFpbmVyKCksIG51bGw7XG4gICAgY2FzZSAxMDpcbiAgICAgIHJldHVybiBwb3BQcm92aWRlcih3b3JrSW5Qcm9ncmVzcy50eXBlKSwgbnVsbDtcbiAgICBjYXNlIDIyOlxuICAgIGNhc2UgMjM6XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwb3BTdXNwZW5zZUhhbmRsZXIod29ya0luUHJvZ3Jlc3MpLFxuICAgICAgICBwb3BIaWRkZW5Db250ZXh0KCksXG4gICAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgcG9wKHJlc3VtZWRDYWNoZSksXG4gICAgICAgIChjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuZmxhZ3MpLFxuICAgICAgICBjdXJyZW50ICYgNjU1MzZcbiAgICAgICAgICA/ICgod29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSAoY3VycmVudCAmIC02NTUzNykgfCAxMjgpLCB3b3JrSW5Qcm9ncmVzcylcbiAgICAgICAgICA6IG51bGxcbiAgICAgICk7XG4gICAgY2FzZSAyNDpcbiAgICAgIHJldHVybiBwb3BQcm92aWRlcihDYWNoZUNvbnRleHQpLCBudWxsO1xuICAgIGNhc2UgMjU6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIHVud2luZEludGVycnVwdGVkV29yayhjdXJyZW50LCBpbnRlcnJ1cHRlZFdvcmspIHtcbiAgcG9wVHJlZUNvbnRleHQoaW50ZXJydXB0ZWRXb3JrKTtcbiAgc3dpdGNoIChpbnRlcnJ1cHRlZFdvcmsudGFnKSB7XG4gICAgY2FzZSAzOlxuICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KTtcbiAgICAgIHBvcEhvc3RDb250YWluZXIoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjY6XG4gICAgY2FzZSAyNzpcbiAgICBjYXNlIDU6XG4gICAgICBwb3BIb3N0Q29udGV4dChpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgcG9wSG9zdENvbnRhaW5lcigpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIHBvcFN1c3BlbnNlSGFuZGxlcihpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOTpcbiAgICAgIHBvcChzdXNwZW5zZVN0YWNrQ3Vyc29yKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTA6XG4gICAgICBwb3BQcm92aWRlcihpbnRlcnJ1cHRlZFdvcmsudHlwZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgIGNhc2UgMjM6XG4gICAgICBwb3BTdXNwZW5zZUhhbmRsZXIoaW50ZXJydXB0ZWRXb3JrKTtcbiAgICAgIHBvcEhpZGRlbkNvbnRleHQoKTtcbiAgICAgIG51bGwgIT09IGN1cnJlbnQgJiYgcG9wKHJlc3VtZWRDYWNoZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI0OlxuICAgICAgcG9wUHJvdmlkZXIoQ2FjaGVDb250ZXh0KTtcbiAgfVxufVxudmFyIERlZmF1bHRBc3luY0Rpc3BhdGNoZXIgPSB7XG4gICAgZ2V0Q2FjaGVGb3JUeXBlOiBmdW5jdGlvbiAocmVzb3VyY2VUeXBlKSB7XG4gICAgICB2YXIgY2FjaGUgPSByZWFkQ29udGV4dChDYWNoZUNvbnRleHQpLFxuICAgICAgICBjYWNoZUZvclR5cGUgPSBjYWNoZS5kYXRhLmdldChyZXNvdXJjZVR5cGUpO1xuICAgICAgdm9pZCAwID09PSBjYWNoZUZvclR5cGUgJiZcbiAgICAgICAgKChjYWNoZUZvclR5cGUgPSByZXNvdXJjZVR5cGUoKSksXG4gICAgICAgIGNhY2hlLmRhdGEuc2V0KHJlc291cmNlVHlwZSwgY2FjaGVGb3JUeXBlKSk7XG4gICAgICByZXR1cm4gY2FjaGVGb3JUeXBlO1xuICAgIH1cbiAgfSxcbiAgUG9zc2libHlXZWFrTWFwID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgV2Vha01hcCA/IFdlYWtNYXAgOiBNYXAsXG4gIGV4ZWN1dGlvbkNvbnRleHQgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3QgPSBudWxsLFxuICB3b3JrSW5Qcm9ncmVzcyA9IG51bGwsXG4gIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbCxcbiAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzID0gITEsXG4gIHdvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nID0gITEsXG4gIHdvcmtJblByb2dyZXNzUm9vdERpZEF0dGFjaFBpbmdMaXN0ZW5lciA9ICExLFxuICBlbnRhbmdsZWRSZW5kZXJMYW5lcyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcyA9IDAsXG4gIHdvcmtJblByb2dyZXNzUm9vdFBpbmdlZExhbmVzID0gMCxcbiAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzID0gbnVsbCxcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMgPSBudWxsLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRJbmNsdWRlUmVjdXJzaXZlUmVuZGVyVXBkYXRlID0gITEsXG4gIGdsb2JhbE1vc3RSZWNlbnRGYWxsYmFja1RpbWUgPSAwLFxuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJUYXJnZXRUaW1lID0gSW5maW5pdHksXG4gIHdvcmtJblByb2dyZXNzVHJhbnNpdGlvbnMgPSBudWxsLFxuICBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCA9IG51bGwsXG4gIHJvb3REb2VzSGF2ZVBhc3NpdmVFZmZlY3RzID0gITEsXG4gIHJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzID0gbnVsbCxcbiAgcGVuZGluZ1Bhc3NpdmVFZmZlY3RzTGFuZXMgPSAwLFxuICBwZW5kaW5nUGFzc2l2ZUVmZmVjdHNSZW1haW5pbmdMYW5lcyA9IDAsXG4gIHBlbmRpbmdQYXNzaXZlVHJhbnNpdGlvbnMgPSBudWxsLFxuICBuZXN0ZWRVcGRhdGVDb3VudCA9IDAsXG4gIHJvb3RXaXRoTmVzdGVkVXBkYXRlcyA9IG51bGw7XG5mdW5jdGlvbiByZXF1ZXN0VXBkYXRlTGFuZSgpIHtcbiAgaWYgKDAgIT09IChleGVjdXRpb25Db250ZXh0ICYgMikgJiYgMCAhPT0gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMpXG4gICAgcmV0dXJuIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgLXdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzO1xuICBpZiAobnVsbCAhPT0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCkge1xuICAgIHZhciBhY3Rpb25TY29wZUxhbmUgPSBjdXJyZW50RW50YW5nbGVkTGFuZTtcbiAgICByZXR1cm4gMCAhPT0gYWN0aW9uU2NvcGVMYW5lID8gYWN0aW9uU2NvcGVMYW5lIDogcmVxdWVzdFRyYW5zaXRpb25MYW5lKCk7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVVcGRhdGVQcmlvcml0eSgpO1xufVxuZnVuY3Rpb24gcmVxdWVzdERlZmVycmVkTGFuZSgpIHtcbiAgMCA9PT0gd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUgJiZcbiAgICAod29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUgPVxuICAgICAgMCA9PT0gKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgNTM2ODcwOTEyKSB8fCBpc0h5ZHJhdGluZ1xuICAgICAgICA/IGNsYWltTmV4dFRyYW5zaXRpb25MYW5lKClcbiAgICAgICAgOiA1MzY4NzA5MTIpO1xuICB2YXIgc3VzcGVuc2VIYW5kbGVyID0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudDtcbiAgbnVsbCAhPT0gc3VzcGVuc2VIYW5kbGVyICYmIChzdXNwZW5zZUhhbmRsZXIuZmxhZ3MgfD0gMzIpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmU7XG59XG5mdW5jdGlvbiBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIGxhbmUpIHtcbiAgaWYgKFxuICAgIChyb290ID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QgJiYgMiA9PT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24pIHx8XG4gICAgbnVsbCAhPT0gcm9vdC5jYW5jZWxQZW5kaW5nQ29tbWl0XG4gIClcbiAgICBwcmVwYXJlRnJlc2hTdGFjayhyb290LCAwKSxcbiAgICAgIG1hcmtSb290U3VzcGVuZGVkKFxuICAgICAgICByb290LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NEZWZlcnJlZExhbmUsXG4gICAgICAgICExXG4gICAgICApO1xuICBtYXJrUm9vdFVwZGF0ZWQkMShyb290LCBsYW5lKTtcbiAgaWYgKDAgPT09IChleGVjdXRpb25Db250ZXh0ICYgMikgfHwgcm9vdCAhPT0gd29ya0luUHJvZ3Jlc3NSb290KVxuICAgIHJvb3QgPT09IHdvcmtJblByb2dyZXNzUm9vdCAmJlxuICAgICAgKDAgPT09IChleGVjdXRpb25Db250ZXh0ICYgMikgJiZcbiAgICAgICAgKHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzIHw9IGxhbmUpLFxuICAgICAgNCA9PT0gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyAmJlxuICAgICAgICBtYXJrUm9vdFN1c3BlbmRlZChcbiAgICAgICAgICByb290LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgICExXG4gICAgICAgICkpLFxuICAgICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QpO1xufVxuZnVuY3Rpb24gcGVyZm9ybVdvcmtPblJvb3Qocm9vdCRqc2NvbXAkMCwgbGFuZXMsIGZvcmNlU3luYykge1xuICBpZiAoMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMjcpKTtcbiAgdmFyIHNob3VsZFRpbWVTbGljZSA9XG4gICAgICAoIWZvcmNlU3luYyAmJlxuICAgICAgICAwID09PSAobGFuZXMgJiA2MCkgJiZcbiAgICAgICAgMCA9PT0gKGxhbmVzICYgcm9vdCRqc2NvbXAkMC5leHBpcmVkTGFuZXMpKSB8fFxuICAgICAgY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyhyb290JGpzY29tcCQwLCBsYW5lcyksXG4gICAgZXhpdFN0YXR1cyA9IHNob3VsZFRpbWVTbGljZVxuICAgICAgPyByZW5kZXJSb290Q29uY3VycmVudChyb290JGpzY29tcCQwLCBsYW5lcylcbiAgICAgIDogcmVuZGVyUm9vdFN5bmMocm9vdCRqc2NvbXAkMCwgbGFuZXMsICEwKSxcbiAgICByZW5kZXJXYXNDb25jdXJyZW50ID0gc2hvdWxkVGltZVNsaWNlO1xuICBkbyB7XG4gICAgaWYgKDAgPT09IGV4aXRTdGF0dXMpIHtcbiAgICAgIHdvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nICYmXG4gICAgICAgICFzaG91bGRUaW1lU2xpY2UgJiZcbiAgICAgICAgbWFya1Jvb3RTdXNwZW5kZWQocm9vdCRqc2NvbXAkMCwgbGFuZXMsIDAsICExKTtcbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAoNiA9PT0gZXhpdFN0YXR1cylcbiAgICAgIG1hcmtSb290U3VzcGVuZGVkKFxuICAgICAgICByb290JGpzY29tcCQwLFxuICAgICAgICBsYW5lcyxcbiAgICAgICAgMCxcbiAgICAgICAgIXdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5nc1xuICAgICAgKTtcbiAgICBlbHNlIHtcbiAgICAgIGZvcmNlU3luYyA9IHJvb3QkanNjb21wJDAuY3VycmVudC5hbHRlcm5hdGU7XG4gICAgICBpZiAoXG4gICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgJiZcbiAgICAgICAgIWlzUmVuZGVyQ29uc2lzdGVudFdpdGhFeHRlcm5hbFN0b3Jlcyhmb3JjZVN5bmMpXG4gICAgICApIHtcbiAgICAgICAgZXhpdFN0YXR1cyA9IHJlbmRlclJvb3RTeW5jKHJvb3QkanNjb21wJDAsIGxhbmVzLCAhMSk7XG4gICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnQgPSAhMTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoMiA9PT0gZXhpdFN0YXR1cykge1xuICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50ID0gbGFuZXM7XG4gICAgICAgIGlmIChyb290JGpzY29tcCQwLmVycm9yUmVjb3ZlcnlEaXNhYmxlZExhbmVzICYgcmVuZGVyV2FzQ29uY3VycmVudClcbiAgICAgICAgICB2YXIgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gMDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSByb290JGpzY29tcCQwLnBlbmRpbmdMYW5lcyAmIC01MzY4NzA5MTMpLFxuICAgICAgICAgICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgICAgICAgIDAgIT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgICAgICAgICAgID8gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICAgICAgICAgICAgICAgOiBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiA1MzY4NzA5MTJcbiAgICAgICAgICAgICAgICAgID8gNTM2ODcwOTEyXG4gICAgICAgICAgICAgICAgICA6IDApO1xuICAgICAgICBpZiAoMCAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSB7XG4gICAgICAgICAgbGFuZXMgPSBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQ7XG4gICAgICAgICAgYToge1xuICAgICAgICAgICAgdmFyIHJvb3QgPSByb290JGpzY29tcCQwO1xuICAgICAgICAgICAgZXhpdFN0YXR1cyA9IHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnM7XG4gICAgICAgICAgICB2YXIgd2FzUm9vdERlaHlkcmF0ZWQgPSByb290LmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQ7XG4gICAgICAgICAgICB3YXNSb290RGVoeWRyYXRlZCAmJlxuICAgICAgICAgICAgICAocHJlcGFyZUZyZXNoU3RhY2socm9vdCwgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KS5mbGFncyB8PSAyNTYpO1xuICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gcmVuZGVyUm9vdFN5bmMoXG4gICAgICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCxcbiAgICAgICAgICAgICAgITFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoMiAhPT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0KSB7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRBdHRhY2hQaW5nTGlzdGVuZXIgJiZcbiAgICAgICAgICAgICAgICAhd2FzUm9vdERlaHlkcmF0ZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcm9vdC5lcnJvclJlY292ZXJ5RGlzYWJsZWRMYW5lcyB8PSByZW5kZXJXYXNDb25jdXJyZW50O1xuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzIHw9XG4gICAgICAgICAgICAgICAgICByZW5kZXJXYXNDb25jdXJyZW50O1xuICAgICAgICAgICAgICAgIGV4aXRTdGF0dXMgPSA0O1xuICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCA9IHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzO1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IGV4aXRTdGF0dXM7XG4gICAgICAgICAgICAgIG51bGwgIT09IHJlbmRlcldhc0NvbmN1cnJlbnQgJiZcbiAgICAgICAgICAgICAgICBxdWV1ZVJlY292ZXJhYmxlRXJyb3JzKHJlbmRlcldhc0NvbmN1cnJlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhpdFN0YXR1cyA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVuZGVyV2FzQ29uY3VycmVudCA9ICExO1xuICAgICAgICAgIGlmICgyICE9PSBleGl0U3RhdHVzKSBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKDEgPT09IGV4aXRTdGF0dXMpIHtcbiAgICAgICAgcHJlcGFyZUZyZXNoU3RhY2socm9vdCRqc2NvbXAkMCwgMCk7XG4gICAgICAgIG1hcmtSb290U3VzcGVuZGVkKHJvb3QkanNjb21wJDAsIGxhbmVzLCAwLCAhMCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYToge1xuICAgICAgICBzaG91bGRUaW1lU2xpY2UgPSByb290JGpzY29tcCQwO1xuICAgICAgICBzd2l0Y2ggKGV4aXRTdGF0dXMpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzNDUpKTtcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBpZiAoKGxhbmVzICYgNDE5NDE3NikgPT09IGxhbmVzKSB7XG4gICAgICAgICAgICAgIG1hcmtSb290U3VzcGVuZGVkKFxuICAgICAgICAgICAgICAgIHNob3VsZFRpbWVTbGljZSxcbiAgICAgICAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSxcbiAgICAgICAgICAgICAgICAhd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IG51bGw7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzI5KSk7XG4gICAgICAgIH1cbiAgICAgICAgc2hvdWxkVGltZVNsaWNlLmZpbmlzaGVkV29yayA9IGZvcmNlU3luYztcbiAgICAgICAgc2hvdWxkVGltZVNsaWNlLmZpbmlzaGVkTGFuZXMgPSBsYW5lcztcbiAgICAgICAgaWYgKFxuICAgICAgICAgIChsYW5lcyAmIDYyOTE0NTYwKSA9PT0gbGFuZXMgJiZcbiAgICAgICAgICAoKHJlbmRlcldhc0NvbmN1cnJlbnQgPSBnbG9iYWxNb3N0UmVjZW50RmFsbGJhY2tUaW1lICsgMzAwIC0gbm93KCkpLFxuICAgICAgICAgIDEwIDwgcmVuZGVyV2FzQ29uY3VycmVudClcbiAgICAgICAgKSB7XG4gICAgICAgICAgbWFya1Jvb3RTdXNwZW5kZWQoXG4gICAgICAgICAgICBzaG91bGRUaW1lU2xpY2UsXG4gICAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lLFxuICAgICAgICAgICAgIXdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5nc1xuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKDAgIT09IGdldE5leHRMYW5lcyhzaG91bGRUaW1lU2xpY2UsIDApKSBicmVhayBhO1xuICAgICAgICAgIHNob3VsZFRpbWVTbGljZS50aW1lb3V0SGFuZGxlID0gc2NoZWR1bGVUaW1lb3V0KFxuICAgICAgICAgICAgY29tbWl0Um9vdFdoZW5SZWFkeS5iaW5kKFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBzaG91bGRUaW1lU2xpY2UsXG4gICAgICAgICAgICAgIGZvcmNlU3luYyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVHJhbnNpdGlvbnMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdERpZEluY2x1ZGVSZWN1cnNpdmVSZW5kZXJVcGRhdGUsXG4gICAgICAgICAgICAgIGxhbmVzLFxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMsXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyxcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzLFxuICAgICAgICAgICAgICAyLFxuICAgICAgICAgICAgICAtMCxcbiAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHJlbmRlcldhc0NvbmN1cnJlbnRcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgY29tbWl0Um9vdFdoZW5SZWFkeShcbiAgICAgICAgICBzaG91bGRUaW1lU2xpY2UsXG4gICAgICAgICAgZm9yY2VTeW5jLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzLFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzVHJhbnNpdGlvbnMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RGlkSW5jbHVkZVJlY3Vyc2l2ZVJlbmRlclVwZGF0ZSxcbiAgICAgICAgICBsYW5lcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RJbnRlcmxlYXZlZFVwZGF0ZWRMYW5lcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzLFxuICAgICAgICAgIDAsXG4gICAgICAgICAgLTAsXG4gICAgICAgICAgMFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBicmVhaztcbiAgfSB3aGlsZSAoMSk7XG4gIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290JGpzY29tcCQwKTtcbn1cbmZ1bmN0aW9uIHF1ZXVlUmVjb3ZlcmFibGVFcnJvcnMoZXJyb3JzKSB7XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzXG4gICAgPyAod29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMgPSBlcnJvcnMpXG4gICAgOiB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycy5wdXNoLmFwcGx5KFxuICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyxcbiAgICAgICAgZXJyb3JzXG4gICAgICApO1xufVxuZnVuY3Rpb24gY29tbWl0Um9vdFdoZW5SZWFkeShcbiAgcm9vdCxcbiAgZmluaXNoZWRXb3JrLFxuICByZWNvdmVyYWJsZUVycm9ycyxcbiAgdHJhbnNpdGlvbnMsXG4gIGRpZEluY2x1ZGVSZW5kZXJQaGFzZVVwZGF0ZSxcbiAgbGFuZXMsXG4gIHNwYXduZWRMYW5lLFxuICB1cGRhdGVkTGFuZXMsXG4gIHN1c3BlbmRlZFJldHJ5TGFuZXMsXG4gIGRpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyxcbiAgc3VzcGVuZGVkQ29tbWl0UmVhc29uLFxuICBjb21wbGV0ZWRSZW5kZXJTdGFydFRpbWUsXG4gIGNvbXBsZXRlZFJlbmRlckVuZFRpbWVcbikge1xuICB2YXIgc3VidHJlZUZsYWdzID0gZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncztcbiAgaWYgKHN1YnRyZWVGbGFncyAmIDgxOTIgfHwgMTY3ODU0MDggPT09IChzdWJ0cmVlRmxhZ3MgJiAxNjc4NTQwOCkpXG4gICAgaWYgKFxuICAgICAgKChzdXNwZW5kZWRTdGF0ZSA9IHsgc3R5bGVzaGVldHM6IG51bGwsIGNvdW50OiAwLCB1bnN1c3BlbmQ6IG5vb3AgfSksXG4gICAgICBhY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0T25GaWJlcihmaW5pc2hlZFdvcmspLFxuICAgICAgKGZpbmlzaGVkV29yayA9IHdhaXRGb3JDb21taXRUb0JlUmVhZHkoKSksXG4gICAgICBudWxsICE9PSBmaW5pc2hlZFdvcmspXG4gICAgKSB7XG4gICAgICByb290LmNhbmNlbFBlbmRpbmdDb21taXQgPSBmaW5pc2hlZFdvcmsoXG4gICAgICAgIGNvbW1pdFJvb3QuYmluZChcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHJvb3QsXG4gICAgICAgICAgcmVjb3ZlcmFibGVFcnJvcnMsXG4gICAgICAgICAgdHJhbnNpdGlvbnMsXG4gICAgICAgICAgZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlLFxuICAgICAgICAgIHNwYXduZWRMYW5lLFxuICAgICAgICAgIHVwZGF0ZWRMYW5lcyxcbiAgICAgICAgICBzdXNwZW5kZWRSZXRyeUxhbmVzLFxuICAgICAgICAgIDEsXG4gICAgICAgICAgY29tcGxldGVkUmVuZGVyU3RhcnRUaW1lLFxuICAgICAgICAgIGNvbXBsZXRlZFJlbmRlckVuZFRpbWVcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIG1hcmtSb290U3VzcGVuZGVkKHJvb3QsIGxhbmVzLCBzcGF3bmVkTGFuZSwgIWRpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICBjb21taXRSb290KFxuICAgIHJvb3QsXG4gICAgcmVjb3ZlcmFibGVFcnJvcnMsXG4gICAgdHJhbnNpdGlvbnMsXG4gICAgZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlLFxuICAgIHNwYXduZWRMYW5lLFxuICAgIHVwZGF0ZWRMYW5lcyxcbiAgICBzdXNwZW5kZWRSZXRyeUxhbmVzLFxuICAgIHN1c3BlbmRlZENvbW1pdFJlYXNvbixcbiAgICBjb21wbGV0ZWRSZW5kZXJTdGFydFRpbWUsXG4gICAgY29tcGxldGVkUmVuZGVyRW5kVGltZVxuICApO1xufVxuZnVuY3Rpb24gaXNSZW5kZXJDb25zaXN0ZW50V2l0aEV4dGVybmFsU3RvcmVzKGZpbmlzaGVkV29yaykge1xuICBmb3IgKHZhciBub2RlID0gZmluaXNoZWRXb3JrOyA7ICkge1xuICAgIHZhciB0YWcgPSBub2RlLnRhZztcbiAgICBpZiAoXG4gICAgICAoMCA9PT0gdGFnIHx8IDExID09PSB0YWcgfHwgMTUgPT09IHRhZykgJiZcbiAgICAgIG5vZGUuZmxhZ3MgJiAxNjM4NCAmJlxuICAgICAgKCh0YWcgPSBub2RlLnVwZGF0ZVF1ZXVlKSxcbiAgICAgIG51bGwgIT09IHRhZyAmJiAoKHRhZyA9IHRhZy5zdG9yZXMpLCBudWxsICE9PSB0YWcpKVxuICAgIClcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFnLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGVjayA9IHRhZ1tpXSxcbiAgICAgICAgICBnZXRTbmFwc2hvdCA9IGNoZWNrLmdldFNuYXBzaG90O1xuICAgICAgICBjaGVjayA9IGNoZWNrLnZhbHVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghb2JqZWN0SXMoZ2V0U25hcHNob3QoKSwgY2hlY2spKSByZXR1cm4gITE7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgdGFnID0gbm9kZS5jaGlsZDtcbiAgICBpZiAobm9kZS5zdWJ0cmVlRmxhZ3MgJiAxNjM4NCAmJiBudWxsICE9PSB0YWcpXG4gICAgICAodGFnLnJldHVybiA9IG5vZGUpLCAobm9kZSA9IHRhZyk7XG4gICAgZWxzZSB7XG4gICAgICBpZiAobm9kZSA9PT0gZmluaXNoZWRXb3JrKSBicmVhaztcbiAgICAgIGZvciAoOyBudWxsID09PSBub2RlLnNpYmxpbmc7ICkge1xuICAgICAgICBpZiAobnVsbCA9PT0gbm9kZS5yZXR1cm4gfHwgbm9kZS5yZXR1cm4gPT09IGZpbmlzaGVkV29yaykgcmV0dXJuICEwO1xuICAgICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgICB9XG4gICAgICBub2RlLnNpYmxpbmcucmV0dXJuID0gbm9kZS5yZXR1cm47XG4gICAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBtYXJrUm9vdFN1c3BlbmRlZChcbiAgcm9vdCxcbiAgc3VzcGVuZGVkTGFuZXMsXG4gIHNwYXduZWRMYW5lLFxuICBkaWRBdHRlbXB0RW50aXJlVHJlZVxuKSB7XG4gIHN1c3BlbmRlZExhbmVzICY9IH53b3JrSW5Qcm9ncmVzc1Jvb3RQaW5nZWRMYW5lcztcbiAgc3VzcGVuZGVkTGFuZXMgJj0gfndvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzO1xuICByb290LnN1c3BlbmRlZExhbmVzIHw9IHN1c3BlbmRlZExhbmVzO1xuICByb290LnBpbmdlZExhbmVzICY9IH5zdXNwZW5kZWRMYW5lcztcbiAgZGlkQXR0ZW1wdEVudGlyZVRyZWUgJiYgKHJvb3Qud2FybUxhbmVzIHw9IHN1c3BlbmRlZExhbmVzKTtcbiAgZGlkQXR0ZW1wdEVudGlyZVRyZWUgPSByb290LmV4cGlyYXRpb25UaW1lcztcbiAgZm9yICh2YXIgbGFuZXMgPSBzdXNwZW5kZWRMYW5lczsgMCA8IGxhbmVzOyApIHtcbiAgICB2YXIgaW5kZXgkNiA9IDMxIC0gY2x6MzIobGFuZXMpLFxuICAgICAgbGFuZSA9IDEgPDwgaW5kZXgkNjtcbiAgICBkaWRBdHRlbXB0RW50aXJlVHJlZVtpbmRleCQ2XSA9IC0xO1xuICAgIGxhbmVzICY9IH5sYW5lO1xuICB9XG4gIDAgIT09IHNwYXduZWRMYW5lICYmXG4gICAgbWFya1NwYXduZWREZWZlcnJlZExhbmUocm9vdCwgc3Bhd25lZExhbmUsIHN1c3BlbmRlZExhbmVzKTtcbn1cbmZ1bmN0aW9uIGZsdXNoU3luY1dvcmskMSgpIHtcbiAgcmV0dXJuIDAgPT09IChleGVjdXRpb25Db250ZXh0ICYgNilcbiAgICA/IChmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbCgwLCAhMSksICExKVxuICAgIDogITA7XG59XG5mdW5jdGlvbiByZXNldFdvcmtJblByb2dyZXNzU3RhY2soKSB7XG4gIGlmIChudWxsICE9PSB3b3JrSW5Qcm9ncmVzcykge1xuICAgIGlmICgwID09PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbilcbiAgICAgIHZhciBpbnRlcnJ1cHRlZFdvcmsgPSB3b3JrSW5Qcm9ncmVzcy5yZXR1cm47XG4gICAgZWxzZVxuICAgICAgKGludGVycnVwdGVkV29yayA9IHdvcmtJblByb2dyZXNzKSxcbiAgICAgICAgKGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gbnVsbCksXG4gICAgICAgIHJlc2V0SG9va3NPblVud2luZChpbnRlcnJ1cHRlZFdvcmspLFxuICAgICAgICAodGhlbmFibGVTdGF0ZSQxID0gbnVsbCksXG4gICAgICAgICh0aGVuYWJsZUluZGV4Q291bnRlciQxID0gMCksXG4gICAgICAgIChpbnRlcnJ1cHRlZFdvcmsgPSB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgZm9yICg7IG51bGwgIT09IGludGVycnVwdGVkV29yazsgKVxuICAgICAgdW53aW5kSW50ZXJydXB0ZWRXb3JrKGludGVycnVwdGVkV29yay5hbHRlcm5hdGUsIGludGVycnVwdGVkV29yayksXG4gICAgICAgIChpbnRlcnJ1cHRlZFdvcmsgPSBpbnRlcnJ1cHRlZFdvcmsucmV0dXJuKTtcbiAgICB3b3JrSW5Qcm9ncmVzcyA9IG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIGxhbmVzKSB7XG4gIHJvb3QuZmluaXNoZWRXb3JrID0gbnVsbDtcbiAgcm9vdC5maW5pc2hlZExhbmVzID0gMDtcbiAgdmFyIHRpbWVvdXRIYW5kbGUgPSByb290LnRpbWVvdXRIYW5kbGU7XG4gIC0xICE9PSB0aW1lb3V0SGFuZGxlICYmXG4gICAgKChyb290LnRpbWVvdXRIYW5kbGUgPSAtMSksIGNhbmNlbFRpbWVvdXQodGltZW91dEhhbmRsZSkpO1xuICB0aW1lb3V0SGFuZGxlID0gcm9vdC5jYW5jZWxQZW5kaW5nQ29tbWl0O1xuICBudWxsICE9PSB0aW1lb3V0SGFuZGxlICYmXG4gICAgKChyb290LmNhbmNlbFBlbmRpbmdDb21taXQgPSBudWxsKSwgdGltZW91dEhhbmRsZSgpKTtcbiAgcmVzZXRXb3JrSW5Qcm9ncmVzc1N0YWNrKCk7XG4gIHdvcmtJblByb2dyZXNzUm9vdCA9IHJvb3Q7XG4gIHdvcmtJblByb2dyZXNzID0gdGltZW91dEhhbmRsZSA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKHJvb3QuY3VycmVudCwgbnVsbCk7XG4gIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzID0gbGFuZXM7XG4gIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGw7XG4gIHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyA9ICExO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RJc1ByZXJlbmRlcmluZyA9IGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcocm9vdCwgbGFuZXMpO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRBdHRhY2hQaW5nTGlzdGVuZXIgPSAhMTtcbiAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZXRyeUxhbmVzID1cbiAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSA9XG4gICAgd29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXMgPVxuICAgIHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzID1cbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgPVxuICAgIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPVxuICAgICAgMDtcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMgPSB3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzID1cbiAgICBudWxsO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3REaWRJbmNsdWRlUmVjdXJzaXZlUmVuZGVyVXBkYXRlID0gITE7XG4gIDAgIT09IChsYW5lcyAmIDgpICYmIChsYW5lcyB8PSBsYW5lcyAmIDMyKTtcbiAgdmFyIGFsbEVudGFuZ2xlZExhbmVzID0gcm9vdC5lbnRhbmdsZWRMYW5lcztcbiAgaWYgKDAgIT09IGFsbEVudGFuZ2xlZExhbmVzKVxuICAgIGZvciAoXG4gICAgICByb290ID0gcm9vdC5lbnRhbmdsZW1lbnRzLCBhbGxFbnRhbmdsZWRMYW5lcyAmPSBsYW5lcztcbiAgICAgIDAgPCBhbGxFbnRhbmdsZWRMYW5lcztcblxuICAgICkge1xuICAgICAgdmFyIGluZGV4JDQgPSAzMSAtIGNsejMyKGFsbEVudGFuZ2xlZExhbmVzKSxcbiAgICAgICAgbGFuZSA9IDEgPDwgaW5kZXgkNDtcbiAgICAgIGxhbmVzIHw9IHJvb3RbaW5kZXgkNF07XG4gICAgICBhbGxFbnRhbmdsZWRMYW5lcyAmPSB+bGFuZTtcbiAgICB9XG4gIGVudGFuZ2xlZFJlbmRlckxhbmVzID0gbGFuZXM7XG4gIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKTtcbiAgcmV0dXJuIHRpbWVvdXRIYW5kbGU7XG59XG5mdW5jdGlvbiBoYW5kbGVUaHJvdyhyb290LCB0aHJvd25WYWx1ZSkge1xuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxID0gbnVsbDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IENvbnRleHRPbmx5RGlzcGF0Y2hlcjtcbiAgdGhyb3duVmFsdWUgPT09IFN1c3BlbnNlRXhjZXB0aW9uXG4gICAgPyAoKHRocm93blZhbHVlID0gZ2V0U3VzcGVuZGVkVGhlbmFibGUoKSksXG4gICAgICAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAzKSlcbiAgICA6IHRocm93blZhbHVlID09PSBTdXNwZW5zZXlDb21taXRFeGNlcHRpb25cbiAgICAgID8gKCh0aHJvd25WYWx1ZSA9IGdldFN1c3BlbmRlZFRoZW5hYmxlKCkpLFxuICAgICAgICAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSA0KSlcbiAgICAgIDogKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID1cbiAgICAgICAgICB0aHJvd25WYWx1ZSA9PT0gU2VsZWN0aXZlSHlkcmF0aW9uRXhjZXB0aW9uXG4gICAgICAgICAgICA/IDhcbiAgICAgICAgICAgIDogbnVsbCAhPT0gdGhyb3duVmFsdWUgJiZcbiAgICAgICAgICAgICAgICBcIm9iamVjdFwiID09PSB0eXBlb2YgdGhyb3duVmFsdWUgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB0aHJvd25WYWx1ZS50aGVuXG4gICAgICAgICAgICAgID8gNlxuICAgICAgICAgICAgICA6IDEpO1xuICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gdGhyb3duVmFsdWU7XG4gIG51bGwgPT09IHdvcmtJblByb2dyZXNzICYmXG4gICAgKCh3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gMSksXG4gICAgbG9nVW5jYXVnaHRFcnJvcihcbiAgICAgIHJvb3QsXG4gICAgICBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih0aHJvd25WYWx1ZSwgcm9vdC5jdXJyZW50KVxuICAgICkpO1xufVxuZnVuY3Rpb24gcHVzaERpc3BhdGNoZXIoKSB7XG4gIHZhciBwcmV2RGlzcGF0Y2hlciA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLkg7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkggPSBDb250ZXh0T25seURpc3BhdGNoZXI7XG4gIHJldHVybiBudWxsID09PSBwcmV2RGlzcGF0Y2hlciA/IENvbnRleHRPbmx5RGlzcGF0Y2hlciA6IHByZXZEaXNwYXRjaGVyO1xufVxuZnVuY3Rpb24gcHVzaEFzeW5jRGlzcGF0Y2hlcigpIHtcbiAgdmFyIHByZXZBc3luY0Rpc3BhdGNoZXIgPSBSZWFjdFNoYXJlZEludGVybmFscy5BO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5BID0gRGVmYXVsdEFzeW5jRGlzcGF0Y2hlcjtcbiAgcmV0dXJuIHByZXZBc3luY0Rpc3BhdGNoZXI7XG59XG5mdW5jdGlvbiByZW5kZXJEaWRTdXNwZW5kRGVsYXlJZlBvc3NpYmxlKCkge1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gNDtcbiAgd29ya0luUHJvZ3Jlc3NSb290RGlkU2tpcFN1c3BlbmRlZFNpYmxpbmdzIHx8XG4gICAgKCh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDQxOTQxNzYpICE9PVxuICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiZcbiAgICAgIG51bGwgIT09IHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQpIHx8XG4gICAgKHdvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nID0gITApO1xuICAoMCA9PT0gKHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyAmIDEzNDIxNzcyNykgJiZcbiAgICAwID09PSAod29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMgJiAxMzQyMTc3MjcpKSB8fFxuICAgIG51bGwgPT09IHdvcmtJblByb2dyZXNzUm9vdCB8fFxuICAgIG1hcmtSb290U3VzcGVuZGVkKFxuICAgICAgd29ya0luUHJvZ3Jlc3NSb290LFxuICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMsXG4gICAgICB3b3JrSW5Qcm9ncmVzc0RlZmVycmVkTGFuZSxcbiAgICAgICExXG4gICAgKTtcbn1cbmZ1bmN0aW9uIHJlbmRlclJvb3RTeW5jKHJvb3QsIGxhbmVzLCBzaG91bGRZaWVsZEZvclByZXJlbmRlcmluZykge1xuICB2YXIgcHJldkV4ZWN1dGlvbkNvbnRleHQgPSBleGVjdXRpb25Db250ZXh0O1xuICBleGVjdXRpb25Db250ZXh0IHw9IDI7XG4gIHZhciBwcmV2RGlzcGF0Y2hlciA9IHB1c2hEaXNwYXRjaGVyKCksXG4gICAgcHJldkFzeW5jRGlzcGF0Y2hlciA9IHB1c2hBc3luY0Rpc3BhdGNoZXIoKTtcbiAgaWYgKHdvcmtJblByb2dyZXNzUm9vdCAhPT0gcm9vdCB8fCB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAhPT0gbGFuZXMpXG4gICAgKHdvcmtJblByb2dyZXNzVHJhbnNpdGlvbnMgPSBudWxsKSwgcHJlcGFyZUZyZXNoU3RhY2socm9vdCwgbGFuZXMpO1xuICBsYW5lcyA9ICExO1xuICB2YXIgZXhpdFN0YXR1cyA9IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXM7XG4gIGE6IGRvXG4gICAgdHJ5IHtcbiAgICAgIGlmICgwICE9PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiAmJiBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICB2YXIgdW5pdE9mV29yayA9IHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHRocm93blZhbHVlID0gd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZTtcbiAgICAgICAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbikge1xuICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIHJlc2V0V29ya0luUHJvZ3Jlc3NTdGFjaygpO1xuICAgICAgICAgICAgZXhpdFN0YXR1cyA9IDY7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgbnVsbCA9PT0gc3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IuY3VycmVudCAmJiAobGFuZXMgPSAhMCk7XG4gICAgICAgICAgICB2YXIgcmVhc29uID0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb247XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgdW5pdE9mV29yaywgdGhyb3duVmFsdWUsIHJlYXNvbik7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHNob3VsZFlpZWxkRm9yUHJlcmVuZGVyaW5nICYmXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgZXhpdFN0YXR1cyA9IDA7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgKHJlYXNvbiA9IHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uKSxcbiAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMCksXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbCksXG4gICAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgdW5pdE9mV29yaywgdGhyb3duVmFsdWUsIHJlYXNvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdvcmtMb29wU3luYygpO1xuICAgICAgZXhpdFN0YXR1cyA9IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXM7XG4gICAgICBicmVhaztcbiAgICB9IGNhdGNoICh0aHJvd25WYWx1ZSQxNjQpIHtcbiAgICAgIGhhbmRsZVRocm93KHJvb3QsIHRocm93blZhbHVlJDE2NCk7XG4gICAgfVxuICB3aGlsZSAoMSk7XG4gIGxhbmVzICYmIHJvb3Quc2hlbGxTdXNwZW5kQ291bnRlcisrO1xuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciA9IG51bGw7XG4gIGV4ZWN1dGlvbkNvbnRleHQgPSBwcmV2RXhlY3V0aW9uQ29udGV4dDtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuSCA9IHByZXZEaXNwYXRjaGVyO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5BID0gcHJldkFzeW5jRGlzcGF0Y2hlcjtcbiAgbnVsbCA9PT0gd29ya0luUHJvZ3Jlc3MgJiZcbiAgICAoKHdvcmtJblByb2dyZXNzUm9vdCA9IG51bGwpLFxuICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyA9IDApLFxuICAgIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKSk7XG4gIHJldHVybiBleGl0U3RhdHVzO1xufVxuZnVuY3Rpb24gd29ya0xvb3BTeW5jKCkge1xuICBmb3IgKDsgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3M7ICkgcGVyZm9ybVVuaXRPZldvcmsod29ya0luUHJvZ3Jlc3MpO1xufVxuZnVuY3Rpb24gcmVuZGVyUm9vdENvbmN1cnJlbnQocm9vdCwgbGFuZXMpIHtcbiAgdmFyIHByZXZFeGVjdXRpb25Db250ZXh0ID0gZXhlY3V0aW9uQ29udGV4dDtcbiAgZXhlY3V0aW9uQ29udGV4dCB8PSAyO1xuICB2YXIgcHJldkRpc3BhdGNoZXIgPSBwdXNoRGlzcGF0Y2hlcigpLFxuICAgIHByZXZBc3luY0Rpc3BhdGNoZXIgPSBwdXNoQXN5bmNEaXNwYXRjaGVyKCk7XG4gIHdvcmtJblByb2dyZXNzUm9vdCAhPT0gcm9vdCB8fCB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAhPT0gbGFuZXNcbiAgICA/ICgod29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyA9IG51bGwpLFxuICAgICAgKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgPSBub3coKSArIDUwMCksXG4gICAgICBwcmVwYXJlRnJlc2hTdGFjayhyb290LCBsYW5lcykpXG4gICAgOiAod29ya0luUHJvZ3Jlc3NSb290SXNQcmVyZW5kZXJpbmcgPSBjaGVja0lmUm9vdElzUHJlcmVuZGVyaW5nKFxuICAgICAgICByb290LFxuICAgICAgICBsYW5lc1xuICAgICAgKSk7XG4gIGE6IGRvXG4gICAgdHJ5IHtcbiAgICAgIGlmICgwICE9PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiAmJiBudWxsICE9PSB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICBsYW5lcyA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICB2YXIgdGhyb3duVmFsdWUgPSB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlO1xuICAgICAgICBiOiBzd2l0Y2ggKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uKSB7XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSAwO1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICB0aHJvd0FuZFVud2luZFdvcmtMb29wKHJvb3QsIGxhbmVzLCB0aHJvd25WYWx1ZSwgMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBpZiAoaXNUaGVuYWJsZVJlc29sdmVkKHRocm93blZhbHVlKSkge1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICByZXBsYXlTdXNwZW5kZWRVbml0T2ZXb3JrKGxhbmVzKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYW5lcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgMiA9PT0gd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gJiZcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3QgPT09IHJvb3QgJiZcbiAgICAgICAgICAgICAgICAod29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSA3KTtcbiAgICAgICAgICAgICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRocm93blZhbHVlLnRoZW4obGFuZXMsIGxhbmVzKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3NTdXNwZW5kZWRSZWFzb24gPSA3O1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDU7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIGlzVGhlbmFibGVSZXNvbHZlZCh0aHJvd25WYWx1ZSlcbiAgICAgICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMCksXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsKSxcbiAgICAgICAgICAgICAgICByZXBsYXlTdXNwZW5kZWRVbml0T2ZXb3JrKGxhbmVzKSlcbiAgICAgICAgICAgICAgOiAoKHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMCksXG4gICAgICAgICAgICAgICAgKHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsKSxcbiAgICAgICAgICAgICAgICB0aHJvd0FuZFVud2luZFdvcmtMb29wKHJvb3QsIGxhbmVzLCB0aHJvd25WYWx1ZSwgNykpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgdmFyIHJlc291cmNlID0gbnVsbDtcbiAgICAgICAgICAgIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgICAgICAgcmVzb3VyY2UgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgICAgICAgdmFyIGhvc3RGaWJlciA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZSA/IHByZWxvYWRSZXNvdXJjZShyZXNvdXJjZSkgOiAxKSB7XG4gICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgIHZhciBzaWJsaW5nID0gaG9zdEZpYmVyLnNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gc2libGluZykgd29ya0luUHJvZ3Jlc3MgPSBzaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1cm5GaWJlciA9IGhvc3RGaWJlci5yZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIG51bGwgIT09IHJldHVybkZpYmVyXG4gICAgICAgICAgICAgICAgICAgICAgPyAoKHdvcmtJblByb2dyZXNzID0gcmV0dXJuRmliZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGVVbml0T2ZXb3JrKHJldHVybkZpYmVyKSlcbiAgICAgICAgICAgICAgICAgICAgICA6ICh3b3JrSW5Qcm9ncmVzcyA9IG51bGwpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbiA9IDA7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Rocm93blZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIHRocm93QW5kVW53aW5kV29ya0xvb3Aocm9vdCwgbGFuZXMsIHRocm93blZhbHVlLCA1KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uID0gMDtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzVGhyb3duVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgdGhyb3dBbmRVbndpbmRXb3JrTG9vcChyb290LCBsYW5lcywgdGhyb3duVmFsdWUsIDYpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgcmVzZXRXb3JrSW5Qcm9ncmVzc1N0YWNrKCk7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gNjtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDYyKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdvcmtMb29wQ29uY3VycmVudCgpO1xuICAgICAgYnJlYWs7XG4gICAgfSBjYXRjaCAodGhyb3duVmFsdWUkMTY2KSB7XG4gICAgICBoYW5kbGVUaHJvdyhyb290LCB0aHJvd25WYWx1ZSQxNjYpO1xuICAgIH1cbiAgd2hpbGUgKDEpO1xuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciA9IG51bGw7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkggPSBwcmV2RGlzcGF0Y2hlcjtcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuQSA9IHByZXZBc3luY0Rpc3BhdGNoZXI7XG4gIGV4ZWN1dGlvbkNvbnRleHQgPSBwcmV2RXhlY3V0aW9uQ29udGV4dDtcbiAgaWYgKG51bGwgIT09IHdvcmtJblByb2dyZXNzKSByZXR1cm4gMDtcbiAgd29ya0luUHJvZ3Jlc3NSb290ID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgPSAwO1xuICBmaW5pc2hRdWV1ZWluZ0NvbmN1cnJlbnRVcGRhdGVzKCk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzO1xufVxuZnVuY3Rpb24gd29ya0xvb3BDb25jdXJyZW50KCkge1xuICBmb3IgKDsgbnVsbCAhPT0gd29ya0luUHJvZ3Jlc3MgJiYgIXNob3VsZFlpZWxkKCk7IClcbiAgICBwZXJmb3JtVW5pdE9mV29yayh3b3JrSW5Qcm9ncmVzcyk7XG59XG5mdW5jdGlvbiBwZXJmb3JtVW5pdE9mV29yayh1bml0T2ZXb3JrKSB7XG4gIHZhciBuZXh0ID0gYmVnaW5Xb3JrKHVuaXRPZldvcmsuYWx0ZXJuYXRlLCB1bml0T2ZXb3JrLCBlbnRhbmdsZWRSZW5kZXJMYW5lcyk7XG4gIHVuaXRPZldvcmsubWVtb2l6ZWRQcm9wcyA9IHVuaXRPZldvcmsucGVuZGluZ1Byb3BzO1xuICBudWxsID09PSBuZXh0ID8gY29tcGxldGVVbml0T2ZXb3JrKHVuaXRPZldvcmspIDogKHdvcmtJblByb2dyZXNzID0gbmV4dCk7XG59XG5mdW5jdGlvbiByZXBsYXlTdXNwZW5kZWRVbml0T2ZXb3JrKHVuaXRPZldvcmspIHtcbiAgdmFyIG5leHQgPSB1bml0T2ZXb3JrO1xuICB2YXIgY3VycmVudCA9IG5leHQuYWx0ZXJuYXRlO1xuICBzd2l0Y2ggKG5leHQudGFnKSB7XG4gICAgY2FzZSAxNTpcbiAgICBjYXNlIDA6XG4gICAgICBuZXh0ID0gcmVwbGF5RnVuY3Rpb25Db21wb25lbnQoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIG5leHQsXG4gICAgICAgIG5leHQucGVuZGluZ1Byb3BzLFxuICAgICAgICBuZXh0LnR5cGUsXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXNcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDExOlxuICAgICAgbmV4dCA9IHJlcGxheUZ1bmN0aW9uQ29tcG9uZW50KFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICBuZXh0LFxuICAgICAgICBuZXh0LnBlbmRpbmdQcm9wcyxcbiAgICAgICAgbmV4dC50eXBlLnJlbmRlcixcbiAgICAgICAgbmV4dC5yZWYsXG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA1OlxuICAgICAgcmVzZXRIb29rc09uVW53aW5kKG5leHQpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB1bndpbmRJbnRlcnJ1cHRlZFdvcmsoY3VycmVudCwgbmV4dCksXG4gICAgICAgIChuZXh0ID0gd29ya0luUHJvZ3Jlc3MgPVxuICAgICAgICAgIHJlc2V0V29ya0luUHJvZ3Jlc3MobmV4dCwgZW50YW5nbGVkUmVuZGVyTGFuZXMpKSxcbiAgICAgICAgKG5leHQgPSBiZWdpbldvcmsoY3VycmVudCwgbmV4dCwgZW50YW5nbGVkUmVuZGVyTGFuZXMpKTtcbiAgfVxuICB1bml0T2ZXb3JrLm1lbW9pemVkUHJvcHMgPSB1bml0T2ZXb3JrLnBlbmRpbmdQcm9wcztcbiAgbnVsbCA9PT0gbmV4dCA/IGNvbXBsZXRlVW5pdE9mV29yayh1bml0T2ZXb3JrKSA6ICh3b3JrSW5Qcm9ncmVzcyA9IG5leHQpO1xufVxuZnVuY3Rpb24gdGhyb3dBbmRVbndpbmRXb3JrTG9vcChcbiAgcm9vdCxcbiAgdW5pdE9mV29yayxcbiAgdGhyb3duVmFsdWUsXG4gIHN1c3BlbmRlZFJlYXNvblxuKSB7XG4gIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID0gbnVsbDtcbiAgcmVzZXRIb29rc09uVW53aW5kKHVuaXRPZldvcmspO1xuICB0aGVuYWJsZVN0YXRlJDEgPSBudWxsO1xuICB0aGVuYWJsZUluZGV4Q291bnRlciQxID0gMDtcbiAgdmFyIHJldHVybkZpYmVyID0gdW5pdE9mV29yay5yZXR1cm47XG4gIHRyeSB7XG4gICAgaWYgKFxuICAgICAgdGhyb3dFeGNlcHRpb24oXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICB1bml0T2ZXb3JrLFxuICAgICAgICB0aHJvd25WYWx1ZSxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXNcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAxO1xuICAgICAgbG9nVW5jYXVnaHRFcnJvcihcbiAgICAgICAgcm9vdCxcbiAgICAgICAgY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIodGhyb3duVmFsdWUsIHJvb3QuY3VycmVudClcbiAgICAgICk7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IG51bGw7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChudWxsICE9PSByZXR1cm5GaWJlcikgdGhyb3cgKCh3b3JrSW5Qcm9ncmVzcyA9IHJldHVybkZpYmVyKSwgZXJyb3IpO1xuICAgIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSAxO1xuICAgIGxvZ1VuY2F1Z2h0RXJyb3IoXG4gICAgICByb290LFxuICAgICAgY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIodGhyb3duVmFsdWUsIHJvb3QuY3VycmVudClcbiAgICApO1xuICAgIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHVuaXRPZldvcmsuZmxhZ3MgJiAzMjc2OCkge1xuICAgIGlmIChpc0h5ZHJhdGluZyB8fCAxID09PSBzdXNwZW5kZWRSZWFzb24pIHJvb3QgPSAhMDtcbiAgICBlbHNlIGlmIChcbiAgICAgIHdvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nIHx8XG4gICAgICAwICE9PSAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiA1MzY4NzA5MTIpXG4gICAgKVxuICAgICAgcm9vdCA9ICExO1xuICAgIGVsc2UgaWYgKFxuICAgICAgKCh3b3JrSW5Qcm9ncmVzc1Jvb3REaWRTa2lwU3VzcGVuZGVkU2libGluZ3MgPSByb290ID0gITApLFxuICAgICAgMiA9PT0gc3VzcGVuZGVkUmVhc29uIHx8IDMgPT09IHN1c3BlbmRlZFJlYXNvbiB8fCA2ID09PSBzdXNwZW5kZWRSZWFzb24pXG4gICAgKVxuICAgICAgKHN1c3BlbmRlZFJlYXNvbiA9IHN1c3BlbnNlSGFuZGxlclN0YWNrQ3Vyc29yLmN1cnJlbnQpLFxuICAgICAgICBudWxsICE9PSBzdXNwZW5kZWRSZWFzb24gJiZcbiAgICAgICAgICAxMyA9PT0gc3VzcGVuZGVkUmVhc29uLnRhZyAmJlxuICAgICAgICAgIChzdXNwZW5kZWRSZWFzb24uZmxhZ3MgfD0gMTYzODQpO1xuICAgIHVud2luZFVuaXRPZldvcmsodW5pdE9mV29yaywgcm9vdCk7XG4gIH0gZWxzZSBjb21wbGV0ZVVuaXRPZldvcmsodW5pdE9mV29yayk7XG59XG5mdW5jdGlvbiBjb21wbGV0ZVVuaXRPZldvcmsodW5pdE9mV29yaykge1xuICB2YXIgY29tcGxldGVkV29yayA9IHVuaXRPZldvcms7XG4gIGRvIHtcbiAgICBpZiAoMCAhPT0gKGNvbXBsZXRlZFdvcmsuZmxhZ3MgJiAzMjc2OCkpIHtcbiAgICAgIHVud2luZFVuaXRPZldvcmsoXG4gICAgICAgIGNvbXBsZXRlZFdvcmssXG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5nc1xuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdW5pdE9mV29yayA9IGNvbXBsZXRlZFdvcmsucmV0dXJuO1xuICAgIHZhciBuZXh0ID0gY29tcGxldGVXb3JrKFxuICAgICAgY29tcGxldGVkV29yay5hbHRlcm5hdGUsXG4gICAgICBjb21wbGV0ZWRXb3JrLFxuICAgICAgZW50YW5nbGVkUmVuZGVyTGFuZXNcbiAgICApO1xuICAgIGlmIChudWxsICE9PSBuZXh0KSB7XG4gICAgICB3b3JrSW5Qcm9ncmVzcyA9IG5leHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbXBsZXRlZFdvcmsgPSBjb21wbGV0ZWRXb3JrLnNpYmxpbmc7XG4gICAgaWYgKG51bGwgIT09IGNvbXBsZXRlZFdvcmspIHtcbiAgICAgIHdvcmtJblByb2dyZXNzID0gY29tcGxldGVkV29yaztcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd29ya0luUHJvZ3Jlc3MgPSBjb21wbGV0ZWRXb3JrID0gdW5pdE9mV29yaztcbiAgfSB3aGlsZSAobnVsbCAhPT0gY29tcGxldGVkV29yayk7XG4gIDAgPT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgJiYgKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSA1KTtcbn1cbmZ1bmN0aW9uIHVud2luZFVuaXRPZldvcmsodW5pdE9mV29yaywgc2tpcFNpYmxpbmdzKSB7XG4gIGRvIHtcbiAgICB2YXIgbmV4dCA9IHVud2luZFdvcmsodW5pdE9mV29yay5hbHRlcm5hdGUsIHVuaXRPZldvcmspO1xuICAgIGlmIChudWxsICE9PSBuZXh0KSB7XG4gICAgICBuZXh0LmZsYWdzICY9IDMyNzY3O1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSBuZXh0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuZXh0ID0gdW5pdE9mV29yay5yZXR1cm47XG4gICAgbnVsbCAhPT0gbmV4dCAmJlxuICAgICAgKChuZXh0LmZsYWdzIHw9IDMyNzY4KSwgKG5leHQuc3VidHJlZUZsYWdzID0gMCksIChuZXh0LmRlbGV0aW9ucyA9IG51bGwpKTtcbiAgICBpZiAoXG4gICAgICAhc2tpcFNpYmxpbmdzICYmXG4gICAgICAoKHVuaXRPZldvcmsgPSB1bml0T2ZXb3JrLnNpYmxpbmcpLCBudWxsICE9PSB1bml0T2ZXb3JrKVxuICAgICkge1xuICAgICAgd29ya0luUHJvZ3Jlc3MgPSB1bml0T2ZXb3JrO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3b3JrSW5Qcm9ncmVzcyA9IHVuaXRPZldvcmsgPSBuZXh0O1xuICB9IHdoaWxlIChudWxsICE9PSB1bml0T2ZXb3JrKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IDY7XG4gIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGNvbW1pdFJvb3QoXG4gIHJvb3QsXG4gIHJlY292ZXJhYmxlRXJyb3JzLFxuICB0cmFuc2l0aW9ucyxcbiAgZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlLFxuICBzcGF3bmVkTGFuZSxcbiAgdXBkYXRlZExhbmVzLFxuICBzdXNwZW5kZWRSZXRyeUxhbmVzLFxuICBzdXNwZW5kZWRDb21taXRSZWFzb24sXG4gIGNvbXBsZXRlZFJlbmRlclN0YXJ0VGltZSxcbiAgY29tcGxldGVkUmVuZGVyRW5kVGltZVxuKSB7XG4gIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQsXG4gICAgcHJldmlvdXNVcGRhdGVMYW5lUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICB0cnkge1xuICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gMiksXG4gICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGwpLFxuICAgICAgY29tbWl0Um9vdEltcGwoXG4gICAgICAgIHJvb3QsXG4gICAgICAgIHJlY292ZXJhYmxlRXJyb3JzLFxuICAgICAgICB0cmFuc2l0aW9ucyxcbiAgICAgICAgZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlLFxuICAgICAgICBwcmV2aW91c1VwZGF0ZUxhbmVQcmlvcml0eSxcbiAgICAgICAgc3Bhd25lZExhbmUsXG4gICAgICAgIHVwZGF0ZWRMYW5lcyxcbiAgICAgICAgc3VzcGVuZGVkUmV0cnlMYW5lcyxcbiAgICAgICAgc3VzcGVuZGVkQ29tbWl0UmVhc29uLFxuICAgICAgICBjb21wbGV0ZWRSZW5kZXJTdGFydFRpbWUsXG4gICAgICAgIGNvbXBsZXRlZFJlbmRlckVuZFRpbWVcbiAgICAgICk7XG4gIH0gZmluYWxseSB7XG4gICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbiksXG4gICAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzVXBkYXRlTGFuZVByaW9yaXR5KTtcbiAgfVxufVxuZnVuY3Rpb24gY29tbWl0Um9vdEltcGwoXG4gIHJvb3QsXG4gIHJlY292ZXJhYmxlRXJyb3JzLFxuICB0cmFuc2l0aW9ucyxcbiAgZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlLFxuICByZW5kZXJQcmlvcml0eUxldmVsLFxuICBzcGF3bmVkTGFuZSxcbiAgdXBkYXRlZExhbmVzLFxuICBzdXNwZW5kZWRSZXRyeUxhbmVzXG4pIHtcbiAgZG8gZmx1c2hQYXNzaXZlRWZmZWN0cygpO1xuICB3aGlsZSAobnVsbCAhPT0gcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMpO1xuICBpZiAoMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgzMjcpKTtcbiAgdmFyIGZpbmlzaGVkV29yayA9IHJvb3QuZmluaXNoZWRXb3JrO1xuICBkaWRJbmNsdWRlUmVuZGVyUGhhc2VVcGRhdGUgPSByb290LmZpbmlzaGVkTGFuZXM7XG4gIGlmIChudWxsID09PSBmaW5pc2hlZFdvcmspIHJldHVybiBudWxsO1xuICByb290LmZpbmlzaGVkV29yayA9IG51bGw7XG4gIHJvb3QuZmluaXNoZWRMYW5lcyA9IDA7XG4gIGlmIChmaW5pc2hlZFdvcmsgPT09IHJvb3QuY3VycmVudCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNzcpKTtcbiAgcm9vdC5jYWxsYmFja05vZGUgPSBudWxsO1xuICByb290LmNhbGxiYWNrUHJpb3JpdHkgPSAwO1xuICByb290LmNhbmNlbFBlbmRpbmdDb21taXQgPSBudWxsO1xuICB2YXIgcmVtYWluaW5nTGFuZXMgPSBmaW5pc2hlZFdvcmsubGFuZXMgfCBmaW5pc2hlZFdvcmsuY2hpbGRMYW5lcztcbiAgcmVtYWluaW5nTGFuZXMgfD0gY29uY3VycmVudGx5VXBkYXRlZExhbmVzO1xuICBtYXJrUm9vdEZpbmlzaGVkKFxuICAgIHJvb3QsXG4gICAgZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlLFxuICAgIHJlbWFpbmluZ0xhbmVzLFxuICAgIHNwYXduZWRMYW5lLFxuICAgIHVwZGF0ZWRMYW5lcyxcbiAgICBzdXNwZW5kZWRSZXRyeUxhbmVzXG4gICk7XG4gIHJvb3QgPT09IHdvcmtJblByb2dyZXNzUm9vdCAmJlxuICAgICgod29ya0luUHJvZ3Jlc3MgPSB3b3JrSW5Qcm9ncmVzc1Jvb3QgPSBudWxsKSxcbiAgICAod29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgPSAwKSk7XG4gICgwID09PSAoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIDEwMjU2KSAmJlxuICAgIDAgPT09IChmaW5pc2hlZFdvcmsuZmxhZ3MgJiAxMDI1NikpIHx8XG4gICAgcm9vdERvZXNIYXZlUGFzc2l2ZUVmZmVjdHMgfHxcbiAgICAoKHJvb3REb2VzSGF2ZVBhc3NpdmVFZmZlY3RzID0gITApLFxuICAgIChwZW5kaW5nUGFzc2l2ZUVmZmVjdHNSZW1haW5pbmdMYW5lcyA9IHJlbWFpbmluZ0xhbmVzKSxcbiAgICAocGVuZGluZ1Bhc3NpdmVUcmFuc2l0aW9ucyA9IHRyYW5zaXRpb25zKSxcbiAgICBzY2hlZHVsZUNhbGxiYWNrJDEoTm9ybWFsUHJpb3JpdHkkMSwgZnVuY3Rpb24gKCkge1xuICAgICAgZmx1c2hQYXNzaXZlRWZmZWN0cyghMCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KSk7XG4gIHRyYW5zaXRpb25zID0gMCAhPT0gKGZpbmlzaGVkV29yay5mbGFncyAmIDE1OTkwKTtcbiAgMCAhPT0gKGZpbmlzaGVkV29yay5zdWJ0cmVlRmxhZ3MgJiAxNTk5MCkgfHwgdHJhbnNpdGlvbnNcbiAgICA/ICgodHJhbnNpdGlvbnMgPSBSZWFjdFNoYXJlZEludGVybmFscy5UKSxcbiAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gbnVsbCksXG4gICAgICAoc3Bhd25lZExhbmUgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wKSxcbiAgICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gMiksXG4gICAgICAodXBkYXRlZExhbmVzID0gZXhlY3V0aW9uQ29udGV4dCksXG4gICAgICAoZXhlY3V0aW9uQ29udGV4dCB8PSA0KSxcbiAgICAgIGNvbW1pdEJlZm9yZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspLFxuICAgICAgY29tbWl0TXV0YXRpb25FZmZlY3RzT25GaWJlcihmaW5pc2hlZFdvcmssIHJvb3QpLFxuICAgICAgcmVzdG9yZVNlbGVjdGlvbihzZWxlY3Rpb25JbmZvcm1hdGlvbiwgcm9vdC5jb250YWluZXJJbmZvKSxcbiAgICAgIChfZW5hYmxlZCA9ICEhZXZlbnRzRW5hYmxlZCksXG4gICAgICAoc2VsZWN0aW9uSW5mb3JtYXRpb24gPSBldmVudHNFbmFibGVkID0gbnVsbCksXG4gICAgICAocm9vdC5jdXJyZW50ID0gZmluaXNoZWRXb3JrKSxcbiAgICAgIGNvbW1pdExheW91dEVmZmVjdE9uRmliZXIocm9vdCwgZmluaXNoZWRXb3JrLmFsdGVybmF0ZSwgZmluaXNoZWRXb3JrKSxcbiAgICAgIHJlcXVlc3RQYWludCgpLFxuICAgICAgKGV4ZWN1dGlvbkNvbnRleHQgPSB1cGRhdGVkTGFuZXMpLFxuICAgICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSBzcGF3bmVkTGFuZSksXG4gICAgICAoUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IHRyYW5zaXRpb25zKSlcbiAgICA6IChyb290LmN1cnJlbnQgPSBmaW5pc2hlZFdvcmspO1xuICByb290RG9lc0hhdmVQYXNzaXZlRWZmZWN0c1xuICAgID8gKChyb290RG9lc0hhdmVQYXNzaXZlRWZmZWN0cyA9ICExKSxcbiAgICAgIChyb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cyA9IHJvb3QpLFxuICAgICAgKHBlbmRpbmdQYXNzaXZlRWZmZWN0c0xhbmVzID0gZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlKSlcbiAgICA6IHJlbGVhc2VSb290UG9vbGVkQ2FjaGUocm9vdCwgcmVtYWluaW5nTGFuZXMpO1xuICByZW1haW5pbmdMYW5lcyA9IHJvb3QucGVuZGluZ0xhbmVzO1xuICAwID09PSByZW1haW5pbmdMYW5lcyAmJiAobGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQgPSBudWxsKTtcbiAgb25Db21taXRSb290KGZpbmlzaGVkV29yay5zdGF0ZU5vZGUsIHJlbmRlclByaW9yaXR5TGV2ZWwpO1xuICBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCk7XG4gIGlmIChudWxsICE9PSByZWNvdmVyYWJsZUVycm9ycylcbiAgICBmb3IgKFxuICAgICAgcmVuZGVyUHJpb3JpdHlMZXZlbCA9IHJvb3Qub25SZWNvdmVyYWJsZUVycm9yLCBmaW5pc2hlZFdvcmsgPSAwO1xuICAgICAgZmluaXNoZWRXb3JrIDwgcmVjb3ZlcmFibGVFcnJvcnMubGVuZ3RoO1xuICAgICAgZmluaXNoZWRXb3JrKytcbiAgICApXG4gICAgICAocmVtYWluaW5nTGFuZXMgPSByZWNvdmVyYWJsZUVycm9yc1tmaW5pc2hlZFdvcmtdKSxcbiAgICAgICAgcmVuZGVyUHJpb3JpdHlMZXZlbChyZW1haW5pbmdMYW5lcy52YWx1ZSwge1xuICAgICAgICAgIGNvbXBvbmVudFN0YWNrOiByZW1haW5pbmdMYW5lcy5zdGFja1xuICAgICAgICB9KTtcbiAgMCAhPT0gKHBlbmRpbmdQYXNzaXZlRWZmZWN0c0xhbmVzICYgMykgJiYgZmx1c2hQYXNzaXZlRWZmZWN0cygpO1xuICByZW1haW5pbmdMYW5lcyA9IHJvb3QucGVuZGluZ0xhbmVzO1xuICAwICE9PSAoZGlkSW5jbHVkZVJlbmRlclBoYXNlVXBkYXRlICYgNDE5NDIxOCkgJiYgMCAhPT0gKHJlbWFpbmluZ0xhbmVzICYgNDIpXG4gICAgPyByb290ID09PSByb290V2l0aE5lc3RlZFVwZGF0ZXNcbiAgICAgID8gbmVzdGVkVXBkYXRlQ291bnQrK1xuICAgICAgOiAoKG5lc3RlZFVwZGF0ZUNvdW50ID0gMCksIChyb290V2l0aE5lc3RlZFVwZGF0ZXMgPSByb290KSlcbiAgICA6IChuZXN0ZWRVcGRhdGVDb3VudCA9IDApO1xuICBmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbCgwLCAhMSk7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gcmVsZWFzZVJvb3RQb29sZWRDYWNoZShyb290LCByZW1haW5pbmdMYW5lcykge1xuICAwID09PSAocm9vdC5wb29sZWRDYWNoZUxhbmVzICY9IHJlbWFpbmluZ0xhbmVzKSAmJlxuICAgICgocmVtYWluaW5nTGFuZXMgPSByb290LnBvb2xlZENhY2hlKSxcbiAgICBudWxsICE9IHJlbWFpbmluZ0xhbmVzICYmXG4gICAgICAoKHJvb3QucG9vbGVkQ2FjaGUgPSBudWxsKSwgcmVsZWFzZUNhY2hlKHJlbWFpbmluZ0xhbmVzKSkpO1xufVxuZnVuY3Rpb24gZmx1c2hQYXNzaXZlRWZmZWN0cygpIHtcbiAgaWYgKG51bGwgIT09IHJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzKSB7XG4gICAgdmFyIHJvb3QkMTcwID0gcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMsXG4gICAgICByZW1haW5pbmdMYW5lcyA9IHBlbmRpbmdQYXNzaXZlRWZmZWN0c1JlbWFpbmluZ0xhbmVzO1xuICAgIHBlbmRpbmdQYXNzaXZlRWZmZWN0c1JlbWFpbmluZ0xhbmVzID0gMDtcbiAgICB2YXIgcmVuZGVyUHJpb3JpdHkgPSBsYW5lc1RvRXZlbnRQcmlvcml0eShwZW5kaW5nUGFzc2l2ZUVmZmVjdHNMYW5lcyksXG4gICAgICBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQsXG4gICAgICBwcmV2aW91c1ByaW9yaXR5ID0gUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucDtcbiAgICB0cnkge1xuICAgICAgUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IDMyID4gcmVuZGVyUHJpb3JpdHkgPyAzMiA6IHJlbmRlclByaW9yaXR5O1xuICAgICAgUmVhY3RTaGFyZWRJbnRlcm5hbHMuVCA9IG51bGw7XG4gICAgICBpZiAobnVsbCA9PT0gcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMpXG4gICAgICAgIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSAhMTtcbiAgICAgIGVsc2Uge1xuICAgICAgICByZW5kZXJQcmlvcml0eSA9IHBlbmRpbmdQYXNzaXZlVHJhbnNpdGlvbnM7XG4gICAgICAgIHBlbmRpbmdQYXNzaXZlVHJhbnNpdGlvbnMgPSBudWxsO1xuICAgICAgICB2YXIgcm9vdCA9IHJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzLFxuICAgICAgICAgIGxhbmVzID0gcGVuZGluZ1Bhc3NpdmVFZmZlY3RzTGFuZXM7XG4gICAgICAgIHJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzID0gbnVsbDtcbiAgICAgICAgcGVuZGluZ1Bhc3NpdmVFZmZlY3RzTGFuZXMgPSAwO1xuICAgICAgICBpZiAoMCAhPT0gKGV4ZWN1dGlvbkNvbnRleHQgJiA2KSlcbiAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMzMSkpO1xuICAgICAgICB2YXIgcHJldkV4ZWN1dGlvbkNvbnRleHQgPSBleGVjdXRpb25Db250ZXh0O1xuICAgICAgICBleGVjdXRpb25Db250ZXh0IHw9IDQ7XG4gICAgICAgIGNvbW1pdFBhc3NpdmVVbm1vdW50T25GaWJlcihyb290LmN1cnJlbnQpO1xuICAgICAgICBjb21taXRQYXNzaXZlTW91bnRPbkZpYmVyKHJvb3QsIHJvb3QuY3VycmVudCwgbGFuZXMsIHJlbmRlclByaW9yaXR5KTtcbiAgICAgICAgZXhlY3V0aW9uQ29udGV4dCA9IHByZXZFeGVjdXRpb25Db250ZXh0O1xuICAgICAgICBmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbCgwLCAhMSk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBpbmplY3RlZEhvb2sgJiZcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpbmplY3RlZEhvb2sub25Qb3N0Q29tbWl0RmliZXJSb290XG4gICAgICAgIClcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaW5qZWN0ZWRIb29rLm9uUG9zdENvbW1pdEZpYmVyUm9vdChyZW5kZXJlcklELCByb290KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9ICEwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdDtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSBwcmV2aW91c1ByaW9yaXR5KSxcbiAgICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbiksXG4gICAgICAgIHJlbGVhc2VSb290UG9vbGVkQ2FjaGUocm9vdCQxNzAsIHJlbWFpbmluZ0xhbmVzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3JPblJvb3Qocm9vdEZpYmVyLCBzb3VyY2VGaWJlciwgZXJyb3IpIHtcbiAgc291cmNlRmliZXIgPSBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcihlcnJvciwgc291cmNlRmliZXIpO1xuICBzb3VyY2VGaWJlciA9IGNyZWF0ZVJvb3RFcnJvclVwZGF0ZShyb290RmliZXIuc3RhdGVOb2RlLCBzb3VyY2VGaWJlciwgMik7XG4gIHJvb3RGaWJlciA9IGVucXVldWVVcGRhdGUocm9vdEZpYmVyLCBzb3VyY2VGaWJlciwgMik7XG4gIG51bGwgIT09IHJvb3RGaWJlciAmJlxuICAgIChtYXJrUm9vdFVwZGF0ZWQkMShyb290RmliZXIsIDIpLCBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdEZpYmVyKSk7XG59XG5mdW5jdGlvbiBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihzb3VyY2VGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IpIHtcbiAgaWYgKDMgPT09IHNvdXJjZUZpYmVyLnRhZylcbiAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvck9uUm9vdChzb3VyY2VGaWJlciwgc291cmNlRmliZXIsIGVycm9yKTtcbiAgZWxzZVxuICAgIGZvciAoOyBudWxsICE9PSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yOyApIHtcbiAgICAgIGlmICgzID09PSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLnRhZykge1xuICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvck9uUm9vdChcbiAgICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICAgIHNvdXJjZUZpYmVyLFxuICAgICAgICAgIGVycm9yXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlIGlmICgxID09PSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLnRhZykge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLnN0YXRlTm9kZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT1cbiAgICAgICAgICAgIHR5cGVvZiBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIHx8XG4gICAgICAgICAgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZENhdGNoICYmXG4gICAgICAgICAgICAobnVsbCA9PT0gbGVnYWN5RXJyb3JCb3VuZGFyaWVzVGhhdEFscmVhZHlGYWlsZWQgfHxcbiAgICAgICAgICAgICAgIWxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkLmhhcyhpbnN0YW5jZSkpKVxuICAgICAgICApIHtcbiAgICAgICAgICBzb3VyY2VGaWJlciA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKGVycm9yLCBzb3VyY2VGaWJlcik7XG4gICAgICAgICAgZXJyb3IgPSBjcmVhdGVDbGFzc0Vycm9yVXBkYXRlKDIpO1xuICAgICAgICAgIGluc3RhbmNlID0gZW5xdWV1ZVVwZGF0ZShuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBlcnJvciwgMik7XG4gICAgICAgICAgbnVsbCAhPT0gaW5zdGFuY2UgJiZcbiAgICAgICAgICAgIChpbml0aWFsaXplQ2xhc3NFcnJvclVwZGF0ZShcbiAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLFxuICAgICAgICAgICAgICBzb3VyY2VGaWJlclxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG1hcmtSb290VXBkYXRlZCQxKGluc3RhbmNlLCAyKSxcbiAgICAgICAgICAgIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChpbnN0YW5jZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBuZWFyZXN0TW91bnRlZEFuY2VzdG9yID0gbmVhcmVzdE1vdW50ZWRBbmNlc3Rvci5yZXR1cm47XG4gICAgfVxufVxuZnVuY3Rpb24gYXR0YWNoUGluZ0xpc3RlbmVyKHJvb3QsIHdha2VhYmxlLCBsYW5lcykge1xuICB2YXIgcGluZ0NhY2hlID0gcm9vdC5waW5nQ2FjaGU7XG4gIGlmIChudWxsID09PSBwaW5nQ2FjaGUpIHtcbiAgICBwaW5nQ2FjaGUgPSByb290LnBpbmdDYWNoZSA9IG5ldyBQb3NzaWJseVdlYWtNYXAoKTtcbiAgICB2YXIgdGhyZWFkSURzID0gbmV3IFNldCgpO1xuICAgIHBpbmdDYWNoZS5zZXQod2FrZWFibGUsIHRocmVhZElEcyk7XG4gIH0gZWxzZVxuICAgICh0aHJlYWRJRHMgPSBwaW5nQ2FjaGUuZ2V0KHdha2VhYmxlKSksXG4gICAgICB2b2lkIDAgPT09IHRocmVhZElEcyAmJlxuICAgICAgICAoKHRocmVhZElEcyA9IG5ldyBTZXQoKSksIHBpbmdDYWNoZS5zZXQod2FrZWFibGUsIHRocmVhZElEcykpO1xuICB0aHJlYWRJRHMuaGFzKGxhbmVzKSB8fFxuICAgICgod29ya0luUHJvZ3Jlc3NSb290RGlkQXR0YWNoUGluZ0xpc3RlbmVyID0gITApLFxuICAgIHRocmVhZElEcy5hZGQobGFuZXMpLFxuICAgIChyb290ID0gcGluZ1N1c3BlbmRlZFJvb3QuYmluZChudWxsLCByb290LCB3YWtlYWJsZSwgbGFuZXMpKSxcbiAgICB3YWtlYWJsZS50aGVuKHJvb3QsIHJvb3QpKTtcbn1cbmZ1bmN0aW9uIHBpbmdTdXNwZW5kZWRSb290KHJvb3QsIHdha2VhYmxlLCBwaW5nZWRMYW5lcykge1xuICB2YXIgcGluZ0NhY2hlID0gcm9vdC5waW5nQ2FjaGU7XG4gIG51bGwgIT09IHBpbmdDYWNoZSAmJiBwaW5nQ2FjaGUuZGVsZXRlKHdha2VhYmxlKTtcbiAgcm9vdC5waW5nZWRMYW5lcyB8PSByb290LnN1c3BlbmRlZExhbmVzICYgcGluZ2VkTGFuZXM7XG4gIHJvb3Qud2FybUxhbmVzICY9IH5waW5nZWRMYW5lcztcbiAgd29ya0luUHJvZ3Jlc3NSb290ID09PSByb290ICYmXG4gICAgKHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICYgcGluZ2VkTGFuZXMpID09PSBwaW5nZWRMYW5lcyAmJlxuICAgICg0ID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzIHx8XG4gICAgKDMgPT09IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgJiZcbiAgICAgICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAmIDYyOTE0NTYwKSA9PT1cbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiZcbiAgICAgIDMwMCA+IG5vdygpIC0gZ2xvYmFsTW9zdFJlY2VudEZhbGxiYWNrVGltZSlcbiAgICAgID8gMCA9PT0gKGV4ZWN1dGlvbkNvbnRleHQgJiAyKSAmJiBwcmVwYXJlRnJlc2hTdGFjayhyb290LCAwKVxuICAgICAgOiAod29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXMgfD0gcGluZ2VkTGFuZXMpLFxuICAgIHdvcmtJblByb2dyZXNzU3VzcGVuZGVkUmV0cnlMYW5lcyA9PT0gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgJiZcbiAgICAgICh3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMgPSAwKSk7XG4gIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290KTtcbn1cbmZ1bmN0aW9uIHJldHJ5VGltZWRPdXRCb3VuZGFyeShib3VuZGFyeUZpYmVyLCByZXRyeUxhbmUpIHtcbiAgMCA9PT0gcmV0cnlMYW5lICYmIChyZXRyeUxhbmUgPSBjbGFpbU5leHRSZXRyeUxhbmUoKSk7XG4gIGJvdW5kYXJ5RmliZXIgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoYm91bmRhcnlGaWJlciwgcmV0cnlMYW5lKTtcbiAgbnVsbCAhPT0gYm91bmRhcnlGaWJlciAmJlxuICAgIChtYXJrUm9vdFVwZGF0ZWQkMShib3VuZGFyeUZpYmVyLCByZXRyeUxhbmUpLFxuICAgIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChib3VuZGFyeUZpYmVyKSk7XG59XG5mdW5jdGlvbiByZXRyeURlaHlkcmF0ZWRTdXNwZW5zZUJvdW5kYXJ5KGJvdW5kYXJ5RmliZXIpIHtcbiAgdmFyIHN1c3BlbnNlU3RhdGUgPSBib3VuZGFyeUZpYmVyLm1lbW9pemVkU3RhdGUsXG4gICAgcmV0cnlMYW5lID0gMDtcbiAgbnVsbCAhPT0gc3VzcGVuc2VTdGF0ZSAmJiAocmV0cnlMYW5lID0gc3VzcGVuc2VTdGF0ZS5yZXRyeUxhbmUpO1xuICByZXRyeVRpbWVkT3V0Qm91bmRhcnkoYm91bmRhcnlGaWJlciwgcmV0cnlMYW5lKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVSZXRyeVdha2VhYmxlKGJvdW5kYXJ5RmliZXIsIHdha2VhYmxlKSB7XG4gIHZhciByZXRyeUxhbmUgPSAwO1xuICBzd2l0Y2ggKGJvdW5kYXJ5RmliZXIudGFnKSB7XG4gICAgY2FzZSAxMzpcbiAgICAgIHZhciByZXRyeUNhY2hlID0gYm91bmRhcnlGaWJlci5zdGF0ZU5vZGU7XG4gICAgICB2YXIgc3VzcGVuc2VTdGF0ZSA9IGJvdW5kYXJ5RmliZXIubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIG51bGwgIT09IHN1c3BlbnNlU3RhdGUgJiYgKHJldHJ5TGFuZSA9IHN1c3BlbnNlU3RhdGUucmV0cnlMYW5lKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTk6XG4gICAgICByZXRyeUNhY2hlID0gYm91bmRhcnlGaWJlci5zdGF0ZU5vZGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIyOlxuICAgICAgcmV0cnlDYWNoZSA9IGJvdW5kYXJ5RmliZXIuc3RhdGVOb2RlLl9yZXRyeUNhY2hlO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMzE0KSk7XG4gIH1cbiAgbnVsbCAhPT0gcmV0cnlDYWNoZSAmJiByZXRyeUNhY2hlLmRlbGV0ZSh3YWtlYWJsZSk7XG4gIHJldHJ5VGltZWRPdXRCb3VuZGFyeShib3VuZGFyeUZpYmVyLCByZXRyeUxhbmUpO1xufVxuZnVuY3Rpb24gc2NoZWR1bGVDYWxsYmFjayQxKHByaW9yaXR5TGV2ZWwsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBzY2hlZHVsZUNhbGxiYWNrJDMocHJpb3JpdHlMZXZlbCwgY2FsbGJhY2spO1xufVxudmFyIGZpcnN0U2NoZWR1bGVkUm9vdCA9IG51bGwsXG4gIGxhc3RTY2hlZHVsZWRSb290ID0gbnVsbCxcbiAgZGlkU2NoZWR1bGVNaWNyb3Rhc2sgPSAhMSxcbiAgbWlnaHRIYXZlUGVuZGluZ1N5bmNXb3JrID0gITEsXG4gIGlzRmx1c2hpbmdXb3JrID0gITEsXG4gIGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lID0gMDtcbmZ1bmN0aW9uIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290KSB7XG4gIHJvb3QgIT09IGxhc3RTY2hlZHVsZWRSb290ICYmXG4gICAgbnVsbCA9PT0gcm9vdC5uZXh0ICYmXG4gICAgKG51bGwgPT09IGxhc3RTY2hlZHVsZWRSb290XG4gICAgICA/IChmaXJzdFNjaGVkdWxlZFJvb3QgPSBsYXN0U2NoZWR1bGVkUm9vdCA9IHJvb3QpXG4gICAgICA6IChsYXN0U2NoZWR1bGVkUm9vdCA9IGxhc3RTY2hlZHVsZWRSb290Lm5leHQgPSByb290KSk7XG4gIG1pZ2h0SGF2ZVBlbmRpbmdTeW5jV29yayA9ICEwO1xuICBkaWRTY2hlZHVsZU1pY3JvdGFzayB8fFxuICAgICgoZGlkU2NoZWR1bGVNaWNyb3Rhc2sgPSAhMCksXG4gICAgc2NoZWR1bGVJbW1lZGlhdGVUYXNrKHByb2Nlc3NSb290U2NoZWR1bGVJbk1pY3JvdGFzaykpO1xufVxuZnVuY3Rpb24gZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwoc3luY1RyYW5zaXRpb25MYW5lcywgb25seUxlZ2FjeSkge1xuICBpZiAoIWlzRmx1c2hpbmdXb3JrICYmIG1pZ2h0SGF2ZVBlbmRpbmdTeW5jV29yaykge1xuICAgIGlzRmx1c2hpbmdXb3JrID0gITA7XG4gICAgZG8ge1xuICAgICAgdmFyIGRpZFBlcmZvcm1Tb21lV29yayA9ICExO1xuICAgICAgZm9yICh2YXIgcm9vdCQxNzIgPSBmaXJzdFNjaGVkdWxlZFJvb3Q7IG51bGwgIT09IHJvb3QkMTcyOyApIHtcbiAgICAgICAgaWYgKCFvbmx5TGVnYWN5KVxuICAgICAgICAgIGlmICgwICE9PSBzeW5jVHJhbnNpdGlvbkxhbmVzKSB7XG4gICAgICAgICAgICB2YXIgcGVuZGluZ0xhbmVzID0gcm9vdCQxNzIucGVuZGluZ0xhbmVzO1xuICAgICAgICAgICAgaWYgKDAgPT09IHBlbmRpbmdMYW5lcykgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IDA7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIHN1c3BlbmRlZExhbmVzID0gcm9vdCQxNzIuc3VzcGVuZGVkTGFuZXMsXG4gICAgICAgICAgICAgICAgcGluZ2VkTGFuZXMgPSByb290JDE3Mi5waW5nZWRMYW5lcztcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICAgICAgICAgICAgICAoMSA8PCAoMzEgLSBjbHozMig0MiB8IHN5bmNUcmFuc2l0aW9uTGFuZXMpICsgMSkpIC0gMTtcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICY9XG4gICAgICAgICAgICAgICAgcGVuZGluZ0xhbmVzICYgfihzdXNwZW5kZWRMYW5lcyAmIH5waW5nZWRMYW5lcyk7XG4gICAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICYgMjAxMzI2Njc3XG4gICAgICAgICAgICAgICAgICA/IChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiAyMDEzMjY2NzcpIHwgMVxuICAgICAgICAgICAgICAgICAgOiBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgPyBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgfCAyXG4gICAgICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDAgIT09IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCAmJlxuICAgICAgICAgICAgICAoKGRpZFBlcmZvcm1Tb21lV29yayA9ICEwKSxcbiAgICAgICAgICAgICAgcGVyZm9ybVN5bmNXb3JrT25Sb290KHJvb3QkMTcyLCBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpKTtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyksXG4gICAgICAgICAgICAgIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSBnZXROZXh0TGFuZXMoXG4gICAgICAgICAgICAgICAgcm9vdCQxNzIsXG4gICAgICAgICAgICAgICAgcm9vdCQxNzIgPT09IHdvcmtJblByb2dyZXNzUm9vdCA/IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA6IDBcbiAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgIDAgPT09IChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgJiAzKSB8fFxuICAgICAgICAgICAgICAgIGNoZWNrSWZSb290SXNQcmVyZW5kZXJpbmcocm9vdCQxNzIsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkgfHxcbiAgICAgICAgICAgICAgICAoKGRpZFBlcmZvcm1Tb21lV29yayA9ICEwKSxcbiAgICAgICAgICAgICAgICBwZXJmb3JtU3luY1dvcmtPblJvb3Qocm9vdCQxNzIsIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkpO1xuICAgICAgICByb290JDE3MiA9IHJvb3QkMTcyLm5leHQ7XG4gICAgICB9XG4gICAgfSB3aGlsZSAoZGlkUGVyZm9ybVNvbWVXb3JrKTtcbiAgICBpc0ZsdXNoaW5nV29yayA9ICExO1xuICB9XG59XG5mdW5jdGlvbiBwcm9jZXNzUm9vdFNjaGVkdWxlSW5NaWNyb3Rhc2soKSB7XG4gIG1pZ2h0SGF2ZVBlbmRpbmdTeW5jV29yayA9IGRpZFNjaGVkdWxlTWljcm90YXNrID0gITE7XG4gIHZhciBzeW5jVHJhbnNpdGlvbkxhbmVzID0gMDtcbiAgMCAhPT0gY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUgJiZcbiAgICAoc2hvdWxkQXR0ZW1wdEVhZ2VyVHJhbnNpdGlvbigpICYmXG4gICAgICAoc3luY1RyYW5zaXRpb25MYW5lcyA9IGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lKSxcbiAgICAoY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUgPSAwKSk7XG4gIGZvciAoXG4gICAgdmFyIGN1cnJlbnRUaW1lID0gbm93KCksIHByZXYgPSBudWxsLCByb290ID0gZmlyc3RTY2hlZHVsZWRSb290O1xuICAgIG51bGwgIT09IHJvb3Q7XG5cbiAgKSB7XG4gICAgdmFyIG5leHQgPSByb290Lm5leHQsXG4gICAgICBuZXh0TGFuZXMgPSBzY2hlZHVsZVRhc2tGb3JSb290RHVyaW5nTWljcm90YXNrKHJvb3QsIGN1cnJlbnRUaW1lKTtcbiAgICBpZiAoMCA9PT0gbmV4dExhbmVzKVxuICAgICAgKHJvb3QubmV4dCA9IG51bGwpLFxuICAgICAgICBudWxsID09PSBwcmV2ID8gKGZpcnN0U2NoZWR1bGVkUm9vdCA9IG5leHQpIDogKHByZXYubmV4dCA9IG5leHQpLFxuICAgICAgICBudWxsID09PSBuZXh0ICYmIChsYXN0U2NoZWR1bGVkUm9vdCA9IHByZXYpO1xuICAgIGVsc2UgaWYgKFxuICAgICAgKChwcmV2ID0gcm9vdCksIDAgIT09IHN5bmNUcmFuc2l0aW9uTGFuZXMgfHwgMCAhPT0gKG5leHRMYW5lcyAmIDMpKVxuICAgIClcbiAgICAgIG1pZ2h0SGF2ZVBlbmRpbmdTeW5jV29yayA9ICEwO1xuICAgIHJvb3QgPSBuZXh0O1xuICB9XG4gIGZsdXNoU3luY1dvcmtBY3Jvc3NSb290c19pbXBsKHN5bmNUcmFuc2l0aW9uTGFuZXMsICExKTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlVGFza0ZvclJvb3REdXJpbmdNaWNyb3Rhc2socm9vdCwgY3VycmVudFRpbWUpIHtcbiAgZm9yIChcbiAgICB2YXIgc3VzcGVuZGVkTGFuZXMgPSByb290LnN1c3BlbmRlZExhbmVzLFxuICAgICAgcGluZ2VkTGFuZXMgPSByb290LnBpbmdlZExhbmVzLFxuICAgICAgZXhwaXJhdGlvblRpbWVzID0gcm9vdC5leHBpcmF0aW9uVGltZXMsXG4gICAgICBsYW5lcyA9IHJvb3QucGVuZGluZ0xhbmVzICYgLTYyOTE0NTYxO1xuICAgIDAgPCBsYW5lcztcblxuICApIHtcbiAgICB2YXIgaW5kZXgkNSA9IDMxIC0gY2x6MzIobGFuZXMpLFxuICAgICAgbGFuZSA9IDEgPDwgaW5kZXgkNSxcbiAgICAgIGV4cGlyYXRpb25UaW1lID0gZXhwaXJhdGlvblRpbWVzW2luZGV4JDVdO1xuICAgIGlmICgtMSA9PT0gZXhwaXJhdGlvblRpbWUpIHtcbiAgICAgIGlmICgwID09PSAobGFuZSAmIHN1c3BlbmRlZExhbmVzKSB8fCAwICE9PSAobGFuZSAmIHBpbmdlZExhbmVzKSlcbiAgICAgICAgZXhwaXJhdGlvblRpbWVzW2luZGV4JDVdID0gY29tcHV0ZUV4cGlyYXRpb25UaW1lKGxhbmUsIGN1cnJlbnRUaW1lKTtcbiAgICB9IGVsc2UgZXhwaXJhdGlvblRpbWUgPD0gY3VycmVudFRpbWUgJiYgKHJvb3QuZXhwaXJlZExhbmVzIHw9IGxhbmUpO1xuICAgIGxhbmVzICY9IH5sYW5lO1xuICB9XG4gIGN1cnJlbnRUaW1lID0gd29ya0luUHJvZ3Jlc3NSb290O1xuICBzdXNwZW5kZWRMYW5lcyA9IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzO1xuICBzdXNwZW5kZWRMYW5lcyA9IGdldE5leHRMYW5lcyhcbiAgICByb290LFxuICAgIHJvb3QgPT09IGN1cnJlbnRUaW1lID8gc3VzcGVuZGVkTGFuZXMgOiAwXG4gICk7XG4gIHBpbmdlZExhbmVzID0gcm9vdC5jYWxsYmFja05vZGU7XG4gIGlmIChcbiAgICAwID09PSBzdXNwZW5kZWRMYW5lcyB8fFxuICAgIChyb290ID09PSBjdXJyZW50VGltZSAmJiAyID09PSB3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJlYXNvbikgfHxcbiAgICBudWxsICE9PSByb290LmNhbmNlbFBlbmRpbmdDb21taXRcbiAgKVxuICAgIHJldHVybiAoXG4gICAgICBudWxsICE9PSBwaW5nZWRMYW5lcyAmJlxuICAgICAgICBudWxsICE9PSBwaW5nZWRMYW5lcyAmJlxuICAgICAgICBjYW5jZWxDYWxsYmFjayQxKHBpbmdlZExhbmVzKSxcbiAgICAgIChyb290LmNhbGxiYWNrTm9kZSA9IG51bGwpLFxuICAgICAgKHJvb3QuY2FsbGJhY2tQcmlvcml0eSA9IDApXG4gICAgKTtcbiAgaWYgKFxuICAgIDAgPT09IChzdXNwZW5kZWRMYW5lcyAmIDMpIHx8XG4gICAgY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyhyb290LCBzdXNwZW5kZWRMYW5lcylcbiAgKSB7XG4gICAgY3VycmVudFRpbWUgPSBzdXNwZW5kZWRMYW5lcyAmIC1zdXNwZW5kZWRMYW5lcztcbiAgICBpZiAoY3VycmVudFRpbWUgPT09IHJvb3QuY2FsbGJhY2tQcmlvcml0eSkgcmV0dXJuIGN1cnJlbnRUaW1lO1xuICAgIG51bGwgIT09IHBpbmdlZExhbmVzICYmIGNhbmNlbENhbGxiYWNrJDEocGluZ2VkTGFuZXMpO1xuICAgIHN3aXRjaCAobGFuZXNUb0V2ZW50UHJpb3JpdHkoc3VzcGVuZGVkTGFuZXMpKSB7XG4gICAgICBjYXNlIDI6XG4gICAgICBjYXNlIDg6XG4gICAgICAgIHN1c3BlbmRlZExhbmVzID0gVXNlckJsb2NraW5nUHJpb3JpdHk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzMjpcbiAgICAgICAgc3VzcGVuZGVkTGFuZXMgPSBOb3JtYWxQcmlvcml0eSQxO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjY4NDM1NDU2OlxuICAgICAgICBzdXNwZW5kZWRMYW5lcyA9IElkbGVQcmlvcml0eTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzdXNwZW5kZWRMYW5lcyA9IE5vcm1hbFByaW9yaXR5JDE7XG4gICAgfVxuICAgIHBpbmdlZExhbmVzID0gcGVyZm9ybVdvcmtPblJvb3RWaWFTY2hlZHVsZXJUYXNrLmJpbmQobnVsbCwgcm9vdCk7XG4gICAgc3VzcGVuZGVkTGFuZXMgPSBzY2hlZHVsZUNhbGxiYWNrJDMoc3VzcGVuZGVkTGFuZXMsIHBpbmdlZExhbmVzKTtcbiAgICByb290LmNhbGxiYWNrUHJpb3JpdHkgPSBjdXJyZW50VGltZTtcbiAgICByb290LmNhbGxiYWNrTm9kZSA9IHN1c3BlbmRlZExhbmVzO1xuICAgIHJldHVybiBjdXJyZW50VGltZTtcbiAgfVxuICBudWxsICE9PSBwaW5nZWRMYW5lcyAmJiBudWxsICE9PSBwaW5nZWRMYW5lcyAmJiBjYW5jZWxDYWxsYmFjayQxKHBpbmdlZExhbmVzKTtcbiAgcm9vdC5jYWxsYmFja1ByaW9yaXR5ID0gMjtcbiAgcm9vdC5jYWxsYmFja05vZGUgPSBudWxsO1xuICByZXR1cm4gMjtcbn1cbmZ1bmN0aW9uIHBlcmZvcm1Xb3JrT25Sb290VmlhU2NoZWR1bGVyVGFzayhyb290LCBkaWRUaW1lb3V0KSB7XG4gIHZhciBvcmlnaW5hbENhbGxiYWNrTm9kZSA9IHJvb3QuY2FsbGJhY2tOb2RlO1xuICBpZiAoZmx1c2hQYXNzaXZlRWZmZWN0cygpICYmIHJvb3QuY2FsbGJhY2tOb2RlICE9PSBvcmlnaW5hbENhbGxiYWNrTm9kZSlcbiAgICByZXR1cm4gbnVsbDtcbiAgdmFyIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwID0gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXM7XG4gIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwID0gZ2V0TmV4dExhbmVzKFxuICAgIHJvb3QsXG4gICAgcm9vdCA9PT0gd29ya0luUHJvZ3Jlc3NSb290ID8gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAgOiAwXG4gICk7XG4gIGlmICgwID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyRqc2NvbXAkMCkgcmV0dXJuIG51bGw7XG4gIHBlcmZvcm1Xb3JrT25Sb290KHJvb3QsIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzJGpzY29tcCQwLCBkaWRUaW1lb3V0KTtcbiAgc2NoZWR1bGVUYXNrRm9yUm9vdER1cmluZ01pY3JvdGFzayhyb290LCBub3coKSk7XG4gIHJldHVybiBudWxsICE9IHJvb3QuY2FsbGJhY2tOb2RlICYmIHJvb3QuY2FsbGJhY2tOb2RlID09PSBvcmlnaW5hbENhbGxiYWNrTm9kZVxuICAgID8gcGVyZm9ybVdvcmtPblJvb3RWaWFTY2hlZHVsZXJUYXNrLmJpbmQobnVsbCwgcm9vdClcbiAgICA6IG51bGw7XG59XG5mdW5jdGlvbiBwZXJmb3JtU3luY1dvcmtPblJvb3Qocm9vdCwgbGFuZXMpIHtcbiAgaWYgKGZsdXNoUGFzc2l2ZUVmZmVjdHMoKSkgcmV0dXJuIG51bGw7XG4gIHBlcmZvcm1Xb3JrT25Sb290KHJvb3QsIGxhbmVzLCAhMCk7XG59XG5mdW5jdGlvbiBzY2hlZHVsZUltbWVkaWF0ZVRhc2soY2IpIHtcbiAgc2NoZWR1bGVNaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIDAgIT09IChleGVjdXRpb25Db250ZXh0ICYgNilcbiAgICAgID8gc2NoZWR1bGVDYWxsYmFjayQzKEltbWVkaWF0ZVByaW9yaXR5LCBjYilcbiAgICAgIDogY2IoKTtcbiAgfSk7XG59XG5mdW5jdGlvbiByZXF1ZXN0VHJhbnNpdGlvbkxhbmUoKSB7XG4gIDAgPT09IGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lICYmXG4gICAgKGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lID0gY2xhaW1OZXh0VHJhbnNpdGlvbkxhbmUoKSk7XG4gIHJldHVybiBjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZTtcbn1cbmZ1bmN0aW9uIGNvZXJjZUZvcm1BY3Rpb25Qcm9wKGFjdGlvblByb3ApIHtcbiAgcmV0dXJuIG51bGwgPT0gYWN0aW9uUHJvcCB8fFxuICAgIFwic3ltYm9sXCIgPT09IHR5cGVvZiBhY3Rpb25Qcm9wIHx8XG4gICAgXCJib29sZWFuXCIgPT09IHR5cGVvZiBhY3Rpb25Qcm9wXG4gICAgPyBudWxsXG4gICAgOiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhY3Rpb25Qcm9wXG4gICAgICA/IGFjdGlvblByb3BcbiAgICAgIDogc2FuaXRpemVVUkwoXCJcIiArIGFjdGlvblByb3ApO1xufVxuZnVuY3Rpb24gY3JlYXRlRm9ybURhdGFXaXRoU3VibWl0dGVyKGZvcm0sIHN1Ym1pdHRlcikge1xuICB2YXIgdGVtcCA9IHN1Ym1pdHRlci5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgdGVtcC5uYW1lID0gc3VibWl0dGVyLm5hbWU7XG4gIHRlbXAudmFsdWUgPSBzdWJtaXR0ZXIudmFsdWU7XG4gIGZvcm0uaWQgJiYgdGVtcC5zZXRBdHRyaWJ1dGUoXCJmb3JtXCIsIGZvcm0uaWQpO1xuICBzdWJtaXR0ZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGVtcCwgc3VibWl0dGVyKTtcbiAgZm9ybSA9IG5ldyBGb3JtRGF0YShmb3JtKTtcbiAgdGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRlbXApO1xuICByZXR1cm4gZm9ybTtcbn1cbmZ1bmN0aW9uIGV4dHJhY3RFdmVudHMkMShcbiAgZGlzcGF0Y2hRdWV1ZSxcbiAgZG9tRXZlbnROYW1lLFxuICBtYXliZVRhcmdldEluc3QsXG4gIG5hdGl2ZUV2ZW50LFxuICBuYXRpdmVFdmVudFRhcmdldFxuKSB7XG4gIGlmIChcbiAgICBcInN1Ym1pdFwiID09PSBkb21FdmVudE5hbWUgJiZcbiAgICBtYXliZVRhcmdldEluc3QgJiZcbiAgICBtYXliZVRhcmdldEluc3Quc3RhdGVOb2RlID09PSBuYXRpdmVFdmVudFRhcmdldFxuICApIHtcbiAgICB2YXIgYWN0aW9uID0gY29lcmNlRm9ybUFjdGlvblByb3AoXG4gICAgICAgIChuYXRpdmVFdmVudFRhcmdldFtpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsKS5hY3Rpb25cbiAgICAgICksXG4gICAgICBzdWJtaXR0ZXIgPSBuYXRpdmVFdmVudC5zdWJtaXR0ZXI7XG4gICAgc3VibWl0dGVyICYmXG4gICAgICAoKGRvbUV2ZW50TmFtZSA9IChkb21FdmVudE5hbWUgPSBzdWJtaXR0ZXJbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbClcbiAgICAgICAgPyBjb2VyY2VGb3JtQWN0aW9uUHJvcChkb21FdmVudE5hbWUuZm9ybUFjdGlvbilcbiAgICAgICAgOiBzdWJtaXR0ZXIuZ2V0QXR0cmlidXRlKFwiZm9ybUFjdGlvblwiKSksXG4gICAgICBudWxsICE9PSBkb21FdmVudE5hbWUgJiYgKChhY3Rpb24gPSBkb21FdmVudE5hbWUpLCAoc3VibWl0dGVyID0gbnVsbCkpKTtcbiAgICB2YXIgZXZlbnQgPSBuZXcgU3ludGhldGljRXZlbnQoXG4gICAgICBcImFjdGlvblwiLFxuICAgICAgXCJhY3Rpb25cIixcbiAgICAgIG51bGwsXG4gICAgICBuYXRpdmVFdmVudCxcbiAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgKTtcbiAgICBkaXNwYXRjaFF1ZXVlLnB1c2goe1xuICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgbGlzdGVuZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICBsaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgaWYgKDAgIT09IGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZvcm1EYXRhID0gc3VibWl0dGVyXG4gICAgICAgICAgICAgICAgICA/IGNyZWF0ZUZvcm1EYXRhV2l0aFN1Ym1pdHRlcihuYXRpdmVFdmVudFRhcmdldCwgc3VibWl0dGVyKVxuICAgICAgICAgICAgICAgICAgOiBuZXcgRm9ybURhdGEobmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgICAgICAgICAgIHN0YXJ0SG9zdFRyYW5zaXRpb24oXG4gICAgICAgICAgICAgICAgICBtYXliZVRhcmdldEluc3QsXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmc6ICEwLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBmb3JtRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBuYXRpdmVFdmVudFRhcmdldC5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIGZvcm1EYXRhXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFjdGlvbiAmJlxuICAgICAgICAgICAgICAgIChldmVudC5wcmV2ZW50RGVmYXVsdCgpLFxuICAgICAgICAgICAgICAgIChmb3JtRGF0YSA9IHN1Ym1pdHRlclxuICAgICAgICAgICAgICAgICAgPyBjcmVhdGVGb3JtRGF0YVdpdGhTdWJtaXR0ZXIobmF0aXZlRXZlbnRUYXJnZXQsIHN1Ym1pdHRlcilcbiAgICAgICAgICAgICAgICAgIDogbmV3IEZvcm1EYXRhKG5hdGl2ZUV2ZW50VGFyZ2V0KSksXG4gICAgICAgICAgICAgICAgc3RhcnRIb3N0VHJhbnNpdGlvbihcbiAgICAgICAgICAgICAgICAgIG1heWJlVGFyZ2V0SW5zdCxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZzogITAsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1EYXRhLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG5hdGl2ZUV2ZW50VGFyZ2V0Lm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb25cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgICAgICAgICBmb3JtRGF0YVxuICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY3VycmVudFRhcmdldDogbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pO1xuICB9XG59XG5mb3IgKFxuICB2YXIgaSRqc2NvbXAkaW5saW5lXzE0MzkgPSAwO1xuICBpJGpzY29tcCRpbmxpbmVfMTQzOSA8IHNpbXBsZUV2ZW50UGx1Z2luRXZlbnRzLmxlbmd0aDtcbiAgaSRqc2NvbXAkaW5saW5lXzE0MzkrK1xuKSB7XG4gIHZhciBldmVudE5hbWUkanNjb21wJGlubGluZV8xNDQwID1cbiAgICAgIHNpbXBsZUV2ZW50UGx1Z2luRXZlbnRzW2kkanNjb21wJGlubGluZV8xNDM5XSxcbiAgICBkb21FdmVudE5hbWUkanNjb21wJGlubGluZV8xNDQxID1cbiAgICAgIGV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE0NDAudG9Mb3dlckNhc2UoKSxcbiAgICBjYXBpdGFsaXplZEV2ZW50JGpzY29tcCRpbmxpbmVfMTQ0MiA9XG4gICAgICBldmVudE5hbWUkanNjb21wJGlubGluZV8xNDQwWzBdLnRvVXBwZXJDYXNlKCkgK1xuICAgICAgZXZlbnROYW1lJGpzY29tcCRpbmxpbmVfMTQ0MC5zbGljZSgxKTtcbiAgcmVnaXN0ZXJTaW1wbGVFdmVudChcbiAgICBkb21FdmVudE5hbWUkanNjb21wJGlubGluZV8xNDQxLFxuICAgIFwib25cIiArIGNhcGl0YWxpemVkRXZlbnQkanNjb21wJGlubGluZV8xNDQyXG4gICk7XG59XG5yZWdpc3RlclNpbXBsZUV2ZW50KEFOSU1BVElPTl9FTkQsIFwib25BbmltYXRpb25FbmRcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KEFOSU1BVElPTl9JVEVSQVRJT04sIFwib25BbmltYXRpb25JdGVyYXRpb25cIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KEFOSU1BVElPTl9TVEFSVCwgXCJvbkFuaW1hdGlvblN0YXJ0XCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChcImRibGNsaWNrXCIsIFwib25Eb3VibGVDbGlja1wiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoXCJmb2N1c2luXCIsIFwib25Gb2N1c1wiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoXCJmb2N1c291dFwiLCBcIm9uQmx1clwiKTtcbnJlZ2lzdGVyU2ltcGxlRXZlbnQoVFJBTlNJVElPTl9SVU4sIFwib25UcmFuc2l0aW9uUnVuXCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChUUkFOU0lUSU9OX1NUQVJULCBcIm9uVHJhbnNpdGlvblN0YXJ0XCIpO1xucmVnaXN0ZXJTaW1wbGVFdmVudChUUkFOU0lUSU9OX0NBTkNFTCwgXCJvblRyYW5zaXRpb25DYW5jZWxcIik7XG5yZWdpc3RlclNpbXBsZUV2ZW50KFRSQU5TSVRJT05fRU5ELCBcIm9uVHJhbnNpdGlvbkVuZFwiKTtcbnJlZ2lzdGVyRGlyZWN0RXZlbnQoXCJvbk1vdXNlRW50ZXJcIiwgW1wibW91c2VvdXRcIiwgXCJtb3VzZW92ZXJcIl0pO1xucmVnaXN0ZXJEaXJlY3RFdmVudChcIm9uTW91c2VMZWF2ZVwiLCBbXCJtb3VzZW91dFwiLCBcIm1vdXNlb3ZlclwiXSk7XG5yZWdpc3RlckRpcmVjdEV2ZW50KFwib25Qb2ludGVyRW50ZXJcIiwgW1wicG9pbnRlcm91dFwiLCBcInBvaW50ZXJvdmVyXCJdKTtcbnJlZ2lzdGVyRGlyZWN0RXZlbnQoXCJvblBvaW50ZXJMZWF2ZVwiLCBbXCJwb2ludGVyb3V0XCIsIFwicG9pbnRlcm92ZXJcIl0pO1xucmVnaXN0ZXJUd29QaGFzZUV2ZW50KFxuICBcIm9uQ2hhbmdlXCIsXG4gIFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIilcbik7XG5yZWdpc3RlclR3b1BoYXNlRXZlbnQoXG4gIFwib25TZWxlY3RcIixcbiAgXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcbiAgICBcIiBcIlxuICApXG4pO1xucmVnaXN0ZXJUd29QaGFzZUV2ZW50KFwib25CZWZvcmVJbnB1dFwiLCBbXG4gIFwiY29tcG9zaXRpb25lbmRcIixcbiAgXCJrZXlwcmVzc1wiLFxuICBcInRleHRJbnB1dFwiLFxuICBcInBhc3RlXCJcbl0pO1xucmVnaXN0ZXJUd29QaGFzZUV2ZW50KFxuICBcIm9uQ29tcG9zaXRpb25FbmRcIixcbiAgXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKVxuKTtcbnJlZ2lzdGVyVHdvUGhhc2VFdmVudChcbiAgXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbiAgXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpXG4pO1xucmVnaXN0ZXJUd29QaGFzZUV2ZW50KFxuICBcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcbiAgXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKVxuKTtcbnZhciBtZWRpYUV2ZW50VHlwZXMgPVxuICAgIFwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcbiAgICAgIFwiIFwiXG4gICAgKSxcbiAgbm9uRGVsZWdhdGVkRXZlbnRzID0gbmV3IFNldChcbiAgICBcImJlZm9yZXRvZ2dsZSBjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCBzY3JvbGxlbmQgdG9nZ2xlXCJcbiAgICAgIC5zcGxpdChcIiBcIilcbiAgICAgIC5jb25jYXQobWVkaWFFdmVudFR5cGVzKVxuICApO1xuZnVuY3Rpb24gcHJvY2Vzc0Rpc3BhdGNoUXVldWUoZGlzcGF0Y2hRdWV1ZSwgZXZlbnRTeXN0ZW1GbGFncykge1xuICBldmVudFN5c3RlbUZsYWdzID0gMCAhPT0gKGV2ZW50U3lzdGVtRmxhZ3MgJiA0KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwYXRjaFF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9kaXNwYXRjaFF1ZXVlJGkgPSBkaXNwYXRjaFF1ZXVlW2ldLFxuICAgICAgZXZlbnQgPSBfZGlzcGF0Y2hRdWV1ZSRpLmV2ZW50O1xuICAgIF9kaXNwYXRjaFF1ZXVlJGkgPSBfZGlzcGF0Y2hRdWV1ZSRpLmxpc3RlbmVycztcbiAgICBhOiB7XG4gICAgICB2YXIgcHJldmlvdXNJbnN0YW5jZSA9IHZvaWQgMDtcbiAgICAgIGlmIChldmVudFN5c3RlbUZsYWdzKVxuICAgICAgICBmb3IgKFxuICAgICAgICAgIHZhciBpJGpzY29tcCQwID0gX2Rpc3BhdGNoUXVldWUkaS5sZW5ndGggLSAxO1xuICAgICAgICAgIDAgPD0gaSRqc2NvbXAkMDtcbiAgICAgICAgICBpJGpzY29tcCQwLS1cbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIF9kaXNwYXRjaExpc3RlbmVycyRpID0gX2Rpc3BhdGNoUXVldWUkaVtpJGpzY29tcCQwXSxcbiAgICAgICAgICAgIGluc3RhbmNlID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkuaW5zdGFuY2UsXG4gICAgICAgICAgICBjdXJyZW50VGFyZ2V0ID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkuY3VycmVudFRhcmdldDtcbiAgICAgICAgICBfZGlzcGF0Y2hMaXN0ZW5lcnMkaSA9IF9kaXNwYXRjaExpc3RlbmVycyRpLmxpc3RlbmVyO1xuICAgICAgICAgIGlmIChpbnN0YW5jZSAhPT0gcHJldmlvdXNJbnN0YW5jZSAmJiBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKVxuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBwcmV2aW91c0luc3RhbmNlID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGk7XG4gICAgICAgICAgZXZlbnQuY3VycmVudFRhcmdldCA9IGN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByZXZpb3VzSW5zdGFuY2UoZXZlbnQpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXBvcnRHbG9iYWxFcnJvcihlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBudWxsO1xuICAgICAgICAgIHByZXZpb3VzSW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgICAgZWxzZVxuICAgICAgICBmb3IgKFxuICAgICAgICAgIGkkanNjb21wJDAgPSAwO1xuICAgICAgICAgIGkkanNjb21wJDAgPCBfZGlzcGF0Y2hRdWV1ZSRpLmxlbmd0aDtcbiAgICAgICAgICBpJGpzY29tcCQwKytcbiAgICAgICAgKSB7XG4gICAgICAgICAgX2Rpc3BhdGNoTGlzdGVuZXJzJGkgPSBfZGlzcGF0Y2hRdWV1ZSRpW2kkanNjb21wJDBdO1xuICAgICAgICAgIGluc3RhbmNlID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkuaW5zdGFuY2U7XG4gICAgICAgICAgY3VycmVudFRhcmdldCA9IF9kaXNwYXRjaExpc3RlbmVycyRpLmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgX2Rpc3BhdGNoTGlzdGVuZXJzJGkgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaS5saXN0ZW5lcjtcbiAgICAgICAgICBpZiAoaW5zdGFuY2UgIT09IHByZXZpb3VzSW5zdGFuY2UgJiYgZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgcHJldmlvdXNJbnN0YW5jZSA9IF9kaXNwYXRjaExpc3RlbmVycyRpO1xuICAgICAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBjdXJyZW50VGFyZ2V0O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcmV2aW91c0luc3RhbmNlKGV2ZW50KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmVwb3J0R2xvYmFsRXJyb3IoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgICBwcmV2aW91c0luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoZG9tRXZlbnROYW1lLCB0YXJnZXRFbGVtZW50KSB7XG4gIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSB0YXJnZXRFbGVtZW50W2ludGVybmFsRXZlbnRIYW5kbGVyc0tleV07XG4gIHZvaWQgMCA9PT0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ICYmXG4gICAgKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9IHRhcmdldEVsZW1lbnRbaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5XSA9XG4gICAgICBuZXcgU2V0KCkpO1xuICB2YXIgbGlzdGVuZXJTZXRLZXkgPSBkb21FdmVudE5hbWUgKyBcIl9fYnViYmxlXCI7XG4gIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5oYXMobGlzdGVuZXJTZXRLZXkpIHx8XG4gICAgKGFkZFRyYXBwZWRFdmVudExpc3RlbmVyKHRhcmdldEVsZW1lbnQsIGRvbUV2ZW50TmFtZSwgMiwgITEpLFxuICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5hZGQobGlzdGVuZXJTZXRLZXkpKTtcbn1cbmZ1bmN0aW9uIGxpc3RlblRvTmF0aXZlRXZlbnQoZG9tRXZlbnROYW1lLCBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyLCB0YXJnZXQpIHtcbiAgdmFyIGV2ZW50U3lzdGVtRmxhZ3MgPSAwO1xuICBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyICYmIChldmVudFN5c3RlbUZsYWdzIHw9IDQpO1xuICBhZGRUcmFwcGVkRXZlbnRMaXN0ZW5lcihcbiAgICB0YXJnZXQsXG4gICAgZG9tRXZlbnROYW1lLFxuICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgaXNDYXB0dXJlUGhhc2VMaXN0ZW5lclxuICApO1xufVxudmFyIGxpc3RlbmluZ01hcmtlciA9IFwiX3JlYWN0TGlzdGVuaW5nXCIgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtcbmZ1bmN0aW9uIGxpc3RlblRvQWxsU3VwcG9ydGVkRXZlbnRzKHJvb3RDb250YWluZXJFbGVtZW50KSB7XG4gIGlmICghcm9vdENvbnRhaW5lckVsZW1lbnRbbGlzdGVuaW5nTWFya2VyXSkge1xuICAgIHJvb3RDb250YWluZXJFbGVtZW50W2xpc3RlbmluZ01hcmtlcl0gPSAhMDtcbiAgICBhbGxOYXRpdmVFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZG9tRXZlbnROYW1lKSB7XG4gICAgICBcInNlbGVjdGlvbmNoYW5nZVwiICE9PSBkb21FdmVudE5hbWUgJiZcbiAgICAgICAgKG5vbkRlbGVnYXRlZEV2ZW50cy5oYXMoZG9tRXZlbnROYW1lKSB8fFxuICAgICAgICAgIGxpc3RlblRvTmF0aXZlRXZlbnQoZG9tRXZlbnROYW1lLCAhMSwgcm9vdENvbnRhaW5lckVsZW1lbnQpLFxuICAgICAgICBsaXN0ZW5Ub05hdGl2ZUV2ZW50KGRvbUV2ZW50TmFtZSwgITAsIHJvb3RDb250YWluZXJFbGVtZW50KSk7XG4gICAgfSk7XG4gICAgdmFyIG93bmVyRG9jdW1lbnQgPVxuICAgICAgOSA9PT0gcm9vdENvbnRhaW5lckVsZW1lbnQubm9kZVR5cGVcbiAgICAgICAgPyByb290Q29udGFpbmVyRWxlbWVudFxuICAgICAgICA6IHJvb3RDb250YWluZXJFbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgbnVsbCA9PT0gb3duZXJEb2N1bWVudCB8fFxuICAgICAgb3duZXJEb2N1bWVudFtsaXN0ZW5pbmdNYXJrZXJdIHx8XG4gICAgICAoKG93bmVyRG9jdW1lbnRbbGlzdGVuaW5nTWFya2VyXSA9ICEwKSxcbiAgICAgIGxpc3RlblRvTmF0aXZlRXZlbnQoXCJzZWxlY3Rpb25jaGFuZ2VcIiwgITEsIG93bmVyRG9jdW1lbnQpKTtcbiAgfVxufVxuZnVuY3Rpb24gYWRkVHJhcHBlZEV2ZW50TGlzdGVuZXIoXG4gIHRhcmdldENvbnRhaW5lcixcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyXG4pIHtcbiAgc3dpdGNoIChnZXRFdmVudFByaW9yaXR5KGRvbUV2ZW50TmFtZSkpIHtcbiAgICBjYXNlIDI6XG4gICAgICB2YXIgbGlzdGVuZXJXcmFwcGVyID0gZGlzcGF0Y2hEaXNjcmV0ZUV2ZW50O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA4OlxuICAgICAgbGlzdGVuZXJXcmFwcGVyID0gZGlzcGF0Y2hDb250aW51b3VzRXZlbnQ7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgbGlzdGVuZXJXcmFwcGVyID0gZGlzcGF0Y2hFdmVudDtcbiAgfVxuICBldmVudFN5c3RlbUZsYWdzID0gbGlzdGVuZXJXcmFwcGVyLmJpbmQoXG4gICAgbnVsbCxcbiAgICBkb21FdmVudE5hbWUsXG4gICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICB0YXJnZXRDb250YWluZXJcbiAgKTtcbiAgbGlzdGVuZXJXcmFwcGVyID0gdm9pZCAwO1xuICAhcGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQgfHxcbiAgICAoXCJ0b3VjaHN0YXJ0XCIgIT09IGRvbUV2ZW50TmFtZSAmJlxuICAgICAgXCJ0b3VjaG1vdmVcIiAhPT0gZG9tRXZlbnROYW1lICYmXG4gICAgICBcIndoZWVsXCIgIT09IGRvbUV2ZW50TmFtZSkgfHxcbiAgICAobGlzdGVuZXJXcmFwcGVyID0gITApO1xuICBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyXG4gICAgPyB2b2lkIDAgIT09IGxpc3RlbmVyV3JhcHBlclxuICAgICAgPyB0YXJnZXRDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIHtcbiAgICAgICAgICBjYXB0dXJlOiAhMCxcbiAgICAgICAgICBwYXNzaXZlOiBsaXN0ZW5lcldyYXBwZXJcbiAgICAgICAgfSlcbiAgICAgIDogdGFyZ2V0Q29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCAhMClcbiAgICA6IHZvaWQgMCAhPT0gbGlzdGVuZXJXcmFwcGVyXG4gICAgICA/IHRhcmdldENvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywge1xuICAgICAgICAgIHBhc3NpdmU6IGxpc3RlbmVyV3JhcHBlclxuICAgICAgICB9KVxuICAgICAgOiB0YXJnZXRDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsICExKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnRGb3JQbHVnaW5FdmVudFN5c3RlbShcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICBuYXRpdmVFdmVudCxcbiAgdGFyZ2V0SW5zdCRqc2NvbXAkMCxcbiAgdGFyZ2V0Q29udGFpbmVyXG4pIHtcbiAgdmFyIGFuY2VzdG9ySW5zdCA9IHRhcmdldEluc3QkanNjb21wJDA7XG4gIGlmIChcbiAgICAwID09PSAoZXZlbnRTeXN0ZW1GbGFncyAmIDEpICYmXG4gICAgMCA9PT0gKGV2ZW50U3lzdGVtRmxhZ3MgJiAyKSAmJlxuICAgIG51bGwgIT09IHRhcmdldEluc3QkanNjb21wJDBcbiAgKVxuICAgIGE6IGZvciAoOzspIHtcbiAgICAgIGlmIChudWxsID09PSB0YXJnZXRJbnN0JGpzY29tcCQwKSByZXR1cm47XG4gICAgICB2YXIgbm9kZVRhZyA9IHRhcmdldEluc3QkanNjb21wJDAudGFnO1xuICAgICAgaWYgKDMgPT09IG5vZGVUYWcgfHwgNCA9PT0gbm9kZVRhZykge1xuICAgICAgICB2YXIgY29udGFpbmVyID0gdGFyZ2V0SW5zdCRqc2NvbXAkMC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNvbnRhaW5lciA9PT0gdGFyZ2V0Q29udGFpbmVyIHx8XG4gICAgICAgICAgKDggPT09IGNvbnRhaW5lci5ub2RlVHlwZSAmJiBjb250YWluZXIucGFyZW50Tm9kZSA9PT0gdGFyZ2V0Q29udGFpbmVyKVxuICAgICAgICApXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGlmICg0ID09PSBub2RlVGFnKVxuICAgICAgICAgIGZvciAobm9kZVRhZyA9IHRhcmdldEluc3QkanNjb21wJDAucmV0dXJuOyBudWxsICE9PSBub2RlVGFnOyApIHtcbiAgICAgICAgICAgIHZhciBncmFuZFRhZyA9IG5vZGVUYWcudGFnO1xuICAgICAgICAgICAgaWYgKDMgPT09IGdyYW5kVGFnIHx8IDQgPT09IGdyYW5kVGFnKVxuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgKChncmFuZFRhZyA9IG5vZGVUYWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFxuICAgICAgICAgICAgICAgIGdyYW5kVGFnID09PSB0YXJnZXRDb250YWluZXIgfHxcbiAgICAgICAgICAgICAgICAgICg4ID09PSBncmFuZFRhZy5ub2RlVHlwZSAmJlxuICAgICAgICAgICAgICAgICAgICBncmFuZFRhZy5wYXJlbnROb2RlID09PSB0YXJnZXRDb250YWluZXIpKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgbm9kZVRhZyA9IG5vZGVUYWcucmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgZm9yICg7IG51bGwgIT09IGNvbnRhaW5lcjsgKSB7XG4gICAgICAgICAgbm9kZVRhZyA9IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKGNvbnRhaW5lcik7XG4gICAgICAgICAgaWYgKG51bGwgPT09IG5vZGVUYWcpIHJldHVybjtcbiAgICAgICAgICBncmFuZFRhZyA9IG5vZGVUYWcudGFnO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIDUgPT09IGdyYW5kVGFnIHx8XG4gICAgICAgICAgICA2ID09PSBncmFuZFRhZyB8fFxuICAgICAgICAgICAgMjYgPT09IGdyYW5kVGFnIHx8XG4gICAgICAgICAgICAyNyA9PT0gZ3JhbmRUYWdcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRhcmdldEluc3QkanNjb21wJDAgPSBhbmNlc3Rvckluc3QgPSBub2RlVGFnO1xuICAgICAgICAgICAgY29udGludWUgYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGFpbmVyID0gY29udGFpbmVyLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRhcmdldEluc3QkanNjb21wJDAgPSB0YXJnZXRJbnN0JGpzY29tcCQwLnJldHVybjtcbiAgICB9XG4gIGJhdGNoZWRVcGRhdGVzJDEoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0YXJnZXRJbnN0ID0gYW5jZXN0b3JJbnN0LFxuICAgICAgbmF0aXZlRXZlbnRUYXJnZXQgPSBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCksXG4gICAgICBkaXNwYXRjaFF1ZXVlID0gW107XG4gICAgYToge1xuICAgICAgdmFyIHJlYWN0TmFtZSA9IHRvcExldmVsRXZlbnRzVG9SZWFjdE5hbWVzLmdldChkb21FdmVudE5hbWUpO1xuICAgICAgaWYgKHZvaWQgMCAhPT0gcmVhY3ROYW1lKSB7XG4gICAgICAgIHZhciBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNFdmVudCxcbiAgICAgICAgICByZWFjdEV2ZW50VHlwZSA9IGRvbUV2ZW50TmFtZTtcbiAgICAgICAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICAgICAgICBjYXNlIFwia2V5cHJlc3NcIjpcbiAgICAgICAgICAgIGlmICgwID09PSBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSkgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIFwia2V5ZG93blwiOlxuICAgICAgICAgIGNhc2UgXCJrZXl1cFwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljS2V5Ym9hcmRFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJmb2N1c2luXCI6XG4gICAgICAgICAgICByZWFjdEV2ZW50VHlwZSA9IFwiZm9jdXNcIjtcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICAgICAgICAgIHJlYWN0RXZlbnRUeXBlID0gXCJibHVyXCI7XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNGb2N1c0V2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImJlZm9yZWJsdXJcIjpcbiAgICAgICAgICBjYXNlIFwiYWZ0ZXJibHVyXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNGb2N1c0V2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImNsaWNrXCI6XG4gICAgICAgICAgICBpZiAoMiA9PT0gbmF0aXZlRXZlbnQuYnV0dG9uKSBicmVhayBhO1xuICAgICAgICAgIGNhc2UgXCJhdXhjbGlja1wiOlxuICAgICAgICAgIGNhc2UgXCJkYmxjbGlja1wiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcbiAgICAgICAgICBjYXNlIFwibW91c2Vtb3ZlXCI6XG4gICAgICAgICAgY2FzZSBcIm1vdXNldXBcIjpcbiAgICAgICAgICBjYXNlIFwibW91c2VvdXRcIjpcbiAgICAgICAgICBjYXNlIFwibW91c2VvdmVyXCI6XG4gICAgICAgICAgY2FzZSBcImNvbnRleHRtZW51XCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImRyYWdcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ2VuZFwiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnZW50ZXJcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ2V4aXRcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ2xlYXZlXCI6XG4gICAgICAgICAgY2FzZSBcImRyYWdvdmVyXCI6XG4gICAgICAgICAgY2FzZSBcImRyYWdzdGFydFwiOlxuICAgICAgICAgIGNhc2UgXCJkcm9wXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNEcmFnRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwidG91Y2hjYW5jZWxcIjpcbiAgICAgICAgICBjYXNlIFwidG91Y2hlbmRcIjpcbiAgICAgICAgICBjYXNlIFwidG91Y2htb3ZlXCI6XG4gICAgICAgICAgY2FzZSBcInRvdWNoc3RhcnRcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY1RvdWNoRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIEFOSU1BVElPTl9FTkQ6XG4gICAgICAgICAgY2FzZSBBTklNQVRJT05fSVRFUkFUSU9OOlxuICAgICAgICAgIGNhc2UgQU5JTUFUSU9OX1NUQVJUOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljQW5pbWF0aW9uRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFRSQU5TSVRJT05fRU5EOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljVHJhbnNpdGlvbkV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcInNjcm9sbFwiOlxuICAgICAgICAgIGNhc2UgXCJzY3JvbGxlbmRcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY1VJRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwid2hlZWxcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY1doZWVsRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiY29weVwiOlxuICAgICAgICAgIGNhc2UgXCJjdXRcIjpcbiAgICAgICAgICBjYXNlIFwicGFzdGVcIjpcbiAgICAgICAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6XG4gICAgICAgICAgY2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVyY2FuY2VsXCI6XG4gICAgICAgICAgY2FzZSBcInBvaW50ZXJkb3duXCI6XG4gICAgICAgICAgY2FzZSBcInBvaW50ZXJtb3ZlXCI6XG4gICAgICAgICAgY2FzZSBcInBvaW50ZXJvdXRcIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcm92ZXJcIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcnVwXCI6XG4gICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNQb2ludGVyRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwidG9nZ2xlXCI6XG4gICAgICAgICAgY2FzZSBcImJlZm9yZXRvZ2dsZVwiOlxuICAgICAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljVG9nZ2xlRXZlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluQ2FwdHVyZVBoYXNlID0gMCAhPT0gKGV2ZW50U3lzdGVtRmxhZ3MgJiA0KSxcbiAgICAgICAgICBhY2N1bXVsYXRlVGFyZ2V0T25seSA9XG4gICAgICAgICAgICAhaW5DYXB0dXJlUGhhc2UgJiZcbiAgICAgICAgICAgIChcInNjcm9sbFwiID09PSBkb21FdmVudE5hbWUgfHwgXCJzY3JvbGxlbmRcIiA9PT0gZG9tRXZlbnROYW1lKSxcbiAgICAgICAgICByZWFjdEV2ZW50TmFtZSA9IGluQ2FwdHVyZVBoYXNlXG4gICAgICAgICAgICA/IG51bGwgIT09IHJlYWN0TmFtZVxuICAgICAgICAgICAgICA/IHJlYWN0TmFtZSArIFwiQ2FwdHVyZVwiXG4gICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgOiByZWFjdE5hbWU7XG4gICAgICAgIGluQ2FwdHVyZVBoYXNlID0gW107XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgdmFyIGluc3RhbmNlID0gdGFyZ2V0SW5zdCwgbGFzdEhvc3RDb21wb25lbnQ7XG4gICAgICAgICAgbnVsbCAhPT0gaW5zdGFuY2U7XG5cbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIF9pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50ID0gX2luc3RhbmNlLnN0YXRlTm9kZTtcbiAgICAgICAgICBfaW5zdGFuY2UgPSBfaW5zdGFuY2UudGFnO1xuICAgICAgICAgICg1ICE9PSBfaW5zdGFuY2UgJiYgMjYgIT09IF9pbnN0YW5jZSAmJiAyNyAhPT0gX2luc3RhbmNlKSB8fFxuICAgICAgICAgICAgbnVsbCA9PT0gbGFzdEhvc3RDb21wb25lbnQgfHxcbiAgICAgICAgICAgIG51bGwgPT09IHJlYWN0RXZlbnROYW1lIHx8XG4gICAgICAgICAgICAoKF9pbnN0YW5jZSA9IGdldExpc3RlbmVyKGluc3RhbmNlLCByZWFjdEV2ZW50TmFtZSkpLFxuICAgICAgICAgICAgbnVsbCAhPSBfaW5zdGFuY2UgJiZcbiAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UucHVzaChcbiAgICAgICAgICAgICAgICBjcmVhdGVEaXNwYXRjaExpc3RlbmVyKGluc3RhbmNlLCBfaW5zdGFuY2UsIGxhc3RIb3N0Q29tcG9uZW50KVxuICAgICAgICAgICAgICApKTtcbiAgICAgICAgICBpZiAoYWNjdW11bGF0ZVRhcmdldE9ubHkpIGJyZWFrO1xuICAgICAgICAgIGluc3RhbmNlID0gaW5zdGFuY2UucmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIDAgPCBpbkNhcHR1cmVQaGFzZS5sZW5ndGggJiZcbiAgICAgICAgICAoKHJlYWN0TmFtZSA9IG5ldyBTeW50aGV0aWNFdmVudEN0b3IoXG4gICAgICAgICAgICByZWFjdE5hbWUsXG4gICAgICAgICAgICByZWFjdEV2ZW50VHlwZSxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgKSksXG4gICAgICAgICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHsgZXZlbnQ6IHJlYWN0TmFtZSwgbGlzdGVuZXJzOiBpbkNhcHR1cmVQaGFzZSB9KSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgwID09PSAoZXZlbnRTeXN0ZW1GbGFncyAmIDcpKSB7XG4gICAgICBhOiB7XG4gICAgICAgIHJlYWN0TmFtZSA9XG4gICAgICAgICAgXCJtb3VzZW92ZXJcIiA9PT0gZG9tRXZlbnROYW1lIHx8IFwicG9pbnRlcm92ZXJcIiA9PT0gZG9tRXZlbnROYW1lO1xuICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IgPVxuICAgICAgICAgIFwibW91c2VvdXRcIiA9PT0gZG9tRXZlbnROYW1lIHx8IFwicG9pbnRlcm91dFwiID09PSBkb21FdmVudE5hbWU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICByZWFjdE5hbWUgJiZcbiAgICAgICAgICBuYXRpdmVFdmVudCAhPT0gY3VycmVudFJlcGxheWluZ0V2ZW50ICYmXG4gICAgICAgICAgKHJlYWN0RXZlbnRUeXBlID1cbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgbmF0aXZlRXZlbnQuZnJvbUVsZW1lbnQpICYmXG4gICAgICAgICAgKGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHJlYWN0RXZlbnRUeXBlKSB8fFxuICAgICAgICAgICAgcmVhY3RFdmVudFR5cGVbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0pXG4gICAgICAgIClcbiAgICAgICAgICBicmVhayBhO1xuICAgICAgICBpZiAoU3ludGhldGljRXZlbnRDdG9yIHx8IHJlYWN0TmFtZSkge1xuICAgICAgICAgIHJlYWN0TmFtZSA9XG4gICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldC53aW5kb3cgPT09IG5hdGl2ZUV2ZW50VGFyZ2V0XG4gICAgICAgICAgICAgID8gbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICAgICAgOiAocmVhY3ROYW1lID0gbmF0aXZlRXZlbnRUYXJnZXQub3duZXJEb2N1bWVudClcbiAgICAgICAgICAgICAgICA/IHJlYWN0TmFtZS5kZWZhdWx0VmlldyB8fCByZWFjdE5hbWUucGFyZW50V2luZG93XG4gICAgICAgICAgICAgICAgOiB3aW5kb3c7XG4gICAgICAgICAgaWYgKFN5bnRoZXRpY0V2ZW50Q3Rvcikge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAoKHJlYWN0RXZlbnRUeXBlID1cbiAgICAgICAgICAgICAgICBuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnRvRWxlbWVudCksXG4gICAgICAgICAgICAgIChTeW50aGV0aWNFdmVudEN0b3IgPSB0YXJnZXRJbnN0KSxcbiAgICAgICAgICAgICAgKHJlYWN0RXZlbnRUeXBlID0gcmVhY3RFdmVudFR5cGVcbiAgICAgICAgICAgICAgICA/IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHJlYWN0RXZlbnRUeXBlKVxuICAgICAgICAgICAgICAgIDogbnVsbCksXG4gICAgICAgICAgICAgIG51bGwgIT09IHJlYWN0RXZlbnRUeXBlICYmXG4gICAgICAgICAgICAgICAgKChhY2N1bXVsYXRlVGFyZ2V0T25seSA9XG4gICAgICAgICAgICAgICAgICBnZXROZWFyZXN0TW91bnRlZEZpYmVyKHJlYWN0RXZlbnRUeXBlKSksXG4gICAgICAgICAgICAgICAgKGluQ2FwdHVyZVBoYXNlID0gcmVhY3RFdmVudFR5cGUudGFnKSxcbiAgICAgICAgICAgICAgICByZWFjdEV2ZW50VHlwZSAhPT0gYWNjdW11bGF0ZVRhcmdldE9ubHkgfHxcbiAgICAgICAgICAgICAgICAgICg1ICE9PSBpbkNhcHR1cmVQaGFzZSAmJlxuICAgICAgICAgICAgICAgICAgICAyNyAhPT0gaW5DYXB0dXJlUGhhc2UgJiZcbiAgICAgICAgICAgICAgICAgICAgNiAhPT0gaW5DYXB0dXJlUGhhc2UpKSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgcmVhY3RFdmVudFR5cGUgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSAoU3ludGhldGljRXZlbnRDdG9yID0gbnVsbCksIChyZWFjdEV2ZW50VHlwZSA9IHRhcmdldEluc3QpO1xuICAgICAgICAgIGlmIChTeW50aGV0aWNFdmVudEN0b3IgIT09IHJlYWN0RXZlbnRUeXBlKSB7XG4gICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG4gICAgICAgICAgICBfaW5zdGFuY2UgPSBcIm9uTW91c2VMZWF2ZVwiO1xuICAgICAgICAgICAgcmVhY3RFdmVudE5hbWUgPSBcIm9uTW91c2VFbnRlclwiO1xuICAgICAgICAgICAgaW5zdGFuY2UgPSBcIm1vdXNlXCI7XG4gICAgICAgICAgICBpZiAoXCJwb2ludGVyb3V0XCIgPT09IGRvbUV2ZW50TmFtZSB8fCBcInBvaW50ZXJvdmVyXCIgPT09IGRvbUV2ZW50TmFtZSlcbiAgICAgICAgICAgICAgKGluQ2FwdHVyZVBoYXNlID0gU3ludGhldGljUG9pbnRlckV2ZW50KSxcbiAgICAgICAgICAgICAgICAoX2luc3RhbmNlID0gXCJvblBvaW50ZXJMZWF2ZVwiKSxcbiAgICAgICAgICAgICAgICAocmVhY3RFdmVudE5hbWUgPSBcIm9uUG9pbnRlckVudGVyXCIpLFxuICAgICAgICAgICAgICAgIChpbnN0YW5jZSA9IFwicG9pbnRlclwiKTtcbiAgICAgICAgICAgIGFjY3VtdWxhdGVUYXJnZXRPbmx5ID1cbiAgICAgICAgICAgICAgbnVsbCA9PSBTeW50aGV0aWNFdmVudEN0b3JcbiAgICAgICAgICAgICAgICA/IHJlYWN0TmFtZVxuICAgICAgICAgICAgICAgIDogZ2V0Tm9kZUZyb21JbnN0YW5jZShTeW50aGV0aWNFdmVudEN0b3IpO1xuICAgICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQgPVxuICAgICAgICAgICAgICBudWxsID09IHJlYWN0RXZlbnRUeXBlXG4gICAgICAgICAgICAgICAgPyByZWFjdE5hbWVcbiAgICAgICAgICAgICAgICA6IGdldE5vZGVGcm9tSW5zdGFuY2UocmVhY3RFdmVudFR5cGUpO1xuICAgICAgICAgICAgcmVhY3ROYW1lID0gbmV3IGluQ2FwdHVyZVBoYXNlKFxuICAgICAgICAgICAgICBfaW5zdGFuY2UsXG4gICAgICAgICAgICAgIGluc3RhbmNlICsgXCJsZWF2ZVwiLFxuICAgICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IsXG4gICAgICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJlYWN0TmFtZS50YXJnZXQgPSBhY2N1bXVsYXRlVGFyZ2V0T25seTtcbiAgICAgICAgICAgIHJlYWN0TmFtZS5yZWxhdGVkVGFyZ2V0ID0gbGFzdEhvc3RDb21wb25lbnQ7XG4gICAgICAgICAgICBfaW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUobmF0aXZlRXZlbnRUYXJnZXQpID09PSB0YXJnZXRJbnN0ICYmXG4gICAgICAgICAgICAgICgoaW5DYXB0dXJlUGhhc2UgPSBuZXcgaW5DYXB0dXJlUGhhc2UoXG4gICAgICAgICAgICAgICAgcmVhY3RFdmVudE5hbWUsXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UgKyBcImVudGVyXCIsXG4gICAgICAgICAgICAgICAgcmVhY3RFdmVudFR5cGUsXG4gICAgICAgICAgICAgICAgbmF0aXZlRXZlbnQsXG4gICAgICAgICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICAgICAgKSksXG4gICAgICAgICAgICAgIChpbkNhcHR1cmVQaGFzZS50YXJnZXQgPSBsYXN0SG9zdENvbXBvbmVudCksXG4gICAgICAgICAgICAgIChpbkNhcHR1cmVQaGFzZS5yZWxhdGVkVGFyZ2V0ID0gYWNjdW11bGF0ZVRhcmdldE9ubHkpLFxuICAgICAgICAgICAgICAoX2luc3RhbmNlID0gaW5DYXB0dXJlUGhhc2UpKTtcbiAgICAgICAgICAgIGFjY3VtdWxhdGVUYXJnZXRPbmx5ID0gX2luc3RhbmNlO1xuICAgICAgICAgICAgaWYgKFN5bnRoZXRpY0V2ZW50Q3RvciAmJiByZWFjdEV2ZW50VHlwZSlcbiAgICAgICAgICAgICAgYjoge1xuICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlID0gU3ludGhldGljRXZlbnRDdG9yO1xuICAgICAgICAgICAgICAgIHJlYWN0RXZlbnROYW1lID0gcmVhY3RFdmVudFR5cGU7XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAoXG4gICAgICAgICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudCA9IGluQ2FwdHVyZVBoYXNlO1xuICAgICAgICAgICAgICAgICAgbGFzdEhvc3RDb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudCA9IGdldFBhcmVudChsYXN0SG9zdENvbXBvbmVudClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBpbnN0YW5jZSsrO1xuICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50ID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgX2luc3RhbmNlID0gcmVhY3RFdmVudE5hbWU7XG4gICAgICAgICAgICAgICAgICBfaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgICBfaW5zdGFuY2UgPSBnZXRQYXJlbnQoX2luc3RhbmNlKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIGxhc3RIb3N0Q29tcG9uZW50Kys7XG4gICAgICAgICAgICAgICAgZm9yICg7IDAgPCBpbnN0YW5jZSAtIGxhc3RIb3N0Q29tcG9uZW50OyApXG4gICAgICAgICAgICAgICAgICAoaW5DYXB0dXJlUGhhc2UgPSBnZXRQYXJlbnQoaW5DYXB0dXJlUGhhc2UpKSwgaW5zdGFuY2UtLTtcbiAgICAgICAgICAgICAgICBmb3IgKDsgMCA8IGxhc3RIb3N0Q29tcG9uZW50IC0gaW5zdGFuY2U7IClcbiAgICAgICAgICAgICAgICAgIChyZWFjdEV2ZW50TmFtZSA9IGdldFBhcmVudChyZWFjdEV2ZW50TmFtZSkpLFxuICAgICAgICAgICAgICAgICAgICBsYXN0SG9zdENvbXBvbmVudC0tO1xuICAgICAgICAgICAgICAgIGZvciAoOyBpbnN0YW5jZS0tOyApIHtcbiAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UgPT09IHJlYWN0RXZlbnROYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgIChudWxsICE9PSByZWFjdEV2ZW50TmFtZSAmJlxuICAgICAgICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlID09PSByZWFjdEV2ZW50TmFtZS5hbHRlcm5hdGUpXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSA9IGdldFBhcmVudChpbkNhcHR1cmVQaGFzZSk7XG4gICAgICAgICAgICAgICAgICByZWFjdEV2ZW50TmFtZSA9IGdldFBhcmVudChyZWFjdEV2ZW50TmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGluQ2FwdHVyZVBoYXNlID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpbkNhcHR1cmVQaGFzZSA9IG51bGw7XG4gICAgICAgICAgICBudWxsICE9PSBTeW50aGV0aWNFdmVudEN0b3IgJiZcbiAgICAgICAgICAgICAgYWNjdW11bGF0ZUVudGVyTGVhdmVMaXN0ZW5lcnNGb3JFdmVudChcbiAgICAgICAgICAgICAgICBkaXNwYXRjaFF1ZXVlLFxuICAgICAgICAgICAgICAgIHJlYWN0TmFtZSxcbiAgICAgICAgICAgICAgICBTeW50aGV0aWNFdmVudEN0b3IsXG4gICAgICAgICAgICAgICAgaW5DYXB0dXJlUGhhc2UsXG4gICAgICAgICAgICAgICAgITFcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG51bGwgIT09IHJlYWN0RXZlbnRUeXBlICYmXG4gICAgICAgICAgICAgIG51bGwgIT09IGFjY3VtdWxhdGVUYXJnZXRPbmx5ICYmXG4gICAgICAgICAgICAgIGFjY3VtdWxhdGVFbnRlckxlYXZlTGlzdGVuZXJzRm9yRXZlbnQoXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hRdWV1ZSxcbiAgICAgICAgICAgICAgICBhY2N1bXVsYXRlVGFyZ2V0T25seSxcbiAgICAgICAgICAgICAgICByZWFjdEV2ZW50VHlwZSxcbiAgICAgICAgICAgICAgICBpbkNhcHR1cmVQaGFzZSxcbiAgICAgICAgICAgICAgICAhMFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYToge1xuICAgICAgICByZWFjdE5hbWUgPSB0YXJnZXRJbnN0ID8gZ2V0Tm9kZUZyb21JbnN0YW5jZSh0YXJnZXRJbnN0KSA6IHdpbmRvdztcbiAgICAgICAgU3ludGhldGljRXZlbnRDdG9yID1cbiAgICAgICAgICByZWFjdE5hbWUubm9kZU5hbWUgJiYgcmVhY3ROYW1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBcInNlbGVjdFwiID09PSBTeW50aGV0aWNFdmVudEN0b3IgfHxcbiAgICAgICAgICAoXCJpbnB1dFwiID09PSBTeW50aGV0aWNFdmVudEN0b3IgJiYgXCJmaWxlXCIgPT09IHJlYWN0TmFtZS50eXBlKVxuICAgICAgICApXG4gICAgICAgICAgdmFyIGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvckNoYW5nZUV2ZW50O1xuICAgICAgICBlbHNlIGlmIChpc1RleHRJbnB1dEVsZW1lbnQocmVhY3ROYW1lKSlcbiAgICAgICAgICBpZiAoaXNJbnB1dEV2ZW50U3VwcG9ydGVkKVxuICAgICAgICAgICAgZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9ySW5wdXRPckNoYW5nZUV2ZW50O1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9ySW5wdXRFdmVudFBvbHlmaWxsO1xuICAgICAgICAgICAgdmFyIGhhbmRsZUV2ZW50RnVuYyA9IGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbDtcbiAgICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAoU3ludGhldGljRXZlbnRDdG9yID0gcmVhY3ROYW1lLm5vZGVOYW1lKSxcbiAgICAgICAgICAgICFTeW50aGV0aWNFdmVudEN0b3IgfHxcbiAgICAgICAgICAgIFwiaW5wdXRcIiAhPT0gU3ludGhldGljRXZlbnRDdG9yLnRvTG93ZXJDYXNlKCkgfHxcbiAgICAgICAgICAgIChcImNoZWNrYm94XCIgIT09IHJlYWN0TmFtZS50eXBlICYmIFwicmFkaW9cIiAhPT0gcmVhY3ROYW1lLnR5cGUpXG4gICAgICAgICAgICAgID8gdGFyZ2V0SW5zdCAmJlxuICAgICAgICAgICAgICAgIGlzQ3VzdG9tRWxlbWVudCh0YXJnZXRJbnN0LmVsZW1lbnRUeXBlKSAmJlxuICAgICAgICAgICAgICAgIChnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudClcbiAgICAgICAgICAgICAgOiAoZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9yQ2xpY2tFdmVudCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyAmJlxuICAgICAgICAgIChnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGdW5jKGRvbUV2ZW50TmFtZSwgdGFyZ2V0SW5zdCkpXG4gICAgICAgICkge1xuICAgICAgICAgIGNyZWF0ZUFuZEFjY3VtdWxhdGVDaGFuZ2VFdmVudChcbiAgICAgICAgICAgIGRpc3BhdGNoUXVldWUsXG4gICAgICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyxcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgaGFuZGxlRXZlbnRGdW5jICYmIGhhbmRsZUV2ZW50RnVuYyhkb21FdmVudE5hbWUsIHJlYWN0TmFtZSwgdGFyZ2V0SW5zdCk7XG4gICAgICAgIFwiZm9jdXNvdXRcIiA9PT0gZG9tRXZlbnROYW1lICYmXG4gICAgICAgICAgdGFyZ2V0SW5zdCAmJlxuICAgICAgICAgIFwibnVtYmVyXCIgPT09IHJlYWN0TmFtZS50eXBlICYmXG4gICAgICAgICAgbnVsbCAhPSB0YXJnZXRJbnN0Lm1lbW9pemVkUHJvcHMudmFsdWUgJiZcbiAgICAgICAgICBzZXREZWZhdWx0VmFsdWUocmVhY3ROYW1lLCBcIm51bWJlclwiLCByZWFjdE5hbWUudmFsdWUpO1xuICAgICAgfVxuICAgICAgaGFuZGxlRXZlbnRGdW5jID0gdGFyZ2V0SW5zdCA/IGdldE5vZGVGcm9tSW5zdGFuY2UodGFyZ2V0SW5zdCkgOiB3aW5kb3c7XG4gICAgICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgICAgICBjYXNlIFwiZm9jdXNpblwiOlxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGlzVGV4dElucHV0RWxlbWVudChoYW5kbGVFdmVudEZ1bmMpIHx8XG4gICAgICAgICAgICBcInRydWVcIiA9PT0gaGFuZGxlRXZlbnRGdW5jLmNvbnRlbnRFZGl0YWJsZVxuICAgICAgICAgIClcbiAgICAgICAgICAgIChhY3RpdmVFbGVtZW50ID0gaGFuZGxlRXZlbnRGdW5jKSxcbiAgICAgICAgICAgICAgKGFjdGl2ZUVsZW1lbnRJbnN0ID0gdGFyZ2V0SW5zdCksXG4gICAgICAgICAgICAgIChsYXN0U2VsZWN0aW9uID0gbnVsbCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJmb2N1c291dFwiOlxuICAgICAgICAgIGxhc3RTZWxlY3Rpb24gPSBhY3RpdmVFbGVtZW50SW5zdCA9IGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibW91c2Vkb3duXCI6XG4gICAgICAgICAgbW91c2VEb3duID0gITA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJjb250ZXh0bWVudVwiOlxuICAgICAgICBjYXNlIFwibW91c2V1cFwiOlxuICAgICAgICBjYXNlIFwiZHJhZ2VuZFwiOlxuICAgICAgICAgIG1vdXNlRG93biA9ICExO1xuICAgICAgICAgIGNvbnN0cnVjdFNlbGVjdEV2ZW50KGRpc3BhdGNoUXVldWUsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjpcbiAgICAgICAgICBpZiAoc2tpcFNlbGVjdGlvbkNoYW5nZUV2ZW50KSBicmVhaztcbiAgICAgICAgY2FzZSBcImtleWRvd25cIjpcbiAgICAgICAgY2FzZSBcImtleXVwXCI6XG4gICAgICAgICAgY29uc3RydWN0U2VsZWN0RXZlbnQoZGlzcGF0Y2hRdWV1ZSwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgIH1cbiAgICAgIHZhciBmYWxsYmFja0RhdGE7XG4gICAgICBpZiAoY2FuVXNlQ29tcG9zaXRpb25FdmVudClcbiAgICAgICAgYjoge1xuICAgICAgICAgIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgICAgICAgICBjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOlxuICAgICAgICAgICAgICB2YXIgZXZlbnRUeXBlID0gXCJvbkNvbXBvc2l0aW9uU3RhcnRcIjtcbiAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgIGNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOlxuICAgICAgICAgICAgICBldmVudFR5cGUgPSBcIm9uQ29tcG9zaXRpb25FbmRcIjtcbiAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICAgIGNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOlxuICAgICAgICAgICAgICBldmVudFR5cGUgPSBcIm9uQ29tcG9zaXRpb25VcGRhdGVcIjtcbiAgICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXZlbnRUeXBlID0gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICBlbHNlXG4gICAgICAgIGlzQ29tcG9zaW5nXG4gICAgICAgICAgPyBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkgJiZcbiAgICAgICAgICAgIChldmVudFR5cGUgPSBcIm9uQ29tcG9zaXRpb25FbmRcIilcbiAgICAgICAgICA6IFwia2V5ZG93blwiID09PSBkb21FdmVudE5hbWUgJiZcbiAgICAgICAgICAgIDIyOSA9PT0gbmF0aXZlRXZlbnQua2V5Q29kZSAmJlxuICAgICAgICAgICAgKGV2ZW50VHlwZSA9IFwib25Db21wb3NpdGlvblN0YXJ0XCIpO1xuICAgICAgZXZlbnRUeXBlICYmXG4gICAgICAgICh1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSAmJlxuICAgICAgICAgIFwia29cIiAhPT0gbmF0aXZlRXZlbnQubG9jYWxlICYmXG4gICAgICAgICAgKGlzQ29tcG9zaW5nIHx8IFwib25Db21wb3NpdGlvblN0YXJ0XCIgIT09IGV2ZW50VHlwZVxuICAgICAgICAgICAgPyBcIm9uQ29tcG9zaXRpb25FbmRcIiA9PT0gZXZlbnRUeXBlICYmXG4gICAgICAgICAgICAgIGlzQ29tcG9zaW5nICYmXG4gICAgICAgICAgICAgIChmYWxsYmFja0RhdGEgPSBnZXREYXRhKCkpXG4gICAgICAgICAgICA6ICgocm9vdCA9IG5hdGl2ZUV2ZW50VGFyZ2V0KSxcbiAgICAgICAgICAgICAgKHN0YXJ0VGV4dCA9IFwidmFsdWVcIiBpbiByb290ID8gcm9vdC52YWx1ZSA6IHJvb3QudGV4dENvbnRlbnQpLFxuICAgICAgICAgICAgICAoaXNDb21wb3NpbmcgPSAhMCkpKSxcbiAgICAgICAgKGhhbmRsZUV2ZW50RnVuYyA9IGFjY3VtdWxhdGVUd29QaGFzZUxpc3RlbmVycyh0YXJnZXRJbnN0LCBldmVudFR5cGUpKSxcbiAgICAgICAgMCA8IGhhbmRsZUV2ZW50RnVuYy5sZW5ndGggJiZcbiAgICAgICAgICAoKGV2ZW50VHlwZSA9IG5ldyBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50KFxuICAgICAgICAgICAgZXZlbnRUeXBlLFxuICAgICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgICApKSxcbiAgICAgICAgICBkaXNwYXRjaFF1ZXVlLnB1c2goeyBldmVudDogZXZlbnRUeXBlLCBsaXN0ZW5lcnM6IGhhbmRsZUV2ZW50RnVuYyB9KSxcbiAgICAgICAgICBmYWxsYmFja0RhdGFcbiAgICAgICAgICAgID8gKGV2ZW50VHlwZS5kYXRhID0gZmFsbGJhY2tEYXRhKVxuICAgICAgICAgICAgOiAoKGZhbGxiYWNrRGF0YSA9IGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpKSxcbiAgICAgICAgICAgICAgbnVsbCAhPT0gZmFsbGJhY2tEYXRhICYmIChldmVudFR5cGUuZGF0YSA9IGZhbGxiYWNrRGF0YSkpKSk7XG4gICAgICBpZiAoXG4gICAgICAgIChmYWxsYmFja0RhdGEgPSBjYW5Vc2VUZXh0SW5wdXRFdmVudFxuICAgICAgICAgID8gZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyhkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KVxuICAgICAgICAgIDogZ2V0RmFsbGJhY2tCZWZvcmVJbnB1dENoYXJzKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpKVxuICAgICAgKVxuICAgICAgICAoZXZlbnRUeXBlID0gYWNjdW11bGF0ZVR3b1BoYXNlTGlzdGVuZXJzKHRhcmdldEluc3QsIFwib25CZWZvcmVJbnB1dFwiKSksXG4gICAgICAgICAgMCA8IGV2ZW50VHlwZS5sZW5ndGggJiZcbiAgICAgICAgICAgICgoaGFuZGxlRXZlbnRGdW5jID0gbmV3IFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQoXG4gICAgICAgICAgICAgIFwib25CZWZvcmVJbnB1dFwiLFxuICAgICAgICAgICAgICBcImJlZm9yZWlucHV0XCIsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgICBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgICAgKSksXG4gICAgICAgICAgICBkaXNwYXRjaFF1ZXVlLnB1c2goe1xuICAgICAgICAgICAgICBldmVudDogaGFuZGxlRXZlbnRGdW5jLFxuICAgICAgICAgICAgICBsaXN0ZW5lcnM6IGV2ZW50VHlwZVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAoaGFuZGxlRXZlbnRGdW5jLmRhdGEgPSBmYWxsYmFja0RhdGEpKTtcbiAgICAgIGV4dHJhY3RFdmVudHMkMShcbiAgICAgICAgZGlzcGF0Y2hRdWV1ZSxcbiAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICB0YXJnZXRJbnN0LFxuICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICk7XG4gICAgfVxuICAgIHByb2Nlc3NEaXNwYXRjaFF1ZXVlKGRpc3BhdGNoUXVldWUsIGV2ZW50U3lzdGVtRmxhZ3MpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIoaW5zdGFuY2UsIGxpc3RlbmVyLCBjdXJyZW50VGFyZ2V0KSB7XG4gIHJldHVybiB7XG4gICAgaW5zdGFuY2U6IGluc3RhbmNlLFxuICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcbiAgICBjdXJyZW50VGFyZ2V0OiBjdXJyZW50VGFyZ2V0XG4gIH07XG59XG5mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnModGFyZ2V0RmliZXIsIHJlYWN0TmFtZSkge1xuICBmb3IgKFxuICAgIHZhciBjYXB0dXJlTmFtZSA9IHJlYWN0TmFtZSArIFwiQ2FwdHVyZVwiLCBsaXN0ZW5lcnMgPSBbXTtcbiAgICBudWxsICE9PSB0YXJnZXRGaWJlcjtcblxuICApIHtcbiAgICB2YXIgX2luc3RhbmNlMiA9IHRhcmdldEZpYmVyLFxuICAgICAgc3RhdGVOb2RlID0gX2luc3RhbmNlMi5zdGF0ZU5vZGU7XG4gICAgX2luc3RhbmNlMiA9IF9pbnN0YW5jZTIudGFnO1xuICAgICg1ICE9PSBfaW5zdGFuY2UyICYmIDI2ICE9PSBfaW5zdGFuY2UyICYmIDI3ICE9PSBfaW5zdGFuY2UyKSB8fFxuICAgICAgbnVsbCA9PT0gc3RhdGVOb2RlIHx8XG4gICAgICAoKF9pbnN0YW5jZTIgPSBnZXRMaXN0ZW5lcih0YXJnZXRGaWJlciwgY2FwdHVyZU5hbWUpKSxcbiAgICAgIG51bGwgIT0gX2luc3RhbmNlMiAmJlxuICAgICAgICBsaXN0ZW5lcnMudW5zaGlmdChcbiAgICAgICAgICBjcmVhdGVEaXNwYXRjaExpc3RlbmVyKHRhcmdldEZpYmVyLCBfaW5zdGFuY2UyLCBzdGF0ZU5vZGUpXG4gICAgICAgICksXG4gICAgICAoX2luc3RhbmNlMiA9IGdldExpc3RlbmVyKHRhcmdldEZpYmVyLCByZWFjdE5hbWUpKSxcbiAgICAgIG51bGwgIT0gX2luc3RhbmNlMiAmJlxuICAgICAgICBsaXN0ZW5lcnMucHVzaChcbiAgICAgICAgICBjcmVhdGVEaXNwYXRjaExpc3RlbmVyKHRhcmdldEZpYmVyLCBfaW5zdGFuY2UyLCBzdGF0ZU5vZGUpXG4gICAgICAgICkpO1xuICAgIHRhcmdldEZpYmVyID0gdGFyZ2V0RmliZXIucmV0dXJuO1xuICB9XG4gIHJldHVybiBsaXN0ZW5lcnM7XG59XG5mdW5jdGlvbiBnZXRQYXJlbnQoaW5zdCkge1xuICBpZiAobnVsbCA9PT0gaW5zdCkgcmV0dXJuIG51bGw7XG4gIGRvIGluc3QgPSBpbnN0LnJldHVybjtcbiAgd2hpbGUgKGluc3QgJiYgNSAhPT0gaW5zdC50YWcgJiYgMjcgIT09IGluc3QudGFnKTtcbiAgcmV0dXJuIGluc3QgPyBpbnN0IDogbnVsbDtcbn1cbmZ1bmN0aW9uIGFjY3VtdWxhdGVFbnRlckxlYXZlTGlzdGVuZXJzRm9yRXZlbnQoXG4gIGRpc3BhdGNoUXVldWUsXG4gIGV2ZW50LFxuICB0YXJnZXQsXG4gIGNvbW1vbixcbiAgaW5DYXB0dXJlUGhhc2Vcbikge1xuICBmb3IgKFxuICAgIHZhciByZWdpc3RyYXRpb25OYW1lID0gZXZlbnQuX3JlYWN0TmFtZSwgbGlzdGVuZXJzID0gW107XG4gICAgbnVsbCAhPT0gdGFyZ2V0ICYmIHRhcmdldCAhPT0gY29tbW9uO1xuXG4gICkge1xuICAgIHZhciBfaW5zdGFuY2UzID0gdGFyZ2V0LFxuICAgICAgYWx0ZXJuYXRlID0gX2luc3RhbmNlMy5hbHRlcm5hdGUsXG4gICAgICBzdGF0ZU5vZGUgPSBfaW5zdGFuY2UzLnN0YXRlTm9kZTtcbiAgICBfaW5zdGFuY2UzID0gX2luc3RhbmNlMy50YWc7XG4gICAgaWYgKG51bGwgIT09IGFsdGVybmF0ZSAmJiBhbHRlcm5hdGUgPT09IGNvbW1vbikgYnJlYWs7XG4gICAgKDUgIT09IF9pbnN0YW5jZTMgJiYgMjYgIT09IF9pbnN0YW5jZTMgJiYgMjcgIT09IF9pbnN0YW5jZTMpIHx8XG4gICAgICBudWxsID09PSBzdGF0ZU5vZGUgfHxcbiAgICAgICgoYWx0ZXJuYXRlID0gc3RhdGVOb2RlKSxcbiAgICAgIGluQ2FwdHVyZVBoYXNlXG4gICAgICAgID8gKChzdGF0ZU5vZGUgPSBnZXRMaXN0ZW5lcih0YXJnZXQsIHJlZ2lzdHJhdGlvbk5hbWUpKSxcbiAgICAgICAgICBudWxsICE9IHN0YXRlTm9kZSAmJlxuICAgICAgICAgICAgbGlzdGVuZXJzLnVuc2hpZnQoXG4gICAgICAgICAgICAgIGNyZWF0ZURpc3BhdGNoTGlzdGVuZXIodGFyZ2V0LCBzdGF0ZU5vZGUsIGFsdGVybmF0ZSlcbiAgICAgICAgICAgICkpXG4gICAgICAgIDogaW5DYXB0dXJlUGhhc2UgfHxcbiAgICAgICAgICAoKHN0YXRlTm9kZSA9IGdldExpc3RlbmVyKHRhcmdldCwgcmVnaXN0cmF0aW9uTmFtZSkpLFxuICAgICAgICAgIG51bGwgIT0gc3RhdGVOb2RlICYmXG4gICAgICAgICAgICBsaXN0ZW5lcnMucHVzaChcbiAgICAgICAgICAgICAgY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcih0YXJnZXQsIHN0YXRlTm9kZSwgYWx0ZXJuYXRlKVxuICAgICAgICAgICAgKSkpO1xuICAgIHRhcmdldCA9IHRhcmdldC5yZXR1cm47XG4gIH1cbiAgMCAhPT0gbGlzdGVuZXJzLmxlbmd0aCAmJlxuICAgIGRpc3BhdGNoUXVldWUucHVzaCh7IGV2ZW50OiBldmVudCwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMgfSk7XG59XG52YXIgTk9STUFMSVpFX05FV0xJTkVTX1JFR0VYID0gL1xcclxcbj8vZyxcbiAgTk9STUFMSVpFX05VTExfQU5EX1JFUExBQ0VNRU5UX1JFR0VYID0gL1xcdTAwMDB8XFx1RkZGRC9nO1xuZnVuY3Rpb24gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKG1hcmt1cCkge1xuICByZXR1cm4gKFwic3RyaW5nXCIgPT09IHR5cGVvZiBtYXJrdXAgPyBtYXJrdXAgOiBcIlwiICsgbWFya3VwKVxuICAgIC5yZXBsYWNlKE5PUk1BTElaRV9ORVdMSU5FU19SRUdFWCwgXCJcXG5cIilcbiAgICAucmVwbGFjZShOT1JNQUxJWkVfTlVMTF9BTkRfUkVQTEFDRU1FTlRfUkVHRVgsIFwiXCIpO1xufVxuZnVuY3Rpb24gY2hlY2tGb3JVbm1hdGNoZWRUZXh0KHNlcnZlclRleHQsIGNsaWVudFRleHQpIHtcbiAgY2xpZW50VGV4dCA9IG5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZShjbGllbnRUZXh0KTtcbiAgcmV0dXJuIG5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZShzZXJ2ZXJUZXh0KSA9PT0gY2xpZW50VGV4dCA/ICEwIDogITE7XG59XG5mdW5jdGlvbiBub29wJDEoKSB7fVxuZnVuY3Rpb24gc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIGtleSwgdmFsdWUsIHByb3BzLCBwcmV2VmFsdWUpIHtcbiAgc3dpdGNoIChrZXkpIHtcbiAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgICA/IFwiYm9keVwiID09PSB0YWcgfHxcbiAgICAgICAgICAoXCJ0ZXh0YXJlYVwiID09PSB0YWcgJiYgXCJcIiA9PT0gdmFsdWUpIHx8XG4gICAgICAgICAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgdmFsdWUpXG4gICAgICAgIDogKFwibnVtYmVyXCIgPT09IHR5cGVvZiB2YWx1ZSB8fCBcImJpZ2ludFwiID09PSB0eXBlb2YgdmFsdWUpICYmXG4gICAgICAgICAgXCJib2R5XCIgIT09IHRhZyAmJlxuICAgICAgICAgIHNldFRleHRDb250ZW50KGRvbUVsZW1lbnQsIFwiXCIgKyB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY2xhc3NOYW1lXCI6XG4gICAgICBzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlKGRvbUVsZW1lbnQsIFwiY2xhc3NcIiwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInRhYkluZGV4XCI6XG4gICAgICBzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlKGRvbUVsZW1lbnQsIFwidGFiaW5kZXhcIiwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRpclwiOlxuICAgIGNhc2UgXCJyb2xlXCI6XG4gICAgY2FzZSBcInZpZXdCb3hcIjpcbiAgICBjYXNlIFwid2lkdGhcIjpcbiAgICBjYXNlIFwiaGVpZ2h0XCI6XG4gICAgICBzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlKGRvbUVsZW1lbnQsIGtleSwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICBzZXRWYWx1ZUZvclN0eWxlcyhkb21FbGVtZW50LCB2YWx1ZSwgcHJldlZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkYXRhXCI6XG4gICAgICBpZiAoXCJvYmplY3RcIiAhPT0gdGFnKSB7XG4gICAgICAgIHNldFZhbHVlRm9yS25vd25BdHRyaWJ1dGUoZG9tRWxlbWVudCwgXCJkYXRhXCIsIHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgY2FzZSBcInNyY1wiOlxuICAgIGNhc2UgXCJocmVmXCI6XG4gICAgICBpZiAoXCJcIiA9PT0gdmFsdWUgJiYgKFwiYVwiICE9PSB0YWcgfHwgXCJocmVmXCIgIT09IGtleSkpIHtcbiAgICAgICAgZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgPT0gdmFsdWUgfHxcbiAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgXCJzeW1ib2xcIiA9PT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICAgIFwiYm9vbGVhblwiID09PSB0eXBlb2YgdmFsdWVcbiAgICAgICkge1xuICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gc2FuaXRpemVVUkwoXCJcIiArIHZhbHVlKTtcbiAgICAgIGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImFjdGlvblwiOlxuICAgIGNhc2UgXCJmb3JtQWN0aW9uXCI6XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIFwiamF2YXNjcmlwdDp0aHJvdyBuZXcgRXJyb3IoJ0EgUmVhY3QgZm9ybSB3YXMgdW5leHBlY3RlZGx5IHN1Ym1pdHRlZC4gSWYgeW91IGNhbGxlZCBmb3JtLnN1Ym1pdCgpIG1hbnVhbGx5LCBjb25zaWRlciB1c2luZyBmb3JtLnJlcXVlc3RTdWJtaXQoKSBpbnN0ZWFkLiBJZiB5b3VcXFxcJ3JlIHRyeWluZyB0byB1c2UgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCkgaW4gYSBzdWJtaXQgZXZlbnQgaGFuZGxlciwgY29uc2lkZXIgYWxzbyBjYWxsaW5nIGV2ZW50LnByZXZlbnREZWZhdWx0KCkuJylcIlxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZVxuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBwcmV2VmFsdWUgJiZcbiAgICAgICAgICAoXCJmb3JtQWN0aW9uXCIgPT09IGtleVxuICAgICAgICAgICAgPyAoXCJpbnB1dFwiICE9PSB0YWcgJiZcbiAgICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgXCJuYW1lXCIsIHByb3BzLm5hbWUsIHByb3BzLCBudWxsKSxcbiAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgIHRhZyxcbiAgICAgICAgICAgICAgICBcImZvcm1FbmNUeXBlXCIsXG4gICAgICAgICAgICAgICAgcHJvcHMuZm9ybUVuY1R5cGUsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIFwiZm9ybU1ldGhvZFwiLFxuICAgICAgICAgICAgICAgIHByb3BzLmZvcm1NZXRob2QsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIFwiZm9ybVRhcmdldFwiLFxuICAgICAgICAgICAgICAgIHByb3BzLmZvcm1UYXJnZXQsXG4gICAgICAgICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgOiAoc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIFwiZW5jVHlwZVwiLCBwcm9wcy5lbmNUeXBlLCBwcm9wcywgbnVsbCksXG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBcIm1ldGhvZFwiLCBwcm9wcy5tZXRob2QsIHByb3BzLCBudWxsKSxcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIFwidGFyZ2V0XCIsIHByb3BzLnRhcmdldCwgcHJvcHMsIG51bGwpKSk7XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgPT0gdmFsdWUgfHxcbiAgICAgICAgXCJzeW1ib2xcIiA9PT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICAgIFwiYm9vbGVhblwiID09PSB0eXBlb2YgdmFsdWVcbiAgICAgICkge1xuICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gc2FuaXRpemVVUkwoXCJcIiArIHZhbHVlKTtcbiAgICAgIGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9uQ2xpY2tcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgKGRvbUVsZW1lbnQub25jbGljayA9IG5vb3AkMSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwib25TY3JvbGxcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInNjcm9sbFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvblNjcm9sbEVuZFwiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsZW5kXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICBpZiAobnVsbCAhPSB2YWx1ZSkge1xuICAgICAgICBpZiAoXCJvYmplY3RcIiAhPT0gdHlwZW9mIHZhbHVlIHx8ICEoXCJfX2h0bWxcIiBpbiB2YWx1ZSkpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2MSkpO1xuICAgICAgICBrZXkgPSB2YWx1ZS5fX2h0bWw7XG4gICAgICAgIGlmIChudWxsICE9IGtleSkge1xuICAgICAgICAgIGlmIChudWxsICE9IHByb3BzLmNoaWxkcmVuKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYwKSk7XG4gICAgICAgICAgZG9tRWxlbWVudC5pbm5lckhUTUwgPSBrZXk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJtdWx0aXBsZVwiOlxuICAgICAgZG9tRWxlbWVudC5tdWx0aXBsZSA9XG4gICAgICAgIHZhbHVlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJtdXRlZFwiOlxuICAgICAgZG9tRWxlbWVudC5tdXRlZCA9XG4gICAgICAgIHZhbHVlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIjpcbiAgICBjYXNlIFwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCI6XG4gICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgIGNhc2UgXCJkZWZhdWx0Q2hlY2tlZFwiOlxuICAgIGNhc2UgXCJpbm5lckhUTUxcIjpcbiAgICBjYXNlIFwicmVmXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYXV0b0ZvY3VzXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtIcmVmXCI6XG4gICAgICBpZiAoXG4gICAgICAgIG51bGwgPT0gdmFsdWUgfHxcbiAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgICAgXCJib29sZWFuXCIgPT09IHR5cGVvZiB2YWx1ZSB8fFxuICAgICAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgdmFsdWVcbiAgICAgICkge1xuICAgICAgICBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcInhsaW5rOmhyZWZcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAga2V5ID0gc2FuaXRpemVVUkwoXCJcIiArIHZhbHVlKTtcbiAgICAgIGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlTlMoXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOmhyZWZcIixcbiAgICAgICAga2V5XG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImNvbnRlbnRFZGl0YWJsZVwiOlxuICAgIGNhc2UgXCJzcGVsbENoZWNrXCI6XG4gICAgY2FzZSBcImRyYWdnYWJsZVwiOlxuICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgIGNhc2UgXCJhdXRvUmV2ZXJzZVwiOlxuICAgIGNhc2UgXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCI6XG4gICAgY2FzZSBcImZvY3VzYWJsZVwiOlxuICAgIGNhc2UgXCJwcmVzZXJ2ZUFscGhhXCI6XG4gICAgICBudWxsICE9IHZhbHVlICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHZhbHVlICYmIFwic3ltYm9sXCIgIT09IHR5cGVvZiB2YWx1ZVxuICAgICAgICA/IGRvbUVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgXCJcIiArIHZhbHVlKVxuICAgICAgICA6IGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW5lcnRcIjpcbiAgICBjYXNlIFwiYWxsb3dGdWxsU2NyZWVuXCI6XG4gICAgY2FzZSBcImFzeW5jXCI6XG4gICAgY2FzZSBcImF1dG9QbGF5XCI6XG4gICAgY2FzZSBcImNvbnRyb2xzXCI6XG4gICAgY2FzZSBcImRlZmF1bHRcIjpcbiAgICBjYXNlIFwiZGVmZXJcIjpcbiAgICBjYXNlIFwiZGlzYWJsZWRcIjpcbiAgICBjYXNlIFwiZGlzYWJsZVBpY3R1cmVJblBpY3R1cmVcIjpcbiAgICBjYXNlIFwiZGlzYWJsZVJlbW90ZVBsYXliYWNrXCI6XG4gICAgY2FzZSBcImZvcm1Ob1ZhbGlkYXRlXCI6XG4gICAgY2FzZSBcImhpZGRlblwiOlxuICAgIGNhc2UgXCJsb29wXCI6XG4gICAgY2FzZSBcIm5vTW9kdWxlXCI6XG4gICAgY2FzZSBcIm5vVmFsaWRhdGVcIjpcbiAgICBjYXNlIFwib3BlblwiOlxuICAgIGNhc2UgXCJwbGF5c0lubGluZVwiOlxuICAgIGNhc2UgXCJyZWFkT25seVwiOlxuICAgIGNhc2UgXCJyZXF1aXJlZFwiOlxuICAgIGNhc2UgXCJyZXZlcnNlZFwiOlxuICAgIGNhc2UgXCJzY29wZWRcIjpcbiAgICBjYXNlIFwic2VhbWxlc3NcIjpcbiAgICBjYXNlIFwiaXRlbVNjb3BlXCI6XG4gICAgICB2YWx1ZSAmJiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB2YWx1ZSAmJiBcInN5bWJvbFwiICE9PSB0eXBlb2YgdmFsdWVcbiAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIFwiXCIpXG4gICAgICAgIDogZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjYXB0dXJlXCI6XG4gICAgY2FzZSBcImRvd25sb2FkXCI6XG4gICAgICAhMCA9PT0gdmFsdWVcbiAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIFwiXCIpXG4gICAgICAgIDogITEgIT09IHZhbHVlICYmXG4gICAgICAgICAgICBudWxsICE9IHZhbHVlICYmXG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB2YWx1ZSAmJlxuICAgICAgICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlXG4gICAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKVxuICAgICAgICAgIDogZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjb2xzXCI6XG4gICAgY2FzZSBcInJvd3NcIjpcbiAgICBjYXNlIFwic2l6ZVwiOlxuICAgIGNhc2UgXCJzcGFuXCI6XG4gICAgICBudWxsICE9IHZhbHVlICYmXG4gICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiB2YWx1ZSAmJlxuICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIHZhbHVlICYmXG4gICAgICAhaXNOYU4odmFsdWUpICYmXG4gICAgICAxIDw9IHZhbHVlXG4gICAgICAgID8gZG9tRWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSlcbiAgICAgICAgOiBkb21FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInJvd1NwYW5cIjpcbiAgICBjYXNlIFwic3RhcnRcIjpcbiAgICAgIG51bGwgPT0gdmFsdWUgfHxcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHZhbHVlIHx8XG4gICAgICBcInN5bWJvbFwiID09PSB0eXBlb2YgdmFsdWUgfHxcbiAgICAgIGlzTmFOKHZhbHVlKVxuICAgICAgICA/IGRvbUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSlcbiAgICAgICAgOiBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJwb3BvdmVyXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiYmVmb3JldG9nZ2xlXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInRvZ2dsZVwiLCBkb21FbGVtZW50KTtcbiAgICAgIHNldFZhbHVlRm9yQXR0cmlidXRlKGRvbUVsZW1lbnQsIFwicG9wb3ZlclwiLCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtBY3R1YXRlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOmFjdHVhdGVcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtBcmNyb2xlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOmFyY3JvbGVcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtSb2xlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOnJvbGVcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtTaG93XCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICAgICAgICBcInhsaW5rOnNob3dcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieGxpbmtUaXRsZVwiOlxuICAgICAgc2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlKFxuICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgICAgICAgXCJ4bGluazp0aXRsZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bGlua1R5cGVcIjpcbiAgICAgIHNldFZhbHVlRm9yTmFtZXNwYWNlZEF0dHJpYnV0ZShcbiAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gICAgICAgIFwieGxpbms6dHlwZVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ4bWxCYXNlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gICAgICAgIFwieG1sOmJhc2VcIixcbiAgICAgICAgdmFsdWVcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwieG1sTGFuZ1wiOlxuICAgICAgc2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlKFxuICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICAgICAgICBcInhtbDpsYW5nXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInhtbFNwYWNlXCI6XG4gICAgICBzZXRWYWx1ZUZvck5hbWVzcGFjZWRBdHRyaWJ1dGUoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gICAgICAgIFwieG1sOnNwYWNlXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlzXCI6XG4gICAgICBzZXRWYWx1ZUZvckF0dHJpYnV0ZShkb21FbGVtZW50LCBcImlzXCIsIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbm5lclRleHRcIjpcbiAgICBjYXNlIFwidGV4dENvbnRlbnRcIjpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoXG4gICAgICAgICEoMiA8IGtleS5sZW5ndGgpIHx8XG4gICAgICAgIChcIm9cIiAhPT0ga2V5WzBdICYmIFwiT1wiICE9PSBrZXlbMF0pIHx8XG4gICAgICAgIChcIm5cIiAhPT0ga2V5WzFdICYmIFwiTlwiICE9PSBrZXlbMV0pXG4gICAgICApXG4gICAgICAgIChrZXkgPSBhbGlhc2VzLmdldChrZXkpIHx8IGtleSksXG4gICAgICAgICAgc2V0VmFsdWVGb3JBdHRyaWJ1dGUoZG9tRWxlbWVudCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHNldFByb3BPbkN1c3RvbUVsZW1lbnQoZG9tRWxlbWVudCwgdGFnLCBrZXksIHZhbHVlLCBwcm9wcywgcHJldlZhbHVlKSB7XG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICBzZXRWYWx1ZUZvclN0eWxlcyhkb21FbGVtZW50LCB2YWx1ZSwgcHJldlZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgaWYgKG51bGwgIT0gdmFsdWUpIHtcbiAgICAgICAgaWYgKFwib2JqZWN0XCIgIT09IHR5cGVvZiB2YWx1ZSB8fCAhKFwiX19odG1sXCIgaW4gdmFsdWUpKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNjEpKTtcbiAgICAgICAga2V5ID0gdmFsdWUuX19odG1sO1xuICAgICAgICBpZiAobnVsbCAhPSBrZXkpIHtcbiAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wcy5jaGlsZHJlbikgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2MCkpO1xuICAgICAgICAgIGRvbUVsZW1lbnQuaW5uZXJIVE1MID0ga2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiB2YWx1ZVxuICAgICAgICA/IHNldFRleHRDb250ZW50KGRvbUVsZW1lbnQsIHZhbHVlKVxuICAgICAgICA6IChcIm51bWJlclwiID09PSB0eXBlb2YgdmFsdWUgfHwgXCJiaWdpbnRcIiA9PT0gdHlwZW9mIHZhbHVlKSAmJlxuICAgICAgICAgIHNldFRleHRDb250ZW50KGRvbUVsZW1lbnQsIFwiXCIgKyB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwib25TY3JvbGxcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcInNjcm9sbFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvblNjcm9sbEVuZFwiOlxuICAgICAgbnVsbCAhPSB2YWx1ZSAmJiBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwic2Nyb2xsZW5kXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm9uQ2xpY2tcIjpcbiAgICAgIG51bGwgIT0gdmFsdWUgJiYgKGRvbUVsZW1lbnQub25jbGljayA9IG5vb3AkMSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCI6XG4gICAgY2FzZSBcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiOlxuICAgIGNhc2UgXCJpbm5lckhUTUxcIjpcbiAgICBjYXNlIFwicmVmXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaW5uZXJUZXh0XCI6XG4gICAgY2FzZSBcInRleHRDb250ZW50XCI6XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKCFyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzLmhhc093blByb3BlcnR5KGtleSkpXG4gICAgICAgIGE6IHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBcIm9cIiA9PT0ga2V5WzBdICYmXG4gICAgICAgICAgICBcIm5cIiA9PT0ga2V5WzFdICYmXG4gICAgICAgICAgICAoKHByb3BzID0ga2V5LmVuZHNXaXRoKFwiQ2FwdHVyZVwiKSksXG4gICAgICAgICAgICAodGFnID0ga2V5LnNsaWNlKDIsIHByb3BzID8ga2V5Lmxlbmd0aCAtIDcgOiB2b2lkIDApKSxcbiAgICAgICAgICAgIChwcmV2VmFsdWUgPSBkb21FbGVtZW50W2ludGVybmFsUHJvcHNLZXldIHx8IG51bGwpLFxuICAgICAgICAgICAgKHByZXZWYWx1ZSA9IG51bGwgIT0gcHJldlZhbHVlID8gcHJldlZhbHVlW2tleV0gOiBudWxsKSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHByZXZWYWx1ZSAmJlxuICAgICAgICAgICAgICBkb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGFnLCBwcmV2VmFsdWUsIHByb3BzKSxcbiAgICAgICAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHZhbHVlKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgcHJldlZhbHVlICYmXG4gICAgICAgICAgICAgIG51bGwgIT09IHByZXZWYWx1ZSAmJlxuICAgICAgICAgICAgICAoa2V5IGluIGRvbUVsZW1lbnRcbiAgICAgICAgICAgICAgICA/IChkb21FbGVtZW50W2tleV0gPSBudWxsKVxuICAgICAgICAgICAgICAgIDogZG9tRWxlbWVudC5oYXNBdHRyaWJ1dGUoa2V5KSAmJlxuICAgICAgICAgICAgICAgICAgZG9tRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoa2V5KSk7XG4gICAgICAgICAgICBkb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodGFnLCB2YWx1ZSwgcHJvcHMpO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9XG4gICAgICAgICAga2V5IGluIGRvbUVsZW1lbnRcbiAgICAgICAgICAgID8gKGRvbUVsZW1lbnRba2V5XSA9IHZhbHVlKVxuICAgICAgICAgICAgOiAhMCA9PT0gdmFsdWVcbiAgICAgICAgICAgICAgPyBkb21FbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIFwiXCIpXG4gICAgICAgICAgICAgIDogc2V0VmFsdWVGb3JBdHRyaWJ1dGUoZG9tRWxlbWVudCwga2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc2V0SW5pdGlhbFByb3BlcnRpZXMoZG9tRWxlbWVudCwgdGFnLCBwcm9wcykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgXCJkaXZcIjpcbiAgICBjYXNlIFwic3BhblwiOlxuICAgIGNhc2UgXCJzdmdcIjpcbiAgICBjYXNlIFwicGF0aFwiOlxuICAgIGNhc2UgXCJhXCI6XG4gICAgY2FzZSBcImdcIjpcbiAgICBjYXNlIFwicFwiOlxuICAgIGNhc2UgXCJsaVwiOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImltZ1wiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImVycm9yXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImxvYWRcIiwgZG9tRWxlbWVudCk7XG4gICAgICB2YXIgaGFzU3JjID0gITEsXG4gICAgICAgIGhhc1NyY1NldCA9ICExLFxuICAgICAgICBwcm9wS2V5O1xuICAgICAgZm9yIChwcm9wS2V5IGluIHByb3BzKVxuICAgICAgICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcEtleV07XG4gICAgICAgICAgaWYgKG51bGwgIT0gcHJvcFZhbHVlKVxuICAgICAgICAgICAgc3dpdGNoIChwcm9wS2V5KSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJzcmNcIjpcbiAgICAgICAgICAgICAgICBoYXNTcmMgPSAhMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInNyY1NldFwiOlxuICAgICAgICAgICAgICAgIGhhc1NyY1NldCA9ICEwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzcsIHRhZykpO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBwcm9wS2V5LCBwcm9wVmFsdWUsIHByb3BzLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgaGFzU3JjU2V0ICYmXG4gICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBcInNyY1NldFwiLCBwcm9wcy5zcmNTZXQsIHByb3BzLCBudWxsKTtcbiAgICAgIGhhc1NyYyAmJiBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgXCJzcmNcIiwgcHJvcHMuc3JjLCBwcm9wcywgbnVsbCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcImlucHV0XCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiaW52YWxpZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSAocHJvcEtleSA9IHByb3BWYWx1ZSA9IGhhc1NyY1NldCA9IG51bGwpLFxuICAgICAgICBjaGVja2VkID0gbnVsbCxcbiAgICAgICAgZGVmYXVsdENoZWNrZWQgPSBudWxsO1xuICAgICAgZm9yIChoYXNTcmMgaW4gcHJvcHMpXG4gICAgICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eShoYXNTcmMpKSB7XG4gICAgICAgICAgdmFyIHByb3BWYWx1ZSQxODYgPSBwcm9wc1toYXNTcmNdO1xuICAgICAgICAgIGlmIChudWxsICE9IHByb3BWYWx1ZSQxODYpXG4gICAgICAgICAgICBzd2l0Y2ggKGhhc1NyYykge1xuICAgICAgICAgICAgICBjYXNlIFwibmFtZVwiOlxuICAgICAgICAgICAgICAgIGhhc1NyY1NldCA9IHByb3BWYWx1ZSQxODY7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJ0eXBlXCI6XG4gICAgICAgICAgICAgICAgcHJvcFZhbHVlID0gcHJvcFZhbHVlJDE4NjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImNoZWNrZWRcIjpcbiAgICAgICAgICAgICAgICBjaGVja2VkID0gcHJvcFZhbHVlJDE4NjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRDaGVja2VkXCI6XG4gICAgICAgICAgICAgICAgZGVmYXVsdENoZWNrZWQgPSBwcm9wVmFsdWUkMTg2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgICAgICAgICBwcm9wS2V5ID0gcHJvcFZhbHVlJDE4NjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IHByb3BWYWx1ZSQxODY7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgICBpZiAobnVsbCAhPSBwcm9wVmFsdWUkMTg2KVxuICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzcsIHRhZykpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBoYXNTcmMsIHByb3BWYWx1ZSQxODYsIHByb3BzLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgaW5pdElucHV0KFxuICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICBwcm9wS2V5LFxuICAgICAgICBkZWZhdWx0VmFsdWUsXG4gICAgICAgIGNoZWNrZWQsXG4gICAgICAgIGRlZmF1bHRDaGVja2VkLFxuICAgICAgICBwcm9wVmFsdWUsXG4gICAgICAgIGhhc1NyY1NldCxcbiAgICAgICAgITFcbiAgICAgICk7XG4gICAgICB0cmFjayhkb21FbGVtZW50KTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiaW52YWxpZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGhhc1NyYyA9IHByb3BWYWx1ZSA9IHByb3BLZXkgPSBudWxsO1xuICAgICAgZm9yIChoYXNTcmNTZXQgaW4gcHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwcm9wcy5oYXNPd25Qcm9wZXJ0eShoYXNTcmNTZXQpICYmXG4gICAgICAgICAgKChkZWZhdWx0VmFsdWUgPSBwcm9wc1toYXNTcmNTZXRdKSwgbnVsbCAhPSBkZWZhdWx0VmFsdWUpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGhhc1NyY1NldCkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICBwcm9wVmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIm11bHRpcGxlXCI6XG4gICAgICAgICAgICAgIGhhc1NyYyA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBoYXNTcmNTZXQsIGRlZmF1bHRWYWx1ZSwgcHJvcHMsIG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgIHRhZyA9IHByb3BLZXk7XG4gICAgICBwcm9wcyA9IHByb3BWYWx1ZTtcbiAgICAgIGRvbUVsZW1lbnQubXVsdGlwbGUgPSAhIWhhc1NyYztcbiAgICAgIG51bGwgIT0gdGFnXG4gICAgICAgID8gdXBkYXRlT3B0aW9ucyhkb21FbGVtZW50LCAhIWhhc1NyYywgdGFnLCAhMSlcbiAgICAgICAgOiBudWxsICE9IHByb3BzICYmIHVwZGF0ZU9wdGlvbnMoZG9tRWxlbWVudCwgISFoYXNTcmMsIHByb3BzLCAhMCk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiaW52YWxpZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIHByb3BLZXkgPSBoYXNTcmNTZXQgPSBoYXNTcmMgPSBudWxsO1xuICAgICAgZm9yIChwcm9wVmFsdWUgaW4gcHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wVmFsdWUpICYmXG4gICAgICAgICAgKChkZWZhdWx0VmFsdWUgPSBwcm9wc1twcm9wVmFsdWVdKSwgbnVsbCAhPSBkZWZhdWx0VmFsdWUpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHByb3BWYWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIGhhc1NyYyA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIGhhc1NyY1NldCA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgICAgcHJvcEtleSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT0gZGVmYXVsdFZhbHVlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDkxKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHByb3BWYWx1ZSwgZGVmYXVsdFZhbHVlLCBwcm9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgaW5pdFRleHRhcmVhKGRvbUVsZW1lbnQsIGhhc1NyYywgaGFzU3JjU2V0LCBwcm9wS2V5KTtcbiAgICAgIHRyYWNrKGRvbUVsZW1lbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJvcHRpb25cIjpcbiAgICAgIGZvciAoY2hlY2tlZCBpbiBwcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KGNoZWNrZWQpICYmXG4gICAgICAgICAgKChoYXNTcmMgPSBwcm9wc1tjaGVja2VkXSksIG51bGwgIT0gaGFzU3JjKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChjaGVja2VkKSB7XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0ZWRcIjpcbiAgICAgICAgICAgICAgZG9tRWxlbWVudC5zZWxlY3RlZCA9XG4gICAgICAgICAgICAgICAgaGFzU3JjICYmXG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgaGFzU3JjICYmXG4gICAgICAgICAgICAgICAgXCJzeW1ib2xcIiAhPT0gdHlwZW9mIGhhc1NyYztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgY2hlY2tlZCwgaGFzU3JjLCBwcm9wcywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJkaWFsb2dcIjpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJjYW5jZWxcIiwgZG9tRWxlbWVudCk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiY2xvc2VcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiaWZyYW1lXCI6XG4gICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChcImxvYWRcIiwgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwidmlkZW9cIjpcbiAgICBjYXNlIFwiYXVkaW9cIjpcbiAgICAgIGZvciAoaGFzU3JjID0gMDsgaGFzU3JjIDwgbWVkaWFFdmVudFR5cGVzLmxlbmd0aDsgaGFzU3JjKyspXG4gICAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQobWVkaWFFdmVudFR5cGVzW2hhc1NyY10sIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImltYWdlXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiZXJyb3JcIiwgZG9tRWxlbWVudCk7XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwibG9hZFwiLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJkZXRhaWxzXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwidG9nZ2xlXCIsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImVtYmVkXCI6XG4gICAgY2FzZSBcInNvdXJjZVwiOlxuICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KFwiZXJyb3JcIiwgZG9tRWxlbWVudCksXG4gICAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoXCJsb2FkXCIsIGRvbUVsZW1lbnQpO1xuICAgIGNhc2UgXCJhcmVhXCI6XG4gICAgY2FzZSBcImJhc2VcIjpcbiAgICBjYXNlIFwiYnJcIjpcbiAgICBjYXNlIFwiY29sXCI6XG4gICAgY2FzZSBcImhyXCI6XG4gICAgY2FzZSBcImtleWdlblwiOlxuICAgIGNhc2UgXCJtZXRhXCI6XG4gICAgY2FzZSBcInBhcmFtXCI6XG4gICAgY2FzZSBcInRyYWNrXCI6XG4gICAgY2FzZSBcIndiclwiOlxuICAgIGNhc2UgXCJtZW51aXRlbVwiOlxuICAgICAgZm9yIChkZWZhdWx0Q2hlY2tlZCBpbiBwcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb3BzLmhhc093blByb3BlcnR5KGRlZmF1bHRDaGVja2VkKSAmJlxuICAgICAgICAgICgoaGFzU3JjID0gcHJvcHNbZGVmYXVsdENoZWNrZWRdKSwgbnVsbCAhPSBoYXNTcmMpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKGRlZmF1bHRDaGVja2VkKSB7XG4gICAgICAgICAgICBjYXNlIFwiY2hpbGRyZW5cIjpcbiAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzNywgdGFnKSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgZGVmYXVsdENoZWNrZWQsIGhhc1NyYywgcHJvcHMsIG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKGlzQ3VzdG9tRWxlbWVudCh0YWcpKSB7XG4gICAgICAgIGZvciAocHJvcFZhbHVlJDE4NiBpbiBwcm9wcylcbiAgICAgICAgICBwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wVmFsdWUkMTg2KSAmJlxuICAgICAgICAgICAgKChoYXNTcmMgPSBwcm9wc1twcm9wVmFsdWUkMTg2XSksXG4gICAgICAgICAgICB2b2lkIDAgIT09IGhhc1NyYyAmJlxuICAgICAgICAgICAgICBzZXRQcm9wT25DdXN0b21FbGVtZW50KFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIHByb3BWYWx1ZSQxODYsXG4gICAgICAgICAgICAgICAgaGFzU3JjLFxuICAgICAgICAgICAgICAgIHByb3BzLFxuICAgICAgICAgICAgICAgIHZvaWQgMFxuICAgICAgICAgICAgICApKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICB9XG4gIGZvciAoZGVmYXVsdFZhbHVlIGluIHByb3BzKVxuICAgIHByb3BzLmhhc093blByb3BlcnR5KGRlZmF1bHRWYWx1ZSkgJiZcbiAgICAgICgoaGFzU3JjID0gcHJvcHNbZGVmYXVsdFZhbHVlXSksXG4gICAgICBudWxsICE9IGhhc1NyYyAmJlxuICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgZGVmYXVsdFZhbHVlLCBoYXNTcmMsIHByb3BzLCBudWxsKSk7XG59XG5mdW5jdGlvbiB1cGRhdGVQcm9wZXJ0aWVzKGRvbUVsZW1lbnQsIHRhZywgbGFzdFByb3BzLCBuZXh0UHJvcHMpIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIFwiZGl2XCI6XG4gICAgY2FzZSBcInNwYW5cIjpcbiAgICBjYXNlIFwic3ZnXCI6XG4gICAgY2FzZSBcInBhdGhcIjpcbiAgICBjYXNlIFwiYVwiOlxuICAgIGNhc2UgXCJnXCI6XG4gICAgY2FzZSBcInBcIjpcbiAgICBjYXNlIFwibGlcIjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgICAgdmFyIG5hbWUgPSBudWxsLFxuICAgICAgICB0eXBlID0gbnVsbCxcbiAgICAgICAgdmFsdWUgPSBudWxsLFxuICAgICAgICBkZWZhdWx0VmFsdWUgPSBudWxsLFxuICAgICAgICBsYXN0RGVmYXVsdFZhbHVlID0gbnVsbCxcbiAgICAgICAgY2hlY2tlZCA9IG51bGwsXG4gICAgICAgIGRlZmF1bHRDaGVja2VkID0gbnVsbDtcbiAgICAgIGZvciAocHJvcEtleSBpbiBsYXN0UHJvcHMpIHtcbiAgICAgICAgdmFyIGxhc3RQcm9wID0gbGFzdFByb3BzW3Byb3BLZXldO1xuICAgICAgICBpZiAobGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpICYmIG51bGwgIT0gbGFzdFByb3ApXG4gICAgICAgICAgc3dpdGNoIChwcm9wS2V5KSB7XG4gICAgICAgICAgICBjYXNlIFwiY2hlY2tlZFwiOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkZWZhdWx0VmFsdWVcIjpcbiAgICAgICAgICAgICAgbGFzdERlZmF1bHRWYWx1ZSA9IGxhc3RQcm9wO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpIHx8XG4gICAgICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHByb3BLZXksIG51bGwsIG5leHRQcm9wcywgbGFzdFByb3ApO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAodmFyIHByb3BLZXkkMjAzIGluIG5leHRQcm9wcykge1xuICAgICAgICB2YXIgcHJvcEtleSA9IG5leHRQcm9wc1twcm9wS2V5JDIwM107XG4gICAgICAgIGxhc3RQcm9wID0gbGFzdFByb3BzW3Byb3BLZXkkMjAzXTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIwMykgJiZcbiAgICAgICAgICAobnVsbCAhPSBwcm9wS2V5IHx8IG51bGwgIT0gbGFzdFByb3ApXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHByb3BLZXkkMjAzKSB7XG4gICAgICAgICAgICBjYXNlIFwidHlwZVwiOlxuICAgICAgICAgICAgICB0eXBlID0gcHJvcEtleTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibmFtZVwiOlxuICAgICAgICAgICAgICBuYW1lID0gcHJvcEtleTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY2hlY2tlZFwiOlxuICAgICAgICAgICAgICBjaGVja2VkID0gcHJvcEtleTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdENoZWNrZWRcIjpcbiAgICAgICAgICAgICAgZGVmYXVsdENoZWNrZWQgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICB2YWx1ZSA9IHByb3BLZXk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICBkZWZhdWx0VmFsdWUgPSBwcm9wS2V5O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgY2FzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI6XG4gICAgICAgICAgICAgIGlmIChudWxsICE9IHByb3BLZXkpXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzcsIHRhZykpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHByb3BLZXkgIT09IGxhc3RQcm9wICYmXG4gICAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgICBwcm9wS2V5JDIwMyxcbiAgICAgICAgICAgICAgICAgIHByb3BLZXksXG4gICAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgICBsYXN0UHJvcFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgdXBkYXRlSW5wdXQoXG4gICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBkZWZhdWx0VmFsdWUsXG4gICAgICAgIGxhc3REZWZhdWx0VmFsdWUsXG4gICAgICAgIGNoZWNrZWQsXG4gICAgICAgIGRlZmF1bHRDaGVja2VkLFxuICAgICAgICB0eXBlLFxuICAgICAgICBuYW1lXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgIHByb3BLZXkgPSB2YWx1ZSA9IGRlZmF1bHRWYWx1ZSA9IHByb3BLZXkkMjAzID0gbnVsbDtcbiAgICAgIGZvciAodHlwZSBpbiBsYXN0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKGxhc3REZWZhdWx0VmFsdWUgPSBsYXN0UHJvcHNbdHlwZV0pLFxuICAgICAgICAgIGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSAmJiBudWxsICE9IGxhc3REZWZhdWx0VmFsdWUpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJtdWx0aXBsZVwiOlxuICAgICAgICAgICAgICBwcm9wS2V5ID0gbGFzdERlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSB8fFxuICAgICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgICBkb21FbGVtZW50LFxuICAgICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgICBsYXN0RGVmYXVsdFZhbHVlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICBmb3IgKG5hbWUgaW4gbmV4dFByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgKCh0eXBlID0gbmV4dFByb3BzW25hbWVdKSxcbiAgICAgICAgICAobGFzdERlZmF1bHRWYWx1ZSA9IGxhc3RQcm9wc1tuYW1lXSksXG4gICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KG5hbWUpICYmXG4gICAgICAgICAgICAobnVsbCAhPSB0eXBlIHx8IG51bGwgIT0gbGFzdERlZmF1bHRWYWx1ZSkpXG4gICAgICAgIClcbiAgICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICBwcm9wS2V5JDIwMyA9IHR5cGU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRlZmF1bHRWYWx1ZVwiOlxuICAgICAgICAgICAgICBkZWZhdWx0VmFsdWUgPSB0eXBlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJtdWx0aXBsZVwiOlxuICAgICAgICAgICAgICB2YWx1ZSA9IHR5cGU7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0eXBlICE9PSBsYXN0RGVmYXVsdFZhbHVlICYmXG4gICAgICAgICAgICAgICAgc2V0UHJvcChcbiAgICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICAgIGxhc3REZWZhdWx0VmFsdWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIHRhZyA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgIGxhc3RQcm9wcyA9IHZhbHVlO1xuICAgICAgbmV4dFByb3BzID0gcHJvcEtleTtcbiAgICAgIG51bGwgIT0gcHJvcEtleSQyMDNcbiAgICAgICAgPyB1cGRhdGVPcHRpb25zKGRvbUVsZW1lbnQsICEhbGFzdFByb3BzLCBwcm9wS2V5JDIwMywgITEpXG4gICAgICAgIDogISFuZXh0UHJvcHMgIT09ICEhbGFzdFByb3BzICYmXG4gICAgICAgICAgKG51bGwgIT0gdGFnXG4gICAgICAgICAgICA/IHVwZGF0ZU9wdGlvbnMoZG9tRWxlbWVudCwgISFsYXN0UHJvcHMsIHRhZywgITApXG4gICAgICAgICAgICA6IHVwZGF0ZU9wdGlvbnMoZG9tRWxlbWVudCwgISFsYXN0UHJvcHMsIGxhc3RQcm9wcyA/IFtdIDogXCJcIiwgITEpKTtcbiAgICAgIHJldHVybjtcbiAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgIHByb3BLZXkgPSBwcm9wS2V5JDIwMyA9IG51bGw7XG4gICAgICBmb3IgKGRlZmF1bHRWYWx1ZSBpbiBsYXN0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKG5hbWUgPSBsYXN0UHJvcHNbZGVmYXVsdFZhbHVlXSksXG4gICAgICAgICAgbGFzdFByb3BzLmhhc093blByb3BlcnR5KGRlZmF1bHRWYWx1ZSkgJiZcbiAgICAgICAgICAgIG51bGwgIT0gbmFtZSAmJlxuICAgICAgICAgICAgIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShkZWZhdWx0VmFsdWUpKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ2YWx1ZVwiOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCBkZWZhdWx0VmFsdWUsIG51bGwsIG5leHRQcm9wcywgbmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgZm9yICh2YWx1ZSBpbiBuZXh0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKG5hbWUgPSBuZXh0UHJvcHNbdmFsdWVdKSxcbiAgICAgICAgICAodHlwZSA9IGxhc3RQcm9wc1t2YWx1ZV0pLFxuICAgICAgICAgIG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkgJiYgKG51bGwgIT0gbmFtZSB8fCBudWxsICE9IHR5cGUpKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkkMjAzID0gbmFtZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZGVmYXVsdFZhbHVlXCI6XG4gICAgICAgICAgICAgIHByb3BLZXkgPSBuYW1lO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJjaGlsZHJlblwiOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiOlxuICAgICAgICAgICAgICBpZiAobnVsbCAhPSBuYW1lKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDkxKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgbmFtZSAhPT0gdHlwZSAmJlxuICAgICAgICAgICAgICAgIHNldFByb3AoZG9tRWxlbWVudCwgdGFnLCB2YWx1ZSwgbmFtZSwgbmV4dFByb3BzLCB0eXBlKTtcbiAgICAgICAgICB9XG4gICAgICB1cGRhdGVUZXh0YXJlYShkb21FbGVtZW50LCBwcm9wS2V5JDIwMywgcHJvcEtleSk7XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcIm9wdGlvblwiOlxuICAgICAgZm9yICh2YXIgcHJvcEtleSQyMTkgaW4gbGFzdFByb3BzKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgKChwcm9wS2V5JDIwMyA9IGxhc3RQcm9wc1twcm9wS2V5JDIxOV0pLFxuICAgICAgICAgIGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIxOSkgJiZcbiAgICAgICAgICAgIG51bGwgIT0gcHJvcEtleSQyMDMgJiZcbiAgICAgICAgICAgICFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMTkpKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChwcm9wS2V5JDIxOSkge1xuICAgICAgICAgICAgY2FzZSBcInNlbGVjdGVkXCI6XG4gICAgICAgICAgICAgIGRvbUVsZW1lbnQuc2VsZWN0ZWQgPSAhMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIHByb3BLZXkkMjE5LFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgIHByb3BLZXkkMjAzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgZm9yIChsYXN0RGVmYXVsdFZhbHVlIGluIG5leHRQcm9wcylcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgocHJvcEtleSQyMDMgPSBuZXh0UHJvcHNbbGFzdERlZmF1bHRWYWx1ZV0pLFxuICAgICAgICAgIChwcm9wS2V5ID0gbGFzdFByb3BzW2xhc3REZWZhdWx0VmFsdWVdKSxcbiAgICAgICAgICBuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkobGFzdERlZmF1bHRWYWx1ZSkgJiZcbiAgICAgICAgICAgIHByb3BLZXkkMjAzICE9PSBwcm9wS2V5ICYmXG4gICAgICAgICAgICAobnVsbCAhPSBwcm9wS2V5JDIwMyB8fCBudWxsICE9IHByb3BLZXkpKVxuICAgICAgICApXG4gICAgICAgICAgc3dpdGNoIChsYXN0RGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0ZWRcIjpcbiAgICAgICAgICAgICAgZG9tRWxlbWVudC5zZWxlY3RlZCA9XG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMDMgJiZcbiAgICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBwcm9wS2V5JDIwMyAmJlxuICAgICAgICAgICAgICAgIFwic3ltYm9sXCIgIT09IHR5cGVvZiBwcm9wS2V5JDIwMztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBzZXRQcm9wKFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIGxhc3REZWZhdWx0VmFsdWUsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMDMsXG4gICAgICAgICAgICAgICAgbmV4dFByb3BzLFxuICAgICAgICAgICAgICAgIHByb3BLZXlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICByZXR1cm47XG4gICAgY2FzZSBcImltZ1wiOlxuICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgY2FzZSBcImFyZWFcIjpcbiAgICBjYXNlIFwiYmFzZVwiOlxuICAgIGNhc2UgXCJiclwiOlxuICAgIGNhc2UgXCJjb2xcIjpcbiAgICBjYXNlIFwiZW1iZWRcIjpcbiAgICBjYXNlIFwiaHJcIjpcbiAgICBjYXNlIFwia2V5Z2VuXCI6XG4gICAgY2FzZSBcIm1ldGFcIjpcbiAgICBjYXNlIFwicGFyYW1cIjpcbiAgICBjYXNlIFwic291cmNlXCI6XG4gICAgY2FzZSBcInRyYWNrXCI6XG4gICAgY2FzZSBcIndiclwiOlxuICAgIGNhc2UgXCJtZW51aXRlbVwiOlxuICAgICAgZm9yICh2YXIgcHJvcEtleSQyMjQgaW4gbGFzdFByb3BzKVxuICAgICAgICAocHJvcEtleSQyMDMgPSBsYXN0UHJvcHNbcHJvcEtleSQyMjRdKSxcbiAgICAgICAgICBsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMjQpICYmXG4gICAgICAgICAgICBudWxsICE9IHByb3BLZXkkMjAzICYmXG4gICAgICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjI0KSAmJlxuICAgICAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHByb3BLZXkkMjI0LCBudWxsLCBuZXh0UHJvcHMsIHByb3BLZXkkMjAzKTtcbiAgICAgIGZvciAoY2hlY2tlZCBpbiBuZXh0UHJvcHMpXG4gICAgICAgIGlmIChcbiAgICAgICAgICAoKHByb3BLZXkkMjAzID0gbmV4dFByb3BzW2NoZWNrZWRdKSxcbiAgICAgICAgICAocHJvcEtleSA9IGxhc3RQcm9wc1tjaGVja2VkXSksXG4gICAgICAgICAgbmV4dFByb3BzLmhhc093blByb3BlcnR5KGNoZWNrZWQpICYmXG4gICAgICAgICAgICBwcm9wS2V5JDIwMyAhPT0gcHJvcEtleSAmJlxuICAgICAgICAgICAgKG51bGwgIT0gcHJvcEtleSQyMDMgfHwgbnVsbCAhPSBwcm9wS2V5KSlcbiAgICAgICAgKVxuICAgICAgICAgIHN3aXRjaCAoY2hlY2tlZCkge1xuICAgICAgICAgICAgY2FzZSBcImNoaWxkcmVuXCI6XG4gICAgICAgICAgICBjYXNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIjpcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT0gcHJvcEtleSQyMDMpXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMzcsIHRhZykpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHNldFByb3AoXG4gICAgICAgICAgICAgICAgZG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgICB0YWcsXG4gICAgICAgICAgICAgICAgY2hlY2tlZCxcbiAgICAgICAgICAgICAgICBwcm9wS2V5JDIwMyxcbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgcHJvcEtleVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKGlzQ3VzdG9tRWxlbWVudCh0YWcpKSB7XG4gICAgICAgIGZvciAodmFyIHByb3BLZXkkMjI5IGluIGxhc3RQcm9wcylcbiAgICAgICAgICAocHJvcEtleSQyMDMgPSBsYXN0UHJvcHNbcHJvcEtleSQyMjldKSxcbiAgICAgICAgICAgIGxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIyOSkgJiZcbiAgICAgICAgICAgICAgdm9pZCAwICE9PSBwcm9wS2V5JDIwMyAmJlxuICAgICAgICAgICAgICAhbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkkMjI5KSAmJlxuICAgICAgICAgICAgICBzZXRQcm9wT25DdXN0b21FbGVtZW50KFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIHByb3BLZXkkMjI5LFxuICAgICAgICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMsXG4gICAgICAgICAgICAgICAgcHJvcEtleSQyMDNcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgZm9yIChkZWZhdWx0Q2hlY2tlZCBpbiBuZXh0UHJvcHMpXG4gICAgICAgICAgKHByb3BLZXkkMjAzID0gbmV4dFByb3BzW2RlZmF1bHRDaGVja2VkXSksXG4gICAgICAgICAgICAocHJvcEtleSA9IGxhc3RQcm9wc1tkZWZhdWx0Q2hlY2tlZF0pLFxuICAgICAgICAgICAgIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShkZWZhdWx0Q2hlY2tlZCkgfHxcbiAgICAgICAgICAgICAgcHJvcEtleSQyMDMgPT09IHByb3BLZXkgfHxcbiAgICAgICAgICAgICAgKHZvaWQgMCA9PT0gcHJvcEtleSQyMDMgJiYgdm9pZCAwID09PSBwcm9wS2V5KSB8fFxuICAgICAgICAgICAgICBzZXRQcm9wT25DdXN0b21FbGVtZW50KFxuICAgICAgICAgICAgICAgIGRvbUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgdGFnLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRDaGVja2VkLFxuICAgICAgICAgICAgICAgIHByb3BLZXkkMjAzLFxuICAgICAgICAgICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgICAgICAgICBwcm9wS2V5XG4gICAgICAgICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgfVxuICBmb3IgKHZhciBwcm9wS2V5JDIzNCBpbiBsYXN0UHJvcHMpXG4gICAgKHByb3BLZXkkMjAzID0gbGFzdFByb3BzW3Byb3BLZXkkMjM0XSksXG4gICAgICBsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSQyMzQpICYmXG4gICAgICAgIG51bGwgIT0gcHJvcEtleSQyMDMgJiZcbiAgICAgICAgIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5JDIzNCkgJiZcbiAgICAgICAgc2V0UHJvcChkb21FbGVtZW50LCB0YWcsIHByb3BLZXkkMjM0LCBudWxsLCBuZXh0UHJvcHMsIHByb3BLZXkkMjAzKTtcbiAgZm9yIChsYXN0UHJvcCBpbiBuZXh0UHJvcHMpXG4gICAgKHByb3BLZXkkMjAzID0gbmV4dFByb3BzW2xhc3RQcm9wXSksXG4gICAgICAocHJvcEtleSA9IGxhc3RQcm9wc1tsYXN0UHJvcF0pLFxuICAgICAgIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShsYXN0UHJvcCkgfHxcbiAgICAgICAgcHJvcEtleSQyMDMgPT09IHByb3BLZXkgfHxcbiAgICAgICAgKG51bGwgPT0gcHJvcEtleSQyMDMgJiYgbnVsbCA9PSBwcm9wS2V5KSB8fFxuICAgICAgICBzZXRQcm9wKGRvbUVsZW1lbnQsIHRhZywgbGFzdFByb3AsIHByb3BLZXkkMjAzLCBuZXh0UHJvcHMsIHByb3BLZXkpO1xufVxudmFyIGV2ZW50c0VuYWJsZWQgPSBudWxsLFxuICBzZWxlY3Rpb25JbmZvcm1hdGlvbiA9IG51bGw7XG5mdW5jdGlvbiBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIocm9vdENvbnRhaW5lckVsZW1lbnQpIHtcbiAgcmV0dXJuIDkgPT09IHJvb3RDb250YWluZXJFbGVtZW50Lm5vZGVUeXBlXG4gICAgPyByb290Q29udGFpbmVyRWxlbWVudFxuICAgIDogcm9vdENvbnRhaW5lckVsZW1lbnQub3duZXJEb2N1bWVudDtcbn1cbmZ1bmN0aW9uIGdldE93bkhvc3RDb250ZXh0KG5hbWVzcGFjZVVSSSkge1xuICBzd2l0Y2ggKG5hbWVzcGFjZVVSSSkge1xuICAgIGNhc2UgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiOlxuICAgICAgcmV0dXJuIDE7XG4gICAgY2FzZSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjpcbiAgICAgIHJldHVybiAyO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gMDtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0Q2hpbGRIb3N0Q29udGV4dFByb2QocGFyZW50TmFtZXNwYWNlLCB0eXBlKSB7XG4gIGlmICgwID09PSBwYXJlbnROYW1lc3BhY2UpXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwic3ZnXCI6XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgY2FzZSBcIm1hdGhcIjpcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gIHJldHVybiAxID09PSBwYXJlbnROYW1lc3BhY2UgJiYgXCJmb3JlaWduT2JqZWN0XCIgPT09IHR5cGVcbiAgICA/IDBcbiAgICA6IHBhcmVudE5hbWVzcGFjZTtcbn1cbmZ1bmN0aW9uIHNob3VsZFNldFRleHRDb250ZW50KHR5cGUsIHByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgXCJ0ZXh0YXJlYVwiID09PSB0eXBlIHx8XG4gICAgXCJub3NjcmlwdFwiID09PSB0eXBlIHx8XG4gICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHByb3BzLmNoaWxkcmVuIHx8XG4gICAgXCJudW1iZXJcIiA9PT0gdHlwZW9mIHByb3BzLmNoaWxkcmVuIHx8XG4gICAgXCJiaWdpbnRcIiA9PT0gdHlwZW9mIHByb3BzLmNoaWxkcmVuIHx8XG4gICAgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAmJlxuICAgICAgbnVsbCAhPT0gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgJiZcbiAgICAgIG51bGwgIT0gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sKVxuICApO1xufVxudmFyIGN1cnJlbnRQb3BzdGF0ZVRyYW5zaXRpb25FdmVudCA9IG51bGw7XG5mdW5jdGlvbiBzaG91bGRBdHRlbXB0RWFnZXJUcmFuc2l0aW9uKCkge1xuICB2YXIgZXZlbnQgPSB3aW5kb3cuZXZlbnQ7XG4gIGlmIChldmVudCAmJiBcInBvcHN0YXRlXCIgPT09IGV2ZW50LnR5cGUpIHtcbiAgICBpZiAoZXZlbnQgPT09IGN1cnJlbnRQb3BzdGF0ZVRyYW5zaXRpb25FdmVudCkgcmV0dXJuICExO1xuICAgIGN1cnJlbnRQb3BzdGF0ZVRyYW5zaXRpb25FdmVudCA9IGV2ZW50O1xuICAgIHJldHVybiAhMDtcbiAgfVxuICBjdXJyZW50UG9wc3RhdGVUcmFuc2l0aW9uRXZlbnQgPSBudWxsO1xuICByZXR1cm4gITE7XG59XG52YXIgc2NoZWR1bGVUaW1lb3V0ID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygc2V0VGltZW91dCA/IHNldFRpbWVvdXQgOiB2b2lkIDAsXG4gIGNhbmNlbFRpbWVvdXQgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjbGVhclRpbWVvdXQgPyBjbGVhclRpbWVvdXQgOiB2b2lkIDAsXG4gIGxvY2FsUHJvbWlzZSA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIFByb21pc2UgPyBQcm9taXNlIDogdm9pZCAwLFxuICBzY2hlZHVsZU1pY3JvdGFzayA9XG4gICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcXVldWVNaWNyb3Rhc2tcbiAgICAgID8gcXVldWVNaWNyb3Rhc2tcbiAgICAgIDogXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIGxvY2FsUHJvbWlzZVxuICAgICAgICA/IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsUHJvbWlzZVxuICAgICAgICAgICAgICAucmVzb2x2ZShudWxsKVxuICAgICAgICAgICAgICAudGhlbihjYWxsYmFjaylcbiAgICAgICAgICAgICAgLmNhdGNoKGhhbmRsZUVycm9ySW5OZXh0VGljayk7XG4gICAgICAgICAgfVxuICAgICAgICA6IHNjaGVkdWxlVGltZW91dDtcbmZ1bmN0aW9uIGhhbmRsZUVycm9ySW5OZXh0VGljayhlcnJvcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfSk7XG59XG5mdW5jdGlvbiBjbGVhclN1c3BlbnNlQm91bmRhcnkocGFyZW50SW5zdGFuY2UsIHN1c3BlbnNlSW5zdGFuY2UpIHtcbiAgdmFyIG5vZGUgPSBzdXNwZW5zZUluc3RhbmNlLFxuICAgIGRlcHRoID0gMDtcbiAgZG8ge1xuICAgIHZhciBuZXh0Tm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgcGFyZW50SW5zdGFuY2UucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgaWYgKG5leHROb2RlICYmIDggPT09IG5leHROb2RlLm5vZGVUeXBlKVxuICAgICAgaWYgKCgobm9kZSA9IG5leHROb2RlLmRhdGEpLCBcIi8kXCIgPT09IG5vZGUpKSB7XG4gICAgICAgIGlmICgwID09PSBkZXB0aCkge1xuICAgICAgICAgIHBhcmVudEluc3RhbmNlLnJlbW92ZUNoaWxkKG5leHROb2RlKTtcbiAgICAgICAgICByZXRyeUlmQmxvY2tlZE9uKHN1c3BlbnNlSW5zdGFuY2UpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkZXB0aC0tO1xuICAgICAgfSBlbHNlIChcIiRcIiAhPT0gbm9kZSAmJiBcIiQ/XCIgIT09IG5vZGUgJiYgXCIkIVwiICE9PSBub2RlKSB8fCBkZXB0aCsrO1xuICAgIG5vZGUgPSBuZXh0Tm9kZTtcbiAgfSB3aGlsZSAobm9kZSk7XG4gIHJldHJ5SWZCbG9ja2VkT24oc3VzcGVuc2VJbnN0YW5jZSk7XG59XG5mdW5jdGlvbiBjbGVhckNvbnRhaW5lclNwYXJpbmdseShjb250YWluZXIpIHtcbiAgdmFyIG5leHROb2RlID0gY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gIG5leHROb2RlICYmIDEwID09PSBuZXh0Tm9kZS5ub2RlVHlwZSAmJiAobmV4dE5vZGUgPSBuZXh0Tm9kZS5uZXh0U2libGluZyk7XG4gIGZvciAoOyBuZXh0Tm9kZTsgKSB7XG4gICAgdmFyIG5vZGUgPSBuZXh0Tm9kZTtcbiAgICBuZXh0Tm9kZSA9IG5leHROb2RlLm5leHRTaWJsaW5nO1xuICAgIHN3aXRjaCAobm9kZS5ub2RlTmFtZSkge1xuICAgICAgY2FzZSBcIkhUTUxcIjpcbiAgICAgIGNhc2UgXCJIRUFEXCI6XG4gICAgICBjYXNlIFwiQk9EWVwiOlxuICAgICAgICBjbGVhckNvbnRhaW5lclNwYXJpbmdseShub2RlKTtcbiAgICAgICAgZGV0YWNoRGVsZXRlZEluc3RhbmNlKG5vZGUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNhc2UgXCJTQ1JJUFRcIjpcbiAgICAgIGNhc2UgXCJTVFlMRVwiOlxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNhc2UgXCJMSU5LXCI6XG4gICAgICAgIGlmIChcInN0eWxlc2hlZXRcIiA9PT0gbm9kZS5yZWwudG9Mb3dlckNhc2UoKSkgY29udGludWU7XG4gICAgfVxuICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChub2RlKTtcbiAgfVxufVxuZnVuY3Rpb24gY2FuSHlkcmF0ZUluc3RhbmNlKGluc3RhbmNlLCB0eXBlLCBwcm9wcywgaW5Sb290T3JTaW5nbGV0b24pIHtcbiAgZm9yICg7IDEgPT09IGluc3RhbmNlLm5vZGVUeXBlOyApIHtcbiAgICB2YXIgYW55UHJvcHMgPSBwcm9wcztcbiAgICBpZiAoaW5zdGFuY2Uubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gdHlwZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBpZiAoXG4gICAgICAgICFpblJvb3RPclNpbmdsZXRvbiAmJlxuICAgICAgICAoXCJJTlBVVFwiICE9PSBpbnN0YW5jZS5ub2RlTmFtZSB8fCBcImhpZGRlblwiICE9PSBpbnN0YW5jZS50eXBlKVxuICAgICAgKVxuICAgICAgICBicmVhaztcbiAgICB9IGVsc2UgaWYgKCFpblJvb3RPclNpbmdsZXRvbilcbiAgICAgIGlmIChcImlucHV0XCIgPT09IHR5cGUgJiYgXCJoaWRkZW5cIiA9PT0gaW5zdGFuY2UudHlwZSkge1xuICAgICAgICB2YXIgbmFtZSA9IG51bGwgPT0gYW55UHJvcHMubmFtZSA/IG51bGwgOiBcIlwiICsgYW55UHJvcHMubmFtZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwiaGlkZGVuXCIgPT09IGFueVByb3BzLnR5cGUgJiZcbiAgICAgICAgICBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpID09PSBuYW1lXG4gICAgICAgIClcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICB9IGVsc2UgcmV0dXJuIGluc3RhbmNlO1xuICAgIGVsc2UgaWYgKCFpbnN0YW5jZVtpbnRlcm5hbEhvaXN0YWJsZU1hcmtlcl0pXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcIm1ldGFcIjpcbiAgICAgICAgICBpZiAoIWluc3RhbmNlLmhhc0F0dHJpYnV0ZShcIml0ZW1wcm9wXCIpKSBicmVhaztcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICAgICAgbmFtZSA9IGluc3RhbmNlLmdldEF0dHJpYnV0ZShcInJlbFwiKTtcbiAgICAgICAgICBpZiAoXCJzdHlsZXNoZWV0XCIgPT09IG5hbWUgJiYgaW5zdGFuY2UuaGFzQXR0cmlidXRlKFwiZGF0YS1wcmVjZWRlbmNlXCIpKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZWxzZSBpZiAoXG4gICAgICAgICAgICBuYW1lICE9PSBhbnlQcm9wcy5yZWwgfHxcbiAgICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcImhyZWZcIikgIT09XG4gICAgICAgICAgICAgIChudWxsID09IGFueVByb3BzLmhyZWYgPyBudWxsIDogYW55UHJvcHMuaHJlZikgfHxcbiAgICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcImNyb3Nzb3JpZ2luXCIpICE9PVxuICAgICAgICAgICAgICAobnVsbCA9PSBhbnlQcm9wcy5jcm9zc09yaWdpbiA/IG51bGwgOiBhbnlQcm9wcy5jcm9zc09yaWdpbikgfHxcbiAgICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcInRpdGxlXCIpICE9PVxuICAgICAgICAgICAgICAobnVsbCA9PSBhbnlQcm9wcy50aXRsZSA/IG51bGwgOiBhbnlQcm9wcy50aXRsZSlcbiAgICAgICAgICApXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgICAgIGlmIChpbnN0YW5jZS5oYXNBdHRyaWJ1dGUoXCJkYXRhLXByZWNlZGVuY2VcIikpIGJyZWFrO1xuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgICAgIG5hbWUgPSBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKG5hbWUgIT09IChudWxsID09IGFueVByb3BzLnNyYyA/IG51bGwgOiBhbnlQcm9wcy5zcmMpIHx8XG4gICAgICAgICAgICAgIGluc3RhbmNlLmdldEF0dHJpYnV0ZShcInR5cGVcIikgIT09XG4gICAgICAgICAgICAgICAgKG51bGwgPT0gYW55UHJvcHMudHlwZSA/IG51bGwgOiBhbnlQcm9wcy50eXBlKSB8fFxuICAgICAgICAgICAgICBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoXCJjcm9zc29yaWdpblwiKSAhPT1cbiAgICAgICAgICAgICAgICAobnVsbCA9PSBhbnlQcm9wcy5jcm9zc09yaWdpbiA/IG51bGwgOiBhbnlQcm9wcy5jcm9zc09yaWdpbikpICYmXG4gICAgICAgICAgICBuYW1lICYmXG4gICAgICAgICAgICBpbnN0YW5jZS5oYXNBdHRyaWJ1dGUoXCJhc3luY1wiKSAmJlxuICAgICAgICAgICAgIWluc3RhbmNlLmhhc0F0dHJpYnV0ZShcIml0ZW1wcm9wXCIpXG4gICAgICAgICAgKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgIH1cbiAgICBpbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKGluc3RhbmNlLm5leHRTaWJsaW5nKTtcbiAgICBpZiAobnVsbCA9PT0gaW5zdGFuY2UpIGJyZWFrO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gY2FuSHlkcmF0ZVRleHRJbnN0YW5jZShpbnN0YW5jZSwgdGV4dCwgaW5Sb290T3JTaW5nbGV0b24pIHtcbiAgaWYgKFwiXCIgPT09IHRleHQpIHJldHVybiBudWxsO1xuICBmb3IgKDsgMyAhPT0gaW5zdGFuY2Uubm9kZVR5cGU7ICkge1xuICAgIGlmIChcbiAgICAgICgxICE9PSBpbnN0YW5jZS5ub2RlVHlwZSB8fFxuICAgICAgICBcIklOUFVUXCIgIT09IGluc3RhbmNlLm5vZGVOYW1lIHx8XG4gICAgICAgIFwiaGlkZGVuXCIgIT09IGluc3RhbmNlLnR5cGUpICYmXG4gICAgICAhaW5Sb290T3JTaW5nbGV0b25cbiAgICApXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBpbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlKGluc3RhbmNlLm5leHRTaWJsaW5nKTtcbiAgICBpZiAobnVsbCA9PT0gaW5zdGFuY2UpIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBpbnN0YW5jZTtcbn1cbmZ1bmN0aW9uIGdldE5leHRIeWRyYXRhYmxlKG5vZGUpIHtcbiAgZm9yICg7IG51bGwgIT0gbm9kZTsgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmcpIHtcbiAgICB2YXIgbm9kZVR5cGUgPSBub2RlLm5vZGVUeXBlO1xuICAgIGlmICgxID09PSBub2RlVHlwZSB8fCAzID09PSBub2RlVHlwZSkgYnJlYWs7XG4gICAgaWYgKDggPT09IG5vZGVUeXBlKSB7XG4gICAgICBub2RlVHlwZSA9IG5vZGUuZGF0YTtcbiAgICAgIGlmIChcbiAgICAgICAgXCIkXCIgPT09IG5vZGVUeXBlIHx8XG4gICAgICAgIFwiJCFcIiA9PT0gbm9kZVR5cGUgfHxcbiAgICAgICAgXCIkP1wiID09PSBub2RlVHlwZSB8fFxuICAgICAgICBcIkYhXCIgPT09IG5vZGVUeXBlIHx8XG4gICAgICAgIFwiRlwiID09PSBub2RlVHlwZVxuICAgICAgKVxuICAgICAgICBicmVhaztcbiAgICAgIGlmIChcIi8kXCIgPT09IG5vZGVUeXBlKSByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5mdW5jdGlvbiBnZXRQYXJlbnRTdXNwZW5zZUluc3RhbmNlKHRhcmdldEluc3RhbmNlKSB7XG4gIHRhcmdldEluc3RhbmNlID0gdGFyZ2V0SW5zdGFuY2UucHJldmlvdXNTaWJsaW5nO1xuICBmb3IgKHZhciBkZXB0aCA9IDA7IHRhcmdldEluc3RhbmNlOyApIHtcbiAgICBpZiAoOCA9PT0gdGFyZ2V0SW5zdGFuY2Uubm9kZVR5cGUpIHtcbiAgICAgIHZhciBkYXRhID0gdGFyZ2V0SW5zdGFuY2UuZGF0YTtcbiAgICAgIGlmIChcIiRcIiA9PT0gZGF0YSB8fCBcIiQhXCIgPT09IGRhdGEgfHwgXCIkP1wiID09PSBkYXRhKSB7XG4gICAgICAgIGlmICgwID09PSBkZXB0aCkgcmV0dXJuIHRhcmdldEluc3RhbmNlO1xuICAgICAgICBkZXB0aC0tO1xuICAgICAgfSBlbHNlIFwiLyRcIiA9PT0gZGF0YSAmJiBkZXB0aCsrO1xuICAgIH1cbiAgICB0YXJnZXRJbnN0YW5jZSA9IHRhcmdldEluc3RhbmNlLnByZXZpb3VzU2libGluZztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVTaW5nbGV0b25JbnN0YW5jZSh0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlKSB7XG4gIHByb3BzID0gZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyKHJvb3RDb250YWluZXJJbnN0YW5jZSk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgXCJodG1sXCI6XG4gICAgICB0eXBlID0gcHJvcHMuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgaWYgKCF0eXBlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1MikpO1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgY2FzZSBcImhlYWRcIjpcbiAgICAgIHR5cGUgPSBwcm9wcy5oZWFkO1xuICAgICAgaWYgKCF0eXBlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1MykpO1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgY2FzZSBcImJvZHlcIjpcbiAgICAgIHR5cGUgPSBwcm9wcy5ib2R5O1xuICAgICAgaWYgKCF0eXBlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ1NCkpO1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDUxKSk7XG4gIH1cbn1cbnZhciBwcmVsb2FkUHJvcHNNYXAgPSBuZXcgTWFwKCksXG4gIHByZWNvbm5lY3RzU2V0ID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gZ2V0SG9pc3RhYmxlUm9vdChjb250YWluZXIpIHtcbiAgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbnRhaW5lci5nZXRSb290Tm9kZVxuICAgID8gY29udGFpbmVyLmdldFJvb3ROb2RlKClcbiAgICA6IGNvbnRhaW5lci5vd25lckRvY3VtZW50O1xufVxudmFyIHByZXZpb3VzRGlzcGF0Y2hlciA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLmQ7XG5SZWFjdERPTVNoYXJlZEludGVybmFscy5kID0ge1xuICBmOiBmbHVzaFN5bmNXb3JrLFxuICByOiByZXF1ZXN0Rm9ybVJlc2V0LFxuICBEOiBwcmVmZXRjaEROUyxcbiAgQzogcHJlY29ubmVjdCxcbiAgTDogcHJlbG9hZCxcbiAgbTogcHJlbG9hZE1vZHVsZSxcbiAgWDogcHJlaW5pdFNjcmlwdCxcbiAgUzogcHJlaW5pdFN0eWxlLFxuICBNOiBwcmVpbml0TW9kdWxlU2NyaXB0XG59O1xuZnVuY3Rpb24gZmx1c2hTeW5jV29yaygpIHtcbiAgdmFyIHByZXZpb3VzV2FzUmVuZGVyaW5nID0gcHJldmlvdXNEaXNwYXRjaGVyLmYoKSxcbiAgICB3YXNSZW5kZXJpbmcgPSBmbHVzaFN5bmNXb3JrJDEoKTtcbiAgcmV0dXJuIHByZXZpb3VzV2FzUmVuZGVyaW5nIHx8IHdhc1JlbmRlcmluZztcbn1cbmZ1bmN0aW9uIHJlcXVlc3RGb3JtUmVzZXQoZm9ybSkge1xuICB2YXIgZm9ybUluc3QgPSBnZXRJbnN0YW5jZUZyb21Ob2RlKGZvcm0pO1xuICBudWxsICE9PSBmb3JtSW5zdCAmJiA1ID09PSBmb3JtSW5zdC50YWcgJiYgXCJmb3JtXCIgPT09IGZvcm1JbnN0LnR5cGVcbiAgICA/IHJlcXVlc3RGb3JtUmVzZXQkMShmb3JtSW5zdClcbiAgICA6IHByZXZpb3VzRGlzcGF0Y2hlci5yKGZvcm0pO1xufVxudmFyIGdsb2JhbERvY3VtZW50ID0gXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIGRvY3VtZW50ID8gbnVsbCA6IGRvY3VtZW50O1xuZnVuY3Rpb24gcHJlY29ubmVjdEFzKHJlbCwgaHJlZiwgY3Jvc3NPcmlnaW4pIHtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBnbG9iYWxEb2N1bWVudDtcbiAgaWYgKG93bmVyRG9jdW1lbnQgJiYgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGhyZWYgJiYgaHJlZikge1xuICAgIHZhciBsaW1pdGVkRXNjYXBlZEhyZWYgPVxuICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhocmVmKTtcbiAgICBsaW1pdGVkRXNjYXBlZEhyZWYgPVxuICAgICAgJ2xpbmtbcmVsPVwiJyArIHJlbCArICdcIl1baHJlZj1cIicgKyBsaW1pdGVkRXNjYXBlZEhyZWYgKyAnXCJdJztcbiAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgY3Jvc3NPcmlnaW4gJiZcbiAgICAgIChsaW1pdGVkRXNjYXBlZEhyZWYgKz0gJ1tjcm9zc29yaWdpbj1cIicgKyBjcm9zc09yaWdpbiArICdcIl0nKTtcbiAgICBwcmVjb25uZWN0c1NldC5oYXMobGltaXRlZEVzY2FwZWRIcmVmKSB8fFxuICAgICAgKHByZWNvbm5lY3RzU2V0LmFkZChsaW1pdGVkRXNjYXBlZEhyZWYpLFxuICAgICAgKHJlbCA9IHsgcmVsOiByZWwsIGNyb3NzT3JpZ2luOiBjcm9zc09yaWdpbiwgaHJlZjogaHJlZiB9KSxcbiAgICAgIG51bGwgPT09IG93bmVyRG9jdW1lbnQucXVlcnlTZWxlY3RvcihsaW1pdGVkRXNjYXBlZEhyZWYpICYmXG4gICAgICAgICgoaHJlZiA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIikpLFxuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhocmVmLCBcImxpbmtcIiwgcmVsKSxcbiAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShocmVmKSxcbiAgICAgICAgb3duZXJEb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGhyZWYpKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHByZWZldGNoRE5TKGhyZWYpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLkQoaHJlZik7XG4gIHByZWNvbm5lY3RBcyhcImRucy1wcmVmZXRjaFwiLCBocmVmLCBudWxsKTtcbn1cbmZ1bmN0aW9uIHByZWNvbm5lY3QoaHJlZiwgY3Jvc3NPcmlnaW4pIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLkMoaHJlZiwgY3Jvc3NPcmlnaW4pO1xuICBwcmVjb25uZWN0QXMoXCJwcmVjb25uZWN0XCIsIGhyZWYsIGNyb3NzT3JpZ2luKTtcbn1cbmZ1bmN0aW9uIHByZWxvYWQoaHJlZiwgYXMsIG9wdGlvbnMpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLkwoaHJlZiwgYXMsIG9wdGlvbnMpO1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGdsb2JhbERvY3VtZW50O1xuICBpZiAob3duZXJEb2N1bWVudCAmJiBocmVmICYmIGFzKSB7XG4gICAgdmFyIHByZWxvYWRTZWxlY3RvciA9XG4gICAgICAnbGlua1tyZWw9XCJwcmVsb2FkXCJdW2FzPVwiJyArXG4gICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGFzKSArXG4gICAgICAnXCJdJztcbiAgICBcImltYWdlXCIgPT09IGFzXG4gICAgICA/IG9wdGlvbnMgJiYgb3B0aW9ucy5pbWFnZVNyY1NldFxuICAgICAgICA/ICgocHJlbG9hZFNlbGVjdG9yICs9XG4gICAgICAgICAgICAnW2ltYWdlc3Jjc2V0PVwiJyArXG4gICAgICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKFxuICAgICAgICAgICAgICBvcHRpb25zLmltYWdlU3JjU2V0XG4gICAgICAgICAgICApICtcbiAgICAgICAgICAgICdcIl0nKSxcbiAgICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2Ygb3B0aW9ucy5pbWFnZVNpemVzICYmXG4gICAgICAgICAgICAocHJlbG9hZFNlbGVjdG9yICs9XG4gICAgICAgICAgICAgICdbaW1hZ2VzaXplcz1cIicgK1xuICAgICAgICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuaW1hZ2VTaXplc1xuICAgICAgICAgICAgICApICtcbiAgICAgICAgICAgICAgJ1wiXScpKVxuICAgICAgICA6IChwcmVsb2FkU2VsZWN0b3IgKz1cbiAgICAgICAgICAgICdbaHJlZj1cIicgK1xuICAgICAgICAgICAgZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyhocmVmKSArXG4gICAgICAgICAgICAnXCJdJylcbiAgICAgIDogKHByZWxvYWRTZWxlY3RvciArPVxuICAgICAgICAgICdbaHJlZj1cIicgK1xuICAgICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoaHJlZikgK1xuICAgICAgICAgICdcIl0nKTtcbiAgICB2YXIga2V5ID0gcHJlbG9hZFNlbGVjdG9yO1xuICAgIHN3aXRjaCAoYXMpIHtcbiAgICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgICBrZXkgPSBnZXRTdHlsZUtleShocmVmKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgIGtleSA9IGdldFNjcmlwdEtleShocmVmKTtcbiAgICB9XG4gICAgcHJlbG9hZFByb3BzTWFwLmhhcyhrZXkpIHx8XG4gICAgICAoKGhyZWYgPSBhc3NpZ24oXG4gICAgICAgIHtcbiAgICAgICAgICByZWw6IFwicHJlbG9hZFwiLFxuICAgICAgICAgIGhyZWY6XG4gICAgICAgICAgICBcImltYWdlXCIgPT09IGFzICYmIG9wdGlvbnMgJiYgb3B0aW9ucy5pbWFnZVNyY1NldCA/IHZvaWQgMCA6IGhyZWYsXG4gICAgICAgICAgYXM6IGFzXG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbnNcbiAgICAgICkpLFxuICAgICAgcHJlbG9hZFByb3BzTWFwLnNldChrZXksIGhyZWYpLFxuICAgICAgbnVsbCAhPT0gb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKHByZWxvYWRTZWxlY3RvcikgfHxcbiAgICAgICAgKFwic3R5bGVcIiA9PT0gYXMgJiZcbiAgICAgICAgICBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleShrZXkpKSkgfHxcbiAgICAgICAgKFwic2NyaXB0XCIgPT09IGFzICYmXG4gICAgICAgICAgb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGdldFNjcmlwdFNlbGVjdG9yRnJvbUtleShrZXkpKSkgfHxcbiAgICAgICAgKChhcyA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIikpLFxuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhhcywgXCJsaW5rXCIsIGhyZWYpLFxuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGFzKSxcbiAgICAgICAgb3duZXJEb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGFzKSkpO1xuICB9XG59XG5mdW5jdGlvbiBwcmVsb2FkTW9kdWxlKGhyZWYsIG9wdGlvbnMpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLm0oaHJlZiwgb3B0aW9ucyk7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2xvYmFsRG9jdW1lbnQ7XG4gIGlmIChvd25lckRvY3VtZW50ICYmIGhyZWYpIHtcbiAgICB2YXIgYXMgPSBvcHRpb25zICYmIFwic3RyaW5nXCIgPT09IHR5cGVvZiBvcHRpb25zLmFzID8gb3B0aW9ucy5hcyA6IFwic2NyaXB0XCIsXG4gICAgICBwcmVsb2FkU2VsZWN0b3IgPVxuICAgICAgICAnbGlua1tyZWw9XCJtb2R1bGVwcmVsb2FkXCJdW2FzPVwiJyArXG4gICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoYXMpICtcbiAgICAgICAgJ1wiXVtocmVmPVwiJyArXG4gICAgICAgIGVzY2FwZVNlbGVjdG9yQXR0cmlidXRlVmFsdWVJbnNpZGVEb3VibGVRdW90ZXMoaHJlZikgK1xuICAgICAgICAnXCJdJyxcbiAgICAgIGtleSA9IHByZWxvYWRTZWxlY3RvcjtcbiAgICBzd2l0Y2ggKGFzKSB7XG4gICAgICBjYXNlIFwiYXVkaW93b3JrbGV0XCI6XG4gICAgICBjYXNlIFwicGFpbnR3b3JrbGV0XCI6XG4gICAgICBjYXNlIFwic2VydmljZXdvcmtlclwiOlxuICAgICAgY2FzZSBcInNoYXJlZHdvcmtlclwiOlxuICAgICAgY2FzZSBcIndvcmtlclwiOlxuICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgICBrZXkgPSBnZXRTY3JpcHRLZXkoaHJlZik7XG4gICAgfVxuICAgIGlmIChcbiAgICAgICFwcmVsb2FkUHJvcHNNYXAuaGFzKGtleSkgJiZcbiAgICAgICgoaHJlZiA9IGFzc2lnbih7IHJlbDogXCJtb2R1bGVwcmVsb2FkXCIsIGhyZWY6IGhyZWYgfSwgb3B0aW9ucykpLFxuICAgICAgcHJlbG9hZFByb3BzTWFwLnNldChrZXksIGhyZWYpLFxuICAgICAgbnVsbCA9PT0gb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKHByZWxvYWRTZWxlY3RvcikpXG4gICAgKSB7XG4gICAgICBzd2l0Y2ggKGFzKSB7XG4gICAgICAgIGNhc2UgXCJhdWRpb3dvcmtsZXRcIjpcbiAgICAgICAgY2FzZSBcInBhaW50d29ya2xldFwiOlxuICAgICAgICBjYXNlIFwic2VydmljZXdvcmtlclwiOlxuICAgICAgICBjYXNlIFwic2hhcmVkd29ya2VyXCI6XG4gICAgICAgIGNhc2UgXCJ3b3JrZXJcIjpcbiAgICAgICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgICAgIGlmIChvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5KGtleSkpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXMgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoYXMsIFwibGlua1wiLCBocmVmKTtcbiAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoYXMpO1xuICAgICAgb3duZXJEb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGFzKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHByZWluaXRTdHlsZShocmVmLCBwcmVjZWRlbmNlLCBvcHRpb25zKSB7XG4gIHByZXZpb3VzRGlzcGF0Y2hlci5TKGhyZWYsIHByZWNlZGVuY2UsIG9wdGlvbnMpO1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGdsb2JhbERvY3VtZW50O1xuICBpZiAob3duZXJEb2N1bWVudCAmJiBocmVmKSB7XG4gICAgdmFyIHN0eWxlcyA9IGdldFJlc291cmNlc0Zyb21Sb290KG93bmVyRG9jdW1lbnQpLmhvaXN0YWJsZVN0eWxlcyxcbiAgICAgIGtleSA9IGdldFN0eWxlS2V5KGhyZWYpO1xuICAgIHByZWNlZGVuY2UgPSBwcmVjZWRlbmNlIHx8IFwiZGVmYXVsdFwiO1xuICAgIHZhciByZXNvdXJjZSA9IHN0eWxlcy5nZXQoa2V5KTtcbiAgICBpZiAoIXJlc291cmNlKSB7XG4gICAgICB2YXIgc3RhdGUgPSB7IGxvYWRpbmc6IDAsIHByZWxvYWQ6IG51bGwgfTtcbiAgICAgIGlmIChcbiAgICAgICAgKHJlc291cmNlID0gb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgIGdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkoa2V5KVxuICAgICAgICApKVxuICAgICAgKVxuICAgICAgICBzdGF0ZS5sb2FkaW5nID0gNTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBocmVmID0gYXNzaWduKFxuICAgICAgICAgIHsgcmVsOiBcInN0eWxlc2hlZXRcIiwgaHJlZjogaHJlZiwgXCJkYXRhLXByZWNlZGVuY2VcIjogcHJlY2VkZW5jZSB9LFxuICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgKTtcbiAgICAgICAgKG9wdGlvbnMgPSBwcmVsb2FkUHJvcHNNYXAuZ2V0KGtleSkpICYmXG4gICAgICAgICAgYWRvcHRQcmVsb2FkUHJvcHNGb3JTdHlsZXNoZWV0KGhyZWYsIG9wdGlvbnMpO1xuICAgICAgICB2YXIgbGluayA9IChyZXNvdXJjZSA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIikpO1xuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGxpbmspO1xuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhsaW5rLCBcImxpbmtcIiwgaHJlZik7XG4gICAgICAgIGxpbmsuX3AgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgbGluay5vbmxvYWQgPSByZXNvbHZlO1xuICAgICAgICAgIGxpbmsub25lcnJvciA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXRlLmxvYWRpbmcgfD0gMTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGF0ZS5sb2FkaW5nIHw9IDI7XG4gICAgICAgIH0pO1xuICAgICAgICBzdGF0ZS5sb2FkaW5nIHw9IDQ7XG4gICAgICAgIGluc2VydFN0eWxlc2hlZXQocmVzb3VyY2UsIHByZWNlZGVuY2UsIG93bmVyRG9jdW1lbnQpO1xuICAgICAgfVxuICAgICAgcmVzb3VyY2UgPSB7XG4gICAgICAgIHR5cGU6IFwic3R5bGVzaGVldFwiLFxuICAgICAgICBpbnN0YW5jZTogcmVzb3VyY2UsXG4gICAgICAgIGNvdW50OiAxLFxuICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgIH07XG4gICAgICBzdHlsZXMuc2V0KGtleSwgcmVzb3VyY2UpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcHJlaW5pdFNjcmlwdChzcmMsIG9wdGlvbnMpIHtcbiAgcHJldmlvdXNEaXNwYXRjaGVyLlgoc3JjLCBvcHRpb25zKTtcbiAgdmFyIG93bmVyRG9jdW1lbnQgPSBnbG9iYWxEb2N1bWVudDtcbiAgaWYgKG93bmVyRG9jdW1lbnQgJiYgc3JjKSB7XG4gICAgdmFyIHNjcmlwdHMgPSBnZXRSZXNvdXJjZXNGcm9tUm9vdChvd25lckRvY3VtZW50KS5ob2lzdGFibGVTY3JpcHRzLFxuICAgICAga2V5ID0gZ2V0U2NyaXB0S2V5KHNyYyksXG4gICAgICByZXNvdXJjZSA9IHNjcmlwdHMuZ2V0KGtleSk7XG4gICAgcmVzb3VyY2UgfHxcbiAgICAgICgocmVzb3VyY2UgPSBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZ2V0U2NyaXB0U2VsZWN0b3JGcm9tS2V5KGtleSkpKSxcbiAgICAgIHJlc291cmNlIHx8XG4gICAgICAgICgoc3JjID0gYXNzaWduKHsgc3JjOiBzcmMsIGFzeW5jOiAhMCB9LCBvcHRpb25zKSksXG4gICAgICAgIChvcHRpb25zID0gcHJlbG9hZFByb3BzTWFwLmdldChrZXkpKSAmJlxuICAgICAgICAgIGFkb3B0UHJlbG9hZFByb3BzRm9yU2NyaXB0KHNyYywgb3B0aW9ucyksXG4gICAgICAgIChyZXNvdXJjZSA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSksXG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUocmVzb3VyY2UpLFxuICAgICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhyZXNvdXJjZSwgXCJsaW5rXCIsIHNyYyksXG4gICAgICAgIG93bmVyRG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChyZXNvdXJjZSkpLFxuICAgICAgKHJlc291cmNlID0ge1xuICAgICAgICB0eXBlOiBcInNjcmlwdFwiLFxuICAgICAgICBpbnN0YW5jZTogcmVzb3VyY2UsXG4gICAgICAgIGNvdW50OiAxLFxuICAgICAgICBzdGF0ZTogbnVsbFxuICAgICAgfSksXG4gICAgICBzY3JpcHRzLnNldChrZXksIHJlc291cmNlKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHByZWluaXRNb2R1bGVTY3JpcHQoc3JjLCBvcHRpb25zKSB7XG4gIHByZXZpb3VzRGlzcGF0Y2hlci5NKHNyYywgb3B0aW9ucyk7XG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2xvYmFsRG9jdW1lbnQ7XG4gIGlmIChvd25lckRvY3VtZW50ICYmIHNyYykge1xuICAgIHZhciBzY3JpcHRzID0gZ2V0UmVzb3VyY2VzRnJvbVJvb3Qob3duZXJEb2N1bWVudCkuaG9pc3RhYmxlU2NyaXB0cyxcbiAgICAgIGtleSA9IGdldFNjcmlwdEtleShzcmMpLFxuICAgICAgcmVzb3VyY2UgPSBzY3JpcHRzLmdldChrZXkpO1xuICAgIHJlc291cmNlIHx8XG4gICAgICAoKHJlc291cmNlID0gb3duZXJEb2N1bWVudC5xdWVyeVNlbGVjdG9yKGdldFNjcmlwdFNlbGVjdG9yRnJvbUtleShrZXkpKSksXG4gICAgICByZXNvdXJjZSB8fFxuICAgICAgICAoKHNyYyA9IGFzc2lnbih7IHNyYzogc3JjLCBhc3luYzogITAsIHR5cGU6IFwibW9kdWxlXCIgfSwgb3B0aW9ucykpLFxuICAgICAgICAob3B0aW9ucyA9IHByZWxvYWRQcm9wc01hcC5nZXQoa2V5KSkgJiZcbiAgICAgICAgICBhZG9wdFByZWxvYWRQcm9wc0ZvclNjcmlwdChzcmMsIG9wdGlvbnMpLFxuICAgICAgICAocmVzb3VyY2UgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpLFxuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKHJlc291cmNlKSxcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMocmVzb3VyY2UsIFwibGlua1wiLCBzcmMpLFxuICAgICAgICBvd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQocmVzb3VyY2UpKSxcbiAgICAgIChyZXNvdXJjZSA9IHtcbiAgICAgICAgdHlwZTogXCJzY3JpcHRcIixcbiAgICAgICAgaW5zdGFuY2U6IHJlc291cmNlLFxuICAgICAgICBjb3VudDogMSxcbiAgICAgICAgc3RhdGU6IG51bGxcbiAgICAgIH0pLFxuICAgICAgc2NyaXB0cy5zZXQoa2V5LCByZXNvdXJjZSkpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRSZXNvdXJjZSh0eXBlLCBjdXJyZW50UHJvcHMsIHBlbmRpbmdQcm9wcywgY3VycmVudFJlc291cmNlKSB7XG4gIHZhciBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSAoSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID1cbiAgICByb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50KVxuICAgID8gZ2V0SG9pc3RhYmxlUm9vdChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpXG4gICAgOiBudWxsO1xuICBpZiAoIUpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NDYpKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBcIm1ldGFcIjpcbiAgICBjYXNlIFwidGl0bGVcIjpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgcmV0dXJuIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwZW5kaW5nUHJvcHMucHJlY2VkZW5jZSAmJlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcGVuZGluZ1Byb3BzLmhyZWZcbiAgICAgICAgPyAoKGN1cnJlbnRQcm9wcyA9IGdldFN0eWxlS2V5KHBlbmRpbmdQcm9wcy5ocmVmKSksXG4gICAgICAgICAgKHBlbmRpbmdQcm9wcyA9IGdldFJlc291cmNlc0Zyb21Sb290KFxuICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICAgICAgICAgKS5ob2lzdGFibGVTdHlsZXMpLFxuICAgICAgICAgIChjdXJyZW50UmVzb3VyY2UgPSBwZW5kaW5nUHJvcHMuZ2V0KGN1cnJlbnRQcm9wcykpLFxuICAgICAgICAgIGN1cnJlbnRSZXNvdXJjZSB8fFxuICAgICAgICAgICAgKChjdXJyZW50UmVzb3VyY2UgPSB7XG4gICAgICAgICAgICAgIHR5cGU6IFwic3R5bGVcIixcbiAgICAgICAgICAgICAgaW5zdGFuY2U6IG51bGwsXG4gICAgICAgICAgICAgIGNvdW50OiAwLFxuICAgICAgICAgICAgICBzdGF0ZTogbnVsbFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwZW5kaW5nUHJvcHMuc2V0KGN1cnJlbnRQcm9wcywgY3VycmVudFJlc291cmNlKSksXG4gICAgICAgICAgY3VycmVudFJlc291cmNlKVxuICAgICAgICA6IHsgdHlwZTogXCJ2b2lkXCIsIGluc3RhbmNlOiBudWxsLCBjb3VudDogMCwgc3RhdGU6IG51bGwgfTtcbiAgICBjYXNlIFwibGlua1wiOlxuICAgICAgaWYgKFxuICAgICAgICBcInN0eWxlc2hlZXRcIiA9PT0gcGVuZGluZ1Byb3BzLnJlbCAmJlxuICAgICAgICBcInN0cmluZ1wiID09PSB0eXBlb2YgcGVuZGluZ1Byb3BzLmhyZWYgJiZcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHBlbmRpbmdQcm9wcy5wcmVjZWRlbmNlXG4gICAgICApIHtcbiAgICAgICAgdHlwZSA9IGdldFN0eWxlS2V5KHBlbmRpbmdQcm9wcy5ocmVmKTtcbiAgICAgICAgdmFyIHN0eWxlcyQyNDIgPSBnZXRSZXNvdXJjZXNGcm9tUm9vdChcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdFxuICAgICAgICAgICkuaG9pc3RhYmxlU3R5bGVzLFxuICAgICAgICAgIHJlc291cmNlJDI0MyA9IHN0eWxlcyQyNDIuZ2V0KHR5cGUpO1xuICAgICAgICByZXNvdXJjZSQyNDMgfHxcbiAgICAgICAgICAoKEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9XG4gICAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQub3duZXJEb2N1bWVudCB8fCBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpLFxuICAgICAgICAgIChyZXNvdXJjZSQyNDMgPSB7XG4gICAgICAgICAgICB0eXBlOiBcInN0eWxlc2hlZXRcIixcbiAgICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgY291bnQ6IDAsXG4gICAgICAgICAgICBzdGF0ZTogeyBsb2FkaW5nOiAwLCBwcmVsb2FkOiBudWxsIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBzdHlsZXMkMjQyLnNldCh0eXBlLCByZXNvdXJjZSQyNDMpLFxuICAgICAgICAgIChzdHlsZXMkMjQyID0gSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBnZXRTdHlsZXNoZWV0U2VsZWN0b3JGcm9tS2V5KHR5cGUpXG4gICAgICAgICAgKSkgJiZcbiAgICAgICAgICAgICFzdHlsZXMkMjQyLl9wICYmXG4gICAgICAgICAgICAoKHJlc291cmNlJDI0My5pbnN0YW5jZSA9IHN0eWxlcyQyNDIpLFxuICAgICAgICAgICAgKHJlc291cmNlJDI0My5zdGF0ZS5sb2FkaW5nID0gNSkpLFxuICAgICAgICAgIHByZWxvYWRQcm9wc01hcC5oYXModHlwZSkgfHxcbiAgICAgICAgICAgICgocGVuZGluZ1Byb3BzID0ge1xuICAgICAgICAgICAgICByZWw6IFwicHJlbG9hZFwiLFxuICAgICAgICAgICAgICBhczogXCJzdHlsZVwiLFxuICAgICAgICAgICAgICBocmVmOiBwZW5kaW5nUHJvcHMuaHJlZixcbiAgICAgICAgICAgICAgY3Jvc3NPcmlnaW46IHBlbmRpbmdQcm9wcy5jcm9zc09yaWdpbixcbiAgICAgICAgICAgICAgaW50ZWdyaXR5OiBwZW5kaW5nUHJvcHMuaW50ZWdyaXR5LFxuICAgICAgICAgICAgICBtZWRpYTogcGVuZGluZ1Byb3BzLm1lZGlhLFxuICAgICAgICAgICAgICBocmVmTGFuZzogcGVuZGluZ1Byb3BzLmhyZWZMYW5nLFxuICAgICAgICAgICAgICByZWZlcnJlclBvbGljeTogcGVuZGluZ1Byb3BzLnJlZmVycmVyUG9saWN5XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHByZWxvYWRQcm9wc01hcC5zZXQodHlwZSwgcGVuZGluZ1Byb3BzKSxcbiAgICAgICAgICAgIHN0eWxlcyQyNDIgfHxcbiAgICAgICAgICAgICAgcHJlbG9hZFN0eWxlc2hlZXQoXG4gICAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0LFxuICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgcGVuZGluZ1Byb3BzLFxuICAgICAgICAgICAgICAgIHJlc291cmNlJDI0My5zdGF0ZVxuICAgICAgICAgICAgICApKSk7XG4gICAgICAgIGlmIChjdXJyZW50UHJvcHMgJiYgbnVsbCA9PT0gY3VycmVudFJlc291cmNlKVxuICAgICAgICAgIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNTI4LCBcIlwiKSk7XG4gICAgICAgIHJldHVybiByZXNvdXJjZSQyNDM7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFByb3BzICYmIG51bGwgIT09IGN1cnJlbnRSZXNvdXJjZSlcbiAgICAgICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1MjksIFwiXCIpKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgXCJzY3JpcHRcIjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChjdXJyZW50UHJvcHMgPSBwZW5kaW5nUHJvcHMuYXN5bmMpLFxuICAgICAgICAocGVuZGluZ1Byb3BzID0gcGVuZGluZ1Byb3BzLnNyYyksXG4gICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBwZW5kaW5nUHJvcHMgJiZcbiAgICAgICAgY3VycmVudFByb3BzICYmXG4gICAgICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGN1cnJlbnRQcm9wcyAmJlxuICAgICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgY3VycmVudFByb3BzXG4gICAgICAgICAgPyAoKGN1cnJlbnRQcm9wcyA9IGdldFNjcmlwdEtleShwZW5kaW5nUHJvcHMpKSxcbiAgICAgICAgICAgIChwZW5kaW5nUHJvcHMgPSBnZXRSZXNvdXJjZXNGcm9tUm9vdChcbiAgICAgICAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0XG4gICAgICAgICAgICApLmhvaXN0YWJsZVNjcmlwdHMpLFxuICAgICAgICAgICAgKGN1cnJlbnRSZXNvdXJjZSA9IHBlbmRpbmdQcm9wcy5nZXQoY3VycmVudFByb3BzKSksXG4gICAgICAgICAgICBjdXJyZW50UmVzb3VyY2UgfHxcbiAgICAgICAgICAgICAgKChjdXJyZW50UmVzb3VyY2UgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJzY3JpcHRcIixcbiAgICAgICAgICAgICAgICBpbnN0YW5jZTogbnVsbCxcbiAgICAgICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgICAgICBzdGF0ZTogbnVsbFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgcGVuZGluZ1Byb3BzLnNldChjdXJyZW50UHJvcHMsIGN1cnJlbnRSZXNvdXJjZSkpLFxuICAgICAgICAgICAgY3VycmVudFJlc291cmNlKVxuICAgICAgICAgIDogeyB0eXBlOiBcInZvaWRcIiwgaW5zdGFuY2U6IG51bGwsIGNvdW50OiAwLCBzdGF0ZTogbnVsbCB9XG4gICAgICApO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ0NCwgdHlwZSkpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRTdHlsZUtleShocmVmKSB7XG4gIHJldHVybiAnaHJlZj1cIicgKyBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKGhyZWYpICsgJ1wiJztcbn1cbmZ1bmN0aW9uIGdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkoa2V5KSB7XG4gIHJldHVybiAnbGlua1tyZWw9XCJzdHlsZXNoZWV0XCJdWycgKyBrZXkgKyBcIl1cIjtcbn1cbmZ1bmN0aW9uIHN0eWxlc2hlZXRQcm9wc0Zyb21SYXdQcm9wcyhyYXdQcm9wcykge1xuICByZXR1cm4gYXNzaWduKHt9LCByYXdQcm9wcywge1xuICAgIFwiZGF0YS1wcmVjZWRlbmNlXCI6IHJhd1Byb3BzLnByZWNlZGVuY2UsXG4gICAgcHJlY2VkZW5jZTogbnVsbFxuICB9KTtcbn1cbmZ1bmN0aW9uIHByZWxvYWRTdHlsZXNoZWV0KG93bmVyRG9jdW1lbnQsIGtleSwgcHJlbG9hZFByb3BzLCBzdGF0ZSkge1xuICBvd25lckRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2xpbmtbcmVsPVwicHJlbG9hZFwiXVthcz1cInN0eWxlXCJdWycgKyBrZXkgKyBcIl1cIilcbiAgICA/IChzdGF0ZS5sb2FkaW5nID0gMSlcbiAgICA6ICgoa2V5ID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKSksXG4gICAgICAoc3RhdGUucHJlbG9hZCA9IGtleSksXG4gICAgICBrZXkuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHN0YXRlLmxvYWRpbmcgfD0gMSk7XG4gICAgICB9KSxcbiAgICAgIGtleS5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKHN0YXRlLmxvYWRpbmcgfD0gMik7XG4gICAgICB9KSxcbiAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKGtleSwgXCJsaW5rXCIsIHByZWxvYWRQcm9wcyksXG4gICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGtleSksXG4gICAgICBvd25lckRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoa2V5KSk7XG59XG5mdW5jdGlvbiBnZXRTY3JpcHRLZXkoc3JjKSB7XG4gIHJldHVybiAnW3NyYz1cIicgKyBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKHNyYykgKyAnXCJdJztcbn1cbmZ1bmN0aW9uIGdldFNjcmlwdFNlbGVjdG9yRnJvbUtleShrZXkpIHtcbiAgcmV0dXJuIFwic2NyaXB0W2FzeW5jXVwiICsga2V5O1xufVxuZnVuY3Rpb24gYWNxdWlyZVJlc291cmNlKGhvaXN0YWJsZVJvb3QsIHJlc291cmNlLCBwcm9wcykge1xuICByZXNvdXJjZS5jb3VudCsrO1xuICBpZiAobnVsbCA9PT0gcmVzb3VyY2UuaW5zdGFuY2UpXG4gICAgc3dpdGNoIChyZXNvdXJjZS50eXBlKSB7XG4gICAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgICAgdmFyIGluc3RhbmNlID0gaG9pc3RhYmxlUm9vdC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICdzdHlsZVtkYXRhLWhyZWZ+PVwiJyArXG4gICAgICAgICAgICBlc2NhcGVTZWxlY3RvckF0dHJpYnV0ZVZhbHVlSW5zaWRlRG91YmxlUXVvdGVzKHByb3BzLmhyZWYpICtcbiAgICAgICAgICAgICdcIl0nXG4gICAgICAgICk7XG4gICAgICAgIGlmIChpbnN0YW5jZSlcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHJlc291cmNlLmluc3RhbmNlID0gaW5zdGFuY2UpLFxuICAgICAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShpbnN0YW5jZSksXG4gICAgICAgICAgICBpbnN0YW5jZVxuICAgICAgICAgICk7XG4gICAgICAgIHZhciBzdHlsZVByb3BzID0gYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIFwiZGF0YS1ocmVmXCI6IHByb3BzLmhyZWYsXG4gICAgICAgICAgXCJkYXRhLXByZWNlZGVuY2VcIjogcHJvcHMucHJlY2VkZW5jZSxcbiAgICAgICAgICBocmVmOiBudWxsLFxuICAgICAgICAgIHByZWNlZGVuY2U6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICAgIGluc3RhbmNlID0gKGhvaXN0YWJsZVJvb3Qub3duZXJEb2N1bWVudCB8fCBob2lzdGFibGVSb290KS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIFwic3R5bGVcIlxuICAgICAgICApO1xuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGluc3RhbmNlKTtcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoaW5zdGFuY2UsIFwic3R5bGVcIiwgc3R5bGVQcm9wcyk7XG4gICAgICAgIGluc2VydFN0eWxlc2hlZXQoaW5zdGFuY2UsIHByb3BzLnByZWNlZGVuY2UsIGhvaXN0YWJsZVJvb3QpO1xuICAgICAgICByZXR1cm4gKHJlc291cmNlLmluc3RhbmNlID0gaW5zdGFuY2UpO1xuICAgICAgY2FzZSBcInN0eWxlc2hlZXRcIjpcbiAgICAgICAgc3R5bGVQcm9wcyA9IGdldFN0eWxlS2V5KHByb3BzLmhyZWYpO1xuICAgICAgICB2YXIgaW5zdGFuY2UkMjQ4ID0gaG9pc3RhYmxlUm9vdC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgIGdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkoc3R5bGVQcm9wcylcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGluc3RhbmNlJDI0OClcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgfD0gNCksXG4gICAgICAgICAgICAocmVzb3VyY2UuaW5zdGFuY2UgPSBpbnN0YW5jZSQyNDgpLFxuICAgICAgICAgICAgbWFya05vZGVBc0hvaXN0YWJsZShpbnN0YW5jZSQyNDgpLFxuICAgICAgICAgICAgaW5zdGFuY2UkMjQ4XG4gICAgICAgICAgKTtcbiAgICAgICAgaW5zdGFuY2UgPSBzdHlsZXNoZWV0UHJvcHNGcm9tUmF3UHJvcHMocHJvcHMpO1xuICAgICAgICAoc3R5bGVQcm9wcyA9IHByZWxvYWRQcm9wc01hcC5nZXQoc3R5bGVQcm9wcykpICYmXG4gICAgICAgICAgYWRvcHRQcmVsb2FkUHJvcHNGb3JTdHlsZXNoZWV0KGluc3RhbmNlLCBzdHlsZVByb3BzKTtcbiAgICAgICAgaW5zdGFuY2UkMjQ4ID0gKFxuICAgICAgICAgIGhvaXN0YWJsZVJvb3Qub3duZXJEb2N1bWVudCB8fCBob2lzdGFibGVSb290XG4gICAgICAgICkuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoaW5zdGFuY2UkMjQ4KTtcbiAgICAgICAgdmFyIGxpbmtJbnN0YW5jZSA9IGluc3RhbmNlJDI0ODtcbiAgICAgICAgbGlua0luc3RhbmNlLl9wID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGxpbmtJbnN0YW5jZS5vbmxvYWQgPSByZXNvbHZlO1xuICAgICAgICAgIGxpbmtJbnN0YW5jZS5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICB9KTtcbiAgICAgICAgc2V0SW5pdGlhbFByb3BlcnRpZXMoaW5zdGFuY2UkMjQ4LCBcImxpbmtcIiwgaW5zdGFuY2UpO1xuICAgICAgICByZXNvdXJjZS5zdGF0ZS5sb2FkaW5nIHw9IDQ7XG4gICAgICAgIGluc2VydFN0eWxlc2hlZXQoaW5zdGFuY2UkMjQ4LCBwcm9wcy5wcmVjZWRlbmNlLCBob2lzdGFibGVSb290KTtcbiAgICAgICAgcmV0dXJuIChyZXNvdXJjZS5pbnN0YW5jZSA9IGluc3RhbmNlJDI0OCk7XG4gICAgICBjYXNlIFwic2NyaXB0XCI6XG4gICAgICAgIGluc3RhbmNlJDI0OCA9IGdldFNjcmlwdEtleShwcm9wcy5zcmMpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKHN0eWxlUHJvcHMgPSBob2lzdGFibGVSb290LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICBnZXRTY3JpcHRTZWxlY3RvckZyb21LZXkoaW5zdGFuY2UkMjQ4KVxuICAgICAgICAgICkpXG4gICAgICAgIClcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKHJlc291cmNlLmluc3RhbmNlID0gc3R5bGVQcm9wcyksXG4gICAgICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKHN0eWxlUHJvcHMpLFxuICAgICAgICAgICAgc3R5bGVQcm9wc1xuICAgICAgICAgICk7XG4gICAgICAgIGluc3RhbmNlID0gcHJvcHM7XG4gICAgICAgIGlmICgoc3R5bGVQcm9wcyA9IHByZWxvYWRQcm9wc01hcC5nZXQoaW5zdGFuY2UkMjQ4KSkpXG4gICAgICAgICAgKGluc3RhbmNlID0gYXNzaWduKHt9LCBwcm9wcykpLFxuICAgICAgICAgICAgYWRvcHRQcmVsb2FkUHJvcHNGb3JTY3JpcHQoaW5zdGFuY2UsIHN0eWxlUHJvcHMpO1xuICAgICAgICBob2lzdGFibGVSb290ID0gaG9pc3RhYmxlUm9vdC5vd25lckRvY3VtZW50IHx8IGhvaXN0YWJsZVJvb3Q7XG4gICAgICAgIHN0eWxlUHJvcHMgPSBob2lzdGFibGVSb290LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgIG1hcmtOb2RlQXNIb2lzdGFibGUoc3R5bGVQcm9wcyk7XG4gICAgICAgIHNldEluaXRpYWxQcm9wZXJ0aWVzKHN0eWxlUHJvcHMsIFwibGlua1wiLCBpbnN0YW5jZSk7XG4gICAgICAgIGhvaXN0YWJsZVJvb3QuaGVhZC5hcHBlbmRDaGlsZChzdHlsZVByb3BzKTtcbiAgICAgICAgcmV0dXJuIChyZXNvdXJjZS5pbnN0YW5jZSA9IHN0eWxlUHJvcHMpO1xuICAgICAgY2FzZSBcInZvaWRcIjpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ0MywgcmVzb3VyY2UudHlwZSkpO1xuICAgIH1cbiAgZWxzZVxuICAgIFwic3R5bGVzaGVldFwiID09PSByZXNvdXJjZS50eXBlICYmXG4gICAgICAwID09PSAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyAmIDQpICYmXG4gICAgICAoKGluc3RhbmNlID0gcmVzb3VyY2UuaW5zdGFuY2UpLFxuICAgICAgKHJlc291cmNlLnN0YXRlLmxvYWRpbmcgfD0gNCksXG4gICAgICBpbnNlcnRTdHlsZXNoZWV0KGluc3RhbmNlLCBwcm9wcy5wcmVjZWRlbmNlLCBob2lzdGFibGVSb290KSk7XG4gIHJldHVybiByZXNvdXJjZS5pbnN0YW5jZTtcbn1cbmZ1bmN0aW9uIGluc2VydFN0eWxlc2hlZXQoaW5zdGFuY2UsIHByZWNlZGVuY2UsIHJvb3QpIHtcbiAgZm9yIChcbiAgICB2YXIgbm9kZXMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICdsaW5rW3JlbD1cInN0eWxlc2hlZXRcIl1bZGF0YS1wcmVjZWRlbmNlXSxzdHlsZVtkYXRhLXByZWNlZGVuY2VdJ1xuICAgICAgKSxcbiAgICAgIGxhc3QgPSBub2Rlcy5sZW5ndGggPyBub2Rlc1tub2Rlcy5sZW5ndGggLSAxXSA6IG51bGwsXG4gICAgICBwcmlvciA9IGxhc3QsXG4gICAgICBpID0gMDtcbiAgICBpIDwgbm9kZXMubGVuZ3RoO1xuICAgIGkrK1xuICApIHtcbiAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgIGlmIChub2RlLmRhdGFzZXQucHJlY2VkZW5jZSA9PT0gcHJlY2VkZW5jZSkgcHJpb3IgPSBub2RlO1xuICAgIGVsc2UgaWYgKHByaW9yICE9PSBsYXN0KSBicmVhaztcbiAgfVxuICBwcmlvclxuICAgID8gcHJpb3IucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoaW5zdGFuY2UsIHByaW9yLm5leHRTaWJsaW5nKVxuICAgIDogKChwcmVjZWRlbmNlID0gOSA9PT0gcm9vdC5ub2RlVHlwZSA/IHJvb3QuaGVhZCA6IHJvb3QpLFxuICAgICAgcHJlY2VkZW5jZS5pbnNlcnRCZWZvcmUoaW5zdGFuY2UsIHByZWNlZGVuY2UuZmlyc3RDaGlsZCkpO1xufVxuZnVuY3Rpb24gYWRvcHRQcmVsb2FkUHJvcHNGb3JTdHlsZXNoZWV0KHN0eWxlc2hlZXRQcm9wcywgcHJlbG9hZFByb3BzKSB7XG4gIG51bGwgPT0gc3R5bGVzaGVldFByb3BzLmNyb3NzT3JpZ2luICYmXG4gICAgKHN0eWxlc2hlZXRQcm9wcy5jcm9zc09yaWdpbiA9IHByZWxvYWRQcm9wcy5jcm9zc09yaWdpbik7XG4gIG51bGwgPT0gc3R5bGVzaGVldFByb3BzLnJlZmVycmVyUG9saWN5ICYmXG4gICAgKHN0eWxlc2hlZXRQcm9wcy5yZWZlcnJlclBvbGljeSA9IHByZWxvYWRQcm9wcy5yZWZlcnJlclBvbGljeSk7XG4gIG51bGwgPT0gc3R5bGVzaGVldFByb3BzLnRpdGxlICYmIChzdHlsZXNoZWV0UHJvcHMudGl0bGUgPSBwcmVsb2FkUHJvcHMudGl0bGUpO1xufVxuZnVuY3Rpb24gYWRvcHRQcmVsb2FkUHJvcHNGb3JTY3JpcHQoc2NyaXB0UHJvcHMsIHByZWxvYWRQcm9wcykge1xuICBudWxsID09IHNjcmlwdFByb3BzLmNyb3NzT3JpZ2luICYmXG4gICAgKHNjcmlwdFByb3BzLmNyb3NzT3JpZ2luID0gcHJlbG9hZFByb3BzLmNyb3NzT3JpZ2luKTtcbiAgbnVsbCA9PSBzY3JpcHRQcm9wcy5yZWZlcnJlclBvbGljeSAmJlxuICAgIChzY3JpcHRQcm9wcy5yZWZlcnJlclBvbGljeSA9IHByZWxvYWRQcm9wcy5yZWZlcnJlclBvbGljeSk7XG4gIG51bGwgPT0gc2NyaXB0UHJvcHMuaW50ZWdyaXR5ICYmXG4gICAgKHNjcmlwdFByb3BzLmludGVncml0eSA9IHByZWxvYWRQcm9wcy5pbnRlZ3JpdHkpO1xufVxudmFyIHRhZ0NhY2hlcyA9IG51bGw7XG5mdW5jdGlvbiBnZXRIeWRyYXRhYmxlSG9pc3RhYmxlQ2FjaGUodHlwZSwga2V5QXR0cmlidXRlLCBvd25lckRvY3VtZW50KSB7XG4gIGlmIChudWxsID09PSB0YWdDYWNoZXMpIHtcbiAgICB2YXIgY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgdmFyIGNhY2hlcyA9ICh0YWdDYWNoZXMgPSBuZXcgTWFwKCkpO1xuICAgIGNhY2hlcy5zZXQob3duZXJEb2N1bWVudCwgY2FjaGUpO1xuICB9IGVsc2VcbiAgICAoY2FjaGVzID0gdGFnQ2FjaGVzKSxcbiAgICAgIChjYWNoZSA9IGNhY2hlcy5nZXQob3duZXJEb2N1bWVudCkpLFxuICAgICAgY2FjaGUgfHwgKChjYWNoZSA9IG5ldyBNYXAoKSksIGNhY2hlcy5zZXQob3duZXJEb2N1bWVudCwgY2FjaGUpKTtcbiAgaWYgKGNhY2hlLmhhcyh0eXBlKSkgcmV0dXJuIGNhY2hlO1xuICBjYWNoZS5zZXQodHlwZSwgbnVsbCk7XG4gIG93bmVyRG9jdW1lbnQgPSBvd25lckRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHR5cGUpO1xuICBmb3IgKGNhY2hlcyA9IDA7IGNhY2hlcyA8IG93bmVyRG9jdW1lbnQubGVuZ3RoOyBjYWNoZXMrKykge1xuICAgIHZhciBub2RlID0gb3duZXJEb2N1bWVudFtjYWNoZXNdO1xuICAgIGlmIChcbiAgICAgICEoXG4gICAgICAgIG5vZGVbaW50ZXJuYWxIb2lzdGFibGVNYXJrZXJdIHx8XG4gICAgICAgIG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0gfHxcbiAgICAgICAgKFwibGlua1wiID09PSB0eXBlICYmIFwic3R5bGVzaGVldFwiID09PSBub2RlLmdldEF0dHJpYnV0ZShcInJlbFwiKSlcbiAgICAgICkgJiZcbiAgICAgIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiAhPT0gbm9kZS5uYW1lc3BhY2VVUklcbiAgICApIHtcbiAgICAgIHZhciBub2RlS2V5ID0gbm9kZS5nZXRBdHRyaWJ1dGUoa2V5QXR0cmlidXRlKSB8fCBcIlwiO1xuICAgICAgbm9kZUtleSA9IHR5cGUgKyBub2RlS2V5O1xuICAgICAgdmFyIGV4aXN0aW5nID0gY2FjaGUuZ2V0KG5vZGVLZXkpO1xuICAgICAgZXhpc3RpbmcgPyBleGlzdGluZy5wdXNoKG5vZGUpIDogY2FjaGUuc2V0KG5vZGVLZXksIFtub2RlXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBjYWNoZTtcbn1cbmZ1bmN0aW9uIG1vdW50SG9pc3RhYmxlKGhvaXN0YWJsZVJvb3QsIHR5cGUsIGluc3RhbmNlKSB7XG4gIGhvaXN0YWJsZVJvb3QgPSBob2lzdGFibGVSb290Lm93bmVyRG9jdW1lbnQgfHwgaG9pc3RhYmxlUm9vdDtcbiAgaG9pc3RhYmxlUm9vdC5oZWFkLmluc2VydEJlZm9yZShcbiAgICBpbnN0YW5jZSxcbiAgICBcInRpdGxlXCIgPT09IHR5cGUgPyBob2lzdGFibGVSb290LnF1ZXJ5U2VsZWN0b3IoXCJoZWFkID4gdGl0bGVcIikgOiBudWxsXG4gICk7XG59XG5mdW5jdGlvbiBpc0hvc3RIb2lzdGFibGVUeXBlKHR5cGUsIHByb3BzLCBob3N0Q29udGV4dCkge1xuICBpZiAoMSA9PT0gaG9zdENvbnRleHQgfHwgbnVsbCAhPSBwcm9wcy5pdGVtUHJvcCkgcmV0dXJuICExO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFwibWV0YVwiOlxuICAgIGNhc2UgXCJ0aXRsZVwiOlxuICAgICAgcmV0dXJuICEwO1xuICAgIGNhc2UgXCJzdHlsZVwiOlxuICAgICAgaWYgKFxuICAgICAgICBcInN0cmluZ1wiICE9PSB0eXBlb2YgcHJvcHMucHJlY2VkZW5jZSB8fFxuICAgICAgICBcInN0cmluZ1wiICE9PSB0eXBlb2YgcHJvcHMuaHJlZiB8fFxuICAgICAgICBcIlwiID09PSBwcm9wcy5ocmVmXG4gICAgICApXG4gICAgICAgIGJyZWFrO1xuICAgICAgcmV0dXJuICEwO1xuICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICBpZiAoXG4gICAgICAgIFwic3RyaW5nXCIgIT09IHR5cGVvZiBwcm9wcy5yZWwgfHxcbiAgICAgICAgXCJzdHJpbmdcIiAhPT0gdHlwZW9mIHByb3BzLmhyZWYgfHxcbiAgICAgICAgXCJcIiA9PT0gcHJvcHMuaHJlZiB8fFxuICAgICAgICBwcm9wcy5vbkxvYWQgfHxcbiAgICAgICAgcHJvcHMub25FcnJvclxuICAgICAgKVxuICAgICAgICBicmVhaztcbiAgICAgIHN3aXRjaCAocHJvcHMucmVsKSB7XG4gICAgICAgIGNhc2UgXCJzdHlsZXNoZWV0XCI6XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICh0eXBlID0gcHJvcHMuZGlzYWJsZWQpLFxuICAgICAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHByb3BzLnByZWNlZGVuY2UgJiYgbnVsbCA9PSB0eXBlXG4gICAgICAgICAgKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gITA7XG4gICAgICB9XG4gICAgY2FzZSBcInNjcmlwdFwiOlxuICAgICAgaWYgKFxuICAgICAgICBwcm9wcy5hc3luYyAmJlxuICAgICAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBwcm9wcy5hc3luYyAmJlxuICAgICAgICBcInN5bWJvbFwiICE9PSB0eXBlb2YgcHJvcHMuYXN5bmMgJiZcbiAgICAgICAgIXByb3BzLm9uTG9hZCAmJlxuICAgICAgICAhcHJvcHMub25FcnJvciAmJlxuICAgICAgICBwcm9wcy5zcmMgJiZcbiAgICAgICAgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIHByb3BzLnNyY1xuICAgICAgKVxuICAgICAgICByZXR1cm4gITA7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gcHJlbG9hZFJlc291cmNlKHJlc291cmNlKSB7XG4gIHJldHVybiBcInN0eWxlc2hlZXRcIiA9PT0gcmVzb3VyY2UudHlwZSAmJiAwID09PSAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyAmIDMpXG4gICAgPyAhMVxuICAgIDogITA7XG59XG52YXIgc3VzcGVuZGVkU3RhdGUgPSBudWxsO1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5mdW5jdGlvbiBzdXNwZW5kUmVzb3VyY2UoaG9pc3RhYmxlUm9vdCwgcmVzb3VyY2UsIHByb3BzKSB7XG4gIGlmIChudWxsID09PSBzdXNwZW5kZWRTdGF0ZSkgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0NzUpKTtcbiAgdmFyIHN0YXRlID0gc3VzcGVuZGVkU3RhdGU7XG4gIGlmIChcbiAgICBcInN0eWxlc2hlZXRcIiA9PT0gcmVzb3VyY2UudHlwZSAmJlxuICAgIChcInN0cmluZ1wiICE9PSB0eXBlb2YgcHJvcHMubWVkaWEgfHxcbiAgICAgICExICE9PSBtYXRjaE1lZGlhKHByb3BzLm1lZGlhKS5tYXRjaGVzKSAmJlxuICAgIDAgPT09IChyZXNvdXJjZS5zdGF0ZS5sb2FkaW5nICYgNClcbiAgKSB7XG4gICAgaWYgKG51bGwgPT09IHJlc291cmNlLmluc3RhbmNlKSB7XG4gICAgICB2YXIga2V5ID0gZ2V0U3R5bGVLZXkocHJvcHMuaHJlZiksXG4gICAgICAgIGluc3RhbmNlID0gaG9pc3RhYmxlUm9vdC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgIGdldFN0eWxlc2hlZXRTZWxlY3RvckZyb21LZXkoa2V5KVxuICAgICAgICApO1xuICAgICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgIGhvaXN0YWJsZVJvb3QgPSBpbnN0YW5jZS5fcDtcbiAgICAgICAgbnVsbCAhPT0gaG9pc3RhYmxlUm9vdCAmJlxuICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBob2lzdGFibGVSb290ICYmXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgaG9pc3RhYmxlUm9vdC50aGVuICYmXG4gICAgICAgICAgKHN0YXRlLmNvdW50KyssXG4gICAgICAgICAgKHN0YXRlID0gb25VbnN1c3BlbmQuYmluZChzdGF0ZSkpLFxuICAgICAgICAgIGhvaXN0YWJsZVJvb3QudGhlbihzdGF0ZSwgc3RhdGUpKTtcbiAgICAgICAgcmVzb3VyY2Uuc3RhdGUubG9hZGluZyB8PSA0O1xuICAgICAgICByZXNvdXJjZS5pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGluc3RhbmNlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaW5zdGFuY2UgPSBob2lzdGFibGVSb290Lm93bmVyRG9jdW1lbnQgfHwgaG9pc3RhYmxlUm9vdDtcbiAgICAgIHByb3BzID0gc3R5bGVzaGVldFByb3BzRnJvbVJhd1Byb3BzKHByb3BzKTtcbiAgICAgIChrZXkgPSBwcmVsb2FkUHJvcHNNYXAuZ2V0KGtleSkpICYmXG4gICAgICAgIGFkb3B0UHJlbG9hZFByb3BzRm9yU3R5bGVzaGVldChwcm9wcywga2V5KTtcbiAgICAgIGluc3RhbmNlID0gaW5zdGFuY2UuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgICBtYXJrTm9kZUFzSG9pc3RhYmxlKGluc3RhbmNlKTtcbiAgICAgIHZhciBsaW5rSW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgIGxpbmtJbnN0YW5jZS5fcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgbGlua0luc3RhbmNlLm9ubG9hZCA9IHJlc29sdmU7XG4gICAgICAgIGxpbmtJbnN0YW5jZS5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgfSk7XG4gICAgICBzZXRJbml0aWFsUHJvcGVydGllcyhpbnN0YW5jZSwgXCJsaW5rXCIsIHByb3BzKTtcbiAgICAgIHJlc291cmNlLmluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgfVxuICAgIG51bGwgPT09IHN0YXRlLnN0eWxlc2hlZXRzICYmIChzdGF0ZS5zdHlsZXNoZWV0cyA9IG5ldyBNYXAoKSk7XG4gICAgc3RhdGUuc3R5bGVzaGVldHMuc2V0KHJlc291cmNlLCBob2lzdGFibGVSb290KTtcbiAgICAoaG9pc3RhYmxlUm9vdCA9IHJlc291cmNlLnN0YXRlLnByZWxvYWQpICYmXG4gICAgICAwID09PSAocmVzb3VyY2Uuc3RhdGUubG9hZGluZyAmIDMpICYmXG4gICAgICAoc3RhdGUuY291bnQrKyxcbiAgICAgIChyZXNvdXJjZSA9IG9uVW5zdXNwZW5kLmJpbmQoc3RhdGUpKSxcbiAgICAgIGhvaXN0YWJsZVJvb3QuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgcmVzb3VyY2UpLFxuICAgICAgaG9pc3RhYmxlUm9vdC5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgcmVzb3VyY2UpKTtcbiAgfVxufVxuZnVuY3Rpb24gd2FpdEZvckNvbW1pdFRvQmVSZWFkeSgpIHtcbiAgaWYgKG51bGwgPT09IHN1c3BlbmRlZFN0YXRlKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDQ3NSkpO1xuICB2YXIgc3RhdGUgPSBzdXNwZW5kZWRTdGF0ZTtcbiAgc3RhdGUuc3R5bGVzaGVldHMgJiZcbiAgICAwID09PSBzdGF0ZS5jb3VudCAmJlxuICAgIGluc2VydFN1c3BlbmRlZFN0eWxlc2hlZXRzKHN0YXRlLCBzdGF0ZS5zdHlsZXNoZWV0cyk7XG4gIHJldHVybiAwIDwgc3RhdGUuY291bnRcbiAgICA/IGZ1bmN0aW9uIChjb21taXQpIHtcbiAgICAgICAgdmFyIHN0eWxlc2hlZXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXRlLnN0eWxlc2hlZXRzICYmXG4gICAgICAgICAgICBpbnNlcnRTdXNwZW5kZWRTdHlsZXNoZWV0cyhzdGF0ZSwgc3RhdGUuc3R5bGVzaGVldHMpO1xuICAgICAgICAgIGlmIChzdGF0ZS51bnN1c3BlbmQpIHtcbiAgICAgICAgICAgIHZhciB1bnN1c3BlbmQgPSBzdGF0ZS51bnN1c3BlbmQ7XG4gICAgICAgICAgICBzdGF0ZS51bnN1c3BlbmQgPSBudWxsO1xuICAgICAgICAgICAgdW5zdXNwZW5kKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCA2ZTQpO1xuICAgICAgICBzdGF0ZS51bnN1c3BlbmQgPSBjb21taXQ7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RhdGUudW5zdXNwZW5kID0gbnVsbDtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoc3R5bGVzaGVldFRpbWVyKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICA6IG51bGw7XG59XG5mdW5jdGlvbiBvblVuc3VzcGVuZCgpIHtcbiAgdGhpcy5jb3VudC0tO1xuICBpZiAoMCA9PT0gdGhpcy5jb3VudClcbiAgICBpZiAodGhpcy5zdHlsZXNoZWV0cykgaW5zZXJ0U3VzcGVuZGVkU3R5bGVzaGVldHModGhpcywgdGhpcy5zdHlsZXNoZWV0cyk7XG4gICAgZWxzZSBpZiAodGhpcy51bnN1c3BlbmQpIHtcbiAgICAgIHZhciB1bnN1c3BlbmQgPSB0aGlzLnVuc3VzcGVuZDtcbiAgICAgIHRoaXMudW5zdXNwZW5kID0gbnVsbDtcbiAgICAgIHVuc3VzcGVuZCgpO1xuICAgIH1cbn1cbnZhciBwcmVjZWRlbmNlc0J5Um9vdCA9IG51bGw7XG5mdW5jdGlvbiBpbnNlcnRTdXNwZW5kZWRTdHlsZXNoZWV0cyhzdGF0ZSwgcmVzb3VyY2VzKSB7XG4gIHN0YXRlLnN0eWxlc2hlZXRzID0gbnVsbDtcbiAgbnVsbCAhPT0gc3RhdGUudW5zdXNwZW5kICYmXG4gICAgKHN0YXRlLmNvdW50KyssXG4gICAgKHByZWNlZGVuY2VzQnlSb290ID0gbmV3IE1hcCgpKSxcbiAgICByZXNvdXJjZXMuZm9yRWFjaChpbnNlcnRTdHlsZXNoZWV0SW50b1Jvb3QsIHN0YXRlKSxcbiAgICAocHJlY2VkZW5jZXNCeVJvb3QgPSBudWxsKSxcbiAgICBvblVuc3VzcGVuZC5jYWxsKHN0YXRlKSk7XG59XG5mdW5jdGlvbiBpbnNlcnRTdHlsZXNoZWV0SW50b1Jvb3Qocm9vdCwgcmVzb3VyY2UpIHtcbiAgaWYgKCEocmVzb3VyY2Uuc3RhdGUubG9hZGluZyAmIDQpKSB7XG4gICAgdmFyIHByZWNlZGVuY2VzID0gcHJlY2VkZW5jZXNCeVJvb3QuZ2V0KHJvb3QpO1xuICAgIGlmIChwcmVjZWRlbmNlcykgdmFyIGxhc3QgPSBwcmVjZWRlbmNlcy5nZXQobnVsbCk7XG4gICAgZWxzZSB7XG4gICAgICBwcmVjZWRlbmNlcyA9IG5ldyBNYXAoKTtcbiAgICAgIHByZWNlZGVuY2VzQnlSb290LnNldChyb290LCBwcmVjZWRlbmNlcyk7XG4gICAgICBmb3IgKFxuICAgICAgICB2YXIgbm9kZXMgPSByb290LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICAgICAgICBcImxpbmtbZGF0YS1wcmVjZWRlbmNlXSxzdHlsZVtkYXRhLXByZWNlZGVuY2VdXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIGkgPSAwO1xuICAgICAgICBpIDwgbm9kZXMubGVuZ3RoO1xuICAgICAgICBpKytcbiAgICAgICkge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgXCJMSU5LXCIgPT09IG5vZGUubm9kZU5hbWUgfHxcbiAgICAgICAgICBcIm5vdCBhbGxcIiAhPT0gbm9kZS5nZXRBdHRyaWJ1dGUoXCJtZWRpYVwiKVxuICAgICAgICApXG4gICAgICAgICAgcHJlY2VkZW5jZXMuc2V0KG5vZGUuZGF0YXNldC5wcmVjZWRlbmNlLCBub2RlKSwgKGxhc3QgPSBub2RlKTtcbiAgICAgIH1cbiAgICAgIGxhc3QgJiYgcHJlY2VkZW5jZXMuc2V0KG51bGwsIGxhc3QpO1xuICAgIH1cbiAgICBub2RlcyA9IHJlc291cmNlLmluc3RhbmNlO1xuICAgIG5vZGUgPSBub2Rlcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXByZWNlZGVuY2VcIik7XG4gICAgaSA9IHByZWNlZGVuY2VzLmdldChub2RlKSB8fCBsYXN0O1xuICAgIGkgPT09IGxhc3QgJiYgcHJlY2VkZW5jZXMuc2V0KG51bGwsIG5vZGVzKTtcbiAgICBwcmVjZWRlbmNlcy5zZXQobm9kZSwgbm9kZXMpO1xuICAgIHRoaXMuY291bnQrKztcbiAgICBsYXN0ID0gb25VbnN1c3BlbmQuYmluZCh0aGlzKTtcbiAgICBub2Rlcy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBsYXN0KTtcbiAgICBub2Rlcy5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgbGFzdCk7XG4gICAgaVxuICAgICAgPyBpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGVzLCBpLm5leHRTaWJsaW5nKVxuICAgICAgOiAoKHJvb3QgPSA5ID09PSByb290Lm5vZGVUeXBlID8gcm9vdC5oZWFkIDogcm9vdCksXG4gICAgICAgIHJvb3QuaW5zZXJ0QmVmb3JlKG5vZGVzLCByb290LmZpcnN0Q2hpbGQpKTtcbiAgICByZXNvdXJjZS5zdGF0ZS5sb2FkaW5nIHw9IDQ7XG4gIH1cbn1cbnZhciBIb3N0VHJhbnNpdGlvbkNvbnRleHQgPSB7XG4gICQkdHlwZW9mOiBSRUFDVF9DT05URVhUX1RZUEUsXG4gIFByb3ZpZGVyOiBudWxsLFxuICBDb25zdW1lcjogbnVsbCxcbiAgX2N1cnJlbnRWYWx1ZTogc2hhcmVkTm90UGVuZGluZ09iamVjdCxcbiAgX2N1cnJlbnRWYWx1ZTI6IHNoYXJlZE5vdFBlbmRpbmdPYmplY3QsXG4gIF90aHJlYWRDb3VudDogMFxufTtcbmZ1bmN0aW9uIEZpYmVyUm9vdE5vZGUoXG4gIGNvbnRhaW5lckluZm8sXG4gIHRhZyxcbiAgaHlkcmF0ZSxcbiAgaWRlbnRpZmllclByZWZpeCxcbiAgb25VbmNhdWdodEVycm9yLFxuICBvbkNhdWdodEVycm9yLFxuICBvblJlY292ZXJhYmxlRXJyb3IsXG4gIGZvcm1TdGF0ZVxuKSB7XG4gIHRoaXMudGFnID0gMTtcbiAgdGhpcy5jb250YWluZXJJbmZvID0gY29udGFpbmVySW5mbztcbiAgdGhpcy5maW5pc2hlZFdvcmsgPVxuICAgIHRoaXMucGluZ0NhY2hlID1cbiAgICB0aGlzLmN1cnJlbnQgPVxuICAgIHRoaXMucGVuZGluZ0NoaWxkcmVuID1cbiAgICAgIG51bGw7XG4gIHRoaXMudGltZW91dEhhbmRsZSA9IC0xO1xuICB0aGlzLmNhbGxiYWNrTm9kZSA9XG4gICAgdGhpcy5uZXh0ID1cbiAgICB0aGlzLnBlbmRpbmdDb250ZXh0ID1cbiAgICB0aGlzLmNvbnRleHQgPVxuICAgIHRoaXMuY2FuY2VsUGVuZGluZ0NvbW1pdCA9XG4gICAgICBudWxsO1xuICB0aGlzLmNhbGxiYWNrUHJpb3JpdHkgPSAwO1xuICB0aGlzLmV4cGlyYXRpb25UaW1lcyA9IGNyZWF0ZUxhbmVNYXAoLTEpO1xuICB0aGlzLmVudGFuZ2xlZExhbmVzID1cbiAgICB0aGlzLnNoZWxsU3VzcGVuZENvdW50ZXIgPVxuICAgIHRoaXMuZXJyb3JSZWNvdmVyeURpc2FibGVkTGFuZXMgPVxuICAgIHRoaXMuZmluaXNoZWRMYW5lcyA9XG4gICAgdGhpcy5leHBpcmVkTGFuZXMgPVxuICAgIHRoaXMud2FybUxhbmVzID1cbiAgICB0aGlzLnBpbmdlZExhbmVzID1cbiAgICB0aGlzLnN1c3BlbmRlZExhbmVzID1cbiAgICB0aGlzLnBlbmRpbmdMYW5lcyA9XG4gICAgICAwO1xuICB0aGlzLmVudGFuZ2xlbWVudHMgPSBjcmVhdGVMYW5lTWFwKDApO1xuICB0aGlzLmhpZGRlblVwZGF0ZXMgPSBjcmVhdGVMYW5lTWFwKG51bGwpO1xuICB0aGlzLmlkZW50aWZpZXJQcmVmaXggPSBpZGVudGlmaWVyUHJlZml4O1xuICB0aGlzLm9uVW5jYXVnaHRFcnJvciA9IG9uVW5jYXVnaHRFcnJvcjtcbiAgdGhpcy5vbkNhdWdodEVycm9yID0gb25DYXVnaHRFcnJvcjtcbiAgdGhpcy5vblJlY292ZXJhYmxlRXJyb3IgPSBvblJlY292ZXJhYmxlRXJyb3I7XG4gIHRoaXMucG9vbGVkQ2FjaGUgPSBudWxsO1xuICB0aGlzLnBvb2xlZENhY2hlTGFuZXMgPSAwO1xuICB0aGlzLmZvcm1TdGF0ZSA9IGZvcm1TdGF0ZTtcbiAgdGhpcy5pbmNvbXBsZXRlVHJhbnNpdGlvbnMgPSBuZXcgTWFwKCk7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlclJvb3QoXG4gIGNvbnRhaW5lckluZm8sXG4gIHRhZyxcbiAgaHlkcmF0ZSxcbiAgaW5pdGlhbENoaWxkcmVuLFxuICBoeWRyYXRpb25DYWxsYmFja3MsXG4gIGlzU3RyaWN0TW9kZSxcbiAgaWRlbnRpZmllclByZWZpeCxcbiAgb25VbmNhdWdodEVycm9yLFxuICBvbkNhdWdodEVycm9yLFxuICBvblJlY292ZXJhYmxlRXJyb3IsXG4gIHRyYW5zaXRpb25DYWxsYmFja3MsXG4gIGZvcm1TdGF0ZVxuKSB7XG4gIGNvbnRhaW5lckluZm8gPSBuZXcgRmliZXJSb290Tm9kZShcbiAgICBjb250YWluZXJJbmZvLFxuICAgIHRhZyxcbiAgICBoeWRyYXRlLFxuICAgIGlkZW50aWZpZXJQcmVmaXgsXG4gICAgb25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IsXG4gICAgb25SZWNvdmVyYWJsZUVycm9yLFxuICAgIGZvcm1TdGF0ZVxuICApO1xuICB0YWcgPSAxO1xuICAhMCA9PT0gaXNTdHJpY3RNb2RlICYmICh0YWcgfD0gMjQpO1xuICBpc1N0cmljdE1vZGUgPSBjcmVhdGVGaWJlckltcGxDbGFzcygzLCBudWxsLCBudWxsLCB0YWcpO1xuICBjb250YWluZXJJbmZvLmN1cnJlbnQgPSBpc1N0cmljdE1vZGU7XG4gIGlzU3RyaWN0TW9kZS5zdGF0ZU5vZGUgPSBjb250YWluZXJJbmZvO1xuICB0YWcgPSBjcmVhdGVDYWNoZSgpO1xuICB0YWcucmVmQ291bnQrKztcbiAgY29udGFpbmVySW5mby5wb29sZWRDYWNoZSA9IHRhZztcbiAgdGFnLnJlZkNvdW50Kys7XG4gIGlzU3RyaWN0TW9kZS5tZW1vaXplZFN0YXRlID0ge1xuICAgIGVsZW1lbnQ6IGluaXRpYWxDaGlsZHJlbixcbiAgICBpc0RlaHlkcmF0ZWQ6IGh5ZHJhdGUsXG4gICAgY2FjaGU6IHRhZ1xuICB9O1xuICBpbml0aWFsaXplVXBkYXRlUXVldWUoaXNTdHJpY3RNb2RlKTtcbiAgcmV0dXJuIGNvbnRhaW5lckluZm87XG59XG5mdW5jdGlvbiBnZXRDb250ZXh0Rm9yU3VidHJlZShwYXJlbnRDb21wb25lbnQpIHtcbiAgaWYgKCFwYXJlbnRDb21wb25lbnQpIHJldHVybiBlbXB0eUNvbnRleHRPYmplY3Q7XG4gIHBhcmVudENvbXBvbmVudCA9IGVtcHR5Q29udGV4dE9iamVjdDtcbiAgcmV0dXJuIHBhcmVudENvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUNvbnRhaW5lckltcGwoXG4gIHJvb3RGaWJlcixcbiAgbGFuZSxcbiAgZWxlbWVudCxcbiAgY29udGFpbmVyLFxuICBwYXJlbnRDb21wb25lbnQsXG4gIGNhbGxiYWNrXG4pIHtcbiAgcGFyZW50Q29tcG9uZW50ID0gZ2V0Q29udGV4dEZvclN1YnRyZWUocGFyZW50Q29tcG9uZW50KTtcbiAgbnVsbCA9PT0gY29udGFpbmVyLmNvbnRleHRcbiAgICA/IChjb250YWluZXIuY29udGV4dCA9IHBhcmVudENvbXBvbmVudClcbiAgICA6IChjb250YWluZXIucGVuZGluZ0NvbnRleHQgPSBwYXJlbnRDb21wb25lbnQpO1xuICBjb250YWluZXIgPSBjcmVhdGVVcGRhdGUobGFuZSk7XG4gIGNvbnRhaW5lci5wYXlsb2FkID0geyBlbGVtZW50OiBlbGVtZW50IH07XG4gIGNhbGxiYWNrID0gdm9pZCAwID09PSBjYWxsYmFjayA/IG51bGwgOiBjYWxsYmFjaztcbiAgbnVsbCAhPT0gY2FsbGJhY2sgJiYgKGNvbnRhaW5lci5jYWxsYmFjayA9IGNhbGxiYWNrKTtcbiAgZWxlbWVudCA9IGVucXVldWVVcGRhdGUocm9vdEZpYmVyLCBjb250YWluZXIsIGxhbmUpO1xuICBudWxsICE9PSBlbGVtZW50ICYmXG4gICAgKHNjaGVkdWxlVXBkYXRlT25GaWJlcihlbGVtZW50LCByb290RmliZXIsIGxhbmUpLFxuICAgIGVudGFuZ2xlVHJhbnNpdGlvbnMoZWxlbWVudCwgcm9vdEZpYmVyLCBsYW5lKSk7XG59XG5mdW5jdGlvbiBtYXJrUmV0cnlMYW5lSW1wbChmaWJlciwgcmV0cnlMYW5lKSB7XG4gIGZpYmVyID0gZmliZXIubWVtb2l6ZWRTdGF0ZTtcbiAgaWYgKG51bGwgIT09IGZpYmVyICYmIG51bGwgIT09IGZpYmVyLmRlaHlkcmF0ZWQpIHtcbiAgICB2YXIgYSA9IGZpYmVyLnJldHJ5TGFuZTtcbiAgICBmaWJlci5yZXRyeUxhbmUgPSAwICE9PSBhICYmIGEgPCByZXRyeUxhbmUgPyBhIDogcmV0cnlMYW5lO1xuICB9XG59XG5mdW5jdGlvbiBtYXJrUmV0cnlMYW5lSWZOb3RIeWRyYXRlZChmaWJlciwgcmV0cnlMYW5lKSB7XG4gIG1hcmtSZXRyeUxhbmVJbXBsKGZpYmVyLCByZXRyeUxhbmUpO1xuICAoZmliZXIgPSBmaWJlci5hbHRlcm5hdGUpICYmIG1hcmtSZXRyeUxhbmVJbXBsKGZpYmVyLCByZXRyeUxhbmUpO1xufVxuZnVuY3Rpb24gYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24oZmliZXIpIHtcbiAgaWYgKDEzID09PSBmaWJlci50YWcpIHtcbiAgICB2YXIgcm9vdCA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShmaWJlciwgNjcxMDg4NjQpO1xuICAgIG51bGwgIT09IHJvb3QgJiYgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCA2NzEwODg2NCk7XG4gICAgbWFya1JldHJ5TGFuZUlmTm90SHlkcmF0ZWQoZmliZXIsIDY3MTA4ODY0KTtcbiAgfVxufVxudmFyIF9lbmFibGVkID0gITA7XG5mdW5jdGlvbiBkaXNwYXRjaERpc2NyZXRlRXZlbnQoXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgY29udGFpbmVyLFxuICBuYXRpdmVFdmVudFxuKSB7XG4gIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQ7XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBudWxsO1xuICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnA7XG4gIHRyeSB7XG4gICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSAyKSxcbiAgICAgIGRpc3BhdGNoRXZlbnQoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCBjb250YWluZXIsIG5hdGl2ZUV2ZW50KTtcbiAgfSBmaW5hbGx5IHtcbiAgICAoUmVhY3RET01TaGFyZWRJbnRlcm5hbHMucCA9IHByZXZpb3VzUHJpb3JpdHkpLFxuICAgICAgKFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBwcmV2VHJhbnNpdGlvbik7XG4gIH1cbn1cbmZ1bmN0aW9uIGRpc3BhdGNoQ29udGludW91c0V2ZW50KFxuICBkb21FdmVudE5hbWUsXG4gIGV2ZW50U3lzdGVtRmxhZ3MsXG4gIGNvbnRhaW5lcixcbiAgbmF0aXZlRXZlbnRcbikge1xuICB2YXIgcHJldlRyYW5zaXRpb24gPSBSZWFjdFNoYXJlZEludGVybmFscy5UO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gbnVsbDtcbiAgdmFyIHByZXZpb3VzUHJpb3JpdHkgPSBSZWFjdERPTVNoYXJlZEludGVybmFscy5wO1xuICB0cnkge1xuICAgIChSZWFjdERPTVNoYXJlZEludGVybmFscy5wID0gOCksXG4gICAgICBkaXNwYXRjaEV2ZW50KGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywgY29udGFpbmVyLCBuYXRpdmVFdmVudCk7XG4gIH0gZmluYWxseSB7XG4gICAgKFJlYWN0RE9NU2hhcmVkSW50ZXJuYWxzLnAgPSBwcmV2aW91c1ByaW9yaXR5KSxcbiAgICAgIChSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldlRyYW5zaXRpb24pO1xuICB9XG59XG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KFxuICBkb21FdmVudE5hbWUsXG4gIGV2ZW50U3lzdGVtRmxhZ3MsXG4gIHRhcmdldENvbnRhaW5lcixcbiAgbmF0aXZlRXZlbnRcbikge1xuICBpZiAoX2VuYWJsZWQpIHtcbiAgICB2YXIgYmxvY2tlZE9uID0gZmluZEluc3RhbmNlQmxvY2tpbmdFdmVudChuYXRpdmVFdmVudCk7XG4gICAgaWYgKG51bGwgPT09IGJsb2NrZWRPbilcbiAgICAgIGRpc3BhdGNoRXZlbnRGb3JQbHVnaW5FdmVudFN5c3RlbShcbiAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICBuYXRpdmVFdmVudCxcbiAgICAgICAgcmV0dXJuX3RhcmdldEluc3QsXG4gICAgICAgIHRhcmdldENvbnRhaW5lclxuICAgICAgKSxcbiAgICAgICAgY2xlYXJJZkNvbnRpbnVvdXNFdmVudChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KTtcbiAgICBlbHNlIGlmIChcbiAgICAgIHF1ZXVlSWZDb250aW51b3VzRXZlbnQoXG4gICAgICAgIGJsb2NrZWRPbixcbiAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICB0YXJnZXRDb250YWluZXIsXG4gICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICApXG4gICAgKVxuICAgICAgbmF0aXZlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZWxzZSBpZiAoXG4gICAgICAoY2xlYXJJZkNvbnRpbnVvdXNFdmVudChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSxcbiAgICAgIGV2ZW50U3lzdGVtRmxhZ3MgJiA0ICYmXG4gICAgICAgIC0xIDwgZGlzY3JldGVSZXBsYXlhYmxlRXZlbnRzLmluZGV4T2YoZG9tRXZlbnROYW1lKSlcbiAgICApIHtcbiAgICAgIGZvciAoOyBudWxsICE9PSBibG9ja2VkT247ICkge1xuICAgICAgICB2YXIgZmliZXIgPSBnZXRJbnN0YW5jZUZyb21Ob2RlKGJsb2NrZWRPbik7XG4gICAgICAgIGlmIChudWxsICE9PSBmaWJlcilcbiAgICAgICAgICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICBmaWJlciA9IGZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgaWYgKGZpYmVyLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lcyhmaWJlci5wZW5kaW5nTGFuZXMpO1xuICAgICAgICAgICAgICAgIGlmICgwICE9PSBsYW5lcykge1xuICAgICAgICAgICAgICAgICAgdmFyIHJvb3QgPSBmaWJlcjtcbiAgICAgICAgICAgICAgICAgIHJvb3QucGVuZGluZ0xhbmVzIHw9IDI7XG4gICAgICAgICAgICAgICAgICBmb3IgKHJvb3QuZW50YW5nbGVkTGFuZXMgfD0gMjsgbGFuZXM7ICkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZSA9IDEgPDwgKDMxIC0gY2x6MzIobGFuZXMpKTtcbiAgICAgICAgICAgICAgICAgICAgcm9vdC5lbnRhbmdsZW1lbnRzWzFdIHw9IGxhbmU7XG4gICAgICAgICAgICAgICAgICAgIGxhbmVzICY9IH5sYW5lO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKGZpYmVyKTtcbiAgICAgICAgICAgICAgICAgIDAgPT09IChleGVjdXRpb25Db250ZXh0ICYgNikgJiZcbiAgICAgICAgICAgICAgICAgICAgKCh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJUYXJnZXRUaW1lID0gbm93KCkgKyA1MDApLFxuICAgICAgICAgICAgICAgICAgICBmbHVzaFN5bmNXb3JrQWNyb3NzUm9vdHNfaW1wbCgwLCAhMSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgIChyb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCAyKSksXG4gICAgICAgICAgICAgICAgbnVsbCAhPT0gcm9vdCAmJiBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIDIpLFxuICAgICAgICAgICAgICAgIGZsdXNoU3luY1dvcmskMSgpLFxuICAgICAgICAgICAgICAgIG1hcmtSZXRyeUxhbmVJZk5vdEh5ZHJhdGVkKGZpYmVyLCAyKTtcbiAgICAgICAgICB9XG4gICAgICAgIGZpYmVyID0gZmluZEluc3RhbmNlQmxvY2tpbmdFdmVudChuYXRpdmVFdmVudCk7XG4gICAgICAgIG51bGwgPT09IGZpYmVyICYmXG4gICAgICAgICAgZGlzcGF0Y2hFdmVudEZvclBsdWdpbkV2ZW50U3lzdGVtKFxuICAgICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICAgICAgcmV0dXJuX3RhcmdldEluc3QsXG4gICAgICAgICAgICB0YXJnZXRDb250YWluZXJcbiAgICAgICAgICApO1xuICAgICAgICBpZiAoZmliZXIgPT09IGJsb2NrZWRPbikgYnJlYWs7XG4gICAgICAgIGJsb2NrZWRPbiA9IGZpYmVyO1xuICAgICAgfVxuICAgICAgbnVsbCAhPT0gYmxvY2tlZE9uICYmIG5hdGl2ZUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH0gZWxzZVxuICAgICAgZGlzcGF0Y2hFdmVudEZvclBsdWdpbkV2ZW50U3lzdGVtKFxuICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgICBudWxsLFxuICAgICAgICB0YXJnZXRDb250YWluZXJcbiAgICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIGZpbmRJbnN0YW5jZUJsb2NraW5nRXZlbnQobmF0aXZlRXZlbnQpIHtcbiAgbmF0aXZlRXZlbnQgPSBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCk7XG4gIHJldHVybiBmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldChuYXRpdmVFdmVudCk7XG59XG52YXIgcmV0dXJuX3RhcmdldEluc3QgPSBudWxsO1xuZnVuY3Rpb24gZmluZEluc3RhbmNlQmxvY2tpbmdUYXJnZXQodGFyZ2V0Tm9kZSkge1xuICByZXR1cm5fdGFyZ2V0SW5zdCA9IG51bGw7XG4gIHRhcmdldE5vZGUgPSBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSh0YXJnZXROb2RlKTtcbiAgaWYgKG51bGwgIT09IHRhcmdldE5vZGUpIHtcbiAgICB2YXIgbmVhcmVzdE1vdW50ZWQgPSBnZXROZWFyZXN0TW91bnRlZEZpYmVyKHRhcmdldE5vZGUpO1xuICAgIGlmIChudWxsID09PSBuZWFyZXN0TW91bnRlZCkgdGFyZ2V0Tm9kZSA9IG51bGw7XG4gICAgZWxzZSB7XG4gICAgICB2YXIgdGFnID0gbmVhcmVzdE1vdW50ZWQudGFnO1xuICAgICAgaWYgKDEzID09PSB0YWcpIHtcbiAgICAgICAgdGFyZ2V0Tm9kZSA9IGdldFN1c3BlbnNlSW5zdGFuY2VGcm9tRmliZXIobmVhcmVzdE1vdW50ZWQpO1xuICAgICAgICBpZiAobnVsbCAhPT0gdGFyZ2V0Tm9kZSkgcmV0dXJuIHRhcmdldE5vZGU7XG4gICAgICAgIHRhcmdldE5vZGUgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmICgzID09PSB0YWcpIHtcbiAgICAgICAgaWYgKG5lYXJlc3RNb3VudGVkLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKVxuICAgICAgICAgIHJldHVybiAzID09PSBuZWFyZXN0TW91bnRlZC50YWdcbiAgICAgICAgICAgID8gbmVhcmVzdE1vdW50ZWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm9cbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgdGFyZ2V0Tm9kZSA9IG51bGw7XG4gICAgICB9IGVsc2UgbmVhcmVzdE1vdW50ZWQgIT09IHRhcmdldE5vZGUgJiYgKHRhcmdldE5vZGUgPSBudWxsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuX3RhcmdldEluc3QgPSB0YXJnZXROb2RlO1xuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldEV2ZW50UHJpb3JpdHkoZG9tRXZlbnROYW1lKSB7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSBcImJlZm9yZXRvZ2dsZVwiOlxuICAgIGNhc2UgXCJjYW5jZWxcIjpcbiAgICBjYXNlIFwiY2xpY2tcIjpcbiAgICBjYXNlIFwiY2xvc2VcIjpcbiAgICBjYXNlIFwiY29udGV4dG1lbnVcIjpcbiAgICBjYXNlIFwiY29weVwiOlxuICAgIGNhc2UgXCJjdXRcIjpcbiAgICBjYXNlIFwiYXV4Y2xpY2tcIjpcbiAgICBjYXNlIFwiZGJsY2xpY2tcIjpcbiAgICBjYXNlIFwiZHJhZ2VuZFwiOlxuICAgIGNhc2UgXCJkcmFnc3RhcnRcIjpcbiAgICBjYXNlIFwiZHJvcFwiOlxuICAgIGNhc2UgXCJmb2N1c2luXCI6XG4gICAgY2FzZSBcImZvY3Vzb3V0XCI6XG4gICAgY2FzZSBcImlucHV0XCI6XG4gICAgY2FzZSBcImludmFsaWRcIjpcbiAgICBjYXNlIFwia2V5ZG93blwiOlxuICAgIGNhc2UgXCJrZXlwcmVzc1wiOlxuICAgIGNhc2UgXCJrZXl1cFwiOlxuICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcbiAgICBjYXNlIFwibW91c2V1cFwiOlxuICAgIGNhc2UgXCJwYXN0ZVwiOlxuICAgIGNhc2UgXCJwYXVzZVwiOlxuICAgIGNhc2UgXCJwbGF5XCI6XG4gICAgY2FzZSBcInBvaW50ZXJjYW5jZWxcIjpcbiAgICBjYXNlIFwicG9pbnRlcmRvd25cIjpcbiAgICBjYXNlIFwicG9pbnRlcnVwXCI6XG4gICAgY2FzZSBcInJhdGVjaGFuZ2VcIjpcbiAgICBjYXNlIFwicmVzZXRcIjpcbiAgICBjYXNlIFwicmVzaXplXCI6XG4gICAgY2FzZSBcInNlZWtlZFwiOlxuICAgIGNhc2UgXCJzdWJtaXRcIjpcbiAgICBjYXNlIFwidG9nZ2xlXCI6XG4gICAgY2FzZSBcInRvdWNoY2FuY2VsXCI6XG4gICAgY2FzZSBcInRvdWNoZW5kXCI6XG4gICAgY2FzZSBcInRvdWNoc3RhcnRcIjpcbiAgICBjYXNlIFwidm9sdW1lY2hhbmdlXCI6XG4gICAgY2FzZSBcImNoYW5nZVwiOlxuICAgIGNhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjpcbiAgICBjYXNlIFwidGV4dElucHV0XCI6XG4gICAgY2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjpcbiAgICBjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpcbiAgICBjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpcbiAgICBjYXNlIFwiYmVmb3JlYmx1clwiOlxuICAgIGNhc2UgXCJhZnRlcmJsdXJcIjpcbiAgICBjYXNlIFwiYmVmb3JlaW5wdXRcIjpcbiAgICBjYXNlIFwiYmx1clwiOlxuICAgIGNhc2UgXCJmdWxsc2NyZWVuY2hhbmdlXCI6XG4gICAgY2FzZSBcImZvY3VzXCI6XG4gICAgY2FzZSBcImhhc2hjaGFuZ2VcIjpcbiAgICBjYXNlIFwicG9wc3RhdGVcIjpcbiAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgY2FzZSBcInNlbGVjdHN0YXJ0XCI6XG4gICAgICByZXR1cm4gMjtcbiAgICBjYXNlIFwiZHJhZ1wiOlxuICAgIGNhc2UgXCJkcmFnZW50ZXJcIjpcbiAgICBjYXNlIFwiZHJhZ2V4aXRcIjpcbiAgICBjYXNlIFwiZHJhZ2xlYXZlXCI6XG4gICAgY2FzZSBcImRyYWdvdmVyXCI6XG4gICAgY2FzZSBcIm1vdXNlbW92ZVwiOlxuICAgIGNhc2UgXCJtb3VzZW91dFwiOlxuICAgIGNhc2UgXCJtb3VzZW92ZXJcIjpcbiAgICBjYXNlIFwicG9pbnRlcm1vdmVcIjpcbiAgICBjYXNlIFwicG9pbnRlcm91dFwiOlxuICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgIGNhc2UgXCJzY3JvbGxcIjpcbiAgICBjYXNlIFwidG91Y2htb3ZlXCI6XG4gICAgY2FzZSBcIndoZWVsXCI6XG4gICAgY2FzZSBcIm1vdXNlZW50ZXJcIjpcbiAgICBjYXNlIFwibW91c2VsZWF2ZVwiOlxuICAgIGNhc2UgXCJwb2ludGVyZW50ZXJcIjpcbiAgICBjYXNlIFwicG9pbnRlcmxlYXZlXCI6XG4gICAgICByZXR1cm4gODtcbiAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgc3dpdGNoIChnZXRDdXJyZW50UHJpb3JpdHlMZXZlbCgpKSB7XG4gICAgICAgIGNhc2UgSW1tZWRpYXRlUHJpb3JpdHk6XG4gICAgICAgICAgcmV0dXJuIDI7XG4gICAgICAgIGNhc2UgVXNlckJsb2NraW5nUHJpb3JpdHk6XG4gICAgICAgICAgcmV0dXJuIDg7XG4gICAgICAgIGNhc2UgTm9ybWFsUHJpb3JpdHkkMTpcbiAgICAgICAgY2FzZSBMb3dQcmlvcml0eTpcbiAgICAgICAgICByZXR1cm4gMzI7XG4gICAgICAgIGNhc2UgSWRsZVByaW9yaXR5OlxuICAgICAgICAgIHJldHVybiAyNjg0MzU0NTY7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIDMyO1xuICAgICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gMzI7XG4gIH1cbn1cbnZhciBoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0ID0gITEsXG4gIHF1ZXVlZEZvY3VzID0gbnVsbCxcbiAgcXVldWVkRHJhZyA9IG51bGwsXG4gIHF1ZXVlZE1vdXNlID0gbnVsbCxcbiAgcXVldWVkUG9pbnRlcnMgPSBuZXcgTWFwKCksXG4gIHF1ZXVlZFBvaW50ZXJDYXB0dXJlcyA9IG5ldyBNYXAoKSxcbiAgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzID0gW10sXG4gIGRpc2NyZXRlUmVwbGF5YWJsZUV2ZW50cyA9XG4gICAgXCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXRcIi5zcGxpdChcbiAgICAgIFwiIFwiXG4gICAgKTtcbmZ1bmN0aW9uIGNsZWFySWZDb250aW51b3VzRXZlbnQoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgIGNhc2UgXCJmb2N1c2luXCI6XG4gICAgY2FzZSBcImZvY3Vzb3V0XCI6XG4gICAgICBxdWV1ZWRGb2N1cyA9IG51bGw7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZHJhZ2VudGVyXCI6XG4gICAgY2FzZSBcImRyYWdsZWF2ZVwiOlxuICAgICAgcXVldWVkRHJhZyA9IG51bGw7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwibW91c2VvdmVyXCI6XG4gICAgY2FzZSBcIm1vdXNlb3V0XCI6XG4gICAgICBxdWV1ZWRNb3VzZSA9IG51bGw7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwicG9pbnRlcm92ZXJcIjpcbiAgICBjYXNlIFwicG9pbnRlcm91dFwiOlxuICAgICAgcXVldWVkUG9pbnRlcnMuZGVsZXRlKG5hdGl2ZUV2ZW50LnBvaW50ZXJJZCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpcbiAgICBjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6XG4gICAgICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuZGVsZXRlKG5hdGl2ZUV2ZW50LnBvaW50ZXJJZCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQoXG4gIGV4aXN0aW5nUXVldWVkRXZlbnQsXG4gIGJsb2NrZWRPbixcbiAgZG9tRXZlbnROYW1lLFxuICBldmVudFN5c3RlbUZsYWdzLFxuICB0YXJnZXRDb250YWluZXIsXG4gIG5hdGl2ZUV2ZW50XG4pIHtcbiAgaWYgKFxuICAgIG51bGwgPT09IGV4aXN0aW5nUXVldWVkRXZlbnQgfHxcbiAgICBleGlzdGluZ1F1ZXVlZEV2ZW50Lm5hdGl2ZUV2ZW50ICE9PSBuYXRpdmVFdmVudFxuICApXG4gICAgcmV0dXJuIChcbiAgICAgIChleGlzdGluZ1F1ZXVlZEV2ZW50ID0ge1xuICAgICAgICBibG9ja2VkT246IGJsb2NrZWRPbixcbiAgICAgICAgZG9tRXZlbnROYW1lOiBkb21FdmVudE5hbWUsXG4gICAgICAgIGV2ZW50U3lzdGVtRmxhZ3M6IGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgIG5hdGl2ZUV2ZW50OiBuYXRpdmVFdmVudCxcbiAgICAgICAgdGFyZ2V0Q29udGFpbmVyczogW3RhcmdldENvbnRhaW5lcl1cbiAgICAgIH0pLFxuICAgICAgbnVsbCAhPT0gYmxvY2tlZE9uICYmXG4gICAgICAgICgoYmxvY2tlZE9uID0gZ2V0SW5zdGFuY2VGcm9tTm9kZShibG9ja2VkT24pKSxcbiAgICAgICAgbnVsbCAhPT0gYmxvY2tlZE9uICYmIGF0dGVtcHRDb250aW51b3VzSHlkcmF0aW9uKGJsb2NrZWRPbikpLFxuICAgICAgZXhpc3RpbmdRdWV1ZWRFdmVudFxuICAgICk7XG4gIGV4aXN0aW5nUXVldWVkRXZlbnQuZXZlbnRTeXN0ZW1GbGFncyB8PSBldmVudFN5c3RlbUZsYWdzO1xuICBibG9ja2VkT24gPSBleGlzdGluZ1F1ZXVlZEV2ZW50LnRhcmdldENvbnRhaW5lcnM7XG4gIG51bGwgIT09IHRhcmdldENvbnRhaW5lciAmJlxuICAgIC0xID09PSBibG9ja2VkT24uaW5kZXhPZih0YXJnZXRDb250YWluZXIpICYmXG4gICAgYmxvY2tlZE9uLnB1c2godGFyZ2V0Q29udGFpbmVyKTtcbiAgcmV0dXJuIGV4aXN0aW5nUXVldWVkRXZlbnQ7XG59XG5mdW5jdGlvbiBxdWV1ZUlmQ29udGludW91c0V2ZW50KFxuICBibG9ja2VkT24sXG4gIGRvbUV2ZW50TmFtZSxcbiAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgdGFyZ2V0Q29udGFpbmVyLFxuICBuYXRpdmVFdmVudFxuKSB7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChxdWV1ZWRGb2N1cyA9IGFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQoXG4gICAgICAgICAgcXVldWVkRm9jdXMsXG4gICAgICAgICAgYmxvY2tlZE9uLFxuICAgICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICAgIHRhcmdldENvbnRhaW5lcixcbiAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICApKSxcbiAgICAgICAgITBcbiAgICAgICk7XG4gICAgY2FzZSBcImRyYWdlbnRlclwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHF1ZXVlZERyYWcgPSBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KFxuICAgICAgICAgIHF1ZXVlZERyYWcsXG4gICAgICAgICAgYmxvY2tlZE9uLFxuICAgICAgICAgIGRvbUV2ZW50TmFtZSxcbiAgICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICAgIHRhcmdldENvbnRhaW5lcixcbiAgICAgICAgICBuYXRpdmVFdmVudFxuICAgICAgICApKSxcbiAgICAgICAgITBcbiAgICAgICk7XG4gICAgY2FzZSBcIm1vdXNlb3ZlclwiOlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHF1ZXVlZE1vdXNlID0gYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudChcbiAgICAgICAgICBxdWV1ZWRNb3VzZSxcbiAgICAgICAgICBibG9ja2VkT24sXG4gICAgICAgICAgZG9tRXZlbnROYW1lLFxuICAgICAgICAgIGV2ZW50U3lzdGVtRmxhZ3MsXG4gICAgICAgICAgdGFyZ2V0Q29udGFpbmVyLFxuICAgICAgICAgIG5hdGl2ZUV2ZW50XG4gICAgICAgICkpLFxuICAgICAgICAhMFxuICAgICAgKTtcbiAgICBjYXNlIFwicG9pbnRlcm92ZXJcIjpcbiAgICAgIHZhciBwb2ludGVySWQgPSBuYXRpdmVFdmVudC5wb2ludGVySWQ7XG4gICAgICBxdWV1ZWRQb2ludGVycy5zZXQoXG4gICAgICAgIHBvaW50ZXJJZCxcbiAgICAgICAgYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudChcbiAgICAgICAgICBxdWV1ZWRQb2ludGVycy5nZXQocG9pbnRlcklkKSB8fCBudWxsLFxuICAgICAgICAgIGJsb2NrZWRPbixcbiAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgZXZlbnRTeXN0ZW1GbGFncyxcbiAgICAgICAgICB0YXJnZXRDb250YWluZXIsXG4gICAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIHJldHVybiAhMDtcbiAgICBjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpcbiAgICAgIHJldHVybiAoXG4gICAgICAgIChwb2ludGVySWQgPSBuYXRpdmVFdmVudC5wb2ludGVySWQpLFxuICAgICAgICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuc2V0KFxuICAgICAgICAgIHBvaW50ZXJJZCxcbiAgICAgICAgICBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KFxuICAgICAgICAgICAgcXVldWVkUG9pbnRlckNhcHR1cmVzLmdldChwb2ludGVySWQpIHx8IG51bGwsXG4gICAgICAgICAgICBibG9ja2VkT24sXG4gICAgICAgICAgICBkb21FdmVudE5hbWUsXG4gICAgICAgICAgICBldmVudFN5c3RlbUZsYWdzLFxuICAgICAgICAgICAgdGFyZ2V0Q29udGFpbmVyLFxuICAgICAgICAgICAgbmF0aXZlRXZlbnRcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgICEwXG4gICAgICApO1xuICB9XG4gIHJldHVybiAhMTtcbn1cbmZ1bmN0aW9uIGF0dGVtcHRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldChxdWV1ZWRUYXJnZXQpIHtcbiAgdmFyIHRhcmdldEluc3QgPSBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShxdWV1ZWRUYXJnZXQudGFyZ2V0KTtcbiAgaWYgKG51bGwgIT09IHRhcmdldEluc3QpIHtcbiAgICB2YXIgbmVhcmVzdE1vdW50ZWQgPSBnZXROZWFyZXN0TW91bnRlZEZpYmVyKHRhcmdldEluc3QpO1xuICAgIGlmIChudWxsICE9PSBuZWFyZXN0TW91bnRlZClcbiAgICAgIGlmICgoKHRhcmdldEluc3QgPSBuZWFyZXN0TW91bnRlZC50YWcpLCAxMyA9PT0gdGFyZ2V0SW5zdCkpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICgodGFyZ2V0SW5zdCA9IGdldFN1c3BlbnNlSW5zdGFuY2VGcm9tRmliZXIobmVhcmVzdE1vdW50ZWQpKSxcbiAgICAgICAgICBudWxsICE9PSB0YXJnZXRJbnN0KVxuICAgICAgICApIHtcbiAgICAgICAgICBxdWV1ZWRUYXJnZXQuYmxvY2tlZE9uID0gdGFyZ2V0SW5zdDtcbiAgICAgICAgICBydW5XaXRoUHJpb3JpdHkocXVldWVkVGFyZ2V0LnByaW9yaXR5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoMTMgPT09IG5lYXJlc3RNb3VudGVkLnRhZykge1xuICAgICAgICAgICAgICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCksXG4gICAgICAgICAgICAgICAgcm9vdCA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShuZWFyZXN0TW91bnRlZCwgbGFuZSk7XG4gICAgICAgICAgICAgIG51bGwgIT09IHJvb3QgJiZcbiAgICAgICAgICAgICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgbmVhcmVzdE1vdW50ZWQsIGxhbmUpO1xuICAgICAgICAgICAgICBtYXJrUmV0cnlMYW5lSWZOb3RIeWRyYXRlZChuZWFyZXN0TW91bnRlZCwgbGFuZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAzID09PSB0YXJnZXRJbnN0ICYmXG4gICAgICAgIG5lYXJlc3RNb3VudGVkLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkXG4gICAgICApIHtcbiAgICAgICAgcXVldWVkVGFyZ2V0LmJsb2NrZWRPbiA9XG4gICAgICAgICAgMyA9PT0gbmVhcmVzdE1vdW50ZWQudGFnXG4gICAgICAgICAgICA/IG5lYXJlc3RNb3VudGVkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgfVxuICBxdWV1ZWRUYXJnZXQuYmxvY2tlZE9uID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkRXZlbnQpIHtcbiAgaWYgKG51bGwgIT09IHF1ZXVlZEV2ZW50LmJsb2NrZWRPbikgcmV0dXJuICExO1xuICBmb3IgKFxuICAgIHZhciB0YXJnZXRDb250YWluZXJzID0gcXVldWVkRXZlbnQudGFyZ2V0Q29udGFpbmVycztcbiAgICAwIDwgdGFyZ2V0Q29udGFpbmVycy5sZW5ndGg7XG5cbiAgKSB7XG4gICAgdmFyIG5leHRCbG9ja2VkT24gPSBmaW5kSW5zdGFuY2VCbG9ja2luZ0V2ZW50KHF1ZXVlZEV2ZW50Lm5hdGl2ZUV2ZW50KTtcbiAgICBpZiAobnVsbCA9PT0gbmV4dEJsb2NrZWRPbikge1xuICAgICAgbmV4dEJsb2NrZWRPbiA9IHF1ZXVlZEV2ZW50Lm5hdGl2ZUV2ZW50O1xuICAgICAgdmFyIG5hdGl2ZUV2ZW50Q2xvbmUgPSBuZXcgbmV4dEJsb2NrZWRPbi5jb25zdHJ1Y3RvcihcbiAgICAgICAgbmV4dEJsb2NrZWRPbi50eXBlLFxuICAgICAgICBuZXh0QmxvY2tlZE9uXG4gICAgICApO1xuICAgICAgY3VycmVudFJlcGxheWluZ0V2ZW50ID0gbmF0aXZlRXZlbnRDbG9uZTtcbiAgICAgIG5leHRCbG9ja2VkT24udGFyZ2V0LmRpc3BhdGNoRXZlbnQobmF0aXZlRXZlbnRDbG9uZSk7XG4gICAgICBjdXJyZW50UmVwbGF5aW5nRXZlbnQgPSBudWxsO1xuICAgIH0gZWxzZVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKHRhcmdldENvbnRhaW5lcnMgPSBnZXRJbnN0YW5jZUZyb21Ob2RlKG5leHRCbG9ja2VkT24pKSxcbiAgICAgICAgbnVsbCAhPT0gdGFyZ2V0Q29udGFpbmVycyAmJlxuICAgICAgICAgIGF0dGVtcHRDb250aW51b3VzSHlkcmF0aW9uKHRhcmdldENvbnRhaW5lcnMpLFxuICAgICAgICAocXVldWVkRXZlbnQuYmxvY2tlZE9uID0gbmV4dEJsb2NrZWRPbiksXG4gICAgICAgICExXG4gICAgICApO1xuICAgIHRhcmdldENvbnRhaW5lcnMuc2hpZnQoKTtcbiAgfVxuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBhdHRlbXB0UmVwbGF5Q29udGludW91c1F1ZXVlZEV2ZW50SW5NYXAocXVldWVkRXZlbnQsIGtleSwgbWFwKSB7XG4gIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkRXZlbnQpICYmIG1hcC5kZWxldGUoa2V5KTtcbn1cbmZ1bmN0aW9uIHJlcGxheVVuYmxvY2tlZEV2ZW50cygpIHtcbiAgaGFzU2NoZWR1bGVkUmVwbGF5QXR0ZW1wdCA9ICExO1xuICBudWxsICE9PSBxdWV1ZWRGb2N1cyAmJlxuICAgIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkRm9jdXMpICYmXG4gICAgKHF1ZXVlZEZvY3VzID0gbnVsbCk7XG4gIG51bGwgIT09IHF1ZXVlZERyYWcgJiZcbiAgICBhdHRlbXB0UmVwbGF5Q29udGludW91c1F1ZXVlZEV2ZW50KHF1ZXVlZERyYWcpICYmXG4gICAgKHF1ZXVlZERyYWcgPSBudWxsKTtcbiAgbnVsbCAhPT0gcXVldWVkTW91c2UgJiZcbiAgICBhdHRlbXB0UmVwbGF5Q29udGludW91c1F1ZXVlZEV2ZW50KHF1ZXVlZE1vdXNlKSAmJlxuICAgIChxdWV1ZWRNb3VzZSA9IG51bGwpO1xuICBxdWV1ZWRQb2ludGVycy5mb3JFYWNoKGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnRJbk1hcCk7XG4gIHF1ZXVlZFBvaW50ZXJDYXB0dXJlcy5mb3JFYWNoKGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnRJbk1hcCk7XG59XG5mdW5jdGlvbiBzY2hlZHVsZUNhbGxiYWNrSWZVbmJsb2NrZWQocXVldWVkRXZlbnQsIHVuYmxvY2tlZCkge1xuICBxdWV1ZWRFdmVudC5ibG9ja2VkT24gPT09IHVuYmxvY2tlZCAmJlxuICAgICgocXVldWVkRXZlbnQuYmxvY2tlZE9uID0gbnVsbCksXG4gICAgaGFzU2NoZWR1bGVkUmVwbGF5QXR0ZW1wdCB8fFxuICAgICAgKChoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0ID0gITApLFxuICAgICAgU2NoZWR1bGVyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soXG4gICAgICAgIFNjaGVkdWxlci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxcbiAgICAgICAgcmVwbGF5VW5ibG9ja2VkRXZlbnRzXG4gICAgICApKSk7XG59XG52YXIgbGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlID0gbnVsbDtcbmZ1bmN0aW9uIHNjaGVkdWxlUmVwbGF5UXVldWVJZk5lZWRlZChmb3JtUmVwbGF5aW5nUXVldWUpIHtcbiAgbGFzdFNjaGVkdWxlZFJlcGxheVF1ZXVlICE9PSBmb3JtUmVwbGF5aW5nUXVldWUgJiZcbiAgICAoKGxhc3RTY2hlZHVsZWRSZXBsYXlRdWV1ZSA9IGZvcm1SZXBsYXlpbmdRdWV1ZSksXG4gICAgU2NoZWR1bGVyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soXG4gICAgICBTY2hlZHVsZXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxhc3RTY2hlZHVsZWRSZXBsYXlRdWV1ZSA9PT0gZm9ybVJlcGxheWluZ1F1ZXVlICYmXG4gICAgICAgICAgKGxhc3RTY2hlZHVsZWRSZXBsYXlRdWV1ZSA9IG51bGwpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZvcm1SZXBsYXlpbmdRdWV1ZS5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgIHZhciBmb3JtID0gZm9ybVJlcGxheWluZ1F1ZXVlW2ldLFxuICAgICAgICAgICAgc3VibWl0dGVyT3JBY3Rpb24gPSBmb3JtUmVwbGF5aW5nUXVldWVbaSArIDFdLFxuICAgICAgICAgICAgZm9ybURhdGEgPSBmb3JtUmVwbGF5aW5nUXVldWVbaSArIDJdO1xuICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBzdWJtaXR0ZXJPckFjdGlvbilcbiAgICAgICAgICAgIGlmIChudWxsID09PSBmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldChzdWJtaXR0ZXJPckFjdGlvbiB8fCBmb3JtKSlcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBlbHNlIGJyZWFrO1xuICAgICAgICAgIHZhciBmb3JtSW5zdCA9IGdldEluc3RhbmNlRnJvbU5vZGUoZm9ybSk7XG4gICAgICAgICAgbnVsbCAhPT0gZm9ybUluc3QgJiZcbiAgICAgICAgICAgIChmb3JtUmVwbGF5aW5nUXVldWUuc3BsaWNlKGksIDMpLFxuICAgICAgICAgICAgKGkgLT0gMyksXG4gICAgICAgICAgICBzdGFydEhvc3RUcmFuc2l0aW9uKFxuICAgICAgICAgICAgICBmb3JtSW5zdCxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBlbmRpbmc6ICEwLFxuICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1EYXRhLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogZm9ybS5tZXRob2QsXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBzdWJtaXR0ZXJPckFjdGlvblxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzdWJtaXR0ZXJPckFjdGlvbixcbiAgICAgICAgICAgICAgZm9ybURhdGFcbiAgICAgICAgICAgICkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKSk7XG59XG5mdW5jdGlvbiByZXRyeUlmQmxvY2tlZE9uKHVuYmxvY2tlZCkge1xuICBmdW5jdGlvbiB1bmJsb2NrKHF1ZXVlZEV2ZW50KSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZChxdWV1ZWRFdmVudCwgdW5ibG9ja2VkKTtcbiAgfVxuICBudWxsICE9PSBxdWV1ZWRGb2N1cyAmJiBzY2hlZHVsZUNhbGxiYWNrSWZVbmJsb2NrZWQocXVldWVkRm9jdXMsIHVuYmxvY2tlZCk7XG4gIG51bGwgIT09IHF1ZXVlZERyYWcgJiYgc2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkKHF1ZXVlZERyYWcsIHVuYmxvY2tlZCk7XG4gIG51bGwgIT09IHF1ZXVlZE1vdXNlICYmIHNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZChxdWV1ZWRNb3VzZSwgdW5ibG9ja2VkKTtcbiAgcXVldWVkUG9pbnRlcnMuZm9yRWFjaCh1bmJsb2NrKTtcbiAgcXVldWVkUG9pbnRlckNhcHR1cmVzLmZvckVhY2godW5ibG9jayk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHF1ZXVlZFRhcmdldCA9IHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0c1tpXTtcbiAgICBxdWV1ZWRUYXJnZXQuYmxvY2tlZE9uID09PSB1bmJsb2NrZWQgJiYgKHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPSBudWxsKTtcbiAgfVxuICBmb3IgKFxuICAgIDtcbiAgICAwIDwgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzLmxlbmd0aCAmJlxuICAgICgoaSA9IHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0c1swXSksIG51bGwgPT09IGkuYmxvY2tlZE9uKTtcblxuICApXG4gICAgYXR0ZW1wdEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0KGkpLFxuICAgICAgbnVsbCA9PT0gaS5ibG9ja2VkT24gJiYgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzLnNoaWZ0KCk7XG4gIGkgPSAodW5ibG9ja2VkLm93bmVyRG9jdW1lbnQgfHwgdW5ibG9ja2VkKS4kJHJlYWN0Rm9ybVJlcGxheTtcbiAgaWYgKG51bGwgIT0gaSlcbiAgICBmb3IgKHF1ZXVlZFRhcmdldCA9IDA7IHF1ZXVlZFRhcmdldCA8IGkubGVuZ3RoOyBxdWV1ZWRUYXJnZXQgKz0gMykge1xuICAgICAgdmFyIGZvcm0gPSBpW3F1ZXVlZFRhcmdldF0sXG4gICAgICAgIHN1Ym1pdHRlck9yQWN0aW9uID0gaVtxdWV1ZWRUYXJnZXQgKyAxXSxcbiAgICAgICAgZm9ybVByb3BzID0gZm9ybVtpbnRlcm5hbFByb3BzS2V5XSB8fCBudWxsO1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHN1Ym1pdHRlck9yQWN0aW9uKVxuICAgICAgICBmb3JtUHJvcHMgfHwgc2NoZWR1bGVSZXBsYXlRdWV1ZUlmTmVlZGVkKGkpO1xuICAgICAgZWxzZSBpZiAoZm9ybVByb3BzKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBudWxsO1xuICAgICAgICBpZiAoc3VibWl0dGVyT3JBY3Rpb24gJiYgc3VibWl0dGVyT3JBY3Rpb24uaGFzQXR0cmlidXRlKFwiZm9ybUFjdGlvblwiKSlcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoKGZvcm0gPSBzdWJtaXR0ZXJPckFjdGlvbiksXG4gICAgICAgICAgICAoZm9ybVByb3BzID0gc3VibWl0dGVyT3JBY3Rpb25baW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbCkpXG4gICAgICAgICAgKVxuICAgICAgICAgICAgYWN0aW9uID0gZm9ybVByb3BzLmZvcm1BY3Rpb247XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gZmluZEluc3RhbmNlQmxvY2tpbmdUYXJnZXQoZm9ybSkpIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgZWxzZSBhY3Rpb24gPSBmb3JtUHJvcHMuYWN0aW9uO1xuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhY3Rpb25cbiAgICAgICAgICA/IChpW3F1ZXVlZFRhcmdldCArIDFdID0gYWN0aW9uKVxuICAgICAgICAgIDogKGkuc3BsaWNlKHF1ZXVlZFRhcmdldCwgMyksIChxdWV1ZWRUYXJnZXQgLT0gMykpO1xuICAgICAgICBzY2hlZHVsZVJlcGxheVF1ZXVlSWZOZWVkZWQoaSk7XG4gICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gUmVhY3RET01Sb290KGludGVybmFsUm9vdCkge1xuICB0aGlzLl9pbnRlcm5hbFJvb3QgPSBpbnRlcm5hbFJvb3Q7XG59XG5SZWFjdERPTUh5ZHJhdGlvblJvb3QucHJvdG90eXBlLnJlbmRlciA9IFJlYWN0RE9NUm9vdC5wcm90b3R5cGUucmVuZGVyID1cbiAgZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgdmFyIHJvb3QgPSB0aGlzLl9pbnRlcm5hbFJvb3Q7XG4gICAgaWYgKG51bGwgPT09IHJvb3QpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNDA5KSk7XG4gICAgdmFyIGN1cnJlbnQgPSByb290LmN1cnJlbnQsXG4gICAgICBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoKTtcbiAgICB1cGRhdGVDb250YWluZXJJbXBsKGN1cnJlbnQsIGxhbmUsIGNoaWxkcmVuLCByb290LCBudWxsLCBudWxsKTtcbiAgfTtcblJlYWN0RE9NSHlkcmF0aW9uUm9vdC5wcm90b3R5cGUudW5tb3VudCA9IFJlYWN0RE9NUm9vdC5wcm90b3R5cGUudW5tb3VudCA9XG4gIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcm9vdCA9IHRoaXMuX2ludGVybmFsUm9vdDtcbiAgICBpZiAobnVsbCAhPT0gcm9vdCkge1xuICAgICAgdGhpcy5faW50ZXJuYWxSb290ID0gbnVsbDtcbiAgICAgIHZhciBjb250YWluZXIgPSByb290LmNvbnRhaW5lckluZm87XG4gICAgICAwID09PSByb290LnRhZyAmJiBmbHVzaFBhc3NpdmVFZmZlY3RzKCk7XG4gICAgICB1cGRhdGVDb250YWluZXJJbXBsKHJvb3QuY3VycmVudCwgMiwgbnVsbCwgcm9vdCwgbnVsbCwgbnVsbCk7XG4gICAgICBmbHVzaFN5bmNXb3JrJDEoKTtcbiAgICAgIGNvbnRhaW5lcltpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSA9IG51bGw7XG4gICAgfVxuICB9O1xuZnVuY3Rpb24gUmVhY3RET01IeWRyYXRpb25Sb290KGludGVybmFsUm9vdCkge1xuICB0aGlzLl9pbnRlcm5hbFJvb3QgPSBpbnRlcm5hbFJvb3Q7XG59XG5SZWFjdERPTUh5ZHJhdGlvblJvb3QucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICBpZiAodGFyZ2V0KSB7XG4gICAgdmFyIHVwZGF0ZVByaW9yaXR5ID0gcmVzb2x2ZVVwZGF0ZVByaW9yaXR5KCk7XG4gICAgdGFyZ2V0ID0geyBibG9ja2VkT246IG51bGwsIHRhcmdldDogdGFyZ2V0LCBwcmlvcml0eTogdXBkYXRlUHJpb3JpdHkgfTtcbiAgICBmb3IgKFxuICAgICAgdmFyIGkgPSAwO1xuICAgICAgaSA8IHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0cy5sZW5ndGggJiZcbiAgICAgIDAgIT09IHVwZGF0ZVByaW9yaXR5ICYmXG4gICAgICB1cGRhdGVQcmlvcml0eSA8IHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0c1tpXS5wcmlvcml0eTtcbiAgICAgIGkrK1xuICAgICk7XG4gICAgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzLnNwbGljZShpLCAwLCB0YXJnZXQpO1xuICAgIDAgPT09IGkgJiYgYXR0ZW1wdEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0KHRhcmdldCk7XG4gIH1cbn07XG52YXIgaXNvbW9ycGhpY1JlYWN0UGFja2FnZVZlcnNpb24kanNjb21wJGlubGluZV8xNjg2ID0gUmVhY3QudmVyc2lvbjtcbmlmIChcbiAgXCIxOS4wLjBcIiAhPT1cbiAgaXNvbW9ycGhpY1JlYWN0UGFja2FnZVZlcnNpb24kanNjb21wJGlubGluZV8xNjg2XG4pXG4gIHRocm93IEVycm9yKFxuICAgIGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoXG4gICAgICA1MjcsXG4gICAgICBpc29tb3JwaGljUmVhY3RQYWNrYWdlVmVyc2lvbiRqc2NvbXAkaW5saW5lXzE2ODYsXG4gICAgICBcIjE5LjAuMFwiXG4gICAgKVxuICApO1xuUmVhY3RET01TaGFyZWRJbnRlcm5hbHMuZmluZERPTU5vZGUgPSBmdW5jdGlvbiAoY29tcG9uZW50T3JFbGVtZW50KSB7XG4gIHZhciBmaWJlciA9IGNvbXBvbmVudE9yRWxlbWVudC5fcmVhY3RJbnRlcm5hbHM7XG4gIGlmICh2b2lkIDAgPT09IGZpYmVyKSB7XG4gICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGNvbXBvbmVudE9yRWxlbWVudC5yZW5kZXIpXG4gICAgICB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE4OCkpO1xuICAgIGNvbXBvbmVudE9yRWxlbWVudCA9IE9iamVjdC5rZXlzKGNvbXBvbmVudE9yRWxlbWVudCkuam9pbihcIixcIik7XG4gICAgdGhyb3cgRXJyb3IoZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgyNjgsIGNvbXBvbmVudE9yRWxlbWVudCkpO1xuICB9XG4gIGNvbXBvbmVudE9yRWxlbWVudCA9IGZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoKGZpYmVyKTtcbiAgY29tcG9uZW50T3JFbGVtZW50ID1cbiAgICBudWxsICE9PSBjb21wb25lbnRPckVsZW1lbnRcbiAgICAgID8gZmluZEN1cnJlbnRIb3N0RmliZXJJbXBsKGNvbXBvbmVudE9yRWxlbWVudClcbiAgICAgIDogbnVsbDtcbiAgY29tcG9uZW50T3JFbGVtZW50ID1cbiAgICBudWxsID09PSBjb21wb25lbnRPckVsZW1lbnQgPyBudWxsIDogY29tcG9uZW50T3JFbGVtZW50LnN0YXRlTm9kZTtcbiAgcmV0dXJuIGNvbXBvbmVudE9yRWxlbWVudDtcbn07XG52YXIgaW50ZXJuYWxzJGpzY29tcCRpbmxpbmVfMjE2NSA9IHtcbiAgYnVuZGxlVHlwZTogMCxcbiAgdmVyc2lvbjogXCIxOS4wLjBcIixcbiAgcmVuZGVyZXJQYWNrYWdlTmFtZTogXCJyZWFjdC1kb21cIixcbiAgY3VycmVudERpc3BhdGNoZXJSZWY6IFJlYWN0U2hhcmVkSW50ZXJuYWxzLFxuICBmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTogZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUsXG4gIHJlY29uY2lsZXJWZXJzaW9uOiBcIjE5LjAuMFwiXG59O1xuaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pIHtcbiAgdmFyIGhvb2skanNjb21wJGlubGluZV8yMTY2ID0gX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuICBpZiAoXG4gICAgIWhvb2skanNjb21wJGlubGluZV8yMTY2LmlzRGlzYWJsZWQgJiZcbiAgICBob29rJGpzY29tcCRpbmxpbmVfMjE2Ni5zdXBwb3J0c0ZpYmVyXG4gIClcbiAgICB0cnkge1xuICAgICAgKHJlbmRlcmVySUQgPSBob29rJGpzY29tcCRpbmxpbmVfMjE2Ni5pbmplY3QoXG4gICAgICAgIGludGVybmFscyRqc2NvbXAkaW5saW5lXzIxNjVcbiAgICAgICkpLFxuICAgICAgICAoaW5qZWN0ZWRIb29rID0gaG9vayRqc2NvbXAkaW5saW5lXzIxNjYpO1xuICAgIH0gY2F0Y2ggKGVycikge31cbn1cbmV4cG9ydHMuY3JlYXRlUm9vdCA9IGZ1bmN0aW9uIChjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc1ZhbGlkQ29udGFpbmVyKGNvbnRhaW5lcikpIHRocm93IEVycm9yKGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMjk5KSk7XG4gIHZhciBpc1N0cmljdE1vZGUgPSAhMSxcbiAgICBpZGVudGlmaWVyUHJlZml4ID0gXCJcIixcbiAgICBvblVuY2F1Z2h0RXJyb3IgPSBkZWZhdWx0T25VbmNhdWdodEVycm9yLFxuICAgIG9uQ2F1Z2h0RXJyb3IgPSBkZWZhdWx0T25DYXVnaHRFcnJvcixcbiAgICBvblJlY292ZXJhYmxlRXJyb3IgPSBkZWZhdWx0T25SZWNvdmVyYWJsZUVycm9yLFxuICAgIHRyYW5zaXRpb25DYWxsYmFja3MgPSBudWxsO1xuICBudWxsICE9PSBvcHRpb25zICYmXG4gICAgdm9pZCAwICE9PSBvcHRpb25zICYmXG4gICAgKCEwID09PSBvcHRpb25zLnVuc3RhYmxlX3N0cmljdE1vZGUgJiYgKGlzU3RyaWN0TW9kZSA9ICEwKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMuaWRlbnRpZmllclByZWZpeCAmJlxuICAgICAgKGlkZW50aWZpZXJQcmVmaXggPSBvcHRpb25zLmlkZW50aWZpZXJQcmVmaXgpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5vblVuY2F1Z2h0RXJyb3IgJiZcbiAgICAgIChvblVuY2F1Z2h0RXJyb3IgPSBvcHRpb25zLm9uVW5jYXVnaHRFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uQ2F1Z2h0RXJyb3IgJiYgKG9uQ2F1Z2h0RXJyb3IgPSBvcHRpb25zLm9uQ2F1Z2h0RXJyb3IpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5vblJlY292ZXJhYmxlRXJyb3IgJiZcbiAgICAgIChvblJlY292ZXJhYmxlRXJyb3IgPSBvcHRpb25zLm9uUmVjb3ZlcmFibGVFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLnVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MgJiZcbiAgICAgICh0cmFuc2l0aW9uQ2FsbGJhY2tzID0gb3B0aW9ucy51bnN0YWJsZV90cmFuc2l0aW9uQ2FsbGJhY2tzKSk7XG4gIG9wdGlvbnMgPSBjcmVhdGVGaWJlclJvb3QoXG4gICAgY29udGFpbmVyLFxuICAgIDEsXG4gICAgITEsXG4gICAgbnVsbCxcbiAgICBudWxsLFxuICAgIGlzU3RyaWN0TW9kZSxcbiAgICBpZGVudGlmaWVyUHJlZml4LFxuICAgIG9uVW5jYXVnaHRFcnJvcixcbiAgICBvbkNhdWdodEVycm9yLFxuICAgIG9uUmVjb3ZlcmFibGVFcnJvcixcbiAgICB0cmFuc2l0aW9uQ2FsbGJhY2tzLFxuICAgIG51bGxcbiAgKTtcbiAgY29udGFpbmVyW2ludGVybmFsQ29udGFpbmVySW5zdGFuY2VLZXldID0gb3B0aW9ucy5jdXJyZW50O1xuICBsaXN0ZW5Ub0FsbFN1cHBvcnRlZEV2ZW50cyhcbiAgICA4ID09PSBjb250YWluZXIubm9kZVR5cGUgPyBjb250YWluZXIucGFyZW50Tm9kZSA6IGNvbnRhaW5lclxuICApO1xuICByZXR1cm4gbmV3IFJlYWN0RE9NUm9vdChvcHRpb25zKTtcbn07XG5leHBvcnRzLmh5ZHJhdGVSb290ID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgaW5pdGlhbENoaWxkcmVuLCBvcHRpb25zKSB7XG4gIGlmICghaXNWYWxpZENvbnRhaW5lcihjb250YWluZXIpKSB0aHJvdyBFcnJvcihmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDI5OSkpO1xuICB2YXIgaXNTdHJpY3RNb2RlID0gITEsXG4gICAgaWRlbnRpZmllclByZWZpeCA9IFwiXCIsXG4gICAgb25VbmNhdWdodEVycm9yID0gZGVmYXVsdE9uVW5jYXVnaHRFcnJvcixcbiAgICBvbkNhdWdodEVycm9yID0gZGVmYXVsdE9uQ2F1Z2h0RXJyb3IsXG4gICAgb25SZWNvdmVyYWJsZUVycm9yID0gZGVmYXVsdE9uUmVjb3ZlcmFibGVFcnJvcixcbiAgICB0cmFuc2l0aW9uQ2FsbGJhY2tzID0gbnVsbCxcbiAgICBmb3JtU3RhdGUgPSBudWxsO1xuICBudWxsICE9PSBvcHRpb25zICYmXG4gICAgdm9pZCAwICE9PSBvcHRpb25zICYmXG4gICAgKCEwID09PSBvcHRpb25zLnVuc3RhYmxlX3N0cmljdE1vZGUgJiYgKGlzU3RyaWN0TW9kZSA9ICEwKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMuaWRlbnRpZmllclByZWZpeCAmJlxuICAgICAgKGlkZW50aWZpZXJQcmVmaXggPSBvcHRpb25zLmlkZW50aWZpZXJQcmVmaXgpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5vblVuY2F1Z2h0RXJyb3IgJiZcbiAgICAgIChvblVuY2F1Z2h0RXJyb3IgPSBvcHRpb25zLm9uVW5jYXVnaHRFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLm9uQ2F1Z2h0RXJyb3IgJiYgKG9uQ2F1Z2h0RXJyb3IgPSBvcHRpb25zLm9uQ2F1Z2h0RXJyb3IpLFxuICAgIHZvaWQgMCAhPT0gb3B0aW9ucy5vblJlY292ZXJhYmxlRXJyb3IgJiZcbiAgICAgIChvblJlY292ZXJhYmxlRXJyb3IgPSBvcHRpb25zLm9uUmVjb3ZlcmFibGVFcnJvciksXG4gICAgdm9pZCAwICE9PSBvcHRpb25zLnVuc3RhYmxlX3RyYW5zaXRpb25DYWxsYmFja3MgJiZcbiAgICAgICh0cmFuc2l0aW9uQ2FsbGJhY2tzID0gb3B0aW9ucy51bnN0YWJsZV90cmFuc2l0aW9uQ2FsbGJhY2tzKSxcbiAgICB2b2lkIDAgIT09IG9wdGlvbnMuZm9ybVN0YXRlICYmIChmb3JtU3RhdGUgPSBvcHRpb25zLmZvcm1TdGF0ZSkpO1xuICBpbml0aWFsQ2hpbGRyZW4gPSBjcmVhdGVGaWJlclJvb3QoXG4gICAgY29udGFpbmVyLFxuICAgIDEsXG4gICAgITAsXG4gICAgaW5pdGlhbENoaWxkcmVuLFxuICAgIG51bGwgIT0gb3B0aW9ucyA/IG9wdGlvbnMgOiBudWxsLFxuICAgIGlzU3RyaWN0TW9kZSxcbiAgICBpZGVudGlmaWVyUHJlZml4LFxuICAgIG9uVW5jYXVnaHRFcnJvcixcbiAgICBvbkNhdWdodEVycm9yLFxuICAgIG9uUmVjb3ZlcmFibGVFcnJvcixcbiAgICB0cmFuc2l0aW9uQ2FsbGJhY2tzLFxuICAgIGZvcm1TdGF0ZVxuICApO1xuICBpbml0aWFsQ2hpbGRyZW4uY29udGV4dCA9IGdldENvbnRleHRGb3JTdWJ0cmVlKG51bGwpO1xuICBvcHRpb25zID0gaW5pdGlhbENoaWxkcmVuLmN1cnJlbnQ7XG4gIGlzU3RyaWN0TW9kZSA9IHJlcXVlc3RVcGRhdGVMYW5lKCk7XG4gIGlkZW50aWZpZXJQcmVmaXggPSBjcmVhdGVVcGRhdGUoaXNTdHJpY3RNb2RlKTtcbiAgaWRlbnRpZmllclByZWZpeC5jYWxsYmFjayA9IG51bGw7XG4gIGVucXVldWVVcGRhdGUob3B0aW9ucywgaWRlbnRpZmllclByZWZpeCwgaXNTdHJpY3RNb2RlKTtcbiAgaW5pdGlhbENoaWxkcmVuLmN1cnJlbnQubGFuZXMgPSBpc1N0cmljdE1vZGU7XG4gIG1hcmtSb290VXBkYXRlZCQxKGluaXRpYWxDaGlsZHJlbiwgaXNTdHJpY3RNb2RlKTtcbiAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKGluaXRpYWxDaGlsZHJlbik7XG4gIGNvbnRhaW5lcltpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSA9IGluaXRpYWxDaGlsZHJlbi5jdXJyZW50O1xuICBsaXN0ZW5Ub0FsbFN1cHBvcnRlZEV2ZW50cyhjb250YWluZXIpO1xuICByZXR1cm4gbmV3IFJlYWN0RE9NSHlkcmF0aW9uUm9vdChpbml0aWFsQ2hpbGRyZW4pO1xufTtcbmV4cG9ydHMudmVyc2lvbiA9IFwiMTkuMC4wXCI7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS1jbGllbnQucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20tY2xpZW50LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgaWYgKCFjb250ZW50LmxvY2FscyB8fCBtb2R1bGUuaG90LmludmFsaWRhdGUpIHtcbiAgICB2YXIgaXNFcXVhbExvY2FscyA9IGZ1bmN0aW9uIGlzRXF1YWxMb2NhbHMoYSwgYiwgaXNOYW1lZEV4cG9ydCkge1xuICBpZiAoIWEgJiYgYiB8fCBhICYmICFiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwO1xuICBmb3IgKHAgaW4gYSkge1xuICAgIGlmIChpc05hbWVkRXhwb3J0ICYmIHAgPT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYVtwXSAhPT0gYltwXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKHAgaW4gYikge1xuICAgIGlmIChpc05hbWVkRXhwb3J0ICYmIHAgPT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoIWFbcF0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuICAgIHZhciBpc05hbWVkRXhwb3J0ID0gIWNvbnRlbnQubG9jYWxzO1xuICAgIHZhciBvbGRMb2NhbHMgPSBpc05hbWVkRXhwb3J0ID8gbmFtZWRFeHBvcnQgOiBjb250ZW50LmxvY2FscztcblxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFxuICAgICAgXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLnNjc3NcIixcbiAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc0VxdWFsTG9jYWxzKG9sZExvY2FscywgaXNOYW1lZEV4cG9ydCA/IG5hbWVkRXhwb3J0IDogY29udGVudC5sb2NhbHMsIGlzTmFtZWRFeHBvcnQpKSB7XG4gICAgICAgICAgICAgICAgbW9kdWxlLmhvdC5pbnZhbGlkYXRlKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBvbGRMb2NhbHMgPSBpc05hbWVkRXhwb3J0ID8gbmFtZWRFeHBvcnQgOiBjb250ZW50LmxvY2FscztcblxuICAgICAgICAgICAgICB1cGRhdGUoY29udGVudCk7XG4gICAgICB9XG4gICAgKVxuICB9XG5cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbn1cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gcHVzaChoZWFwLCBub2RlKSB7XG4gIHZhciBpbmRleCA9IGhlYXAubGVuZ3RoO1xuICBoZWFwLnB1c2gobm9kZSk7XG4gIGE6IGZvciAoOyAwIDwgaW5kZXg7ICkge1xuICAgIHZhciBwYXJlbnRJbmRleCA9IChpbmRleCAtIDEpID4+PiAxLFxuICAgICAgcGFyZW50ID0gaGVhcFtwYXJlbnRJbmRleF07XG4gICAgaWYgKDAgPCBjb21wYXJlKHBhcmVudCwgbm9kZSkpXG4gICAgICAoaGVhcFtwYXJlbnRJbmRleF0gPSBub2RlKSwgKGhlYXBbaW5kZXhdID0gcGFyZW50KSwgKGluZGV4ID0gcGFyZW50SW5kZXgpO1xuICAgIGVsc2UgYnJlYWsgYTtcbiAgfVxufVxuZnVuY3Rpb24gcGVlayhoZWFwKSB7XG4gIHJldHVybiAwID09PSBoZWFwLmxlbmd0aCA/IG51bGwgOiBoZWFwWzBdO1xufVxuZnVuY3Rpb24gcG9wKGhlYXApIHtcbiAgaWYgKDAgPT09IGhlYXAubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgdmFyIGZpcnN0ID0gaGVhcFswXSxcbiAgICBsYXN0ID0gaGVhcC5wb3AoKTtcbiAgaWYgKGxhc3QgIT09IGZpcnN0KSB7XG4gICAgaGVhcFswXSA9IGxhc3Q7XG4gICAgYTogZm9yIChcbiAgICAgIHZhciBpbmRleCA9IDAsIGxlbmd0aCA9IGhlYXAubGVuZ3RoLCBoYWxmTGVuZ3RoID0gbGVuZ3RoID4+PiAxO1xuICAgICAgaW5kZXggPCBoYWxmTGVuZ3RoO1xuXG4gICAgKSB7XG4gICAgICB2YXIgbGVmdEluZGV4ID0gMiAqIChpbmRleCArIDEpIC0gMSxcbiAgICAgICAgbGVmdCA9IGhlYXBbbGVmdEluZGV4XSxcbiAgICAgICAgcmlnaHRJbmRleCA9IGxlZnRJbmRleCArIDEsXG4gICAgICAgIHJpZ2h0ID0gaGVhcFtyaWdodEluZGV4XTtcbiAgICAgIGlmICgwID4gY29tcGFyZShsZWZ0LCBsYXN0KSlcbiAgICAgICAgcmlnaHRJbmRleCA8IGxlbmd0aCAmJiAwID4gY29tcGFyZShyaWdodCwgbGVmdClcbiAgICAgICAgICA/ICgoaGVhcFtpbmRleF0gPSByaWdodCksXG4gICAgICAgICAgICAoaGVhcFtyaWdodEluZGV4XSA9IGxhc3QpLFxuICAgICAgICAgICAgKGluZGV4ID0gcmlnaHRJbmRleCkpXG4gICAgICAgICAgOiAoKGhlYXBbaW5kZXhdID0gbGVmdCksXG4gICAgICAgICAgICAoaGVhcFtsZWZ0SW5kZXhdID0gbGFzdCksXG4gICAgICAgICAgICAoaW5kZXggPSBsZWZ0SW5kZXgpKTtcbiAgICAgIGVsc2UgaWYgKHJpZ2h0SW5kZXggPCBsZW5ndGggJiYgMCA+IGNvbXBhcmUocmlnaHQsIGxhc3QpKVxuICAgICAgICAoaGVhcFtpbmRleF0gPSByaWdodCksIChoZWFwW3JpZ2h0SW5kZXhdID0gbGFzdCksIChpbmRleCA9IHJpZ2h0SW5kZXgpO1xuICAgICAgZWxzZSBicmVhayBhO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmlyc3Q7XG59XG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgdmFyIGRpZmYgPSBhLnNvcnRJbmRleCAtIGIuc29ydEluZGV4O1xuICByZXR1cm4gMCAhPT0gZGlmZiA/IGRpZmYgOiBhLmlkIC0gYi5pZDtcbn1cbmV4cG9ydHMudW5zdGFibGVfbm93ID0gdm9pZCAwO1xuaWYgKFwib2JqZWN0XCIgPT09IHR5cGVvZiBwZXJmb3JtYW5jZSAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpIHtcbiAgdmFyIGxvY2FsUGVyZm9ybWFuY2UgPSBwZXJmb3JtYW5jZTtcbiAgZXhwb3J0cy51bnN0YWJsZV9ub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGxvY2FsUGVyZm9ybWFuY2Uubm93KCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgbG9jYWxEYXRlID0gRGF0ZSxcbiAgICBpbml0aWFsVGltZSA9IGxvY2FsRGF0ZS5ub3coKTtcbiAgZXhwb3J0cy51bnN0YWJsZV9ub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGxvY2FsRGF0ZS5ub3coKSAtIGluaXRpYWxUaW1lO1xuICB9O1xufVxudmFyIHRhc2tRdWV1ZSA9IFtdLFxuICB0aW1lclF1ZXVlID0gW10sXG4gIHRhc2tJZENvdW50ZXIgPSAxLFxuICBjdXJyZW50VGFzayA9IG51bGwsXG4gIGN1cnJlbnRQcmlvcml0eUxldmVsID0gMyxcbiAgaXNQZXJmb3JtaW5nV29yayA9ICExLFxuICBpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCA9ICExLFxuICBpc0hvc3RUaW1lb3V0U2NoZWR1bGVkID0gITEsXG4gIGxvY2FsU2V0VGltZW91dCA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHNldFRpbWVvdXQgPyBzZXRUaW1lb3V0IDogbnVsbCxcbiAgbG9jYWxDbGVhclRpbWVvdXQgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjbGVhclRpbWVvdXQgPyBjbGVhclRpbWVvdXQgOiBudWxsLFxuICBsb2NhbFNldEltbWVkaWF0ZSA9IFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBzZXRJbW1lZGlhdGUgPyBzZXRJbW1lZGlhdGUgOiBudWxsO1xuZnVuY3Rpb24gYWR2YW5jZVRpbWVycyhjdXJyZW50VGltZSkge1xuICBmb3IgKHZhciB0aW1lciA9IHBlZWsodGltZXJRdWV1ZSk7IG51bGwgIT09IHRpbWVyOyApIHtcbiAgICBpZiAobnVsbCA9PT0gdGltZXIuY2FsbGJhY2spIHBvcCh0aW1lclF1ZXVlKTtcbiAgICBlbHNlIGlmICh0aW1lci5zdGFydFRpbWUgPD0gY3VycmVudFRpbWUpXG4gICAgICBwb3AodGltZXJRdWV1ZSksXG4gICAgICAgICh0aW1lci5zb3J0SW5kZXggPSB0aW1lci5leHBpcmF0aW9uVGltZSksXG4gICAgICAgIHB1c2godGFza1F1ZXVlLCB0aW1lcik7XG4gICAgZWxzZSBicmVhaztcbiAgICB0aW1lciA9IHBlZWsodGltZXJRdWV1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoY3VycmVudFRpbWUpIHtcbiAgaXNIb3N0VGltZW91dFNjaGVkdWxlZCA9ICExO1xuICBhZHZhbmNlVGltZXJzKGN1cnJlbnRUaW1lKTtcbiAgaWYgKCFpc0hvc3RDYWxsYmFja1NjaGVkdWxlZClcbiAgICBpZiAobnVsbCAhPT0gcGVlayh0YXNrUXVldWUpKVxuICAgICAgKGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkID0gITApLCByZXF1ZXN0SG9zdENhbGxiYWNrKCk7XG4gICAgZWxzZSB7XG4gICAgICB2YXIgZmlyc3RUaW1lciA9IHBlZWsodGltZXJRdWV1ZSk7XG4gICAgICBudWxsICE9PSBmaXJzdFRpbWVyICYmXG4gICAgICAgIHJlcXVlc3RIb3N0VGltZW91dChoYW5kbGVUaW1lb3V0LCBmaXJzdFRpbWVyLnN0YXJ0VGltZSAtIGN1cnJlbnRUaW1lKTtcbiAgICB9XG59XG52YXIgaXNNZXNzYWdlTG9vcFJ1bm5pbmcgPSAhMSxcbiAgdGFza1RpbWVvdXRJRCA9IC0xLFxuICBmcmFtZUludGVydmFsID0gNSxcbiAgc3RhcnRUaW1lID0gLTE7XG5mdW5jdGlvbiBzaG91bGRZaWVsZFRvSG9zdCgpIHtcbiAgcmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCkgLSBzdGFydFRpbWUgPCBmcmFtZUludGVydmFsID8gITEgOiAhMDtcbn1cbmZ1bmN0aW9uIHBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSgpIHtcbiAgaWYgKGlzTWVzc2FnZUxvb3BSdW5uaW5nKSB7XG4gICAgdmFyIGN1cnJlbnRUaW1lID0gZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcbiAgICBzdGFydFRpbWUgPSBjdXJyZW50VGltZTtcbiAgICB2YXIgaGFzTW9yZVdvcmsgPSAhMDtcbiAgICB0cnkge1xuICAgICAgYToge1xuICAgICAgICBpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCA9ICExO1xuICAgICAgICBpc0hvc3RUaW1lb3V0U2NoZWR1bGVkICYmXG4gICAgICAgICAgKChpc0hvc3RUaW1lb3V0U2NoZWR1bGVkID0gITEpLFxuICAgICAgICAgIGxvY2FsQ2xlYXJUaW1lb3V0KHRhc2tUaW1lb3V0SUQpLFxuICAgICAgICAgICh0YXNrVGltZW91dElEID0gLTEpKTtcbiAgICAgICAgaXNQZXJmb3JtaW5nV29yayA9ICEwO1xuICAgICAgICB2YXIgcHJldmlvdXNQcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYjoge1xuICAgICAgICAgICAgYWR2YW5jZVRpbWVycyhjdXJyZW50VGltZSk7XG4gICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICBjdXJyZW50VGFzayA9IHBlZWsodGFza1F1ZXVlKTtcbiAgICAgICAgICAgICAgbnVsbCAhPT0gY3VycmVudFRhc2sgJiZcbiAgICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgICBjdXJyZW50VGFzay5leHBpcmF0aW9uVGltZSA+IGN1cnJlbnRUaW1lICYmIHNob3VsZFlpZWxkVG9Ib3N0KClcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGN1cnJlbnRUYXNrLmNhbGxiYWNrO1xuICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50VGFzay5jYWxsYmFjayA9IG51bGw7XG4gICAgICAgICAgICAgICAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBjdXJyZW50VGFzay5wcmlvcml0eUxldmVsO1xuICAgICAgICAgICAgICAgIHZhciBjb250aW51YXRpb25DYWxsYmFjayA9IGNhbGxiYWNrKFxuICAgICAgICAgICAgICAgICAgY3VycmVudFRhc2suZXhwaXJhdGlvblRpbWUgPD0gY3VycmVudFRpbWVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRUaW1lID0gZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcbiAgICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY29udGludWF0aW9uQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRUYXNrLmNhbGxiYWNrID0gY29udGludWF0aW9uQ2FsbGJhY2s7XG4gICAgICAgICAgICAgICAgICBhZHZhbmNlVGltZXJzKGN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgIGhhc01vcmVXb3JrID0gITA7XG4gICAgICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJyZW50VGFzayA9PT0gcGVlayh0YXNrUXVldWUpICYmIHBvcCh0YXNrUXVldWUpO1xuICAgICAgICAgICAgICAgIGFkdmFuY2VUaW1lcnMoY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgICB9IGVsc2UgcG9wKHRhc2tRdWV1ZSk7XG4gICAgICAgICAgICAgIGN1cnJlbnRUYXNrID0gcGVlayh0YXNrUXVldWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG51bGwgIT09IGN1cnJlbnRUYXNrKSBoYXNNb3JlV29yayA9ICEwO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBmaXJzdFRpbWVyID0gcGVlayh0aW1lclF1ZXVlKTtcbiAgICAgICAgICAgICAgbnVsbCAhPT0gZmlyc3RUaW1lciAmJlxuICAgICAgICAgICAgICAgIHJlcXVlc3RIb3N0VGltZW91dChcbiAgICAgICAgICAgICAgICAgIGhhbmRsZVRpbWVvdXQsXG4gICAgICAgICAgICAgICAgICBmaXJzdFRpbWVyLnN0YXJ0VGltZSAtIGN1cnJlbnRUaW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgaGFzTW9yZVdvcmsgPSAhMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAoY3VycmVudFRhc2sgPSBudWxsKSxcbiAgICAgICAgICAgIChjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByZXZpb3VzUHJpb3JpdHlMZXZlbCksXG4gICAgICAgICAgICAoaXNQZXJmb3JtaW5nV29yayA9ICExKTtcbiAgICAgICAgfVxuICAgICAgICBoYXNNb3JlV29yayA9IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgaGFzTW9yZVdvcmtcbiAgICAgICAgPyBzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSgpXG4gICAgICAgIDogKGlzTWVzc2FnZUxvb3BSdW5uaW5nID0gITEpO1xuICAgIH1cbiAgfVxufVxudmFyIHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lO1xuaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGxvY2FsU2V0SW1tZWRpYXRlKVxuICBzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBsb2NhbFNldEltbWVkaWF0ZShwZXJmb3JtV29ya1VudGlsRGVhZGxpbmUpO1xuICB9O1xuZWxzZSBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIE1lc3NhZ2VDaGFubmVsKSB7XG4gIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCksXG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gcGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lO1xuICBzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBwb3J0LnBvc3RNZXNzYWdlKG51bGwpO1xuICB9O1xufSBlbHNlXG4gIHNjaGVkdWxlUGVyZm9ybVdvcmtVbnRpbERlYWRsaW5lID0gZnVuY3Rpb24gKCkge1xuICAgIGxvY2FsU2V0VGltZW91dChwZXJmb3JtV29ya1VudGlsRGVhZGxpbmUsIDApO1xuICB9O1xuZnVuY3Rpb24gcmVxdWVzdEhvc3RDYWxsYmFjaygpIHtcbiAgaXNNZXNzYWdlTG9vcFJ1bm5pbmcgfHxcbiAgICAoKGlzTWVzc2FnZUxvb3BSdW5uaW5nID0gITApLCBzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSgpKTtcbn1cbmZ1bmN0aW9uIHJlcXVlc3RIb3N0VGltZW91dChjYWxsYmFjaywgbXMpIHtcbiAgdGFza1RpbWVvdXRJRCA9IGxvY2FsU2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgY2FsbGJhY2soZXhwb3J0cy51bnN0YWJsZV9ub3coKSk7XG4gIH0sIG1zKTtcbn1cbmV4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5ID0gNTtcbmV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkgPSAxO1xuZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eSA9IDQ7XG5leHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5ID0gMztcbmV4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nID0gbnVsbDtcbmV4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkgPSAyO1xuZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayA9IGZ1bmN0aW9uICh0YXNrKSB7XG4gIHRhc2suY2FsbGJhY2sgPSBudWxsO1xufTtcbmV4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIGlzSG9zdENhbGxiYWNrU2NoZWR1bGVkIHx8XG4gICAgaXNQZXJmb3JtaW5nV29yayB8fFxuICAgICgoaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgPSAhMCksIHJlcXVlc3RIb3N0Q2FsbGJhY2soKSk7XG59O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSA9IGZ1bmN0aW9uIChmcHMpIHtcbiAgMCA+IGZwcyB8fCAxMjUgPCBmcHNcbiAgICA/IGNvbnNvbGUuZXJyb3IoXG4gICAgICAgIFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCJcbiAgICAgIClcbiAgICA6IChmcmFtZUludGVydmFsID0gMCA8IGZwcyA/IE1hdGguZmxvb3IoMWUzIC8gZnBzKSA6IDUpO1xufTtcbmV4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbn07XG5leHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcGVlayh0YXNrUXVldWUpO1xufTtcbmV4cG9ydHMudW5zdGFibGVfbmV4dCA9IGZ1bmN0aW9uIChldmVudEhhbmRsZXIpIHtcbiAgc3dpdGNoIChjdXJyZW50UHJpb3JpdHlMZXZlbCkge1xuICAgIGNhc2UgMTpcbiAgICBjYXNlIDI6XG4gICAgY2FzZSAzOlxuICAgICAgdmFyIHByaW9yaXR5TGV2ZWwgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgfVxuICB2YXIgcHJldmlvdXNQcmlvcml0eUxldmVsID0gY3VycmVudFByaW9yaXR5TGV2ZWw7XG4gIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJpb3JpdHlMZXZlbDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZXZlbnRIYW5kbGVyKCk7XG4gIH0gZmluYWxseSB7XG4gICAgY3VycmVudFByaW9yaXR5TGV2ZWwgPSBwcmV2aW91c1ByaW9yaXR5TGV2ZWw7XG4gIH1cbn07XG5leHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uID0gZnVuY3Rpb24gKCkge307XG5leHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludCA9IGZ1bmN0aW9uICgpIHt9O1xuZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkgPSBmdW5jdGlvbiAocHJpb3JpdHlMZXZlbCwgZXZlbnRIYW5kbGVyKSB7XG4gIHN3aXRjaCAocHJpb3JpdHlMZXZlbCkge1xuICAgIGNhc2UgMTpcbiAgICBjYXNlIDI6XG4gICAgY2FzZSAzOlxuICAgIGNhc2UgNDpcbiAgICBjYXNlIDU6XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcHJpb3JpdHlMZXZlbCA9IDM7XG4gIH1cbiAgdmFyIHByZXZpb3VzUHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRQcmlvcml0eUxldmVsO1xuICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByaW9yaXR5TGV2ZWw7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGV2ZW50SGFuZGxlcigpO1xuICB9IGZpbmFsbHkge1xuICAgIGN1cnJlbnRQcmlvcml0eUxldmVsID0gcHJldmlvdXNQcmlvcml0eUxldmVsO1xuICB9XG59O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrID0gZnVuY3Rpb24gKFxuICBwcmlvcml0eUxldmVsLFxuICBjYWxsYmFjayxcbiAgb3B0aW9uc1xuKSB7XG4gIHZhciBjdXJyZW50VGltZSA9IGV4cG9ydHMudW5zdGFibGVfbm93KCk7XG4gIFwib2JqZWN0XCIgPT09IHR5cGVvZiBvcHRpb25zICYmIG51bGwgIT09IG9wdGlvbnNcbiAgICA/ICgob3B0aW9ucyA9IG9wdGlvbnMuZGVsYXkpLFxuICAgICAgKG9wdGlvbnMgPVxuICAgICAgICBcIm51bWJlclwiID09PSB0eXBlb2Ygb3B0aW9ucyAmJiAwIDwgb3B0aW9uc1xuICAgICAgICAgID8gY3VycmVudFRpbWUgKyBvcHRpb25zXG4gICAgICAgICAgOiBjdXJyZW50VGltZSkpXG4gICAgOiAob3B0aW9ucyA9IGN1cnJlbnRUaW1lKTtcbiAgc3dpdGNoIChwcmlvcml0eUxldmVsKSB7XG4gICAgY2FzZSAxOlxuICAgICAgdmFyIHRpbWVvdXQgPSAtMTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHRpbWVvdXQgPSAyNTA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICB0aW1lb3V0ID0gMTA3Mzc0MTgyMztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHRpbWVvdXQgPSAxZTQ7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGltZW91dCA9IDVlMztcbiAgfVxuICB0aW1lb3V0ID0gb3B0aW9ucyArIHRpbWVvdXQ7XG4gIHByaW9yaXR5TGV2ZWwgPSB7XG4gICAgaWQ6IHRhc2tJZENvdW50ZXIrKyxcbiAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgcHJpb3JpdHlMZXZlbDogcHJpb3JpdHlMZXZlbCxcbiAgICBzdGFydFRpbWU6IG9wdGlvbnMsXG4gICAgZXhwaXJhdGlvblRpbWU6IHRpbWVvdXQsXG4gICAgc29ydEluZGV4OiAtMVxuICB9O1xuICBvcHRpb25zID4gY3VycmVudFRpbWVcbiAgICA/ICgocHJpb3JpdHlMZXZlbC5zb3J0SW5kZXggPSBvcHRpb25zKSxcbiAgICAgIHB1c2godGltZXJRdWV1ZSwgcHJpb3JpdHlMZXZlbCksXG4gICAgICBudWxsID09PSBwZWVrKHRhc2tRdWV1ZSkgJiZcbiAgICAgICAgcHJpb3JpdHlMZXZlbCA9PT0gcGVlayh0aW1lclF1ZXVlKSAmJlxuICAgICAgICAoaXNIb3N0VGltZW91dFNjaGVkdWxlZFxuICAgICAgICAgID8gKGxvY2FsQ2xlYXJUaW1lb3V0KHRhc2tUaW1lb3V0SUQpLCAodGFza1RpbWVvdXRJRCA9IC0xKSlcbiAgICAgICAgICA6IChpc0hvc3RUaW1lb3V0U2NoZWR1bGVkID0gITApLFxuICAgICAgICByZXF1ZXN0SG9zdFRpbWVvdXQoaGFuZGxlVGltZW91dCwgb3B0aW9ucyAtIGN1cnJlbnRUaW1lKSkpXG4gICAgOiAoKHByaW9yaXR5TGV2ZWwuc29ydEluZGV4ID0gdGltZW91dCksXG4gICAgICBwdXNoKHRhc2tRdWV1ZSwgcHJpb3JpdHlMZXZlbCksXG4gICAgICBpc0hvc3RDYWxsYmFja1NjaGVkdWxlZCB8fFxuICAgICAgICBpc1BlcmZvcm1pbmdXb3JrIHx8XG4gICAgICAgICgoaXNIb3N0Q2FsbGJhY2tTY2hlZHVsZWQgPSAhMCksIHJlcXVlc3RIb3N0Q2FsbGJhY2soKSkpO1xuICByZXR1cm4gcHJpb3JpdHlMZXZlbDtcbn07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkID0gc2hvdWxkWWllbGRUb0hvc3Q7XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjayA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB2YXIgcGFyZW50UHJpb3JpdHlMZXZlbCA9IGN1cnJlbnRQcmlvcml0eUxldmVsO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcmV2aW91c1ByaW9yaXR5TGV2ZWwgPSBjdXJyZW50UHJpb3JpdHlMZXZlbDtcbiAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHBhcmVudFByaW9yaXR5TGV2ZWw7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50UHJpb3JpdHlMZXZlbCA9IHByZXZpb3VzUHJpb3JpdHlMZXZlbDtcbiAgICB9XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cblwidXNlIHN0cmljdFwiO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC50cmFuc2l0aW9uYWwuZWxlbWVudFwiKSxcbiAgUkVBQ1RfUE9SVEFMX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLFxuICBSRUFDVF9GUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLFxuICBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLFxuICBSRUFDVF9QUk9GSUxFUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLFxuICBSRUFDVF9DT05TVU1FUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnN1bWVyXCIpLFxuICBSRUFDVF9DT05URVhUX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxcbiAgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxcbiAgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxcbiAgUkVBQ1RfTUVNT19UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksXG4gIFJFQUNUX0xBWllfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLFxuICBNQVlCRV9JVEVSQVRPUl9TWU1CT0wgPSBTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgaWYgKG51bGwgPT09IG1heWJlSXRlcmFibGUgfHwgXCJvYmplY3RcIiAhPT0gdHlwZW9mIG1heWJlSXRlcmFibGUpIHJldHVybiBudWxsO1xuICBtYXliZUl0ZXJhYmxlID1cbiAgICAoTUFZQkVfSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbTUFZQkVfSVRFUkFUT1JfU1lNQk9MXSkgfHxcbiAgICBtYXliZUl0ZXJhYmxlW1wiQEBpdGVyYXRvclwiXTtcbiAgcmV0dXJuIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG1heWJlSXRlcmFibGUgPyBtYXliZUl0ZXJhYmxlIDogbnVsbDtcbn1cbnZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHtcbiAgICBpc01vdW50ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAhMTtcbiAgICB9LFxuICAgIGVucXVldWVGb3JjZVVwZGF0ZTogZnVuY3Rpb24gKCkge30sXG4gICAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKCkge30sXG4gICAgZW5xdWV1ZVNldFN0YXRlOiBmdW5jdGlvbiAoKSB7fVxuICB9LFxuICBhc3NpZ24gPSBPYmplY3QuYXNzaWduLFxuICBlbXB0eU9iamVjdCA9IHt9O1xuZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG59XG5Db21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQgPSB7fTtcbkNvbXBvbmVudC5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbiAocGFydGlhbFN0YXRlLCBjYWxsYmFjaykge1xuICBpZiAoXG4gICAgXCJvYmplY3RcIiAhPT0gdHlwZW9mIHBhcnRpYWxTdGF0ZSAmJlxuICAgIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHBhcnRpYWxTdGF0ZSAmJlxuICAgIG51bGwgIT0gcGFydGlhbFN0YXRlXG4gIClcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIFwidGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCJcbiAgICApO1xuICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsIHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2ssIFwic2V0U3RhdGVcIik7XG59O1xuQ29tcG9uZW50LnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsIGNhbGxiYWNrLCBcImZvcmNlVXBkYXRlXCIpO1xufTtcbmZ1bmN0aW9uIENvbXBvbmVudER1bW15KCkge31cbkNvbXBvbmVudER1bW15LnByb3RvdHlwZSA9IENvbXBvbmVudC5wcm90b3R5cGU7XG5mdW5jdGlvbiBQdXJlQ29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG59XG52YXIgcHVyZUNvbXBvbmVudFByb3RvdHlwZSA9IChQdXJlQ29tcG9uZW50LnByb3RvdHlwZSA9IG5ldyBDb21wb25lbnREdW1teSgpKTtcbnB1cmVDb21wb25lbnRQcm90b3R5cGUuY29uc3RydWN0b3IgPSBQdXJlQ29tcG9uZW50O1xuYXNzaWduKHB1cmVDb21wb25lbnRQcm90b3R5cGUsIENvbXBvbmVudC5wcm90b3R5cGUpO1xucHVyZUNvbXBvbmVudFByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudCA9ICEwO1xudmFyIGlzQXJyYXlJbXBsID0gQXJyYXkuaXNBcnJheSxcbiAgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPSB7IEg6IG51bGwsIEE6IG51bGwsIFQ6IG51bGwsIFM6IG51bGwgfSxcbiAgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gUmVhY3RFbGVtZW50KHR5cGUsIGtleSwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpIHtcbiAgc2VsZiA9IHByb3BzLnJlZjtcbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfRUxFTUVOVF9UWVBFLFxuICAgIHR5cGU6IHR5cGUsXG4gICAga2V5OiBrZXksXG4gICAgcmVmOiB2b2lkIDAgIT09IHNlbGYgPyBzZWxmIDogbnVsbCxcbiAgICBwcm9wczogcHJvcHNcbiAgfTtcbn1cbmZ1bmN0aW9uIGNsb25lQW5kUmVwbGFjZUtleShvbGRFbGVtZW50LCBuZXdLZXkpIHtcbiAgcmV0dXJuIFJlYWN0RWxlbWVudChcbiAgICBvbGRFbGVtZW50LnR5cGUsXG4gICAgbmV3S2V5LFxuICAgIHZvaWQgMCxcbiAgICB2b2lkIDAsXG4gICAgdm9pZCAwLFxuICAgIG9sZEVsZW1lbnQucHJvcHNcbiAgKTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gKFxuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBvYmplY3QgJiZcbiAgICBudWxsICE9PSBvYmplY3QgJiZcbiAgICBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRVxuICApO1xufVxuZnVuY3Rpb24gZXNjYXBlKGtleSkge1xuICB2YXIgZXNjYXBlckxvb2t1cCA9IHsgXCI9XCI6IFwiPTBcIiwgXCI6XCI6IFwiPTJcIiB9O1xuICByZXR1cm4gKFxuICAgIFwiJFwiICtcbiAgICBrZXkucmVwbGFjZSgvWz06XS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgIHJldHVybiBlc2NhcGVyTG9va3VwW21hdGNoXTtcbiAgICB9KVxuICApO1xufVxudmFyIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4ID0gL1xcLysvZztcbmZ1bmN0aW9uIGdldEVsZW1lbnRLZXkoZWxlbWVudCwgaW5kZXgpIHtcbiAgcmV0dXJuIFwib2JqZWN0XCIgPT09IHR5cGVvZiBlbGVtZW50ICYmIG51bGwgIT09IGVsZW1lbnQgJiYgbnVsbCAhPSBlbGVtZW50LmtleVxuICAgID8gZXNjYXBlKFwiXCIgKyBlbGVtZW50LmtleSlcbiAgICA6IGluZGV4LnRvU3RyaW5nKDM2KTtcbn1cbmZ1bmN0aW9uIG5vb3AkMSgpIHt9XG5mdW5jdGlvbiByZXNvbHZlVGhlbmFibGUodGhlbmFibGUpIHtcbiAgc3dpdGNoICh0aGVuYWJsZS5zdGF0dXMpIHtcbiAgICBjYXNlIFwiZnVsZmlsbGVkXCI6XG4gICAgICByZXR1cm4gdGhlbmFibGUudmFsdWU7XG4gICAgY2FzZSBcInJlamVjdGVkXCI6XG4gICAgICB0aHJvdyB0aGVuYWJsZS5yZWFzb247XG4gICAgZGVmYXVsdDpcbiAgICAgIHN3aXRjaCAoXG4gICAgICAgIChcInN0cmluZ1wiID09PSB0eXBlb2YgdGhlbmFibGUuc3RhdHVzXG4gICAgICAgICAgPyB0aGVuYWJsZS50aGVuKG5vb3AkMSwgbm9vcCQxKVxuICAgICAgICAgIDogKCh0aGVuYWJsZS5zdGF0dXMgPSBcInBlbmRpbmdcIiksXG4gICAgICAgICAgICB0aGVuYWJsZS50aGVuKFxuICAgICAgICAgICAgICBmdW5jdGlvbiAoZnVsZmlsbGVkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBcInBlbmRpbmdcIiA9PT0gdGhlbmFibGUuc3RhdHVzICYmXG4gICAgICAgICAgICAgICAgICAoKHRoZW5hYmxlLnN0YXR1cyA9IFwiZnVsZmlsbGVkXCIpLFxuICAgICAgICAgICAgICAgICAgKHRoZW5hYmxlLnZhbHVlID0gZnVsZmlsbGVkVmFsdWUpKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgXCJwZW5kaW5nXCIgPT09IHRoZW5hYmxlLnN0YXR1cyAmJlxuICAgICAgICAgICAgICAgICAgKCh0aGVuYWJsZS5zdGF0dXMgPSBcInJlamVjdGVkXCIpLCAodGhlbmFibGUucmVhc29uID0gZXJyb3IpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKSksXG4gICAgICAgIHRoZW5hYmxlLnN0YXR1cylcbiAgICAgICkge1xuICAgICAgICBjYXNlIFwiZnVsZmlsbGVkXCI6XG4gICAgICAgICAgcmV0dXJuIHRoZW5hYmxlLnZhbHVlO1xuICAgICAgICBjYXNlIFwicmVqZWN0ZWRcIjpcbiAgICAgICAgICB0aHJvdyB0aGVuYWJsZS5yZWFzb247XG4gICAgICB9XG4gIH1cbiAgdGhyb3cgdGhlbmFibGU7XG59XG5mdW5jdGlvbiBtYXBJbnRvQXJyYXkoY2hpbGRyZW4sIGFycmF5LCBlc2NhcGVkUHJlZml4LCBuYW1lU29GYXIsIGNhbGxiYWNrKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkcmVuO1xuICBpZiAoXCJ1bmRlZmluZWRcIiA9PT0gdHlwZSB8fCBcImJvb2xlYW5cIiA9PT0gdHlwZSkgY2hpbGRyZW4gPSBudWxsO1xuICB2YXIgaW52b2tlQ2FsbGJhY2sgPSAhMTtcbiAgaWYgKG51bGwgPT09IGNoaWxkcmVuKSBpbnZva2VDYWxsYmFjayA9ICEwO1xuICBlbHNlXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwiYmlnaW50XCI6XG4gICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgIGludm9rZUNhbGxiYWNrID0gITA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICBzd2l0Y2ggKGNoaWxkcmVuLiQkdHlwZW9mKSB7XG4gICAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICAgIGludm9rZUNhbGxiYWNrID0gITA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIChpbnZva2VDYWxsYmFjayA9IGNoaWxkcmVuLl9pbml0KSxcbiAgICAgICAgICAgICAgbWFwSW50b0FycmF5KFxuICAgICAgICAgICAgICAgIGludm9rZUNhbGxiYWNrKGNoaWxkcmVuLl9wYXlsb2FkKSxcbiAgICAgICAgICAgICAgICBhcnJheSxcbiAgICAgICAgICAgICAgICBlc2NhcGVkUHJlZml4LFxuICAgICAgICAgICAgICAgIG5hbWVTb0ZhcixcbiAgICAgICAgICAgICAgICBjYWxsYmFja1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuICBpZiAoaW52b2tlQ2FsbGJhY2spXG4gICAgcmV0dXJuIChcbiAgICAgIChjYWxsYmFjayA9IGNhbGxiYWNrKGNoaWxkcmVuKSksXG4gICAgICAoaW52b2tlQ2FsbGJhY2sgPVxuICAgICAgICBcIlwiID09PSBuYW1lU29GYXIgPyBcIi5cIiArIGdldEVsZW1lbnRLZXkoY2hpbGRyZW4sIDApIDogbmFtZVNvRmFyKSxcbiAgICAgIGlzQXJyYXlJbXBsKGNhbGxiYWNrKVxuICAgICAgICA/ICgoZXNjYXBlZFByZWZpeCA9IFwiXCIpLFxuICAgICAgICAgIG51bGwgIT0gaW52b2tlQ2FsbGJhY2sgJiZcbiAgICAgICAgICAgIChlc2NhcGVkUHJlZml4ID1cbiAgICAgICAgICAgICAgaW52b2tlQ2FsbGJhY2sucmVwbGFjZSh1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCwgXCIkJi9cIikgKyBcIi9cIiksXG4gICAgICAgICAgbWFwSW50b0FycmF5KGNhbGxiYWNrLCBhcnJheSwgZXNjYXBlZFByZWZpeCwgXCJcIiwgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgIH0pKVxuICAgICAgICA6IG51bGwgIT0gY2FsbGJhY2sgJiZcbiAgICAgICAgICAoaXNWYWxpZEVsZW1lbnQoY2FsbGJhY2spICYmXG4gICAgICAgICAgICAoY2FsbGJhY2sgPSBjbG9uZUFuZFJlcGxhY2VLZXkoXG4gICAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgICBlc2NhcGVkUHJlZml4ICtcbiAgICAgICAgICAgICAgICAobnVsbCA9PSBjYWxsYmFjay5rZXkgfHxcbiAgICAgICAgICAgICAgICAoY2hpbGRyZW4gJiYgY2hpbGRyZW4ua2V5ID09PSBjYWxsYmFjay5rZXkpXG4gICAgICAgICAgICAgICAgICA/IFwiXCJcbiAgICAgICAgICAgICAgICAgIDogKFwiXCIgKyBjYWxsYmFjay5rZXkpLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsXG4gICAgICAgICAgICAgICAgICAgICAgXCIkJi9cIlxuICAgICAgICAgICAgICAgICAgICApICsgXCIvXCIpICtcbiAgICAgICAgICAgICAgICBpbnZva2VDYWxsYmFja1xuICAgICAgICAgICAgKSksXG4gICAgICAgICAgYXJyYXkucHVzaChjYWxsYmFjaykpLFxuICAgICAgMVxuICAgICk7XG4gIGludm9rZUNhbGxiYWNrID0gMDtcbiAgdmFyIG5leHROYW1lUHJlZml4ID0gXCJcIiA9PT0gbmFtZVNvRmFyID8gXCIuXCIgOiBuYW1lU29GYXIgKyBcIjpcIjtcbiAgaWYgKGlzQXJyYXlJbXBsKGNoaWxkcmVuKSlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKVxuICAgICAgKG5hbWVTb0ZhciA9IGNoaWxkcmVuW2ldKSxcbiAgICAgICAgKHR5cGUgPSBuZXh0TmFtZVByZWZpeCArIGdldEVsZW1lbnRLZXkobmFtZVNvRmFyLCBpKSksXG4gICAgICAgIChpbnZva2VDYWxsYmFjayArPSBtYXBJbnRvQXJyYXkoXG4gICAgICAgICAgbmFtZVNvRmFyLFxuICAgICAgICAgIGFycmF5LFxuICAgICAgICAgIGVzY2FwZWRQcmVmaXgsXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBjYWxsYmFja1xuICAgICAgICApKTtcbiAgZWxzZSBpZiAoKChpID0gZ2V0SXRlcmF0b3JGbihjaGlsZHJlbikpLCBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBpKSlcbiAgICBmb3IgKFxuICAgICAgY2hpbGRyZW4gPSBpLmNhbGwoY2hpbGRyZW4pLCBpID0gMDtcbiAgICAgICEobmFtZVNvRmFyID0gY2hpbGRyZW4ubmV4dCgpKS5kb25lO1xuXG4gICAgKVxuICAgICAgKG5hbWVTb0ZhciA9IG5hbWVTb0Zhci52YWx1ZSksXG4gICAgICAgICh0eXBlID0gbmV4dE5hbWVQcmVmaXggKyBnZXRFbGVtZW50S2V5KG5hbWVTb0ZhciwgaSsrKSksXG4gICAgICAgIChpbnZva2VDYWxsYmFjayArPSBtYXBJbnRvQXJyYXkoXG4gICAgICAgICAgbmFtZVNvRmFyLFxuICAgICAgICAgIGFycmF5LFxuICAgICAgICAgIGVzY2FwZWRQcmVmaXgsXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBjYWxsYmFja1xuICAgICAgICApKTtcbiAgZWxzZSBpZiAoXCJvYmplY3RcIiA9PT0gdHlwZSkge1xuICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjaGlsZHJlbi50aGVuKVxuICAgICAgcmV0dXJuIG1hcEludG9BcnJheShcbiAgICAgICAgcmVzb2x2ZVRoZW5hYmxlKGNoaWxkcmVuKSxcbiAgICAgICAgYXJyYXksXG4gICAgICAgIGVzY2FwZWRQcmVmaXgsXG4gICAgICAgIG5hbWVTb0ZhcixcbiAgICAgICAgY2FsbGJhY2tcbiAgICAgICk7XG4gICAgYXJyYXkgPSBTdHJpbmcoY2hpbGRyZW4pO1xuICAgIHRocm93IEVycm9yKFxuICAgICAgXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiICtcbiAgICAgICAgKFwiW29iamVjdCBPYmplY3RdXCIgPT09IGFycmF5XG4gICAgICAgICAgPyBcIm9iamVjdCB3aXRoIGtleXMge1wiICsgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmpvaW4oXCIsIFwiKSArIFwifVwiXG4gICAgICAgICAgOiBhcnJheSkgK1xuICAgICAgICBcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGludm9rZUNhbGxiYWNrO1xufVxuZnVuY3Rpb24gbWFwQ2hpbGRyZW4oY2hpbGRyZW4sIGZ1bmMsIGNvbnRleHQpIHtcbiAgaWYgKG51bGwgPT0gY2hpbGRyZW4pIHJldHVybiBjaGlsZHJlbjtcbiAgdmFyIHJlc3VsdCA9IFtdLFxuICAgIGNvdW50ID0gMDtcbiAgbWFwSW50b0FycmF5KGNoaWxkcmVuLCByZXN1bHQsIFwiXCIsIFwiXCIsIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGNvdW50KyspO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGxhenlJbml0aWFsaXplcihwYXlsb2FkKSB7XG4gIGlmICgtMSA9PT0gcGF5bG9hZC5fc3RhdHVzKSB7XG4gICAgdmFyIGN0b3IgPSBwYXlsb2FkLl9yZXN1bHQ7XG4gICAgY3RvciA9IGN0b3IoKTtcbiAgICBjdG9yLnRoZW4oXG4gICAgICBmdW5jdGlvbiAobW9kdWxlT2JqZWN0KSB7XG4gICAgICAgIGlmICgwID09PSBwYXlsb2FkLl9zdGF0dXMgfHwgLTEgPT09IHBheWxvYWQuX3N0YXR1cylcbiAgICAgICAgICAocGF5bG9hZC5fc3RhdHVzID0gMSksIChwYXlsb2FkLl9yZXN1bHQgPSBtb2R1bGVPYmplY3QpO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBpZiAoMCA9PT0gcGF5bG9hZC5fc3RhdHVzIHx8IC0xID09PSBwYXlsb2FkLl9zdGF0dXMpXG4gICAgICAgICAgKHBheWxvYWQuX3N0YXR1cyA9IDIpLCAocGF5bG9hZC5fcmVzdWx0ID0gZXJyb3IpO1xuICAgICAgfVxuICAgICk7XG4gICAgLTEgPT09IHBheWxvYWQuX3N0YXR1cyAmJiAoKHBheWxvYWQuX3N0YXR1cyA9IDApLCAocGF5bG9hZC5fcmVzdWx0ID0gY3RvcikpO1xuICB9XG4gIGlmICgxID09PSBwYXlsb2FkLl9zdGF0dXMpIHJldHVybiBwYXlsb2FkLl9yZXN1bHQuZGVmYXVsdDtcbiAgdGhyb3cgcGF5bG9hZC5fcmVzdWx0O1xufVxudmFyIHJlcG9ydEdsb2JhbEVycm9yID1cbiAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcmVwb3J0RXJyb3JcbiAgICA/IHJlcG9ydEVycm9yXG4gICAgOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiB3aW5kb3cgJiZcbiAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB3aW5kb3cuRXJyb3JFdmVudFxuICAgICAgICApIHtcbiAgICAgICAgICB2YXIgZXZlbnQgPSBuZXcgd2luZG93LkVycm9yRXZlbnQoXCJlcnJvclwiLCB7XG4gICAgICAgICAgICBidWJibGVzOiAhMCxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6ICEwLFxuICAgICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgICAgXCJvYmplY3RcIiA9PT0gdHlwZW9mIGVycm9yICYmXG4gICAgICAgICAgICAgIG51bGwgIT09IGVycm9yICYmXG4gICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgPyBTdHJpbmcoZXJyb3IubWVzc2FnZSlcbiAgICAgICAgICAgICAgICA6IFN0cmluZyhlcnJvciksXG4gICAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoIXdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiBwcm9jZXNzICYmXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcHJvY2Vzcy5lbWl0XG4gICAgICAgICkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdChcInVuY2F1Z2h0RXhjZXB0aW9uXCIsIGVycm9yKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICB9O1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5leHBvcnRzLkNoaWxkcmVuID0ge1xuICBtYXA6IG1hcENoaWxkcmVuLFxuICBmb3JFYWNoOiBmdW5jdGlvbiAoY2hpbGRyZW4sIGZvckVhY2hGdW5jLCBmb3JFYWNoQ29udGV4dCkge1xuICAgIG1hcENoaWxkcmVuKFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvckVhY2hGdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9LFxuICAgICAgZm9yRWFjaENvbnRleHRcbiAgICApO1xuICB9LFxuICBjb3VudDogZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgdmFyIG4gPSAwO1xuICAgIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jdGlvbiAoKSB7XG4gICAgICBuKys7XG4gICAgfSk7XG4gICAgcmV0dXJuIG47XG4gIH0sXG4gIHRvQXJyYXk6IGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAgIHJldHVybiAoXG4gICAgICBtYXBDaGlsZHJlbihjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH0pIHx8IFtdXG4gICAgKTtcbiAgfSxcbiAgb25seTogZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgaWYgKCFpc1ZhbGlkRWxlbWVudChjaGlsZHJlbikpXG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIlxuICAgICAgKTtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbn07XG5leHBvcnRzLkNvbXBvbmVudCA9IENvbXBvbmVudDtcbmV4cG9ydHMuRnJhZ21lbnQgPSBSRUFDVF9GUkFHTUVOVF9UWVBFO1xuZXhwb3J0cy5Qcm9maWxlciA9IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG5leHBvcnRzLlB1cmVDb21wb25lbnQgPSBQdXJlQ29tcG9uZW50O1xuZXhwb3J0cy5TdHJpY3RNb2RlID0gUkVBQ1RfU1RSSUNUX01PREVfVFlQRTtcbmV4cG9ydHMuU3VzcGVuc2UgPSBSRUFDVF9TVVNQRU5TRV9UWVBFO1xuZXhwb3J0cy5fX0NMSUVOVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUgPVxuICBSZWFjdFNoYXJlZEludGVybmFscztcbmV4cG9ydHMuYWN0ID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBFcnJvcihcImFjdCguLi4pIGlzIG5vdCBzdXBwb3J0ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMgb2YgUmVhY3QuXCIpO1xufTtcbmV4cG9ydHMuY2FjaGUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5leHBvcnRzLmNsb25lRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50LCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIGlmIChudWxsID09PSBlbGVtZW50IHx8IHZvaWQgMCA9PT0gZWxlbWVudClcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIFwiVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCBcIiArIGVsZW1lbnQgKyBcIi5cIlxuICAgICk7XG4gIHZhciBwcm9wcyA9IGFzc2lnbih7fSwgZWxlbWVudC5wcm9wcyksXG4gICAga2V5ID0gZWxlbWVudC5rZXksXG4gICAgb3duZXIgPSB2b2lkIDA7XG4gIGlmIChudWxsICE9IGNvbmZpZylcbiAgICBmb3IgKHByb3BOYW1lIGluICh2b2lkIDAgIT09IGNvbmZpZy5yZWYgJiYgKG93bmVyID0gdm9pZCAwKSxcbiAgICB2b2lkIDAgIT09IGNvbmZpZy5rZXkgJiYgKGtleSA9IFwiXCIgKyBjb25maWcua2V5KSxcbiAgICBjb25maWcpKVxuICAgICAgIWhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCBwcm9wTmFtZSkgfHxcbiAgICAgICAgXCJrZXlcIiA9PT0gcHJvcE5hbWUgfHxcbiAgICAgICAgXCJfX3NlbGZcIiA9PT0gcHJvcE5hbWUgfHxcbiAgICAgICAgXCJfX3NvdXJjZVwiID09PSBwcm9wTmFtZSB8fFxuICAgICAgICAoXCJyZWZcIiA9PT0gcHJvcE5hbWUgJiYgdm9pZCAwID09PSBjb25maWcucmVmKSB8fFxuICAgICAgICAocHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXSk7XG4gIHZhciBwcm9wTmFtZSA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoMSA9PT0gcHJvcE5hbWUpIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIGVsc2UgaWYgKDEgPCBwcm9wTmFtZSkge1xuICAgIGZvciAodmFyIGNoaWxkQXJyYXkgPSBBcnJheShwcm9wTmFtZSksIGkgPSAwOyBpIDwgcHJvcE5hbWU7IGkrKylcbiAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuICByZXR1cm4gUmVhY3RFbGVtZW50KGVsZW1lbnQudHlwZSwga2V5LCB2b2lkIDAsIHZvaWQgMCwgb3duZXIsIHByb3BzKTtcbn07XG5leHBvcnRzLmNyZWF0ZUNvbnRleHQgPSBmdW5jdGlvbiAoZGVmYXVsdFZhbHVlKSB7XG4gIGRlZmF1bHRWYWx1ZSA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfQ09OVEVYVF9UWVBFLFxuICAgIF9jdXJyZW50VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICBfY3VycmVudFZhbHVlMjogZGVmYXVsdFZhbHVlLFxuICAgIF90aHJlYWRDb3VudDogMCxcbiAgICBQcm92aWRlcjogbnVsbCxcbiAgICBDb25zdW1lcjogbnVsbFxuICB9O1xuICBkZWZhdWx0VmFsdWUuUHJvdmlkZXIgPSBkZWZhdWx0VmFsdWU7XG4gIGRlZmF1bHRWYWx1ZS5Db25zdW1lciA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfQ09OU1VNRVJfVFlQRSxcbiAgICBfY29udGV4dDogZGVmYXVsdFZhbHVlXG4gIH07XG4gIHJldHVybiBkZWZhdWx0VmFsdWU7XG59O1xuZXhwb3J0cy5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKHR5cGUsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgdmFyIHByb3BOYW1lLFxuICAgIHByb3BzID0ge30sXG4gICAga2V5ID0gbnVsbDtcbiAgaWYgKG51bGwgIT0gY29uZmlnKVxuICAgIGZvciAocHJvcE5hbWUgaW4gKHZvaWQgMCAhPT0gY29uZmlnLmtleSAmJiAoa2V5ID0gXCJcIiArIGNvbmZpZy5rZXkpLCBjb25maWcpKVxuICAgICAgaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSAmJlxuICAgICAgICBcImtleVwiICE9PSBwcm9wTmFtZSAmJlxuICAgICAgICBcIl9fc2VsZlwiICE9PSBwcm9wTmFtZSAmJlxuICAgICAgICBcIl9fc291cmNlXCIgIT09IHByb3BOYW1lICYmXG4gICAgICAgIChwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdKTtcbiAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gIGlmICgxID09PSBjaGlsZHJlbkxlbmd0aCkgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgZWxzZSBpZiAoMSA8IGNoaWxkcmVuTGVuZ3RoKSB7XG4gICAgZm9yICh2YXIgY2hpbGRBcnJheSA9IEFycmF5KGNoaWxkcmVuTGVuZ3RoKSwgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKVxuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5O1xuICB9XG4gIGlmICh0eXBlICYmIHR5cGUuZGVmYXVsdFByb3BzKVxuICAgIGZvciAocHJvcE5hbWUgaW4gKChjaGlsZHJlbkxlbmd0aCA9IHR5cGUuZGVmYXVsdFByb3BzKSwgY2hpbGRyZW5MZW5ndGgpKVxuICAgICAgdm9pZCAwID09PSBwcm9wc1twcm9wTmFtZV0gJiZcbiAgICAgICAgKHByb3BzW3Byb3BOYW1lXSA9IGNoaWxkcmVuTGVuZ3RoW3Byb3BOYW1lXSk7XG4gIHJldHVybiBSZWFjdEVsZW1lbnQodHlwZSwga2V5LCB2b2lkIDAsIHZvaWQgMCwgbnVsbCwgcHJvcHMpO1xufTtcbmV4cG9ydHMuY3JlYXRlUmVmID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4geyBjdXJyZW50OiBudWxsIH07XG59O1xuZXhwb3J0cy5mb3J3YXJkUmVmID0gZnVuY3Rpb24gKHJlbmRlcikge1xuICByZXR1cm4geyAkJHR5cGVvZjogUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSwgcmVuZGVyOiByZW5kZXIgfTtcbn07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50ID0gaXNWYWxpZEVsZW1lbnQ7XG5leHBvcnRzLmxhenkgPSBmdW5jdGlvbiAoY3Rvcikge1xuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9MQVpZX1RZUEUsXG4gICAgX3BheWxvYWQ6IHsgX3N0YXR1czogLTEsIF9yZXN1bHQ6IGN0b3IgfSxcbiAgICBfaW5pdDogbGF6eUluaXRpYWxpemVyXG4gIH07XG59O1xuZXhwb3J0cy5tZW1vID0gZnVuY3Rpb24gKHR5cGUsIGNvbXBhcmUpIHtcbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfTUVNT19UWVBFLFxuICAgIHR5cGU6IHR5cGUsXG4gICAgY29tcGFyZTogdm9pZCAwID09PSBjb21wYXJlID8gbnVsbCA6IGNvbXBhcmVcbiAgfTtcbn07XG5leHBvcnRzLnN0YXJ0VHJhbnNpdGlvbiA9IGZ1bmN0aW9uIChzY29wZSkge1xuICB2YXIgcHJldlRyYW5zaXRpb24gPSBSZWFjdFNoYXJlZEludGVybmFscy5ULFxuICAgIGN1cnJlbnRUcmFuc2l0aW9uID0ge307XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlQgPSBjdXJyZW50VHJhbnNpdGlvbjtcbiAgdHJ5IHtcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSBzY29wZSgpLFxuICAgICAgb25TdGFydFRyYW5zaXRpb25GaW5pc2ggPSBSZWFjdFNoYXJlZEludGVybmFscy5TO1xuICAgIG51bGwgIT09IG9uU3RhcnRUcmFuc2l0aW9uRmluaXNoICYmXG4gICAgICBvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaChjdXJyZW50VHJhbnNpdGlvbiwgcmV0dXJuVmFsdWUpO1xuICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiByZXR1cm5WYWx1ZSAmJlxuICAgICAgbnVsbCAhPT0gcmV0dXJuVmFsdWUgJiZcbiAgICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHJldHVyblZhbHVlLnRoZW4gJiZcbiAgICAgIHJldHVyblZhbHVlLnRoZW4obm9vcCwgcmVwb3J0R2xvYmFsRXJyb3IpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlcG9ydEdsb2JhbEVycm9yKGVycm9yKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdFNoYXJlZEludGVybmFscy5UID0gcHJldlRyYW5zaXRpb247XG4gIH1cbn07XG5leHBvcnRzLnVuc3RhYmxlX3VzZUNhY2hlUmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlQ2FjaGVSZWZyZXNoKCk7XG59O1xuZXhwb3J0cy51c2UgPSBmdW5jdGlvbiAodXNhYmxlKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZSh1c2FibGUpO1xufTtcbmV4cG9ydHMudXNlQWN0aW9uU3RhdGUgPSBmdW5jdGlvbiAoYWN0aW9uLCBpbml0aWFsU3RhdGUsIHBlcm1hbGluaykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VBY3Rpb25TdGF0ZShhY3Rpb24sIGluaXRpYWxTdGF0ZSwgcGVybWFsaW5rKTtcbn07XG5leHBvcnRzLnVzZUNhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUNhbGxiYWNrKGNhbGxiYWNrLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZUNvbnRleHQgPSBmdW5jdGlvbiAoQ29udGV4dCkge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VDb250ZXh0KENvbnRleHQpO1xufTtcbmV4cG9ydHMudXNlRGVidWdWYWx1ZSA9IGZ1bmN0aW9uICgpIHt9O1xuZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBpbml0aWFsVmFsdWUpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlRGVmZXJyZWRWYWx1ZSh2YWx1ZSwgaW5pdGlhbFZhbHVlKTtcbn07XG5leHBvcnRzLnVzZUVmZmVjdCA9IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlRWZmZWN0KGNyZWF0ZSwgZGVwcyk7XG59O1xuZXhwb3J0cy51c2VJZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlSWQoKTtcbn07XG5leHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGUgPSBmdW5jdGlvbiAocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGNyZWF0ZSwgZGVwcyk7XG59O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3QgPSBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZUluc2VydGlvbkVmZmVjdChjcmVhdGUsIGRlcHMpO1xufTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0ID0gZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gUmVhY3RTaGFyZWRJbnRlcm5hbHMuSC51c2VMYXlvdXRFZmZlY3QoY3JlYXRlLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZU1lbW8gPSBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZU1lbW8oY3JlYXRlLCBkZXBzKTtcbn07XG5leHBvcnRzLnVzZU9wdGltaXN0aWMgPSBmdW5jdGlvbiAocGFzc3Rocm91Z2gsIHJlZHVjZXIpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlT3B0aW1pc3RpYyhwYXNzdGhyb3VnaCwgcmVkdWNlcik7XG59O1xuZXhwb3J0cy51c2VSZWR1Y2VyID0gZnVuY3Rpb24gKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlUmVkdWNlcihyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KTtcbn07XG5leHBvcnRzLnVzZVJlZiA9IGZ1bmN0aW9uIChpbml0aWFsVmFsdWUpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlUmVmKGluaXRpYWxWYWx1ZSk7XG59O1xuZXhwb3J0cy51c2VTdGF0ZSA9IGZ1bmN0aW9uIChpbml0aWFsU3RhdGUpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlU3RhdGUoaW5pdGlhbFN0YXRlKTtcbn07XG5leHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlID0gZnVuY3Rpb24gKFxuICBzdWJzY3JpYmUsXG4gIGdldFNuYXBzaG90LFxuICBnZXRTZXJ2ZXJTbmFwc2hvdFxuKSB7XG4gIHJldHVybiBSZWFjdFNoYXJlZEludGVybmFscy5ILnVzZVN5bmNFeHRlcm5hbFN0b3JlKFxuICAgIHN1YnNjcmliZSxcbiAgICBnZXRTbmFwc2hvdCxcbiAgICBnZXRTZXJ2ZXJTbmFwc2hvdFxuICApO1xufTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFJlYWN0U2hhcmVkSW50ZXJuYWxzLkgudXNlVHJhbnNpdGlvbigpO1xufTtcbmV4cG9ydHMudmVyc2lvbiA9IFwiMTkuMC4wXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRpZiAoY2FjaGVkTW9kdWxlLmVycm9yICE9PSB1bmRlZmluZWQpIHRocm93IGNhY2hlZE1vZHVsZS5lcnJvcjtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0dHJ5IHtcblx0XHR2YXIgZXhlY09wdGlvbnMgPSB7IGlkOiBtb2R1bGVJZCwgbW9kdWxlOiBtb2R1bGUsIGZhY3Rvcnk6IF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLCByZXF1aXJlOiBfX3dlYnBhY2tfcmVxdWlyZV9fIH07XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcikgeyBoYW5kbGVyKGV4ZWNPcHRpb25zKTsgfSk7XG5cdFx0bW9kdWxlID0gZXhlY09wdGlvbnMubW9kdWxlO1xuXHRcdGV4ZWNPcHRpb25zLmZhY3RvcnkuY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgZXhlY09wdGlvbnMucmVxdWlyZSk7XG5cdH0gY2F0Y2goZSkge1xuXHRcdG1vZHVsZS5lcnJvciA9IGU7XG5cdFx0dGhyb3cgZTtcblx0fVxuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX187XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlIGV4ZWN1dGlvbiBpbnRlcmNlcHRvclxuX193ZWJwYWNrX3JlcXVpcmVfXy5pID0gW107XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYWxsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5odSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5cIiArIF9fd2VicGFja19yZXF1aXJlX18uaCgpICsgXCIuaG90LXVwZGF0ZS5qc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckYgPSAoKSA9PiAoXCJjbGllbnQtYnVuZGxlLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzb25cIik7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKFwiNTRmOWY1NTA4Zjk1ODYwMWM5OGFcIikiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJ2YXIgY3VycmVudE1vZHVsZURhdGEgPSB7fTtcbnZhciBpbnN0YWxsZWRNb2R1bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jO1xuXG4vLyBtb2R1bGUgYW5kIHJlcXVpcmUgY3JlYXRpb25cbnZhciBjdXJyZW50Q2hpbGRNb2R1bGU7XG52YXIgY3VycmVudFBhcmVudHMgPSBbXTtcblxuLy8gc3RhdHVzXG52YXIgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzID0gW107XG52YXIgY3VycmVudFN0YXR1cyA9IFwiaWRsZVwiO1xuXG4vLyB3aGlsZSBkb3dubG9hZGluZ1xudmFyIGJsb2NraW5nUHJvbWlzZXMgPSAwO1xudmFyIGJsb2NraW5nUHJvbWlzZXNXYWl0aW5nID0gW107XG5cbi8vIFRoZSB1cGRhdGUgaW5mb1xudmFyIGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzO1xudmFyIHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcztcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJEID0gY3VycmVudE1vZHVsZURhdGE7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaS5wdXNoKGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdHZhciBtb2R1bGUgPSBvcHRpb25zLm1vZHVsZTtcblx0dmFyIHJlcXVpcmUgPSBjcmVhdGVSZXF1aXJlKG9wdGlvbnMucmVxdWlyZSwgb3B0aW9ucy5pZCk7XG5cdG1vZHVsZS5ob3QgPSBjcmVhdGVNb2R1bGVIb3RPYmplY3Qob3B0aW9ucy5pZCwgbW9kdWxlKTtcblx0bW9kdWxlLnBhcmVudHMgPSBjdXJyZW50UGFyZW50cztcblx0bW9kdWxlLmNoaWxkcmVuID0gW107XG5cdGN1cnJlbnRQYXJlbnRzID0gW107XG5cdG9wdGlvbnMucmVxdWlyZSA9IHJlcXVpcmU7XG59KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDID0ge307XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkgPSB7fTtcblxuZnVuY3Rpb24gY3JlYXRlUmVxdWlyZShyZXF1aXJlLCBtb2R1bGVJZCkge1xuXHR2YXIgbWUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcblx0aWYgKCFtZSkgcmV0dXJuIHJlcXVpcmU7XG5cdHZhciBmbiA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG5cdFx0aWYgKG1lLmhvdC5hY3RpdmUpIHtcblx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRzID0gaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzO1xuXHRcdFx0XHRpZiAocGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA9PT0gLTEpIHtcblx0XHRcdFx0XHRwYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG5cdFx0XHRcdGN1cnJlbnRDaGlsZE1vZHVsZSA9IHJlcXVlc3Q7XG5cdFx0XHR9XG5cdFx0XHRpZiAobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA9PT0gLTEpIHtcblx0XHRcdFx0bWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArXG5cdFx0XHRcdFx0cmVxdWVzdCArXG5cdFx0XHRcdFx0XCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICtcblx0XHRcdFx0XHRtb2R1bGVJZFxuXHRcdFx0KTtcblx0XHRcdGN1cnJlbnRQYXJlbnRzID0gW107XG5cdFx0fVxuXHRcdHJldHVybiByZXF1aXJlKHJlcXVlc3QpO1xuXHR9O1xuXHR2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gcmVxdWlyZVtuYW1lXTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRyZXF1aXJlW25hbWVdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblx0Zm9yICh2YXIgbmFtZSBpbiByZXF1aXJlKSB7XG5cdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXF1aXJlLCBuYW1lKSAmJiBuYW1lICE9PSBcImVcIikge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IobmFtZSkpO1xuXHRcdH1cblx0fVxuXHRmbi5lID0gZnVuY3Rpb24gKGNodW5rSWQsIGZldGNoUHJpb3JpdHkpIHtcblx0XHRyZXR1cm4gdHJhY2tCbG9ja2luZ1Byb21pc2UocmVxdWlyZS5lKGNodW5rSWQsIGZldGNoUHJpb3JpdHkpKTtcblx0fTtcblx0cmV0dXJuIGZuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNb2R1bGVIb3RPYmplY3QobW9kdWxlSWQsIG1lKSB7XG5cdHZhciBfbWFpbiA9IGN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQ7XG5cdHZhciBob3QgPSB7XG5cdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuXHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXG5cdFx0X2FjY2VwdGVkRXJyb3JIYW5kbGVyczoge30sXG5cdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcblx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcblx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcblx0XHRfc2VsZkludmFsaWRhdGVkOiBmYWxzZSxcblx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcblx0XHRfbWFpbjogX21haW4sXG5cdFx0X3JlcXVpcmVTZWxmOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjdXJyZW50UGFyZW50cyA9IG1lLnBhcmVudHMuc2xpY2UoKTtcblx0XHRcdGN1cnJlbnRDaGlsZE1vZHVsZSA9IF9tYWluID8gdW5kZWZpbmVkIDogbW9kdWxlSWQ7XG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcblx0XHR9LFxuXG5cdFx0Ly8gTW9kdWxlIEFQSVxuXHRcdGFjdGl2ZTogdHJ1ZSxcblx0XHRhY2NlcHQ6IGZ1bmN0aW9uIChkZXAsIGNhbGxiYWNrLCBlcnJvckhhbmRsZXIpIHtcblx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG5cdFx0XHRcdFx0aG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwW2ldXSA9IGVycm9ySGFuZGxlcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG5cdFx0XHRcdGhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcF0gPSBlcnJvckhhbmRsZXI7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRkZWNsaW5lOiBmdW5jdGlvbiAoZGVwKSB7XG5cdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKVxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcblx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuXHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuXHRcdH0sXG5cdFx0ZGlzcG9zZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuXHRcdFx0aWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcblx0XHR9LFxuXHRcdGludmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHRoaXMuX3NlbGZJbnZhbGlkYXRlZCA9IHRydWU7XG5cdFx0XHRzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcblx0XHRcdFx0Y2FzZSBcImlkbGVcIjpcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicmVhZHlcIjpcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdFx0Y2FzZSBcImNoZWNrXCI6XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlXCI6XG5cdFx0XHRcdGNhc2UgXCJhcHBseVwiOlxuXHRcdFx0XHRcdChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgfHwgW10pLnB1c2goXG5cdFx0XHRcdFx0XHRtb2R1bGVJZFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0Ly8gaWdub3JlIHJlcXVlc3RzIGluIGVycm9yIHN0YXRlc1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuXHRcdGNoZWNrOiBob3RDaGVjayxcblx0XHRhcHBseTogaG90QXBwbHksXG5cdFx0c3RhdHVzOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0aWYgKCFsKSByZXR1cm4gY3VycmVudFN0YXR1cztcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHZhciBpZHggPSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcblx0XHRcdGlmIChpZHggPj0gMCkgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuXHRcdH0sXG5cblx0XHQvLyBpbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXG5cdFx0ZGF0YTogY3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXG5cdH07XG5cdGN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDtcblx0cmV0dXJuIGhvdDtcbn1cblxuZnVuY3Rpb24gc2V0U3RhdHVzKG5ld1N0YXR1cykge1xuXHRjdXJyZW50U3RhdHVzID0gbmV3U3RhdHVzO1xuXHR2YXIgcmVzdWx0cyA9IFtdO1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuXHRcdHJlc3VsdHNbaV0gPSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xuXG5cdHJldHVybiBQcm9taXNlLmFsbChyZXN1bHRzKS50aGVuKGZ1bmN0aW9uICgpIHt9KTtcbn1cblxuZnVuY3Rpb24gdW5ibG9jaygpIHtcblx0aWYgKC0tYmxvY2tpbmdQcm9taXNlcyA9PT0gMCkge1xuXHRcdHNldFN0YXR1cyhcInJlYWR5XCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKGJsb2NraW5nUHJvbWlzZXMgPT09IDApIHtcblx0XHRcdFx0dmFyIGxpc3QgPSBibG9ja2luZ1Byb21pc2VzV2FpdGluZztcblx0XHRcdFx0YmxvY2tpbmdQcm9taXNlc1dhaXRpbmcgPSBbXTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0bGlzdFtpXSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdHJhY2tCbG9ja2luZ1Byb21pc2UocHJvbWlzZSkge1xuXHRzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcblx0XHRjYXNlIFwicmVhZHlcIjpcblx0XHRcdHNldFN0YXR1cyhcInByZXBhcmVcIik7XG5cdFx0LyogZmFsbHRocm91Z2ggKi9cblx0XHRjYXNlIFwicHJlcGFyZVwiOlxuXHRcdFx0YmxvY2tpbmdQcm9taXNlcysrO1xuXHRcdFx0cHJvbWlzZS50aGVuKHVuYmxvY2ssIHVuYmxvY2spO1xuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZuKSB7XG5cdGlmIChibG9ja2luZ1Byb21pc2VzID09PSAwKSByZXR1cm4gZm4oKTtcblx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG5cdFx0YmxvY2tpbmdQcm9taXNlc1dhaXRpbmcucHVzaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXNvbHZlKGZuKCkpO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gaG90Q2hlY2soYXBwbHlPblVwZGF0ZSkge1xuXHRpZiAoY3VycmVudFN0YXR1cyAhPT0gXCJpZGxlXCIpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcblx0fVxuXHRyZXR1cm4gc2V0U3RhdHVzKFwiY2hlY2tcIilcblx0XHQudGhlbihfX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0pXG5cdFx0LnRoZW4oZnVuY3Rpb24gKHVwZGF0ZSkge1xuXHRcdFx0aWYgKCF1cGRhdGUpIHtcblx0XHRcdFx0cmV0dXJuIHNldFN0YXR1cyhhcHBseUludmFsaWRhdGVkTW9kdWxlcygpID8gXCJyZWFkeVwiIDogXCJpZGxlXCIpLnRoZW4oXG5cdFx0XHRcdFx0ZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0U3RhdHVzKFwicHJlcGFyZVwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIHVwZGF0ZWRNb2R1bGVzID0gW107XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cblx0XHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKFxuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1yQykucmVkdWNlKGZ1bmN0aW9uIChcblx0XHRcdFx0XHRcdHByb21pc2VzLFxuXHRcdFx0XHRcdFx0a2V5XG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckNba2V5XShcblx0XHRcdFx0XHRcdFx0dXBkYXRlLmMsXG5cdFx0XHRcdFx0XHRcdHVwZGF0ZS5yLFxuXHRcdFx0XHRcdFx0XHR1cGRhdGUubSxcblx0XHRcdFx0XHRcdFx0cHJvbWlzZXMsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzLFxuXHRcdFx0XHRcdFx0XHR1cGRhdGVkTW9kdWxlc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiBwcm9taXNlcztcblx0XHRcdFx0XHR9LCBbXSlcblx0XHRcdFx0KS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRyZXR1cm4gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0aWYgKGFwcGx5T25VcGRhdGUpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGludGVybmFsQXBwbHkoYXBwbHlPblVwZGF0ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gc2V0U3RhdHVzKFwicmVhZHlcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB1cGRhdGVkTW9kdWxlcztcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xufVxuXG5mdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG5cdGlmIChjdXJyZW50U3RhdHVzICE9PSBcInJlYWR5XCIpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRcdFwiYXBwbHkoKSBpcyBvbmx5IGFsbG93ZWQgaW4gcmVhZHkgc3RhdHVzIChzdGF0ZTogXCIgK1xuXHRcdFx0XHRcdGN1cnJlbnRTdGF0dXMgK1xuXHRcdFx0XHRcdFwiKVwiXG5cdFx0XHQpO1xuXHRcdH0pO1xuXHR9XG5cdHJldHVybiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0YXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKTtcblxuXHR2YXIgcmVzdWx0cyA9IGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzLm1hcChmdW5jdGlvbiAoaGFuZGxlcikge1xuXHRcdHJldHVybiBoYW5kbGVyKG9wdGlvbnMpO1xuXHR9KTtcblx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSB1bmRlZmluZWQ7XG5cblx0dmFyIGVycm9ycyA9IHJlc3VsdHNcblx0XHQubWFwKGZ1bmN0aW9uIChyKSB7XG5cdFx0XHRyZXR1cm4gci5lcnJvcjtcblx0XHR9KVxuXHRcdC5maWx0ZXIoQm9vbGVhbik7XG5cblx0aWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG5cdFx0cmV0dXJuIHNldFN0YXR1cyhcImFib3J0XCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhyb3cgZXJyb3JzWzBdO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXG5cdHZhciBkaXNwb3NlUHJvbWlzZSA9IHNldFN0YXR1cyhcImRpc3Bvc2VcIik7XG5cblx0cmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRpZiAocmVzdWx0LmRpc3Bvc2UpIHJlc3VsdC5kaXNwb3NlKCk7XG5cdH0pO1xuXG5cdC8vIE5vdyBpbiBcImFwcGx5XCIgcGhhc2Vcblx0dmFyIGFwcGx5UHJvbWlzZSA9IHNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG5cdHZhciBlcnJvcjtcblx0dmFyIHJlcG9ydEVycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuXHR9O1xuXG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0cmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRpZiAocmVzdWx0LmFwcGx5KSB7XG5cdFx0XHR2YXIgbW9kdWxlcyA9IHJlc3VsdC5hcHBseShyZXBvcnRFcnJvcik7XG5cdFx0XHRpZiAobW9kdWxlcykge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChtb2R1bGVzW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIFByb21pc2UuYWxsKFtkaXNwb3NlUHJvbWlzZSwgYXBwbHlQcm9taXNlXSkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcblx0XHRpZiAoZXJyb3IpIHtcblx0XHRcdHJldHVybiBzZXRTdGF0dXMoXCJmYWlsXCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR0aHJvdyBlcnJvcjtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKGxpc3QpIHtcblx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRcdFx0aWYgKGxpc3QuaW5kZXhPZihtb2R1bGVJZCkgPCAwKSBsaXN0LnB1c2gobW9kdWxlSWQpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuIGxpc3Q7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gc2V0U3RhdHVzKFwiaWRsZVwiKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBvdXRkYXRlZE1vZHVsZXM7XG5cdFx0fSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBhcHBseUludmFsaWRhdGVkTW9kdWxlcygpIHtcblx0aWYgKHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcykge1xuXHRcdGlmICghY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMpIGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107XG5cdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHQpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdFx0cXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzID0gdW5kZWZpbmVkO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0ICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU0NSSVBUJylcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgKCFzY3JpcHRVcmwgfHwgIS9eaHR0cChzPyk6Ly50ZXN0KHNjcmlwdFVybCkpKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC9eYmxvYjovLCBcIlwiKS5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtclNfanNvbnAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtclNfanNvbnAgfHwge1xuXHQyNzU6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG52YXIgY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdDtcbnZhciB3YWl0aW5nVXBkYXRlUmVzb2x2ZXMgPSB7fTtcbmZ1bmN0aW9uIGxvYWRVcGRhdGVDaHVuayhjaHVua0lkLCB1cGRhdGVkTW9kdWxlc0xpc3QpIHtcblx0Y3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdCA9IHVwZGF0ZWRNb2R1bGVzTGlzdDtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSByZXNvbHZlO1xuXHRcdC8vIHN0YXJ0IHVwZGF0ZSBjaHVuayBsb2FkaW5nXG5cdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaHUoY2h1bmtJZCk7XG5cdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdFx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSB1bmRlZmluZWRcblx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGhvdCB1cGRhdGUgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcblx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQpO1xuXHR9KTtcbn1cblxuc2VsZltcIndlYnBhY2tIb3RVcGRhdGVzb3VuZHN5bmNcIl0gPSAoY2h1bmtJZCwgbW9yZU1vZHVsZXMsIHJ1bnRpbWUpID0+IHtcblx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdGlmKGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QpIGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QucHVzaChtb2R1bGVJZCk7XG5cdFx0fVxuXHR9XG5cdGlmKHJ1bnRpbWUpIGN1cnJlbnRVcGRhdGVSdW50aW1lLnB1c2gocnVudGltZSk7XG5cdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSgpO1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0fVxufTtcblxudmFyIGN1cnJlbnRVcGRhdGVDaHVua3M7XG52YXIgY3VycmVudFVwZGF0ZTtcbnZhciBjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcztcbnZhciBjdXJyZW50VXBkYXRlUnVudGltZTtcbmZ1bmN0aW9uIGFwcGx5SGFuZGxlcihvcHRpb25zKSB7XG5cdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXI7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB1bmRlZmluZWQ7XG5cdGZ1bmN0aW9uIGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyh1cGRhdGVNb2R1bGVJZCkge1xuXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG5cdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLm1hcChmdW5jdGlvbiAoaWQpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGNoYWluOiBbaWRdLFxuXHRcdFx0XHRpZDogaWRcblx0XHRcdH07XG5cdFx0fSk7XG5cdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcblx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcblx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcblx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQhbW9kdWxlIHx8XG5cdFx0XHRcdChtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgJiYgIW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZClcblx0XHRcdClcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuXHRcdFx0XHR2YXIgcGFyZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW3BhcmVudElkXTtcblx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcblx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuXHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxuXHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG5cdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XG5cdFx0XHRcdHF1ZXVlLnB1c2goe1xuXHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0aWQ6IHBhcmVudElkXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXG5cdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG5cdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcblx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IGJbaV07XG5cdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuXHRcdH1cblx0fVxuXG5cdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG5cdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cblx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcblxuXHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKG1vZHVsZSkge1xuXHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgbW9kdWxlLmlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG5cdFx0KTtcblx0fTtcblxuXHRmb3IgKHZhciBtb2R1bGVJZCBpbiBjdXJyZW50VXBkYXRlKSB7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlLCBtb2R1bGVJZCkpIHtcblx0XHRcdHZhciBuZXdNb2R1bGVGYWN0b3J5ID0gY3VycmVudFVwZGF0ZVttb2R1bGVJZF07XG5cdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG5cdFx0XHR2YXIgcmVzdWx0ID0gbmV3TW9kdWxlRmFjdG9yeVxuXHRcdFx0XHQ/IGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyhtb2R1bGVJZClcblx0XHRcdFx0OiB7XG5cdFx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG5cdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0XHR9O1xuXHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cblx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuXHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuXHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG5cdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG5cdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcblx0XHRcdH1cblx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuXHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcblx0XHRcdH1cblx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZXJyb3I6IGFib3J0RXJyb3Jcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmIChkb0FwcGx5KSB7XG5cdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gbmV3TW9kdWxlRmFjdG9yeTtcblx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcblx0XHRcdFx0Zm9yIChtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG5cdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuXHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGN1cnJlbnRVcGRhdGUgPSB1bmRlZmluZWQ7XG5cblx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuXHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG5cdGZvciAodmFyIGogPSAwOyBqIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaisrKSB7XG5cdFx0dmFyIG91dGRhdGVkTW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbal07XG5cdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRpZiAoXG5cdFx0XHRtb2R1bGUgJiZcblx0XHRcdChtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgfHwgbW9kdWxlLmhvdC5fbWFpbikgJiZcblx0XHRcdC8vIHJlbW92ZWQgc2VsZi1hY2NlcHRlZCBtb2R1bGVzIHNob3VsZCBub3QgYmUgcmVxdWlyZWRcblx0XHRcdGFwcGxpZWRVcGRhdGVbb3V0ZGF0ZWRNb2R1bGVJZF0gIT09IHdhcm5VbmV4cGVjdGVkUmVxdWlyZSAmJlxuXHRcdFx0Ly8gd2hlbiBjYWxsZWQgaW52YWxpZGF0ZSBzZWxmLWFjY2VwdGluZyBpcyBub3QgcG9zc2libGVcblx0XHRcdCFtb2R1bGUuaG90Ll9zZWxmSW52YWxpZGF0ZWRcblx0XHQpIHtcblx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcblx0XHRcdFx0bW9kdWxlOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRyZXF1aXJlOiBtb2R1bGUuaG90Ll9yZXF1aXJlU2VsZixcblx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWRcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcblxuXHRyZXR1cm4ge1xuXHRcdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdH0pO1xuXHRcdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSB1bmRlZmluZWQ7XG5cblx0XHRcdHZhciBpZHg7XG5cdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcblx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuXHRcdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblx0XHRcdFx0aWYgKCFtb2R1bGUpIGNvbnRpbnVlO1xuXG5cdFx0XHRcdHZhciBkYXRhID0ge307XG5cblx0XHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG5cdFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRkaXNwb3NlSGFuZGxlcnNbal0uY2FsbChudWxsLCBkYXRhKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckRbbW9kdWxlSWRdID0gZGF0YTtcblxuXHRcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuXHRcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxuXHRcdFx0XHRkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblxuXHRcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG5cdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdHZhciBjaGlsZCA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuXHRcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG5cdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG5cdFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuXHRcdFx0dmFyIGRlcGVuZGVuY3k7XG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0bW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdGlmIChtb2R1bGUpIHtcblx0XHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID1cblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcblx0XHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhcHBseTogZnVuY3Rpb24gKHJlcG9ydEVycm9yKSB7XG5cdFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcblx0XHRcdGZvciAodmFyIHVwZGF0ZU1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhhcHBsaWVkVXBkYXRlLCB1cGRhdGVNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bdXBkYXRlTW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVt1cGRhdGVNb2R1bGVJZF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcnVuIG5ldyBydW50aW1lIG1vZHVsZXNcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudFVwZGF0ZVJ1bnRpbWUubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWVbaV0oX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRpZiAobW9kdWxlKSB7XG5cdFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9XG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIGVycm9ySGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRcdHZhciBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MgPSBbXTtcblx0XHRcdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcblx0XHRcdFx0XHRcdFx0dmFyIGFjY2VwdENhbGxiYWNrID1cblx0XHRcdFx0XHRcdFx0XHRtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcblx0XHRcdFx0XHRcdFx0dmFyIGVycm9ySGFuZGxlciA9XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlLmhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcGVuZGVuY3ldO1xuXHRcdFx0XHRcdFx0XHRpZiAoYWNjZXB0Q2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoYWNjZXB0Q2FsbGJhY2spICE9PSAtMSkgY29udGludWU7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goYWNjZXB0Q2FsbGJhY2spO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9ySGFuZGxlcnMucHVzaChlcnJvckhhbmRsZXIpO1xuXHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcy5wdXNoKGRlcGVuZGVuY3kpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBrID0gMDsgayA8IGNhbGxiYWNrcy5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrc1trXS5jYWxsKG51bGwsIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcblx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBlcnJvckhhbmRsZXJzW2tdID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9ySGFuZGxlcnNba10oZXJyLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba11cblx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIyKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xuXHRcdFx0Zm9yICh2YXIgbyA9IDA7IG8gPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBvKyspIHtcblx0XHRcdFx0dmFyIGl0ZW0gPSBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXNbb107XG5cdFx0XHRcdHZhciBtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGl0ZW0ucmVxdWlyZShtb2R1bGVJZCk7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyLCB7XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZTogX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycjEpIHtcblx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIxLFxuXHRcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIxKTtcblx0XHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzO1xuXHRcdH1cblx0fTtcbn1cbl9fd2VicGFja19yZXF1aXJlX18uaG1ySS5qc29ucCA9IGZ1bmN0aW9uIChtb2R1bGVJZCwgYXBwbHlIYW5kbGVycykge1xuXHRpZiAoIWN1cnJlbnRVcGRhdGUpIHtcblx0XHRjdXJyZW50VXBkYXRlID0ge307XG5cdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWUgPSBbXTtcblx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IFtdO1xuXHRcdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHR9XG5cdGlmICghX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGUsIG1vZHVsZUlkKSkge1xuXHRcdGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdID0gX193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXTtcblx0fVxufTtcbl9fd2VicGFja19yZXF1aXJlX18uaG1yQy5qc29ucCA9IGZ1bmN0aW9uIChcblx0Y2h1bmtJZHMsXG5cdHJlbW92ZWRDaHVua3MsXG5cdHJlbW92ZWRNb2R1bGVzLFxuXHRwcm9taXNlcyxcblx0YXBwbHlIYW5kbGVycyxcblx0dXBkYXRlZE1vZHVsZXNMaXN0XG4pIHtcblx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB7fTtcblx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSByZW1vdmVkQ2h1bmtzO1xuXHRjdXJyZW50VXBkYXRlID0gcmVtb3ZlZE1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuXHRcdG9ialtrZXldID0gZmFsc2U7XG5cdFx0cmV0dXJuIG9iajtcblx0fSwge30pO1xuXHRjdXJyZW50VXBkYXRlUnVudGltZSA9IFtdO1xuXHRjaHVua0lkcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0aWYgKFxuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSAhPT0gdW5kZWZpbmVkXG5cdFx0KSB7XG5cdFx0XHRwcm9taXNlcy5wdXNoKGxvYWRVcGRhdGVDaHVuayhjaHVua0lkLCB1cGRhdGVkTW9kdWxlc0xpc3QpKTtcblx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gZmFsc2U7XG5cdFx0fVxuXHR9KTtcblx0aWYgKF9fd2VicGFja19yZXF1aXJlX18uZikge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtciA9IGZ1bmN0aW9uIChjaHVua0lkLCBwcm9taXNlcykge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzICYmXG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0XHQhY3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXVxuXHRcdFx0KSB7XG5cdFx0XHRcdHByb21pc2VzLnB1c2gobG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpKTtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNID0gKCkgPT4ge1xuXHRpZiAodHlwZW9mIGZldGNoID09PSBcInVuZGVmaW5lZFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnQ6IG5lZWQgZmV0Y2ggQVBJXCIpO1xuXHRyZXR1cm4gZmV0Y2goX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGKCkpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cdFx0aWYocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHJldHVybjsgLy8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuXHRcdGlmKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIHVwZGF0ZSBtYW5pZmVzdCBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuXHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XG5cdH0pO1xufTtcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLy8gbW9kdWxlIGNhY2hlIGFyZSB1c2VkIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkXG4vLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NSk7XG4iXSwibmFtZXMiOlsiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsImkiLCJsZW5ndGgiLCJtb2R1bGVzVG9Eb20iLCJsaXN0Iiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsIml0ZW0iLCJiYXNlIiwiY291bnQiLCJjb25jYXQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwic3VwcG9ydHMiLCJsYXllciIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwiX3BhdGgiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsImJpbmQiLCJuIiwiZSIsImFyZ3VtZW50cyIsInQiLCJyIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJwcm9wcyIsInhtbG5zIiwieG1sU3BhY2UiLCJ2aWV3Qm94IiwiZCIsImZpbGxSdWxlIiwiY2xpcFJ1bGUiLCJzdHlsZSIsIlRvb2xiYXIiLCJfcmVmIiwiYnBtIiwic2V0QnBtIiwiYmVhdHNQZXJCYXIiLCJzZXRCZWF0c1BlckJhciIsImluY3JlYXNlWm9vbSIsInpvb21MZXZlbCIsImRlY3JlYXNlWm9vbSIsInVwZGF0ZVZpZXciLCJtb2RlU25hcCIsInNldE1vZGVTbmFwIiwibW9kZSIsInNldE1vZGUiLCJzYXZlQ29tcERhdGFKU09OIiwibG9hZENvbXBEYXRhSlNPTiIsIlJlYWN0IiwiSWNvblJlbG9hZCIsIm9uQ2xpY2siLCJodG1sRm9yIiwibmFtZSIsInR5cGUiLCJzaXplIiwid2lkdGgiLCJ2YWx1ZSIsIm9uQ2hhbmdlIiwidGFyZ2V0IiwiSWNvblpvb21JbiIsIm1hcmdpbkxlZnQiLCJJY29uWm9vbU91dCIsImRpc3BsYXkiLCJoZWlnaHQiLCJib3JkZXJMZWZ0IiwibWFyZ2luUmlnaHQiLCJJY29uTWFnbmV0IiwiY2xhc3NOYW1lIiwiSWNvbk1vdmUiLCJJY29uU2NhbGUiLCJMYXllciIsImxheWVyRGF0YSIsImFycmF5SW5kZXgiLCJjb21wRGF0YSIsInRvdGFsQmVhdHMiLCJiZWF0V2lkdGgiLCJ0aW1lbGluZVdpZHRoIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsImNvbG9yIiwiaW5Qb2ludCIsIm91dFBvaW50IiwiZHVyYXRpb24iLCJjb21wRHVyYXRpb24iLCJncmlkU3RhcnQiLCJNYXRoIiwiZmxvb3IiLCJjbG9zZXN0R3JpZFN0YXJ0Iiwicm91bmQiLCJncmlkRW5kIiwiY2VpbCIsImNsb3Nlc3RHcmlkRW5kIiwiZ3JpZER1cmF0aW9uIiwic2NhbGluZyIsImJhc2VHcmlkWCIsInRydWVYIiwidHJhbnNsYXRlWCIsImtleSIsImJlYXRzIiwic25hcHBpbmciLCJjbG9zZXN0R3JpZER1cmF0aW9uIiwicmVzY2FsZUxheWVyIiwiY29uc29sZSIsImxvZyIsInN0YXJ0UG9pbnQiLCJfcmVnZW5lcmF0b3JSdW50aW1lIiwicHJvdG90eXBlIiwibyIsImRlZmluZVByb3BlcnR5IiwiU3ltYm9sIiwiYSIsIml0ZXJhdG9yIiwiYyIsImFzeW5jSXRlcmF0b3IiLCJ1IiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ3cmFwIiwiR2VuZXJhdG9yIiwiY3JlYXRlIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsImFyZyIsImgiLCJsIiwiZiIsInMiLCJ5IiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsInAiLCJnZXRQcm90b3R5cGVPZiIsInYiLCJ2YWx1ZXMiLCJnIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiaW52b2tlIiwiX3R5cGVvZiIsInJlc29sdmUiLCJfX2F3YWl0IiwidGhlbiIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiRXJyb3IiLCJkb25lIiwibWV0aG9kIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXNOYU4iLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJjb25zdHJ1Y3RvciIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwia2V5cyIsInJldmVyc2UiLCJwb3AiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicnZhbCIsImhhbmRsZSIsImNvbXBsZXRlIiwiZmluaXNoIiwiZGVsZWdhdGVZaWVsZCIsImFzeW5jR2VuZXJhdG9yU3RlcCIsIl9hc3luY1RvR2VuZXJhdG9yIiwiX25leHQiLCJfdGhyb3ciLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX29iamVjdFNwcmVhZCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidG9QcmltaXRpdmUiLCJTdHJpbmciLCJfdG9QcmltaXRpdmUiLCJfdG9Qcm9wZXJ0eUtleSIsIl9zbGljZWRUb0FycmF5IiwiQXJyYXkiLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX2FycmF5TGlrZVRvQXJyYXkiLCJ0b1N0cmluZyIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIlRpbWVsaW5lIiwid2FpdGluZ0ZvckFFUmVmIiwic2V0TG9hZGluZyIsInNldExvYWRpbmdUZXh0IiwibW9kZVNuYXBSZWYiLCJtb2RlUmVmIiwiYmVhdHNQZXJTZWNvbmQiLCJ1c2VNZW1vIiwiYmVhdHNQZXJTaWduYXR1cmUiLCJ0b3RhbEJlYXRzUGVyU2lnbmF0dXJlIiwicm91bmRlZEJlYXRzIiwidG90YWxCYXJzIiwidGltZWxpbmVSZWYiLCJ1c2VSZWYiLCJfdXNlU3RhdGUyIiwidXNlU3RhdGUiLCJzZXRUaW1lbGluZVdpZHRoIiwiX3VzZVN0YXRlNCIsInNldEJlYXRXaWR0aCIsInVzZUVmZmVjdCIsInVwZGF0ZVRpbWVsaW5lV2lkdGgiLCJjdXJyZW50IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfdXNlU3RhdGU2IiwibGF5ZXJzIiwic2V0TGF5ZXJzIiwibmV3TGF5ZXJzIiwibWFwIiwiX3VzZVN0YXRlOCIsImdob3N0TGF5ZXIiLCJzZXRHaG9zdExheWVyIiwiZ2hvc3RMYXllclJlZiIsInN0YXJ0TW91c2VYIiwibW91c2VYIiwiaXNEcmFnZ2luZyIsImRyYWdnZWRMYXllciIsImRyYWdnZURpcmVjdGlvbiIsIm1vdmVkQmVhdHMiLCJoYW5kbGVNb3VzZU1vdmUiLCJldiIsInBhZ2VYIiwiZ2hvc3QiLCJtb3ZlTGF5ZXIiLCJzY2FsZUxheWVyIiwibGF5ZXJNb3VzZURvd24iLCJkaXJlY3Rpb24iLCJmaW5kIiwibmV3R2hvc3RMYXllciIsImxheWVyTW91c2VVcCIsImJlYXRzVG9VcGRhdGUiLCJkcmFnRGlyZWN0aW9uIiwicHJldkxheWVycyIsInVwZGF0ZWRMYXllciIsIm1vdmVBRUxheWVyIiwiZXJyb3IiLCJzY2FsZUFFTGF5ZXIiLCJfcmVmMiIsIl9jYWxsZWUiLCJsYXllckluZGV4IiwibmV3SW4iLCJfY29udGV4dCIsInJlamVjdCIsIkNTSW50ZXJmYWNlIiwiZXZhbFNjcmlwdCIsIl94IiwiX3gyIiwiX3JlZjMiLCJfY2FsbGVlMiIsIm5ld091dCIsIl9jb250ZXh0MiIsIl94MyIsIl94NCIsIl94NSIsImhhbmRsZU1vdXNlVXAiLCJkb2N1bWVudCIsIm9uTW91c2VNb3ZlIiwicmVmIiwiZ3JpZFRlbXBsYXRlIiwiZ3JpZENvbHVtblN0YXJ0IiwiZ3JpZENvbHVtbkVuZCIsImdyaWRSb3ciLCJiYWNrZ3JvdW5kQ29sb3IiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2Zvcm1PcmlnaW4iLCJvbk1vdXNlRG93biIsIm9uTW91c2VVcCIsIm91dGxpbmVDb2xvciIsIl8iLCJiYXJJbmRleCIsImJlYXRJbmRleCIsIkxvYWRlciIsIl9yZWYkdGV4dCIsInRleHQiLCJsb2FkaW5nIiwibG9hZGluZ1RleHQiLCJfdXNlU3RhdGUxMCIsInNldFpvb21MZXZlbCIsIl91c2VTdGF0ZTEyIiwid2FpdGluZ0ZvckFFIiwiX3VzZVN0YXRlMTQiLCJfdXNlU3RhdGUxNiIsIl91c2VTdGF0ZTE4IiwiZnJhbWVSYXRlIiwic2V0Q29tcERhdGEiLCJmZXRjaENvbXBEYXRhIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsImZpbGVuYW1lIiwiYmxvYiIsIkJsb2IiLCJzdHJpbmdpZnkiLCJ1cmwiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJjcmVhdGVFbGVtZW50IiwiaHJlZiIsImRvd25sb2FkIiwiY2xpY2siLCJyZXZva2VPYmplY3RVUkwiLCJmaWxlSW5wdXQiLCJvbmNoYW5nZSIsImZpbGUiLCJmaWxlcyIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJjb250ZW50cyIsImZ1bmMiLCJib2R5IiwicmVtb3ZlQ2hpbGQiLCJyZWFkQXNUZXh0IiwiY29udGVudCIsImFwcGVuZENoaWxkIiwiY3JlYXRlUm9vdCIsImdldEVsZW1lbnRCeUlkIiwicmVuZGVyIiwiQXBwIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJlbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJmb3JtYXRQcm9kRXJyb3JNZXNzYWdlIiwiY29kZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIm5vb3AiLCJJbnRlcm5hbHMiLCJEIiwiQyIsIkwiLCJtIiwiWCIsIlMiLCJNIiwiZmluZERPTU5vZGUiLCJSRUFDVF9QT1JUQUxfVFlQRSIsImZvciIsIlJlYWN0U2hhcmVkSW50ZXJuYWxzIiwiX19DTElFTlRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfV0FSTl9VU0VSU19USEVZX0NBTk5PVF9VUEdSQURFIiwiZ2V0Q3Jvc3NPcmlnaW5TdHJpbmdBcyIsImFzIiwiaW5wdXQiLCJfX0RPTV9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9XQVJOX1VTRVJTX1RIRVlfQ0FOTk9UX1VQR1JBREUiLCJjcmVhdGVQb3J0YWwiLCJjaGlsZHJlbiIsImNvbnRhaW5lciIsIm5vZGVUeXBlIiwiY29udGFpbmVySW5mbyIsImltcGxlbWVudGF0aW9uIiwiJCR0eXBlb2YiLCJjcmVhdGVQb3J0YWwkMSIsImZsdXNoU3luYyIsImZuIiwicHJldmlvdXNUcmFuc2l0aW9uIiwiVCIsInByZXZpb3VzVXBkYXRlUHJpb3JpdHkiLCJwcmVjb25uZWN0IiwiY3Jvc3NPcmlnaW4iLCJwcmVmZXRjaEROUyIsInByZWluaXQiLCJpbnRlZ3JpdHkiLCJmZXRjaFByaW9yaXR5IiwicHJlY2VkZW5jZSIsInByZWluaXRNb2R1bGUiLCJwcmVsb2FkIiwicmVmZXJyZXJQb2xpY3kiLCJpbWFnZVNyY1NldCIsImltYWdlU2l6ZXMiLCJwcmVsb2FkTW9kdWxlIiwicmVxdWVzdEZvcm1SZXNldCIsImZvcm0iLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVzZUZvcm1TdGF0ZSIsImFjdGlvbiIsImluaXRpYWxTdGF0ZSIsInBlcm1hbGluayIsIkgiLCJ1c2VGb3JtU3RhdHVzIiwidXNlSG9zdFRyYW5zaXRpb25TdGF0dXMiLCJ2ZXJzaW9uIiwiU2NoZWR1bGVyIiwiUmVhY3RET00iLCJSRUFDVF9MRUdBQ1lfRUxFTUVOVF9UWVBFIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiUkVBQ1RfRlJBR01FTlRfVFlQRSIsIlJFQUNUX1NUUklDVF9NT0RFX1RZUEUiLCJSRUFDVF9QUk9GSUxFUl9UWVBFIiwiUkVBQ1RfUFJPVklERVJfVFlQRSIsIlJFQUNUX0NPTlNVTUVSX1RZUEUiLCJSRUFDVF9DT05URVhUX1RZUEUiLCJSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIiwiUkVBQ1RfU1VTUEVOU0VfVFlQRSIsIlJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSIsIlJFQUNUX01FTU9fVFlQRSIsIlJFQUNUX0xBWllfVFlQRSIsIlJFQUNUX09GRlNDUkVFTl9UWVBFIiwiUkVBQ1RfTUVNT19DQUNIRV9TRU5USU5FTCIsIk1BWUJFX0lURVJBVE9SX1NZTUJPTCIsImdldEl0ZXJhdG9yRm4iLCJtYXliZUl0ZXJhYmxlIiwiUkVBQ1RfQ0xJRU5UX1JFRkVSRU5DRSIsImdldENvbXBvbmVudE5hbWVGcm9tVHlwZSIsImlubmVyVHlwZSIsIl9wYXlsb2FkIiwiX2luaXQiLCJ4IiwicHJlZml4Iiwic3VmZml4IiwiZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUiLCJtYXRjaCIsInN0YWNrIiwidHJpbSIsImluZGV4T2YiLCJyZWVudHJ5IiwiZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZSIsImNvbnN0cnVjdCIsInByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UiLCJwcmVwYXJlU3RhY2tUcmFjZSIsIlJ1bkluUm9vdEZyYW1lIiwiRGV0ZXJtaW5lQ29tcG9uZW50RnJhbWVSb290IiwiRmFrZSIsInNldCIsIlJlZmxlY3QiLCJjb250cm9sIiwieCQwIiwieCQxIiwiY2F0Y2giLCJzYW1wbGUiLCJuYW1lUHJvcERlc2NyaXB0b3IiLCJfUnVuSW5Sb290RnJhbWUkRGV0ZXIiLCJzYW1wbGVTdGFjayIsImNvbnRyb2xTdGFjayIsInNhbXBsZUxpbmVzIiwic3BsaXQiLCJjb250cm9sTGluZXMiLCJpbmNsdWRlcyIsImZyYW1lIiwicmVwbGFjZSIsImRlc2NyaWJlRmliZXIiLCJmaWJlciIsInRhZyIsImdldFN0YWNrQnlGaWJlckluRGV2QW5kUHJvZCIsIndvcmtJblByb2dyZXNzIiwiaW5mbyIsInJldHVybiIsIm1lc3NhZ2UiLCJnZXROZWFyZXN0TW91bnRlZEZpYmVyIiwibm9kZSIsIm5lYXJlc3RNb3VudGVkIiwiYWx0ZXJuYXRlIiwiZmxhZ3MiLCJnZXRTdXNwZW5zZUluc3RhbmNlRnJvbUZpYmVyIiwic3VzcGVuc2VTdGF0ZSIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiYXNzZXJ0SXNNb3VudGVkIiwiZmluZEN1cnJlbnRIb3N0RmliZXJJbXBsIiwiY2hpbGQiLCJzaWJsaW5nIiwiaXNBcnJheUltcGwiLCJSZWFjdERPTVNoYXJlZEludGVybmFscyIsInNoYXJlZE5vdFBlbmRpbmdPYmplY3QiLCJwZW5kaW5nIiwidmFsdWVTdGFjayIsImNyZWF0ZUN1cnNvciIsImRlZmF1bHRWYWx1ZSIsImN1cnNvciIsImNvbnRleHRTdGFja0N1cnNvciIsImNvbnRleHRGaWJlclN0YWNrQ3Vyc29yIiwicm9vdEluc3RhbmNlU3RhY2tDdXJzb3IiLCJob3N0VHJhbnNpdGlvblByb3ZpZGVyQ3Vyc29yIiwicHVzaEhvc3RDb250YWluZXIiLCJuZXh0Um9vdEluc3RhbmNlIiwiZG9jdW1lbnRFbGVtZW50IiwibmFtZXNwYWNlVVJJIiwiZ2V0T3duSG9zdENvbnRleHQiLCJwYXJlbnROb2RlIiwidGFnTmFtZSIsImdldENoaWxkSG9zdENvbnRleHRQcm9kIiwicG9wSG9zdENvbnRhaW5lciIsInB1c2hIb3N0Q29udGV4dCIsImNvbnRleHQiLCJKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQiLCJwb3BIb3N0Q29udGV4dCIsIkhvc3RUcmFuc2l0aW9uQ29udGV4dCIsIl9jdXJyZW50VmFsdWUiLCJzY2hlZHVsZUNhbGxiYWNrJDMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiY2FuY2VsQ2FsbGJhY2skMSIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwic2hvdWxkWWllbGQiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsInJlcXVlc3RQYWludCIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIm5vdyIsInVuc3RhYmxlX25vdyIsImdldEN1cnJlbnRQcmlvcml0eUxldmVsIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJJbW1lZGlhdGVQcmlvcml0eSIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiVXNlckJsb2NraW5nUHJpb3JpdHkiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsIk5vcm1hbFByaW9yaXR5JDEiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIkxvd1ByaW9yaXR5IiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJJZGxlUHJpb3JpdHkiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJsb2ckMSIsInVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlIiwicmVuZGVyZXJJRCIsImluamVjdGVkSG9vayIsInNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzIiwibmV3SXNTdHJpY3RNb2RlIiwic2V0U3RyaWN0TW9kZSIsImVyciIsImNsejMyIiwiTE4yIiwibmV4dFRyYW5zaXRpb25MYW5lIiwibmV4dFJldHJ5TGFuZSIsImdldEhpZ2hlc3RQcmlvcml0eUxhbmVzIiwibGFuZXMiLCJwZW5kaW5nU3luY0xhbmVzIiwiZ2V0TmV4dExhbmVzIiwicm9vdCIsIndpcExhbmVzIiwicGVuZGluZ0xhbmVzIiwibmV4dExhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsIndhcm1MYW5lcyIsImZpbmlzaGVkTGFuZXMiLCJub25JZGxlUGVuZGluZ0xhbmVzIiwiY2hlY2tJZlJvb3RJc1ByZXJlbmRlcmluZyIsInJlbmRlckxhbmVzIiwiY29tcHV0ZUV4cGlyYXRpb25UaW1lIiwibGFuZSIsImN1cnJlbnRUaW1lIiwiY2xhaW1OZXh0VHJhbnNpdGlvbkxhbmUiLCJjbGFpbU5leHRSZXRyeUxhbmUiLCJjcmVhdGVMYW5lTWFwIiwiaW5pdGlhbCIsImxhbmVNYXAiLCJtYXJrUm9vdFVwZGF0ZWQkMSIsInVwZGF0ZUxhbmUiLCJtYXJrU3Bhd25lZERlZmVycmVkTGFuZSIsInNwYXduZWRMYW5lIiwiZW50YW5nbGVkTGFuZXMiLCJzcGF3bmVkTGFuZUluZGV4IiwiZW50YW5nbGVtZW50cyIsIm1hcmtSb290RW50YW5nbGVkIiwicm9vdEVudGFuZ2xlZExhbmVzIiwiaW5kZXgkOCIsImxhbmVzVG9FdmVudFByaW9yaXR5IiwicmVzb2x2ZVVwZGF0ZVByaW9yaXR5IiwidXBkYXRlUHJpb3JpdHkiLCJldmVudCIsImdldEV2ZW50UHJpb3JpdHkiLCJyYW5kb21LZXkiLCJyYW5kb20iLCJpbnRlcm5hbEluc3RhbmNlS2V5IiwiaW50ZXJuYWxQcm9wc0tleSIsImludGVybmFsQ29udGFpbmVySW5zdGFuY2VLZXkiLCJpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXkiLCJpbnRlcm5hbEV2ZW50SGFuZGxlckxpc3RlbmVyc0tleSIsImludGVybmFsRXZlbnRIYW5kbGVzU2V0S2V5IiwiaW50ZXJuYWxSb290Tm9kZVJlc291cmNlc0tleSIsImludGVybmFsSG9pc3RhYmxlTWFya2VyIiwiZGV0YWNoRGVsZXRlZEluc3RhbmNlIiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJ0YXJnZXROb2RlIiwidGFyZ2V0SW5zdCIsImdldFBhcmVudFN1c3BlbnNlSW5zdGFuY2UiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImluc3QiLCJzdGF0ZU5vZGUiLCJnZXRSZXNvdXJjZXNGcm9tUm9vdCIsInJlc291cmNlcyIsImhvaXN0YWJsZVN0eWxlcyIsIk1hcCIsImhvaXN0YWJsZVNjcmlwdHMiLCJtYXJrTm9kZUFzSG9pc3RhYmxlIiwiYWxsTmF0aXZlRXZlbnRzIiwiU2V0IiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsInJlZ2lzdGVyVHdvUGhhc2VFdmVudCIsInJlZ2lzdHJhdGlvbk5hbWUiLCJkZXBlbmRlbmNpZXMiLCJyZWdpc3RlckRpcmVjdEV2ZW50IiwiYWRkIiwiY2FuVXNlRE9NIiwiVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVgiLCJSZWdFeHAiLCJpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlIiwidmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlIiwic2V0VmFsdWVGb3JBdHRyaWJ1dGUiLCJhdHRyaWJ1dGVOYW1lIiwicmVtb3ZlQXR0cmlidXRlIiwicHJlZml4JDEwIiwidG9Mb3dlckNhc2UiLCJzZXRWYWx1ZUZvcktub3duQXR0cmlidXRlIiwic2V0VmFsdWVGb3JOYW1lc3BhY2VkQXR0cmlidXRlIiwibmFtZXNwYWNlIiwic2V0QXR0cmlidXRlTlMiLCJnZXRUb1N0cmluZ1ZhbHVlIiwiaXNDaGVja2FibGUiLCJlbGVtIiwibm9kZU5hbWUiLCJ0cmFjayIsIl92YWx1ZVRyYWNrZXIiLCJ2YWx1ZUZpZWxkIiwiZGVzY3JpcHRvciIsImN1cnJlbnRWYWx1ZSIsImdldCIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJ0cmFja1ZhbHVlT25Ob2RlIiwidXBkYXRlVmFsdWVJZkNoYW5nZWQiLCJ0cmFja2VyIiwibGFzdFZhbHVlIiwiY2hlY2tlZCIsImdldEFjdGl2ZUVsZW1lbnQiLCJkb2MiLCJhY3RpdmVFbGVtZW50IiwiZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3Rlc1JlZ2V4IiwiZXNjYXBlU2VsZWN0b3JBdHRyaWJ1dGVWYWx1ZUluc2lkZURvdWJsZVF1b3RlcyIsImNoIiwiY2hhckNvZGVBdCIsInVwZGF0ZUlucHV0IiwibGFzdERlZmF1bHRWYWx1ZSIsImRlZmF1bHRDaGVja2VkIiwic2V0RGVmYXVsdFZhbHVlIiwiaW5pdElucHV0IiwiaXNIeWRyYXRpbmciLCJvd25lckRvY3VtZW50IiwidXBkYXRlT3B0aW9ucyIsIm11bHRpcGxlIiwicHJvcFZhbHVlIiwic2V0RGVmYXVsdFNlbGVjdGVkIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsInVwZGF0ZVRleHRhcmVhIiwiaW5pdFRleHRhcmVhIiwidGV4dENvbnRlbnQiLCJzZXRUZXh0Q29udGVudCIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInVuaXRsZXNzTnVtYmVycyIsInNldFZhbHVlRm9yU3R5bGUiLCJzdHlsZU5hbWUiLCJpc0N1c3RvbVByb3BlcnR5Iiwic2V0UHJvcGVydHkiLCJjc3NGbG9hdCIsImhhcyIsInNldFZhbHVlRm9yU3R5bGVzIiwic3R5bGVzIiwicHJldlN0eWxlcyIsInN0eWxlTmFtZSQxNiIsInN0eWxlTmFtZSQxNyIsImlzQ3VzdG9tRWxlbWVudCIsImFsaWFzZXMiLCJpc0phdmFTY3JpcHRQcm90b2NvbCIsInNhbml0aXplVVJMIiwiY3VycmVudFJlcGxheWluZ0V2ZW50IiwiZ2V0RXZlbnRUYXJnZXQiLCJuYXRpdmVFdmVudCIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInJlc3RvcmVUYXJnZXQiLCJyZXN0b3JlUXVldWUiLCJyZXN0b3JlU3RhdGVPZlRhcmdldCIsImludGVybmFsSW5zdGFuY2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwib3RoZXJOb2RlIiwib3RoZXJQcm9wcyIsImlzSW5zaWRlRXZlbnRIYW5kbGVyIiwiYmF0Y2hlZFVwZGF0ZXMkMSIsImIiLCJmbHVzaFN5bmNXb3JrJDEiLCJnZXRMaXN0ZW5lciIsInBhc3NpdmVCcm93c2VyRXZlbnRzU3VwcG9ydGVkIiwic3RhcnRUZXh0IiwiZmFsbGJhY2tUZXh0IiwiZ2V0RGF0YSIsInN0YXJ0IiwiZW5kIiwic3RhcnRWYWx1ZSIsInN0YXJ0TGVuZ3RoIiwiZW5kVmFsdWUiLCJlbmRMZW5ndGgiLCJtaW5FbmQiLCJnZXRFdmVudENoYXJDb2RlIiwia2V5Q29kZSIsImNoYXJDb2RlIiwiZnVuY3Rpb25UaGF0UmV0dXJuc1RydWUiLCJmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2UiLCJjcmVhdGVTeW50aGV0aWNFdmVudCIsIkludGVyZmFjZSIsIlN5bnRoZXRpY0Jhc2VFdmVudCIsInJlYWN0TmFtZSIsInJlYWN0RXZlbnRUeXBlIiwibmF0aXZlRXZlbnRUYXJnZXQiLCJwcm9wTmFtZSIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsImxhc3RNb3ZlbWVudFgiLCJsYXN0TW92ZW1lbnRZIiwibGFzdE1vdXNlRXZlbnQiLCJFdmVudEludGVyZmFjZSIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIkRhdGUiLCJpc1RydXN0ZWQiLCJTeW50aGV0aWNFdmVudCIsIlVJRXZlbnRJbnRlcmZhY2UiLCJ2aWV3IiwiZGV0YWlsIiwiU3ludGhldGljVUlFdmVudCIsIk1vdXNlRXZlbnRJbnRlcmZhY2UiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImdldEV2ZW50TW9kaWZpZXJTdGF0ZSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJTeW50aGV0aWNNb3VzZUV2ZW50IiwiU3ludGhldGljRHJhZ0V2ZW50IiwiZGF0YVRyYW5zZmVyIiwiU3ludGhldGljRm9jdXNFdmVudCIsIlN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50IiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIlN5bnRoZXRpY0NsaXBib2FyZEV2ZW50IiwiY2xpcGJvYXJkRGF0YSIsIlN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQiLCJub3JtYWxpemVLZXkiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwidHJhbnNsYXRlVG9LZXkiLCJtb2RpZmllcktleVRvUHJvcCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJtb2RpZmllclN0YXRlR2V0dGVyIiwia2V5QXJnIiwiU3ludGhldGljS2V5Ym9hcmRFdmVudCIsImZyb21DaGFyQ29kZSIsImxvY2F0aW9uIiwicmVwZWF0IiwibG9jYWxlIiwid2hpY2giLCJTeW50aGV0aWNQb2ludGVyRXZlbnQiLCJwb2ludGVySWQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiU3ludGhldGljVG91Y2hFdmVudCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQiLCJwcm9wZXJ0eU5hbWUiLCJTeW50aGV0aWNXaGVlbEV2ZW50IiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJTeW50aGV0aWNUb2dnbGVFdmVudCIsIm5ld1N0YXRlIiwib2xkU3RhdGUiLCJFTkRfS0VZQ09ERVMiLCJjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IiwiZG9jdW1lbnRNb2RlIiwiY2FuVXNlVGV4dElucHV0RXZlbnQiLCJ1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSIsIlNQQUNFQkFSX0NIQVIiLCJoYXNTcGFjZUtleXByZXNzIiwiaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kIiwiZG9tRXZlbnROYW1lIiwiZ2V0RGF0YUZyb21DdXN0b21FdmVudCIsImlzQ29tcG9zaW5nIiwic3VwcG9ydGVkSW5wdXRUeXBlcyIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJudW1iZXIiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGltZSIsIndlZWsiLCJpc1RleHRJbnB1dEVsZW1lbnQiLCJjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQiLCJkaXNwYXRjaFF1ZXVlIiwiYWNjdW11bGF0ZVR3b1BoYXNlTGlzdGVuZXJzIiwibGlzdGVuZXJzIiwiYWN0aXZlRWxlbWVudCQxIiwiYWN0aXZlRWxlbWVudEluc3QkMSIsInJ1bkV2ZW50SW5CYXRjaCIsInByb2Nlc3NEaXNwYXRjaFF1ZXVlIiwiZ2V0SW5zdElmVmFsdWVDaGFuZ2VkIiwiZ2V0VGFyZ2V0SW5zdEZvckNoYW5nZUV2ZW50IiwiaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQyODMiLCJpc1N1cHBvcnRlZCRqc2NvbXAkaW5saW5lXzQxOCIsImVsZW1lbnQkanNjb21wJGlubGluZV80MTkiLCJvbmlucHV0Iiwic3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UiLCJkZXRhY2hFdmVudCIsImhhbmRsZVByb3BlcnR5Q2hhbmdlIiwiaGFuZGxlRXZlbnRzRm9ySW5wdXRFdmVudFBvbHlmaWxsIiwiYXR0YWNoRXZlbnQiLCJnZXRUYXJnZXRJbnN0Rm9ySW5wdXRFdmVudFBvbHlmaWxsIiwiZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQiLCJnZXRUYXJnZXRJbnN0Rm9ySW5wdXRPckNoYW5nZUV2ZW50Iiwib2JqZWN0SXMiLCJpcyIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsImN1cnJlbnRLZXkiLCJnZXRMZWFmTm9kZSIsImdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQiLCJvZmZzZXQiLCJub2RlRW5kIiwibmV4dFNpYmxpbmciLCJjb250YWluc05vZGUiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZ2V0QWN0aXZlRWxlbWVudERlZXAiLCJkZWZhdWx0VmlldyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyIsImNvbnRlbnRFZGl0YWJsZSIsInJlc3RvcmVTZWxlY3Rpb24iLCJwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uIiwiY3VyRm9jdXNlZEVsZW0iLCJmb2N1c2VkRWxlbSIsInByaW9yU2VsZWN0aW9uUmFuZ2UiLCJzZWxlY3Rpb25SYW5nZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZ2V0U2VsZWN0aW9uIiwiZXh0ZW5kIiwiZW5kTWFya2VyIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQiLCJhY3RpdmVFbGVtZW50SW5zdCIsImxhc3RTZWxlY3Rpb24iLCJtb3VzZURvd24iLCJjb25zdHJ1Y3RTZWxlY3RFdmVudCIsIm1ha2VQcmVmaXhNYXAiLCJzdHlsZVByb3AiLCJldmVudE5hbWUiLCJwcmVmaXhlcyIsInZlbmRvclByZWZpeGVzIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9ucnVuIiwidHJhbnNpdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmNhbmNlbCIsInRyYW5zaXRpb25lbmQiLCJwcmVmaXhlZEV2ZW50TmFtZXMiLCJnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSIsInByZWZpeE1hcCIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJBTklNQVRJT05fRU5EIiwiQU5JTUFUSU9OX0lURVJBVElPTiIsIkFOSU1BVElPTl9TVEFSVCIsIlRSQU5TSVRJT05fUlVOIiwiVFJBTlNJVElPTl9TVEFSVCIsIlRSQU5TSVRJT05fQ0FOQ0VMIiwiVFJBTlNJVElPTl9FTkQiLCJ0b3BMZXZlbEV2ZW50c1RvUmVhY3ROYW1lcyIsInNpbXBsZUV2ZW50UGx1Z2luRXZlbnRzIiwicmVnaXN0ZXJTaW1wbGVFdmVudCIsImNvbmN1cnJlbnRRdWV1ZXMiLCJjb25jdXJyZW50UXVldWVzSW5kZXgiLCJjb25jdXJyZW50bHlVcGRhdGVkTGFuZXMiLCJmaW5pc2hRdWV1ZWluZ0NvbmN1cnJlbnRVcGRhdGVzIiwiZW5kSW5kZXgiLCJxdWV1ZSIsIm1hcmtVcGRhdGVMYW5lRnJvbUZpYmVyVG9Sb290IiwiZW5xdWV1ZVVwZGF0ZSQxIiwiZW5xdWV1ZUNvbmN1cnJlbnRIb29rVXBkYXRlIiwiZ2V0Um9vdEZvclVwZGF0ZWRGaWJlciIsImVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZSIsInNvdXJjZUZpYmVyIiwiaXNIaWRkZW4iLCJwYXJlbnQiLCJjaGlsZExhbmVzIiwiX3Zpc2liaWxpdHkiLCJoaWRkZW5VcGRhdGVzIiwibmVzdGVkVXBkYXRlQ291bnQiLCJyb290V2l0aE5lc3RlZFVwZGF0ZXMiLCJlbXB0eUNvbnRleHRPYmplY3QiLCJDYXB0dXJlZFN0YWNrcyIsIldlYWtNYXAiLCJjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlciIsInNvdXJjZSIsImV4aXN0aW5nIiwiZm9ya1N0YWNrIiwiZm9ya1N0YWNrSW5kZXgiLCJ0cmVlRm9ya1Byb3ZpZGVyIiwidHJlZUZvcmtDb3VudCIsImlkU3RhY2siLCJpZFN0YWNrSW5kZXgiLCJ0cmVlQ29udGV4dFByb3ZpZGVyIiwidHJlZUNvbnRleHRJZCIsInRyZWVDb250ZXh0T3ZlcmZsb3ciLCJwdXNoVHJlZUZvcmsiLCJ0b3RhbENoaWxkcmVuIiwicHVzaFRyZWVJZCIsImJhc2VJZFdpdGhMZWFkaW5nQml0IiwiYmFzZUxlbmd0aCIsIm51bWJlck9mT3ZlcmZsb3dCaXRzIiwicHVzaE1hdGVyaWFsaXplZFRyZWVJZCIsInBvcFRyZWVDb250ZXh0IiwiaHlkcmF0aW9uUGFyZW50RmliZXIiLCJuZXh0SHlkcmF0YWJsZUluc3RhbmNlIiwiaHlkcmF0aW9uRXJyb3JzIiwicm9vdE9yU2luZ2xldG9uQ29udGV4dCIsIkh5ZHJhdGlvbk1pc21hdGNoRXhjZXB0aW9uIiwidGhyb3dPbkh5ZHJhdGlvbk1pc21hdGNoIiwicXVldWVIeWRyYXRpb25FcnJvciIsInByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UiLCJpbnN0YW5jZSIsIm1lbW9pemVkUHJvcHMiLCJsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50IiwibWVkaWFFdmVudFR5cGVzIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwiY2hlY2tGb3JVbm1hdGNoZWRUZXh0IiwicG9wb3ZlciIsIm9uU2Nyb2xsIiwib25TY3JvbGxFbmQiLCJvbmNsaWNrIiwibm9vcCQxIiwicG9wVG9OZXh0SG9zdFBhcmVudCIsInBvcEh5ZHJhdGlvblN0YXRlIiwiSlNDb21waWxlcl90ZW1wIiwic2hvdWxkQ2xlYXIiLCJzaG91bGRTZXRUZXh0Q29udGVudCIsImdldE5leHRIeWRyYXRhYmxlIiwicmVzZXRIeWRyYXRpb25TdGF0ZSIsIlN1c3BlbnNlRXhjZXB0aW9uIiwiU3VzcGVuc2V5Q29tbWl0RXhjZXB0aW9uIiwibm9vcFN1c3BlbnNleUNvbW1pdFRoZW5hYmxlIiwiaXNUaGVuYWJsZVJlc29sdmVkIiwidGhlbmFibGUiLCJzdGF0dXMiLCJub29wJDMiLCJ0cmFja1VzZWRUaGVuYWJsZSIsInRoZW5hYmxlU3RhdGUiLCJyZWFzb24iLCJ3b3JrSW5Qcm9ncmVzc1Jvb3QiLCJzaGVsbFN1c3BlbmRDb3VudGVyIiwiZnVsZmlsbGVkVmFsdWUiLCJmdWxmaWxsZWRUaGVuYWJsZSIsInJlamVjdGVkVGhlbmFibGUiLCJzdXNwZW5kZWRUaGVuYWJsZSIsImdldFN1c3BlbmRlZFRoZW5hYmxlIiwidGhlbmFibGVTdGF0ZSQxIiwidGhlbmFibGVJbmRleENvdW50ZXIkMSIsInVud3JhcFRoZW5hYmxlIiwiY29lcmNlUmVmIiwidGhyb3dPbkludmFsaWRPYmplY3RUeXBlIiwicmV0dXJuRmliZXIiLCJuZXdDaGlsZCIsImpvaW4iLCJyZXNvbHZlTGF6eSIsImxhenlUeXBlIiwiaW5pdCIsImNyZWF0ZUNoaWxkUmVjb25jaWxlciIsInNob3VsZFRyYWNrU2lkZUVmZmVjdHMiLCJkZWxldGVDaGlsZCIsImNoaWxkVG9EZWxldGUiLCJkZWxldGlvbnMiLCJkZWxldGVSZW1haW5pbmdDaGlsZHJlbiIsImN1cnJlbnRGaXJzdENoaWxkIiwibWFwUmVtYWluaW5nQ2hpbGRyZW4iLCJleGlzdGluZ0NoaWxkcmVuIiwidXNlRmliZXIiLCJwZW5kaW5nUHJvcHMiLCJjcmVhdGVXb3JrSW5Qcm9ncmVzcyIsInBsYWNlQ2hpbGQiLCJuZXdGaWJlciIsImxhc3RQbGFjZWRJbmRleCIsIm5ld0luZGV4IiwicGxhY2VTaW5nbGVDaGlsZCIsInVwZGF0ZVRleHROb2RlIiwiY3JlYXRlRmliZXJGcm9tVGV4dCIsInVwZGF0ZUVsZW1lbnQiLCJlbGVtZW50VHlwZSIsInVwZGF0ZUZyYWdtZW50IiwiY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzIiwidXBkYXRlUG9ydGFsIiwicG9ydGFsIiwiY3JlYXRlRmliZXJGcm9tUG9ydGFsIiwiZnJhZ21lbnQiLCJjcmVhdGVGaWJlckZyb21GcmFnbWVudCIsImNyZWF0ZUNoaWxkIiwicmVhZENvbnRleHREdXJpbmdSZWNvbmNpbGlhdGlvbiIsInVwZGF0ZVNsb3QiLCJvbGRGaWJlciIsInVwZGF0ZUZyb21NYXAiLCJuZXdJZHgiLCJyZWNvbmNpbGVDaGlsZEZpYmVyc0ltcGwiLCJuZXdDaGlsZHJlbiIsInJlc3VsdGluZ0ZpcnN0Q2hpbGQiLCJwcmV2aW91c05ld0ZpYmVyIiwibmV4dE9sZEZpYmVyIiwiZGVsZXRlIiwicmVjb25jaWxlQ2hpbGRyZW5BcnJheSIsInN0ZXAiLCJyZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yIiwiZmlyc3RDaGlsZEZpYmVyIiwiY3JlYXRlRmliZXJJbXBsQ2xhc3MiLCJyZWNvbmNpbGVDaGlsZEZpYmVycyIsIm1vdW50Q2hpbGRGaWJlcnMiLCJjdXJyZW50VHJlZUhpZGRlblN0YWNrQ3Vyc29yIiwicHJldkVudGFuZ2xlZFJlbmRlckxhbmVzQ3Vyc29yIiwicHVzaEhpZGRlbkNvbnRleHQiLCJlbnRhbmdsZWRSZW5kZXJMYW5lcyIsImJhc2VMYW5lcyIsInJldXNlSGlkZGVuQ29udGV4dE9uU3RhY2siLCJwb3BIaWRkZW5Db250ZXh0Iiwic3VzcGVuc2VIYW5kbGVyU3RhY2tDdXJzb3IiLCJzaGVsbEJvdW5kYXJ5IiwicHVzaFByaW1hcnlUcmVlU3VzcGVuc2VIYW5kbGVyIiwiaGFuZGxlciIsInN1c3BlbnNlU3RhY2tDdXJzb3IiLCJwdXNoT2Zmc2NyZWVuU3VzcGVuc2VIYW5kbGVyIiwicmV1c2VTdXNwZW5zZUhhbmRsZXJPblN0YWNrIiwicG9wU3VzcGVuc2VIYW5kbGVyIiwiZmluZEZpcnN0U3VzcGVuZGVkIiwicm93Iiwic3RhdGUiLCJyZXZlYWxPcmRlciIsIkFib3J0Q29udHJvbGxlckxvY2FsIiwiQWJvcnRDb250cm9sbGVyIiwic2lnbmFsIiwiYWJvcnRlZCIsImxpc3RlbmVyIiwiYWJvcnQiLCJzY2hlZHVsZUNhbGxiYWNrJDIiLCJOb3JtYWxQcmlvcml0eSIsIkNhY2hlQ29udGV4dCIsIkNvbnN1bWVyIiwiUHJvdmlkZXIiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsImNyZWF0ZUNhY2hlIiwiY29udHJvbGxlciIsInJlZkNvdW50IiwicmVsZWFzZUNhY2hlIiwiY2FjaGUiLCJjdXJyZW50RW50YW5nbGVkTGlzdGVuZXJzIiwiY3VycmVudEVudGFuZ2xlZFBlbmRpbmdDb3VudCIsImN1cnJlbnRFbnRhbmdsZWRMYW5lIiwiY3VycmVudEVudGFuZ2xlZEFjdGlvblRoZW5hYmxlIiwicGluZ0VuZ3RhbmdsZWRBY3Rpb25TY29wZSIsInByZXZPblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCIsImVudGFuZ2xlZExpc3RlbmVycyIsInJlcXVlc3RUcmFuc2l0aW9uTGFuZSIsImVudGFuZ2xlQXN5bmNBY3Rpb24iLCJyZXN1bWVkQ2FjaGUiLCJwZWVrQ2FjaGVGcm9tUG9vbCIsImNhY2hlUmVzdW1lZEZyb21QcmV2aW91c1JlbmRlciIsInBvb2xlZENhY2hlIiwicHVzaFRyYW5zaXRpb24iLCJvZmZzY3JlZW5Xb3JrSW5Qcm9ncmVzcyIsInByZXZDYWNoZVBvb2wiLCJwb29sIiwiZ2V0U3VzcGVuZGVkQ2FjaGUiLCJjYWNoZUZyb21Qb29sIiwiY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSIsImN1cnJlbnRIb29rIiwid29ya0luUHJvZ3Jlc3NIb29rIiwiZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSIsImRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyIsInNob3VsZERvdWJsZUludm9rZVVzZXJGbnNJbkhvb2tzREVWIiwibG9jYWxJZENvdW50ZXIiLCJ0aGVuYWJsZUluZGV4Q291bnRlciIsImdsb2JhbENsaWVudElkQ291bnRlciIsInRocm93SW52YWxpZEhvb2tFcnJvciIsImFyZUhvb2tJbnB1dHNFcXVhbCIsIm5leHREZXBzIiwicHJldkRlcHMiLCJyZW5kZXJXaXRoSG9va3MiLCJDb21wb25lbnQiLCJzZWNvbmRBcmciLCJuZXh0UmVuZGVyTGFuZXMiLCJ1cGRhdGVRdWV1ZSIsIkhvb2tzRGlzcGF0Y2hlck9uTW91bnQiLCJIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZSIsInJlbmRlcldpdGhIb29rc0FnYWluIiwiZmluaXNoUmVuZGVyaW5nSG9va3MiLCJDb250ZXh0T25seURpc3BhdGNoZXIiLCJkaWRSZW5kZXJUb29GZXdIb29rcyIsImRpZFJlY2VpdmVVcGRhdGUiLCJjaGVja0lmQ29udGV4dENoYW5nZWQiLCJudW1iZXJPZlJlUmVuZGVycyIsImxhc3RFZmZlY3QiLCJldmVudHMiLCJzdG9yZXMiLCJtZW1vQ2FjaGUiLCJIb29rc0Rpc3BhdGNoZXJPblJlcmVuZGVyIiwiVHJhbnNpdGlvbkF3YXJlSG9zdENvbXBvbmVudCIsImRpc3BhdGNoZXIiLCJtYXliZVRoZW5hYmxlIiwidXNlVGhlbmFibGUiLCJjaGVja0RpZFJlbmRlcklkSG9vayIsImRpZFJlbmRlcklkSG9vayIsImJhaWxvdXRIb29rcyIsInJlc2V0SG9va3NPblVud2luZCIsIm1vdW50V29ya0luUHJvZ3Jlc3NIb29rIiwiaG9vayIsImJhc2VTdGF0ZSIsImJhc2VRdWV1ZSIsInVwZGF0ZVdvcmtJblByb2dyZXNzSG9vayIsIm5leHRDdXJyZW50SG9vayIsIm5leHRXb3JrSW5Qcm9ncmVzc0hvb2siLCJ1c2UiLCJ1c2FibGUiLCJyZWFkQ29udGV4dCIsInVzZU1lbW9DYWNoZSIsImFycmF5IiwiYmFzaWNTdGF0ZVJlZHVjZXIiLCJ1cGRhdGVSZWR1Y2VyIiwicmVkdWNlciIsInVwZGF0ZVJlZHVjZXJJbXBsIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsInBlbmRpbmdRdWV1ZSIsImJhc2VGaXJzdCIsIm5ld0Jhc2VRdWV1ZUZpcnN0IiwibmV3QmFzZVF1ZXVlTGFzdCIsImRpZFJlYWRGcm9tRW50YW5nbGVkQXN5bmNBY3Rpb24kNTQiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyIsInJldmVydExhbmUiLCJoYXNFYWdlclN0YXRlIiwiZWFnZXJTdGF0ZSIsIndvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJyZXJlbmRlclJlZHVjZXIiLCJsYXN0UmVuZGVyUGhhc2VVcGRhdGUiLCJ1cGRhdGVTeW5jRXh0ZXJuYWxTdG9yZSIsInN1YnNjcmliZSIsImdldFNuYXBzaG90IiwiZ2V0U2VydmVyU25hcHNob3QiLCJpc0h5ZHJhdGluZyRqc2NvbXAkMCIsInNuYXBzaG90Q2hhbmdlZCIsInVwZGF0ZUVmZmVjdCIsInN1YnNjcmliZVRvU3RvcmUiLCJwdXNoRWZmZWN0IiwidXBkYXRlU3RvcmVJbnN0YW5jZSIsImRlc3Ryb3kiLCJwdXNoU3RvcmVDb25zaXN0ZW5jeUNoZWNrIiwicmVuZGVyZWRTbmFwc2hvdCIsIm5leHRTbmFwc2hvdCIsImNoZWNrSWZTbmFwc2hvdENoYW5nZWQiLCJmb3JjZVN0b3JlUmVyZW5kZXIiLCJsYXRlc3RHZXRTbmFwc2hvdCIsIm5leHRWYWx1ZSIsInNjaGVkdWxlVXBkYXRlT25GaWJlciIsIm1vdW50U3RhdGVJbXBsIiwiaW5pdGlhbFN0YXRlSW5pdGlhbGl6ZXIiLCJ1cGRhdGVPcHRpbWlzdGljSW1wbCIsInBhc3N0aHJvdWdoIiwiZGlzcGF0Y2hBY3Rpb25TdGF0ZSIsImFjdGlvblF1ZXVlIiwic2V0UGVuZGluZ1N0YXRlIiwic2V0U3RhdGUiLCJwYXlsb2FkIiwiaXNSZW5kZXJQaGFzZVVwZGF0ZSIsImFjdGlvbk5vZGUiLCJpc1RyYW5zaXRpb24iLCJydW5BY3Rpb25TdGF0ZUFjdGlvbiIsInByZXZTdGF0ZSIsInByZXZUcmFuc2l0aW9uIiwiY3VycmVudFRyYW5zaXRpb24iLCJvblN0YXJ0VHJhbnNpdGlvbkZpbmlzaCIsImhhbmRsZUFjdGlvblJldHVyblZhbHVlIiwib25BY3Rpb25FcnJvciIsImVycm9yJDYwIiwibmV4dFN0YXRlIiwib25BY3Rpb25TdWNjZXNzIiwibm90aWZ5QWN0aW9uTGlzdGVuZXJzIiwibGFzdCIsImFjdGlvblN0YXRlUmVkdWNlciIsIm1vdW50QWN0aW9uU3RhdGUiLCJpbml0aWFsU3RhdGVQcm9wIiwic3NyRm9ybVN0YXRlIiwiZm9ybVN0YXRlIiwiSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0JGpzY29tcCQwIiwiaW5Sb290T3JTaW5nbGV0b24iLCJkaXNwYXRjaFNldFN0YXRlIiwiZGlzcGF0Y2hPcHRpbWlzdGljU2V0U3RhdGUiLCJ1cGRhdGVBY3Rpb25TdGF0ZSIsInVwZGF0ZUFjdGlvblN0YXRlSW1wbCIsInN0YXRlSG9vayIsImN1cnJlbnRTdGF0ZUhvb2siLCJhY3Rpb25RdWV1ZUhvb2siLCJhY3Rpb25TdGF0ZUFjdGlvbkVmZmVjdCIsInJlcmVuZGVyQWN0aW9uU3RhdGUiLCJkZXBzIiwidXBkYXRlUmVmIiwibW91bnRFZmZlY3RJbXBsIiwiZmliZXJGbGFncyIsImhvb2tGbGFncyIsInVwZGF0ZUVmZmVjdEltcGwiLCJtb3VudEVmZmVjdCIsInVwZGF0ZUluc2VydGlvbkVmZmVjdCIsInVwZGF0ZUxheW91dEVmZmVjdCIsImltcGVyYXRpdmVIYW5kbGVFZmZlY3QiLCJyZWZDbGVhbnVwIiwidXBkYXRlSW1wZXJhdGl2ZUhhbmRsZSIsIm1vdW50RGVidWdWYWx1ZSIsInVwZGF0ZUNhbGxiYWNrIiwiY2FsbGJhY2siLCJ1cGRhdGVNZW1vIiwibmV4dENyZWF0ZSIsIm1vdW50RGVmZXJyZWRWYWx1ZUltcGwiLCJpbml0aWFsVmFsdWUiLCJyZXF1ZXN0RGVmZXJyZWRMYW5lIiwidXBkYXRlRGVmZXJyZWRWYWx1ZUltcGwiLCJwcmV2VmFsdWUiLCJzdGFydFRyYW5zaXRpb24iLCJwZW5kaW5nU3RhdGUiLCJmaW5pc2hlZFN0YXRlIiwicHJldmlvdXNQcmlvcml0eSIsInRoZW5hYmxlV2l0aE92ZXJyaWRlIiwiZGlzcGF0Y2hTZXRTdGF0ZUludGVybmFsIiwicmVxdWVzdFVwZGF0ZUxhbmUiLCJub29wJDIiLCJzdGFydEhvc3RUcmFuc2l0aW9uIiwiZm9ybUZpYmVyIiwiZm9ybURhdGEiLCJlbnN1cmVGb3JtQ29tcG9uZW50SXNTdGF0ZWZ1bCIsInJlcXVlc3RGb3JtUmVzZXQkMSIsImV4aXN0aW5nU3RhdGVIb29rIiwiaW5pdGlhbFJlc2V0U3RhdGUiLCJ1cGRhdGVJZCIsInVwZGF0ZVJlZnJlc2giLCJyZWZyZXNoQ2FjaGUiLCJwcm92aWRlciIsInJvb3QkNjMiLCJlbnF1ZXVlVXBkYXRlIiwiY3JlYXRlVXBkYXRlIiwiZW50YW5nbGVUcmFuc2l0aW9ucyIsImRpc3BhdGNoUmVkdWNlckFjdGlvbiIsImVucXVldWVSZW5kZXJQaGFzZVVwZGF0ZSIsImVudGFuZ2xlVHJhbnNpdGlvblVwZGF0ZSIsImN1cnJlbnRTdGF0ZSIsInRocm93SWZEdXJpbmdSZW5kZXIiLCJxdWV1ZUxhbmVzIiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZVJlZHVjZXIiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZUlkIiwidXNlQ2FjaGVSZWZyZXNoIiwidXNlQWN0aW9uU3RhdGUiLCJ1c2VPcHRpbWlzdGljIiwiaW5pdGlhbEFyZyIsImlkZW50aWZpZXJQcmVmaXgiLCJib29sZWFuT3JUaGVuYWJsZSIsImFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY3RvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm5leHRQcm9wcyIsImNsYXNzQ29tcG9uZW50VXBkYXRlciIsImlzTW91bnRlZCIsImNvbXBvbmVudCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZSIsIm9sZFByb3BzIiwibmV3UHJvcHMiLCJuZXh0Q29udGV4dCIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiY2FsbENvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJyZXNvbHZlQ2xhc3NDb21wb25lbnRQcm9wcyIsImJhc2VQcm9wcyIsImRlZmF1bHRQcm9wcyIsInByb3BOYW1lJDY3IiwicmVwb3J0R2xvYmFsRXJyb3IiLCJyZXBvcnRFcnJvciIsIkVycm9yRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwicHJvY2VzcyIsImVtaXQiLCJkZWZhdWx0T25VbmNhdWdodEVycm9yIiwiZGVmYXVsdE9uQ2F1Z2h0RXJyb3IiLCJkZWZhdWx0T25SZWNvdmVyYWJsZUVycm9yIiwibG9nVW5jYXVnaHRFcnJvciIsImVycm9ySW5mbyIsIm9uVW5jYXVnaHRFcnJvciIsImNvbXBvbmVudFN0YWNrIiwiZSQ2OCIsInNldFRpbWVvdXQiLCJsb2dDYXVnaHRFcnJvciIsImJvdW5kYXJ5Iiwib25DYXVnaHRFcnJvciIsImVycm9yQm91bmRhcnkiLCJlJDY5IiwiY3JlYXRlUm9vdEVycm9yVXBkYXRlIiwiY3JlYXRlQ2xhc3NFcnJvclVwZGF0ZSIsImluaXRpYWxpemVDbGFzc0Vycm9yVXBkYXRlIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCIsIlNlbGVjdGl2ZUh5ZHJhdGlvbkV4Y2VwdGlvbiIsInJlY29uY2lsZUNoaWxkcmVuIiwibmV4dENoaWxkcmVuIiwidXBkYXRlRm9yd2FyZFJlZiIsInByb3BzV2l0aG91dFJlZiIsInByZXBhcmVUb1JlYWRDb250ZXh0IiwiYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayIsInVwZGF0ZU1lbW9Db21wb25lbnQiLCJzaG91bGRDb25zdHJ1Y3QiLCJjb21wYXJlIiwidXBkYXRlU2ltcGxlTWVtb0NvbXBvbmVudCIsImNoZWNrU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0IiwicHJldlByb3BzIiwidXBkYXRlRnVuY3Rpb25Db21wb25lbnQiLCJ1cGRhdGVPZmZzY3JlZW5Db21wb25lbnQiLCJuZXh0SXNEZXRhY2hlZCIsIl9wZW5kaW5nVmlzaWJpbGl0eSIsIm1hcmtSZWYiLCJkZWZlckhpZGRlbk9mZnNjcmVlbkNvbXBvbmVudCIsImNhY2hlUG9vbCIsIm5leHRCYXNlTGFuZXMiLCJwcm9wYWdhdGVQYXJlbnRDb250ZXh0Q2hhbmdlcyIsInJlcGxheUZ1bmN0aW9uQ29tcG9uZW50IiwidXBkYXRlQ2xhc3NDb21wb25lbnQiLCJjb250ZXh0VHlwZSIsInJlZnMiLCJpbml0aWFsaXplVXBkYXRlUXVldWUiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJwcm9jZXNzVXBkYXRlUXVldWUiLCJzdXNwZW5kSWZVcGRhdGVSZWFkRnJvbUVudGFuZ2xlZEFzeW5jQWN0aW9uIiwiY29tcG9uZW50RGlkTW91bnQiLCJ1bnJlc29sdmVkT2xkUHJvcHMiLCJvbGRDb250ZXh0IiwiY29udGV4dFR5cGUkanNjb21wJDAiLCJoYXNGb3JjZVVwZGF0ZSIsImNsb25lVXBkYXRlUXVldWUiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJtb3VudEhvc3RSb290V2l0aG91dEh5ZHJhdGluZyIsIlNVU1BFTkRFRF9NQVJLRVIiLCJ0cmVlQ29udGV4dCIsInJldHJ5TGFuZSIsIm1vdW50U3VzcGVuc2VPZmZzY3JlZW5TdGF0ZSIsImdldFJlbWFpbmluZ1dvcmtJblByaW1hcnlUcmVlIiwicHJpbWFyeVRyZWVEaWREZWZlciIsIndvcmtJblByb2dyZXNzRGVmZXJyZWRMYW5lIiwidXBkYXRlU3VzcGVuc2VDb21wb25lbnQiLCJzaG93RmFsbGJhY2siLCJkaWRTdXNwZW5kIiwiSlNDb21waWxlcl90ZW1wJGpzY29tcCQwIiwibmV4dEluc3RhbmNlIiwib3ZlcmZsb3ciLCJmYWxsYmFjayIsIm1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlciIsIm1vdW50U3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4iLCJyZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyIsImRhdGFzZXQiLCJkaWdlc3QiLCJkZ3N0IiwicmVuZGVyRGlkU3VzcGVuZERlbGF5SWZQb3NzaWJsZSIsInJldHJ5RGVoeWRyYXRlZFN1c3BlbnNlQm91bmRhcnkiLCJfcmVhY3RSZXRyeSIsInN1YnRyZWVGbGFncyIsInByaW1hcnlDaGlsZHJlbiIsIm9mZnNjcmVlblByb3BzIiwiY3JlYXRlRmliZXJGcm9tT2Zmc2NyZWVuIiwic2NoZWR1bGVTdXNwZW5zZVdvcmtPbkZpYmVyIiwicHJvcGFnYXRpb25Sb290Iiwic2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aCIsImluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZSIsImlzQmFja3dhcmRzIiwidGFpbCIsImxhc3RDb250ZW50Um93IiwidGFpbE1vZGUiLCJyZW5kZXJTdGF0ZSIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsInVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudCIsImJlZ2luV29yayIsInB1c2hQcm92aWRlciIsImRpZFN1c3BlbmRCZWZvcmUiLCJhdHRlbXB0RWFybHlCYWlsb3V0SWZOb1NjaGVkdWxlZFVwZGF0ZSIsImxhenlDb21wb25lbnQiLCJwcm9wYWdhdGVDb250ZXh0Q2hhbmdlcyIsImlzRGVoeWRyYXRlZCIsImdldFJlc291cmNlIiwiZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyIiwic2V0SW5pdGlhbFByb3BlcnRpZXMiLCJyZXNvbHZlU2luZ2xldG9uSW5zdGFuY2UiLCJhbnlQcm9wcyIsImhhc0F0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsInJlbCIsInRpdGxlIiwic3JjIiwiY2FuSHlkcmF0ZUluc3RhbmNlIiwiY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSIsInBvb2xlZENhY2hlTGFuZXMiLCJ2YWx1ZUN1cnNvciIsImN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyIiwibGFzdENvbnRleHREZXBlbmRlbmN5IiwicHJvdmlkZXJGaWJlciIsInBvcFByb3ZpZGVyIiwiY29udGV4dHMiLCJmb3JjZVByb3BhZ2F0ZUVudGlyZVRyZWUiLCJuZXh0RmliZXIiLCJmaXJzdENvbnRleHQiLCJkZXBlbmRlbmN5IiwiaXNJbnNpZGVQcm9wYWdhdGlvbkJhaWxvdXQiLCJjdXJyZW50UGFyZW50IiwiY3VycmVudERlcGVuZGVuY2llcyIsIm1lbW9pemVkVmFsdWUiLCJyZWFkQ29udGV4dEZvckNvbnN1bWVyIiwiY29uc3VtZXIiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsImhpZGRlbkNhbGxiYWNrcyIsImNhbGxiYWNrcyIsImV4ZWN1dGlvbkNvbnRleHQiLCJlbnF1ZXVlQ2FwdHVyZWRVcGRhdGUiLCJjYXB0dXJlZFVwZGF0ZSIsIm5ld0ZpcnN0IiwibmV3TGFzdCIsImNsb25lIiwiZGlkUmVhZEZyb21FbnRhbmdsZWRBc3luY0FjdGlvbiIsIndvcmtJblByb2dyZXNzJGpzY29tcCQwIiwiaW5zdGFuY2UkanNjb21wJDAiLCJsYXN0UGVuZGluZ1VwZGF0ZSIsImZpcnN0UGVuZGluZ1VwZGF0ZSIsImlzSGlkZGVuVXBkYXRlIiwiY2FsbENhbGxiYWNrIiwiY29tbWl0Q2FsbGJhY2tzIiwiY29tbWl0SG9va0VmZmVjdExpc3RNb3VudCIsImZpbmlzaGVkV29yayIsImZpcnN0RWZmZWN0IiwiY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IiLCJjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQiLCJuZWFyZXN0TW91bnRlZEFuY2VzdG9yJGpzY29tcCQwIiwibmVhcmVzdE1vdW50ZWRBbmNlc3RvciIsImNvbW1pdENsYXNzQ2FsbGJhY2tzIiwic2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJzYWZlbHlBdHRhY2hSZWYiLCJpbnN0YW5jZVRvVXNlIiwic2FmZWx5RGV0YWNoUmVmIiwiZXJyb3IkMTEyIiwiY29tbWl0SG9zdE1vdW50IiwiYXV0b0ZvY3VzIiwic3JjU2V0Iiwic3Jjc2V0IiwiY29tbWl0SG9zdFVwZGF0ZSIsImRvbUVsZW1lbnQiLCJsYXN0UHJvcHMiLCJwcm9wS2V5IiwibGFzdFByb3AiLCJzZXRQcm9wIiwicHJvcEtleSQyMDMiLCJwcm9wS2V5JDIxOSIsInByb3BLZXkkMjI0IiwicHJvcEtleSQyMjkiLCJzZXRQcm9wT25DdXN0b21FbGVtZW50IiwicHJvcEtleSQyMzQiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiaXNIb3N0UGFyZW50IiwiZ2V0SG9zdFNpYmxpbmciLCJpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGVJbnRvQ29udGFpbmVyIiwiYmVmb3JlIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsImluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZSIsIm9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiIsIm9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4iLCJuZWVkc0Zvcm1SZXNldCIsIlBvc3NpYmx5V2Vha1NldCIsIldlYWtTZXQiLCJuZXh0RWZmZWN0Iiwic2hvdWxkRmlyZUFmdGVyQWN0aXZlSW5zdGFuY2VCbHVyIiwiY29tbWl0TGF5b3V0RWZmZWN0T25GaWJlciIsImZpbmlzaGVkUm9vdCIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VMYXlvdXRFZmZlY3RzIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJlcnJvciQxMTEiLCJjb21taXRTdXNwZW5zZUh5ZHJhdGlvbkNhbGxiYWNrcyIsInByZXZPZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4iLCJwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VSZWFwcGVhckxheW91dEVmZmVjdHMiLCJkZXRhY2hGaWJlckFmdGVyRWZmZWN0cyIsImhvc3RQYXJlbnQiLCJob3N0UGFyZW50SXNDb250YWluZXIiLCJyZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzIiwiY29tbWl0RGVsZXRpb25FZmZlY3RzT25GaWJlciIsImRlbGV0ZWRGaWJlciIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwicHJldkhvc3RQYXJlbnQiLCJwcmV2SG9zdFBhcmVudElzQ29udGFpbmVyIiwicmVtb3ZlQXR0cmlidXRlTm9kZSIsInByZXZIb3N0UGFyZW50SXNDb250YWluZXIkMTE5IiwiY2xlYXJTdXNwZW5zZUJvdW5kYXJ5IiwicmV0cnlJZkJsb2NrZWRPbiIsImF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMiLCJ3YWtlYWJsZXMiLCJyZXRyeUNhY2hlIiwiX3JldHJ5Q2FjaGUiLCJnZXRSZXRyeUNhY2hlIiwid2FrZWFibGUiLCJyZXRyeSIsInJlc29sdmVSZXRyeVdha2VhYmxlIiwicmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyIsInJvb3QkanNjb21wJDAiLCJwYXJlbnRGaWJlciIsImNvbW1pdE11dGF0aW9uRWZmZWN0c09uRmliZXIiLCJjdXJyZW50SG9pc3RhYmxlUm9vdCIsImNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyIsImhvaXN0YWJsZVJvb3QiLCJjdXJyZW50UmVzb3VyY2UiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImhlYWQiLCJxdWVyeVNlbGVjdG9yIiwibWF5YmVOb2RlcyIsImdldEh5ZHJhdGFibGVIb2lzdGFibGVDYWNoZSIsInByb3BlcnR5IiwiaHR0cEVxdWl2IiwiY2hhclNldCIsIm1vdW50SG9pc3RhYmxlIiwiYWNxdWlyZVJlc291cmNlIiwibmV4dE5vZGUiLCJ0YWdDYWNoZXMiLCJnZXRIb2lzdGFibGVSb290IiwicmVjdXJzaXZlbHlSZXNldEZvcm1zIiwiZ2xvYmFsTW9zdFJlY2VudEZhbGxiYWNrVGltZSIsIl9jdXJyZW50IiwicmVjdXJzaXZlbHlUcmF2ZXJzZURpc2FwcGVhckxheW91dEVmZmVjdHMiLCJyZXRyeVF1ZXVlIiwicGFyZW50JGpzY29tcCQwIiwicGFyZW50JDExMyIsInBhcmVudCQxMTUiLCJmaW5pc2hlZFJvb3QkanNjb21wJDAiLCJpbmNsdWRlV29ya0luUHJvZ3Jlc3NFZmZlY3RzIiwiY29tbWl0T2Zmc2NyZWVuUGFzc2l2ZU1vdW50RWZmZWN0cyIsInByZXZpb3VzQ2FjaGUiLCJjb21taXRDYWNoZVBhc3NpdmVNb3VudEVmZmVjdCIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VQYXNzaXZlTW91bnRFZmZlY3RzIiwiY29tbWl0dGVkTGFuZXMiLCJjb21taXR0ZWRUcmFuc2l0aW9ucyIsImNvbW1pdFBhc3NpdmVNb3VudE9uRmliZXIiLCJfZmluaXNoZWRXb3JrJG1lbW9pemUyIiwib25Qb3N0Q29tbWl0IiwicGFzc2l2ZUVmZmVjdER1cmF0aW9uIiwicmVjdXJzaXZlbHlUcmF2ZXJzZUF0b21pY1Bhc3NpdmVFZmZlY3RzIiwicmVjdXJzaXZlbHlUcmF2ZXJzZVJlY29ubmVjdFBhc3NpdmVFZmZlY3RzIiwiY29tbWl0dGVkTGFuZXMkanNjb21wJDAiLCJjb21taXR0ZWRUcmFuc2l0aW9ucyRqc2NvbXAkMCIsInN1c3BlbnNleUNvbW1pdEZsYWciLCJyZWN1cnNpdmVseUFjY3VtdWxhdGVTdXNwZW5zZXlDb21taXQiLCJhY2N1bXVsYXRlU3VzcGVuc2V5Q29tbWl0T25GaWJlciIsInJlc291cmNlIiwic3VzcGVuZGVkU3RhdGUiLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsImdldFN0eWxlS2V5IiwiZ2V0U3R5bGVzaGVldFNlbGVjdG9yRnJvbUtleSIsIl9wIiwib25VbnN1c3BlbmQiLCJzdHlsZXNoZWV0UHJvcHNGcm9tUmF3UHJvcHMiLCJwcmVsb2FkUHJvcHNNYXAiLCJhZG9wdFByZWxvYWRQcm9wc0ZvclN0eWxlc2hlZXQiLCJsaW5rSW5zdGFuY2UiLCJvbmVycm9yIiwic3R5bGVzaGVldHMiLCJzdXNwZW5kUmVzb3VyY2UiLCJwcmV2aW91c0hvaXN0YWJsZVJvb3QiLCJkZXRhY2hBbHRlcm5hdGVTaWJsaW5ncyIsInByZXZpb3VzRmliZXIiLCJyZWN1cnNpdmVseVRyYXZlcnNlUGFzc2l2ZVVubW91bnRFZmZlY3RzIiwiY29tbWl0UGFzc2l2ZVVubW91bnRFZmZlY3RzSW5zaWRlT2ZEZWxldGVkVHJlZV9iZWdpbiIsImNvbW1pdFBhc3NpdmVVbm1vdW50T25GaWJlciIsInJlY3Vyc2l2ZWx5VHJhdmVyc2VEaXNjb25uZWN0UGFzc2l2ZUVmZmVjdHMiLCJkZWxldGVkU3VidHJlZVJvb3QiLCJGaWJlck5vZGUiLCJpc1JlYWN0Q29tcG9uZW50IiwicmVzZXRXb3JrSW5Qcm9ncmVzcyIsIm93bmVyIiwiZmliZXJUYWciLCJob3N0Q29udGV4dCIsIml0ZW1Qcm9wIiwib25Mb2FkIiwib25FcnJvciIsImlzSG9zdEhvaXN0YWJsZVR5cGUiLCJlbGVtZW50cyIsInByaW1hcnlDaGlsZEluc3RhbmNlIiwiX3BlbmRpbmdNYXJrZXJzIiwiX3RyYW5zaXRpb25zIiwiZGV0YWNoIiwiYXR0YWNoIiwicGVuZGluZ0NoaWxkcmVuIiwibWFya1VwZGF0ZSIsInByZWxvYWRSZXNvdXJjZUFuZFN1c3BlbmRJZk5lZWRlZCIsInByZWxvYWRSZXNvdXJjZSIsInNjaGVkdWxlUmV0cnlFZmZlY3QiLCJ3b3JrSW5Qcm9ncmVzc1N1c3BlbmRlZFJldHJ5TGFuZXMiLCJjdXRPZmZUYWlsSWZOZWVkZWQiLCJoYXNSZW5kZXJlZEFUYWlsRmFsbGJhY2siLCJsYXN0VGFpbE5vZGUiLCJsYXN0VGFpbE5vZGUkMTMxIiwiYnViYmxlUHJvcGVydGllcyIsImNvbXBsZXRlZFdvcmsiLCJkaWRCYWlsb3V0IiwibmV3Q2hpbGRMYW5lcyIsImNoaWxkJDEzMiIsImNvbXBsZXRlV29yayIsInBlbmRpbmdDb250ZXh0IiwicXVldWVSZWNvdmVyYWJsZUVycm9ycyIsImNyZWF0ZUVsZW1lbnROUyIsImlubmVySFRNTCIsImNhY2hlJDE0NCIsImxpc3RlblRvQWxsU3VwcG9ydGVkRXZlbnRzIiwid29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyIsIndvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUiLCJ1bndpbmRXb3JrIiwidW53aW5kSW50ZXJydXB0ZWRXb3JrIiwiaW50ZXJydXB0ZWRXb3JrIiwiRGVmYXVsdEFzeW5jRGlzcGF0Y2hlciIsImdldENhY2hlRm9yVHlwZSIsInJlc291cmNlVHlwZSIsImNhY2hlRm9yVHlwZSIsIlBvc3NpYmx5V2Vha01hcCIsIndvcmtJblByb2dyZXNzU3VzcGVuZGVkUmVhc29uIiwid29ya0luUHJvZ3Jlc3NUaHJvd25WYWx1ZSIsIndvcmtJblByb2dyZXNzUm9vdERpZFNraXBTdXNwZW5kZWRTaWJsaW5ncyIsIndvcmtJblByb2dyZXNzUm9vdElzUHJlcmVuZGVyaW5nIiwid29ya0luUHJvZ3Jlc3NSb290RGlkQXR0YWNoUGluZ0xpc3RlbmVyIiwid29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RQaW5nZWRMYW5lcyIsIndvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnMiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyIsIndvcmtJblByb2dyZXNzUm9vdERpZEluY2x1ZGVSZWN1cnNpdmVSZW5kZXJVcGRhdGUiLCJJbmZpbml0eSIsIndvcmtJblByb2dyZXNzVHJhbnNpdGlvbnMiLCJyb290RG9lc0hhdmVQYXNzaXZlRWZmZWN0cyIsInJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzIiwicGVuZGluZ1Bhc3NpdmVFZmZlY3RzTGFuZXMiLCJwZW5kaW5nUGFzc2l2ZUVmZmVjdHNSZW1haW5pbmdMYW5lcyIsInBlbmRpbmdQYXNzaXZlVHJhbnNpdGlvbnMiLCJzdXNwZW5zZUhhbmRsZXIiLCJjYW5jZWxQZW5kaW5nQ29tbWl0IiwicHJlcGFyZUZyZXNoU3RhY2siLCJtYXJrUm9vdFN1c3BlbmRlZCIsImVuc3VyZVJvb3RJc1NjaGVkdWxlZCIsInBlcmZvcm1Xb3JrT25Sb290IiwiZm9yY2VTeW5jIiwic2hvdWxkVGltZVNsaWNlIiwiZXhwaXJlZExhbmVzIiwiZXhpdFN0YXR1cyIsInByZXZFeGVjdXRpb25Db250ZXh0IiwicHJldkRpc3BhdGNoZXIiLCJwdXNoRGlzcGF0Y2hlciIsInByZXZBc3luY0Rpc3BhdGNoZXIiLCJwdXNoQXN5bmNEaXNwYXRjaGVyIiwidGhyb3duVmFsdWUiLCJ0aHJvd0FuZFVud2luZFdvcmtMb29wIiwicmVwbGF5U3VzcGVuZGVkVW5pdE9mV29yayIsImhvc3RGaWJlciIsImNvbXBsZXRlVW5pdE9mV29yayIsInJlc2V0V29ya0luUHJvZ3Jlc3NTdGFjayIsIndvcmtMb29wQ29uY3VycmVudCIsInRocm93blZhbHVlJDE2NiIsImhhbmRsZVRocm93IiwiQSIsInJlbmRlclJvb3RDb25jdXJyZW50IiwicmVuZGVyUm9vdFN5bmMiLCJyZW5kZXJXYXNDb25jdXJyZW50IiwiaXNSZW5kZXJDb25zaXN0ZW50V2l0aEV4dGVybmFsU3RvcmVzIiwiZXJyb3JSZWNvdmVyeURpc2FibGVkTGFuZXMiLCJ3YXNSb290RGVoeWRyYXRlZCIsInRpbWVvdXRIYW5kbGUiLCJzY2hlZHVsZVRpbWVvdXQiLCJjb21taXRSb290V2hlblJlYWR5IiwiZXJyb3JzIiwicmVjb3ZlcmFibGVFcnJvcnMiLCJ0cmFuc2l0aW9ucyIsImRpZEluY2x1ZGVSZW5kZXJQaGFzZVVwZGF0ZSIsInVwZGF0ZWRMYW5lcyIsInN1c3BlbmRlZFJldHJ5TGFuZXMiLCJkaWRTa2lwU3VzcGVuZGVkU2libGluZ3MiLCJzdXNwZW5kZWRDb21taXRSZWFzb24iLCJjb21wbGV0ZWRSZW5kZXJTdGFydFRpbWUiLCJjb21wbGV0ZWRSZW5kZXJFbmRUaW1lIiwidW5zdXNwZW5kIiwiaW5zZXJ0U3VzcGVuZGVkU3R5bGVzaGVldHMiLCJjb21taXQiLCJzdHlsZXNoZWV0VGltZXIiLCJjbGVhclRpbWVvdXQiLCJ3YWl0Rm9yQ29tbWl0VG9CZVJlYWR5IiwiY29tbWl0Um9vdCIsImNoZWNrIiwiZGlkQXR0ZW1wdEVudGlyZVRyZWUiLCJleHBpcmF0aW9uVGltZXMiLCJpbmRleCQ2IiwiZmx1c2hTeW5jV29ya0Fjcm9zc1Jvb3RzX2ltcGwiLCJjYW5jZWxUaW1lb3V0IiwiYWxsRW50YW5nbGVkTGFuZXMiLCJpbmRleCQ0Iiwic2hvdWxkWWllbGRGb3JQcmVyZW5kZXJpbmciLCJ1bml0T2ZXb3JrIiwid29ya0xvb3BTeW5jIiwidGhyb3duVmFsdWUkMTY0IiwicGVyZm9ybVVuaXRPZldvcmsiLCJzdXNwZW5kZWRSZWFzb24iLCJyb290UmVuZGVyTGFuZXMiLCJhdHRhY2hQaW5nTGlzdGVuZXIiLCJtYXJrZXJJbnN0YW5jZXMiLCJjYXVzZSIsIndyYXBwZXJFcnJvciIsInRocm93RXhjZXB0aW9uIiwidW53aW5kVW5pdE9mV29yayIsInNraXBTaWJsaW5ncyIsInByZXZpb3VzVXBkYXRlTGFuZVByaW9yaXR5IiwicmVuZGVyUHJpb3JpdHlMZXZlbCIsImZsdXNoUGFzc2l2ZUVmZmVjdHMiLCJjYWxsYmFja05vZGUiLCJjYWxsYmFja1ByaW9yaXR5IiwicmVtYWluaW5nTGFuZXMiLCJwcmV2aW91c2x5UGVuZGluZ0xhbmVzIiwiaW5kZXgkNyIsImhpZGRlblVwZGF0ZXNGb3JMYW5lIiwibWFya1Jvb3RGaW5pc2hlZCIsImV2ZW50c0VuYWJsZWQiLCJfZW5hYmxlZCIsInNlbGVjdGlvbiIsImUkMjAiLCJpbmRleFdpdGhpbkFuY2hvciIsImluZGV4V2l0aGluRm9jdXMiLCJzZWxlY3Rpb25JbmZvcm1hdGlvbiIsInJlc29sdmVkUHJldlByb3BzIiwiY2xlYXJDb250YWluZXJTcGFyaW5nbHkiLCJjb21taXRCZWZvcmVNdXRhdGlvbkVmZmVjdHMiLCJyZWxlYXNlUm9vdFBvb2xlZENhY2hlIiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdFJvb3QiLCJvblJlY292ZXJhYmxlRXJyb3IiLCJjb21taXRSb290SW1wbCIsInJvb3QkMTcwIiwicmVuZGVyUHJpb3JpdHkiLCJvblBvc3RDb21taXRGaWJlclJvb3QiLCJjYXB0dXJlQ29tbWl0UGhhc2VFcnJvck9uUm9vdCIsInJvb3RGaWJlciIsInBpbmdDYWNoZSIsInRocmVhZElEcyIsInBpbmdTdXNwZW5kZWRSb290IiwicmV0cnlUaW1lZE91dEJvdW5kYXJ5IiwiYm91bmRhcnlGaWJlciIsImZpcnN0U2NoZWR1bGVkUm9vdCIsImxhc3RTY2hlZHVsZWRSb290IiwiZGlkU2NoZWR1bGVNaWNyb3Rhc2siLCJtaWdodEhhdmVQZW5kaW5nU3luY1dvcmsiLCJpc0ZsdXNoaW5nV29yayIsImN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lIiwiY2IiLCJwcm9jZXNzUm9vdFNjaGVkdWxlSW5NaWNyb3Rhc2siLCJzY2hlZHVsZU1pY3JvdGFzayIsInN5bmNUcmFuc2l0aW9uTGFuZXMiLCJvbmx5TGVnYWN5IiwiZGlkUGVyZm9ybVNvbWVXb3JrIiwicm9vdCQxNzIiLCJwZXJmb3JtU3luY1dvcmtPblJvb3QiLCJjdXJyZW50UG9wc3RhdGVUcmFuc2l0aW9uRXZlbnQiLCJzY2hlZHVsZVRhc2tGb3JSb290RHVyaW5nTWljcm90YXNrIiwiaW5kZXgkNSIsImV4cGlyYXRpb25UaW1lIiwicGVyZm9ybVdvcmtPblJvb3RWaWFTY2hlZHVsZXJUYXNrIiwiZGlkVGltZW91dCIsIm9yaWdpbmFsQ2FsbGJhY2tOb2RlIiwid29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMkanNjb21wJDAiLCJjb2VyY2VGb3JtQWN0aW9uUHJvcCIsImFjdGlvblByb3AiLCJjcmVhdGVGb3JtRGF0YVdpdGhTdWJtaXR0ZXIiLCJzdWJtaXR0ZXIiLCJ0ZW1wIiwiRm9ybURhdGEiLCJpJGpzY29tcCRpbmxpbmVfMTQzOSIsImV2ZW50TmFtZSRqc2NvbXAkaW5saW5lXzE0NDAiLCJ0b1VwcGVyQ2FzZSIsIm5vbkRlbGVnYXRlZEV2ZW50cyIsImV2ZW50U3lzdGVtRmxhZ3MiLCJfZGlzcGF0Y2hRdWV1ZSRpIiwicHJldmlvdXNJbnN0YW5jZSIsImkkanNjb21wJDAiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMkaSIsInRhcmdldEVsZW1lbnQiLCJsaXN0ZW5lclNldEtleSIsImFkZFRyYXBwZWRFdmVudExpc3RlbmVyIiwibGlzdGVuVG9OYXRpdmVFdmVudCIsImlzQ2FwdHVyZVBoYXNlTGlzdGVuZXIiLCJsaXN0ZW5pbmdNYXJrZXIiLCJyb290Q29udGFpbmVyRWxlbWVudCIsInRhcmdldENvbnRhaW5lciIsImxpc3RlbmVyV3JhcHBlciIsImRpc3BhdGNoRGlzY3JldGVFdmVudCIsImRpc3BhdGNoQ29udGludW91c0V2ZW50IiwiY2FwdHVyZSIsInBhc3NpdmUiLCJkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0iLCJ0YXJnZXRJbnN0JGpzY29tcCQwIiwiYW5jZXN0b3JJbnN0Iiwibm9kZVRhZyIsImdyYW5kVGFnIiwiU3ludGhldGljRXZlbnRDdG9yIiwiaW5DYXB0dXJlUGhhc2UiLCJhY2N1bXVsYXRlVGFyZ2V0T25seSIsInJlYWN0RXZlbnROYW1lIiwibGFzdEhvc3RDb21wb25lbnQiLCJfaW5zdGFuY2UiLCJjcmVhdGVEaXNwYXRjaExpc3RlbmVyIiwicGFyZW50V2luZG93IiwiZ2V0UGFyZW50IiwiYWNjdW11bGF0ZUVudGVyTGVhdmVMaXN0ZW5lcnNGb3JFdmVudCIsImdldFRhcmdldEluc3RGdW5jIiwiaGFuZGxlRXZlbnRGdW5jIiwiZmFsbGJhY2tEYXRhIiwiZXZlbnRUeXBlIiwiZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyIsImNoYXIiLCJnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMiLCJtYXliZVRhcmdldEluc3QiLCJmb3JtQWN0aW9uIiwiZXh0cmFjdEV2ZW50cyQxIiwidGFyZ2V0RmliZXIiLCJjYXB0dXJlTmFtZSIsIl9pbnN0YW5jZTIiLCJ1bnNoaWZ0IiwiY29tbW9uIiwiX2luc3RhbmNlMyIsIk5PUk1BTElaRV9ORVdMSU5FU19SRUdFWCIsIk5PUk1BTElaRV9OVUxMX0FORF9SRVBMQUNFTUVOVF9SRUdFWCIsIm5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZSIsIm1hcmt1cCIsInNlcnZlclRleHQiLCJjbGllbnRUZXh0IiwiZm9ybUVuY1R5cGUiLCJmb3JtTWV0aG9kIiwiZm9ybVRhcmdldCIsImVuY1R5cGUiLCJfX2h0bWwiLCJtdXRlZCIsImVuZHNXaXRoIiwiaGFzU3JjIiwiaGFzU3JjU2V0IiwicHJvcFZhbHVlJDE4NiIsInBhcmVudE5hbWVzcGFjZSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwibG9jYWxQcm9taXNlIiwicXVldWVNaWNyb3Rhc2siLCJoYW5kbGVFcnJvckluTmV4dFRpY2siLCJwYXJlbnRJbnN0YW5jZSIsInN1c3BlbnNlSW5zdGFuY2UiLCJkZXB0aCIsInRhcmdldEluc3RhbmNlIiwicHJldmlvdXNTaWJsaW5nIiwicm9vdENvbnRhaW5lckluc3RhbmNlIiwicHJlY29ubmVjdHNTZXQiLCJnZXRSb290Tm9kZSIsInByZXZpb3VzRGlzcGF0Y2hlciIsInByZXZpb3VzV2FzUmVuZGVyaW5nIiwid2FzUmVuZGVyaW5nIiwiZm9ybUluc3QiLCJwcmVjb25uZWN0QXMiLCJnbG9iYWxEb2N1bWVudCIsInByZWxvYWRTZWxlY3RvciIsImdldFNjcmlwdEtleSIsImdldFNjcmlwdFNlbGVjdG9yRnJvbUtleSIsInNjcmlwdHMiLCJhZG9wdFByZWxvYWRQcm9wc0ZvclNjcmlwdCIsImxpbmsiLCJpbnNlcnRTdHlsZXNoZWV0IiwibGltaXRlZEVzY2FwZWRIcmVmIiwiY3VycmVudFByb3BzIiwicHJlbG9hZFByb3BzIiwic3R5bGVzJDI0MiIsInJlc291cmNlJDI0MyIsImhyZWZMYW5nIiwicmF3UHJvcHMiLCJzdHlsZVByb3BzIiwiaW5zdGFuY2UkMjQ4Iiwibm9kZXMiLCJwcmlvciIsInN0eWxlc2hlZXRQcm9wcyIsInNjcmlwdFByb3BzIiwia2V5QXR0cmlidXRlIiwiY2FjaGVzIiwibm9kZUtleSIsInByZWNlZGVuY2VzQnlSb290IiwiaW5zZXJ0U3R5bGVzaGVldEludG9Sb290IiwicHJlY2VkZW5jZXMiLCJGaWJlclJvb3ROb2RlIiwiaHlkcmF0ZSIsImluY29tcGxldGVUcmFuc2l0aW9ucyIsInVwZGF0ZUNvbnRhaW5lckltcGwiLCJwYXJlbnRDb21wb25lbnQiLCJnZXRDb250ZXh0Rm9yU3VidHJlZSIsIm1hcmtSZXRyeUxhbmVJbXBsIiwibWFya1JldHJ5TGFuZUlmTm90SHlkcmF0ZWQiLCJhdHRlbXB0Q29udGludW91c0h5ZHJhdGlvbiIsImJsb2NrZWRPbiIsImZpbmRJbnN0YW5jZUJsb2NraW5nRXZlbnQiLCJyZXR1cm5fdGFyZ2V0SW5zdCIsImNsZWFySWZDb250aW51b3VzRXZlbnQiLCJxdWV1ZWRGb2N1cyIsImFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQiLCJxdWV1ZWREcmFnIiwicXVldWVkTW91c2UiLCJxdWV1ZWRQb2ludGVycyIsInF1ZXVlZFBvaW50ZXJDYXB0dXJlcyIsInF1ZXVlSWZDb250aW51b3VzRXZlbnQiLCJkaXNjcmV0ZVJlcGxheWFibGVFdmVudHMiLCJmaW5kSW5zdGFuY2VCbG9ja2luZ1RhcmdldCIsImhhc1NjaGVkdWxlZFJlcGxheUF0dGVtcHQiLCJxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMiLCJleGlzdGluZ1F1ZXVlZEV2ZW50IiwidGFyZ2V0Q29udGFpbmVycyIsImF0dGVtcHRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldCIsInF1ZXVlZFRhcmdldCIsInByaW9yaXR5IiwicnVuV2l0aFByaW9yaXR5IiwiYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudCIsInF1ZXVlZEV2ZW50IiwibmV4dEJsb2NrZWRPbiIsIm5hdGl2ZUV2ZW50Q2xvbmUiLCJzaGlmdCIsImF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnRJbk1hcCIsInJlcGxheVVuYmxvY2tlZEV2ZW50cyIsInNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZCIsInVuYmxvY2tlZCIsImxhc3RTY2hlZHVsZWRSZXBsYXlRdWV1ZSIsInNjaGVkdWxlUmVwbGF5UXVldWVJZk5lZWRlZCIsImZvcm1SZXBsYXlpbmdRdWV1ZSIsInN1Ym1pdHRlck9yQWN0aW9uIiwidW5ibG9jayIsIiQkcmVhY3RGb3JtUmVwbGF5IiwiZm9ybVByb3BzIiwiUmVhY3RET01Sb290IiwiaW50ZXJuYWxSb290IiwiX2ludGVybmFsUm9vdCIsIlJlYWN0RE9NSHlkcmF0aW9uUm9vdCIsInVubW91bnQiLCJ1bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbiIsImlzb21vcnBoaWNSZWFjdFBhY2thZ2VWZXJzaW9uJGpzY29tcCRpbmxpbmVfMTY4NiIsImNvbXBvbmVudE9yRWxlbWVudCIsInBhcmVudEEiLCJwYXJlbnRCIiwiZGlkRmluZENoaWxkIiwiY2hpbGQkMiIsImZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoIiwiaW50ZXJuYWxzJGpzY29tcCRpbmxpbmVfMjE2NSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsInJlY29uY2lsZXJWZXJzaW9uIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaG9vayRqc2NvbXAkaW5saW5lXzIxNjYiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImlzU3RyaWN0TW9kZSIsInVuc3RhYmxlX3N0cmljdE1vZGUiLCJ1bnN0YWJsZV90cmFuc2l0aW9uQ2FsbGJhY2tzIiwiaW5pdGlhbENoaWxkcmVuIiwiaHlkcmF0aW9uQ2FsbGJhY2tzIiwidHJhbnNpdGlvbkNhbGxiYWNrcyIsImNyZWF0ZUZpYmVyUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJuZWVkTGF5ZXIiLCJtb2R1bGVzIiwiZGVkdXBlIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNoZWNrRENFIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImluc2VydFN0eWxlRWxlbWVudCIsImxvY2FscyIsImhvdCIsImludmFsaWRhdGUiLCJpc05hbWVkRXhwb3J0Iiwib2xkTG9jYWxzIiwiYWNjZXB0IiwiaXNFcXVhbExvY2FscyIsImRpc3Bvc2UiLCJoZWFwIiwicGFyZW50SW5kZXgiLCJwZWVrIiwiZmlyc3QiLCJoYWxmTGVuZ3RoIiwibGVmdEluZGV4IiwicmlnaHRJbmRleCIsInJpZ2h0IiwiZGlmZiIsInNvcnRJbmRleCIsInBlcmZvcm1hbmNlIiwibG9jYWxQZXJmb3JtYW5jZSIsImxvY2FsRGF0ZSIsImluaXRpYWxUaW1lIiwidGFza1F1ZXVlIiwidGltZXJRdWV1ZSIsInRhc2tJZENvdW50ZXIiLCJjdXJyZW50VGFzayIsImN1cnJlbnRQcmlvcml0eUxldmVsIiwiaXNQZXJmb3JtaW5nV29yayIsImlzSG9zdENhbGxiYWNrU2NoZWR1bGVkIiwiaXNIb3N0VGltZW91dFNjaGVkdWxlZCIsImxvY2FsU2V0VGltZW91dCIsImxvY2FsQ2xlYXJUaW1lb3V0IiwibG9jYWxTZXRJbW1lZGlhdGUiLCJzZXRJbW1lZGlhdGUiLCJhZHZhbmNlVGltZXJzIiwidGltZXIiLCJzdGFydFRpbWUiLCJoYW5kbGVUaW1lb3V0IiwicmVxdWVzdEhvc3RDYWxsYmFjayIsImZpcnN0VGltZXIiLCJyZXF1ZXN0SG9zdFRpbWVvdXQiLCJzY2hlZHVsZVBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSIsImlzTWVzc2FnZUxvb3BSdW5uaW5nIiwidGFza1RpbWVvdXRJRCIsImZyYW1lSW50ZXJ2YWwiLCJzaG91bGRZaWVsZFRvSG9zdCIsInBlcmZvcm1Xb3JrVW50aWxEZWFkbGluZSIsImhhc01vcmVXb3JrIiwicHJldmlvdXNQcmlvcml0eUxldmVsIiwicHJpb3JpdHlMZXZlbCIsImNvbnRpbnVhdGlvbkNhbGxiYWNrIiwiTWVzc2FnZUNoYW5uZWwiLCJjaGFubmVsIiwicG9ydCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsIm1zIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidGFzayIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJmcHMiLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJldmVudEhhbmRsZXIiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsImRlbGF5IiwidGltZW91dCIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInBhcmVudFByaW9yaXR5TGV2ZWwiLCJtZW1vIiwic3R5bGVUYXJnZXQiLCJjb250ZW50RG9jdW1lbnQiLCJnZXRUYXJnZXQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJSZWFjdE5vb3BVcGRhdGVRdWV1ZSIsImVtcHR5T2JqZWN0IiwiQ29tcG9uZW50RHVtbXkiLCJQdXJlQ29tcG9uZW50IiwicGFydGlhbFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJwdXJlQ29tcG9uZW50UHJvdG90eXBlIiwiUmVhY3RFbGVtZW50Iiwic2VsZiIsImlzVmFsaWRFbGVtZW50Iiwib2JqZWN0IiwidXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgiLCJnZXRFbGVtZW50S2V5IiwiZXNjYXBlckxvb2t1cCIsIm1hcEludG9BcnJheSIsImVzY2FwZWRQcmVmaXgiLCJuYW1lU29GYXIiLCJvbGRFbGVtZW50IiwibmV3S2V5IiwiaW52b2tlQ2FsbGJhY2siLCJuZXh0TmFtZVByZWZpeCIsInJlc29sdmVUaGVuYWJsZSIsIm1hcENoaWxkcmVuIiwibGF6eUluaXRpYWxpemVyIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJtb2R1bGVPYmplY3QiLCJkZWZhdWx0IiwiQ2hpbGRyZW4iLCJmb3JFYWNoRnVuYyIsImZvckVhY2hDb250ZXh0IiwidG9BcnJheSIsIm9ubHkiLCJGcmFnbWVudCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiYWN0IiwiY2xvbmVFbGVtZW50IiwiY29uZmlnIiwiY2hpbGRBcnJheSIsImNyZWF0ZUNvbnRleHQiLCJjaGlsZHJlbkxlbmd0aCIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJsYXp5Iiwic2NvcGUiLCJ1bnN0YWJsZV91c2VDYWNoZVJlZnJlc2giLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleGVjT3B0aW9ucyIsImZhY3RvcnkiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwicmVxdWlyZSIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkZWZpbml0aW9uIiwiaHUiLCJjaHVua0lkIiwiaG1yRiIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwiY2hhcnNldCIsIm5jIiwib25TY3JpcHRDb21wbGV0ZSIsImRvbmVGbnMiLCJjdXJyZW50Q2hpbGRNb2R1bGUiLCJjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyIsInF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyIsImN1cnJlbnRNb2R1bGVEYXRhIiwiaW5zdGFsbGVkTW9kdWxlcyIsImN1cnJlbnRQYXJlbnRzIiwicmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzIiwiY3VycmVudFN0YXR1cyIsImJsb2NraW5nUHJvbWlzZXMiLCJibG9ja2luZ1Byb21pc2VzV2FpdGluZyIsInNldFN0YXR1cyIsIm5ld1N0YXR1cyIsInJlc3VsdHMiLCJhbGwiLCJob3RDaGVjayIsImFwcGx5T25VcGRhdGUiLCJobXJNIiwidXBkYXRlZE1vZHVsZXMiLCJobXJDIiwicmVkdWNlIiwicHJvbWlzZXMiLCJpbnRlcm5hbEFwcGx5IiwiYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMiLCJob3RBcHBseSIsIkJvb2xlYW4iLCJkaXNwb3NlUHJvbWlzZSIsImFwcGx5UHJvbWlzZSIsIm91dGRhdGVkTW9kdWxlcyIsImhtckkiLCJobXJEIiwibWUiLCJfbWFpbiIsInJlcXVlc3QiLCJhY3RpdmUiLCJwYXJlbnRzIiwid2FybiIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsInByb21pc2UiLCJ0cmFja0Jsb2NraW5nUHJvbWlzZSIsImNyZWF0ZVJlcXVpcmUiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJfYWNjZXB0ZWRFcnJvckhhbmRsZXJzIiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJfc2VsZkludmFsaWRhdGVkIiwiX2Rpc3Bvc2VIYW5kbGVycyIsIl9yZXF1aXJlU2VsZiIsImRlcCIsImVycm9ySGFuZGxlciIsImRlY2xpbmUiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiaWR4IiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiY3VycmVudFNjcmlwdCIsImN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QiLCJjdXJyZW50VXBkYXRlQ2h1bmtzIiwiY3VycmVudFVwZGF0ZSIsImN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzIiwiY3VycmVudFVwZGF0ZVJ1bnRpbWUiLCJpbnN0YWxsZWRDaHVua3MiLCJobXJTX2pzb25wIiwid2FpdGluZ1VwZGF0ZVJlc29sdmVzIiwibG9hZFVwZGF0ZUNodW5rIiwidXBkYXRlZE1vZHVsZXNMaXN0IiwiZXJyb3JUeXBlIiwicmVhbFNyYyIsImFwcGx5SGFuZGxlciIsImdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyIsInVwZGF0ZU1vZHVsZUlkIiwib3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBhcmVudElkIiwiYWRkQWxsVG9TZXQiLCJqc29ucEhtciIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJuZXdNb2R1bGVGYWN0b3J5IiwiYWJvcnRFcnJvciIsImRvQXBwbHkiLCJkb0Rpc3Bvc2UiLCJjaGFpbkluZm8iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImoiLCJvdXRkYXRlZE1vZHVsZUlkIiwiZGlzcG9zZUhhbmRsZXJzIiwiZXJyb3JIYW5kbGVycyIsImRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyIsImFjY2VwdENhbGxiYWNrIiwiZGVwZW5kZW5jeUlkIiwiZXJyMiIsIm9uRXJyb3JlZCIsIm9yaWdpbmFsRXJyb3IiLCJpZ25vcmVFcnJvcmVkIiwiZXJyMSIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsImpzb25wIiwiYXBwbHlIYW5kbGVycyIsImNodW5rSWRzIiwicmVtb3ZlZENodW5rcyIsInJlbW92ZWRNb2R1bGVzIiwiZmV0Y2giLCJyZXNwb25zZSIsIm9rIiwic3RhdHVzVGV4dCIsImpzb24iXSwic291cmNlUm9vdCI6IiJ9