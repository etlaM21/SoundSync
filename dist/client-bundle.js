/*! For license information please see client-bundle.js.LICENSE.txt */
(()=>{"use strict";var e,t,n,r,o={11:(e,t,n)=>{n.r(t),n.d(t,{default:()=>l});var r=n(354),o=n.n(r),i=n(314),a=n.n(i)()(o());a.push([e.id,':root{--semi-grey: #1d1d1d;--dark-grey: #0e0e0e;--light-grey: #303030;--dark: #000000;--light: #b0b0b0;--lightest: #d0d0d0;--highlight: #4096f3;--warning: #F24C3F}html,body,#root,#root>div{height:100%}body{background-color:rgba(0,0,0,0);font-family:"Source Sans Pro",Arial,Helvetica,sans-serif;color:var(--light);font-size:1rem}button,input,label,select{margin-right:3px}button,input,select,svg{cursor:pointer}button,input,select,option,label{border-radius:3px;border:solid 1.5px var(--light-grey);background-color:var(--dark-grey);padding:1.5px 3px;text-transform:uppercase;color:var(--light);transition:background-color .1s ease-in-out,color .1s ease-in-out,outline .1s ease-in-out}svg{height:calc(1rem - 1px);width:auto;margin-right:4.5px;fill:var(--light);transform:translateY(2px)}svg:hover,svg:focus{fill:var(--lightest)}svg.active{fill:var(--highlight)}svg.action:hover,svg:focus{fill:var(--highlight)}button:hover,button:focus,input:hover,input:focus,select:hover,select:focus,option:hover,option:focus{background-color:var(--dark);color:var(--lightest)}button:focus,input:focus,select:focus,option:focus{outline:solid 1.5px var(--highlight)}hr{border:1px solid var(--dark)}label{font-size:calc(1rem - 2.5px);padding-bottom:.5px;padding-top:.5px;padding-right:6px;margin-right:-3px}main{display:flex;flex-direction:column;flex-wrap:wrap;width:100%;height:100%}#loader{position:fixed;z-index:10000;text-align:center;top:0;left:0;width:100vw;height:100vh;background-color:var(--dark);opacity:.9}#loader h1,#loader p{animation-name:loadingOpacity;animation-duration:.75s;animation-iteration-count:infinite;animation-direction:alternate}#loader p{animation-delay:.5s}@keyframes loadingOpacity{from{opacity:.5}to{opacity:1}}#toolbar{width:100%;flex:0;margin-top:-3px;margin-bottom:6px;display:flex}#toolbar menu{margin:0;padding:0;display:block;flex-shrink:1;flex-basis:auto;align-self:auto}#toolbar menu#main{flex-grow:1}#toolbar menu .toggled-dropdown{position:absolute;z-index:1600;left:.5rem;top:2rem;background-color:var(--light);border-radius:3px;border:solid 1.5px var(--light-grey);color:var(--dark-grey)}#toolbar menu .toggled-dropdown ul{list-style-type:none;margin:0;padding:0}#toolbar menu .toggled-dropdown ul li{padding:.25rem .5rem;transition:background-color .1s ease-in-out,color .1s ease-in-out;font-size:.9rem;cursor:pointer}#toolbar menu .toggled-dropdown ul li:not(:last-child){border-bottom:solid 1.5px var(--light-grey)}#toolbar menu .toggled-dropdown ul li.active{background-color:var(--highlight);color:var(--light-grey)}#toolbar menu .toggled-dropdown ul li:hover{background-color:var(--dark-grey);color:var(--light)}#toolbar menu .toggled-dropdown p{margin:0;padding:.25rem;background-color:var(--dark-grey)}#toolbar menu .toggled-dropdown p button{background-color:var(--highlight);color:var(--dark)}#toolbar menu .toggled-dropdown p button:hover{background-color:var(--light-grey);color:var(--light)}#information{width:100%;flex:0}#information p:has(small){margin-top:0}#timeline{width:100%;height:100%;flex:1;display:block;position:relative;min-width:100%;min-height:50px;border-radius:3px;border:solid 3px var(--light-grey);background-color:rgba(0,0,0,0);overflow-x:auto}#timeline .grid-timeline,#timeline .grid-bar,#timeline .grid-layers,#timeline .grid-audiowaveform{column-gap:3px;min-width:100%}#timeline .grid-bar,#timeline .grid-beat,#timeline .grid-audiowaveform{height:100%}#timeline .grid-timeline{position:sticky;top:0;left:0;z-index:-10;height:100%;display:grid;grid-template:100%/repeat(3, 1fr);background-color:var(--light-grey)}#timeline .grid-timeline .grid-bar{display:grid;grid-template:repeat(1, 1fr)/repeat(4, 1fr);background-color:var(--semi-grey)}#timeline .grid-timeline .grid-bar .grid-beat{background-color:var(--dark-grey)}#timeline .grid-layers{position:relative;z-index:100;display:grid;grid-template:repeat(1, 1fr)/repeat(12, 1fr);background-color:rgba(0,0,0,0);height:0;overflow-x:clip}#timeline .grid-layers .timeline-layer{position:relative;background-color:#9932cc;border-radius:3px;padding:3px;margin-top:6px;margin-bottom:6px;grid-column-start:3;grid-column-end:6;font-size:.9rem;white-space:nowrap;cursor:ew-resize;-webkit-touch-callout:none !important;-webkit-user-select:none !important;-webkit-user-drag:none !important;-khtml-user-select:none !important;-moz-user-select:none !important;-ms-user-select:none !important;user-select:none !important}#timeline .grid-layers .timeline-layer .timeline-layer-button{position:absolute;top:0;width:50%;height:100%}#timeline .grid-layers .timeline-layer .timeline-layer-button.left{left:0}#timeline .grid-layers .timeline-layer .timeline-layer-button.right{right:0}#timeline .grid-layers .timeline-layer span{color:#fff;mix-blend-mode:difference;pointer-events:none;transform-origin:left}#timeline .grid-layers .timeline-layer.ghost{background-color:rgba(0,0,0,0);outline-style:solid;outline-width:3px;outline-offset:2px}#timeline .grid-audiowaveform{position:absolute;top:0;left:0;z-index:0;opacity:.25}',"",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAAA,MACI,oBAAA,CACA,oBAAA,CACA,qBAAA,CACA,eAAA,CACA,gBAAA,CACA,mBAAA,CACA,oBAAA,CACA,kBAAA,CAGJ,0BACI,WAAA,CAGJ,KACI,8BAAA,CACA,wDAAA,CACA,kBAAA,CACA,cAAA,CAGJ,0BACI,gBAAA,CAGJ,wBACI,cAAA,CAGJ,iCACI,iBAAA,CACA,oCAAA,CACA,iCAAA,CACA,iBAAA,CACA,wBAAA,CACA,kBAAA,CACA,yFAAA,CAGJ,IACI,uBAAA,CACA,UAAA,CACA,kBAAA,CACA,iBAAA,CACA,yBAAA,CACA,oBACI,oBAAA,CAEJ,WACI,qBAAA,CAEJ,2BACI,qBAAA,CAKJ,sGACI,4BAAA,CACA,qBAAA,CAEJ,mDACI,oCAAA,CAIR,GACI,4BAAA,CAGJ,MACI,4BAAA,CACA,mBAAA,CACA,gBAAA,CACA,iBAAA,CACA,iBAAA,CAGJ,KACI,YAAA,CACA,qBAAA,CACA,cAAA,CACA,UAAA,CACA,WAAA,CAGJ,QACI,cAAA,CACA,aAAA,CACA,iBAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,YAAA,CACA,4BAAA,CACA,UAAA,CACA,qBACI,6BAAA,CACA,uBAAA,CACA,kCAAA,CACA,6BAAA,CAEJ,UACI,mBAAA,CAIR,0BACI,KAAA,UAAA,CACA,GAAA,SAAA,CAAA,CAGJ,SACI,UAAA,CACA,MAAA,CACA,eAAA,CACA,iBAAA,CACA,YAAA,CACA,cACI,QAAA,CACA,SAAA,CACA,aAAA,CACA,aAAA,CACA,eAAA,CACA,eAAA,CACA,mBACI,WAAA,CAEJ,gCACI,iBAAA,CACA,YAAA,CACA,UAAA,CACA,QAAA,CACA,6BAAA,CACA,iBAAA,CACA,oCAAA,CACA,sBAAA,CACA,mCACI,oBAAA,CACA,QAAA,CACA,SAAA,CACA,sCACI,oBAAA,CACA,iEAAA,CACA,eAAA,CACA,cAAA,CACA,uDACI,2CAAA,CAEJ,6CACI,iCAAA,CACA,uBAAA,CAEJ,4CACI,iCAAA,CACA,kBAAA,CAIZ,kCACI,QAAA,CACA,cAAA,CACA,iCAAA,CACA,yCACI,iCAAA,CACA,iBAAA,CACA,+CACI,kCAAA,CACA,kBAAA,CAQxB,aACI,UAAA,CACA,MAAA,CAEI,0BACI,YAAA,CAKZ,UACI,UAAA,CACA,WAAA,CACA,MAAA,CACA,aAAA,CACA,iBAAA,CACA,cAAA,CACA,eAAA,CACA,iBAAA,CACA,kCAAA,CACA,8BAAA,CACA,eAAA,CACA,kGACI,cAAA,CACA,cAAA,CAEJ,uEACI,WAAA,CAEJ,yBACI,eAAA,CACA,KAAA,CACA,MAAA,CACA,WAAA,CACA,WAAA,CACA,YAAA,CACA,iCAAA,CACA,kCAAA,CACA,mCACI,YAAA,CACA,2CAAA,CACA,iCAAA,CACA,8CACI,iCAAA,CAIZ,uBACI,iBAAA,CACA,WAAA,CACA,YAAA,CACA,4CAAA,CACA,8BAAA,CACA,QAAA,CACA,eAAA,CACA,uCACI,iBAAA,CACA,wBAAA,CACA,iBAAA,CACA,WAAA,CACA,cAAA,CACA,iBAAA,CACA,mBAAA,CACA,iBAAA,CACA,eAAA,CACA,kBAAA,CACA,gBAAA,CACA,qCAAA,CACA,mCAAA,CACA,iCAAA,CACA,kCAAA,CACA,gCAAA,CACA,+BAAA,CACA,2BAAA,CACA,8DACI,iBAAA,CACA,KAAA,CACA,SAAA,CACA,WAAA,CACA,mEACI,MAAA,CAEJ,oEACI,OAAA,CAGR,4CACI,UAAA,CACA,yBAAA,CACA,mBAAA,CACA,qBAAA,CAEJ,6CACI,8BAAA,CACA,mBAAA,CACA,iBAAA,CACA,kBAAA,CAIZ,8BACI,iBAAA,CACA,KAAA,CACA,MAAA,CACA,SAAA,CACA,WAAA",sourcesContent:[":root {\r\n    --semi-grey: #1d1d1d;\r\n    --dark-grey: #0e0e0e;\r\n    --light-grey: #303030;\r\n    --dark: #000000;\r\n    --light: #b0b0b0;\r\n    --lightest: #d0d0d0;\r\n    --highlight: #4096f3;\r\n    --warning: #F24C3F;\r\n}\r\n\r\nhtml, body, #root, #root>div {\r\n    height: 100%;\r\n}\r\n\r\nbody {\r\n    background-color: transparent;\r\n    font-family: 'Source Sans Pro', Arial, Helvetica, sans-serif;\r\n    color: var(--light);\r\n    font-size: 1rem;\r\n}\r\n\r\nbutton, input, label, select {\r\n    margin-right: 3px;\r\n}\r\n\r\nbutton, input, select, svg {\r\n    cursor: pointer;\r\n}\r\n\r\nbutton, input, select, option, label {\r\n    border-radius: 3px;\r\n    border: solid 1.5px var(--light-grey);\r\n    background-color: var(--dark-grey);\r\n    padding: 1.5px 3px;\r\n    text-transform: uppercase;\r\n    color: var(--light);\r\n    transition: background-color 0.1s ease-in-out, color 0.1s ease-in-out, outline 0.1s ease-in-out;\r\n}\r\n\r\nsvg {\r\n    height: calc(1rem - 1px);\r\n    width: auto;\r\n    margin-right: 4.5px;\r\n    fill: var(--light);\r\n    transform: translateY(2px);\r\n    &:hover, &:focus {\r\n        fill: var(--lightest);\r\n    }\r\n    &.active {\r\n        fill: var(--highlight);\r\n    }\r\n    &.action:hover, &:focus {\r\n        fill: var(--highlight);\r\n    }\r\n}\r\n\r\nbutton, input, select, option {\r\n    &:hover, &:focus {\r\n        background-color: var(--dark);\r\n        color: var(--lightest);\r\n    }\r\n    &:focus {\r\n        outline: solid 1.5px var(--highlight);\r\n    }\r\n}\r\n\r\nhr {\r\n    border: 1px solid var(--dark);\r\n}\r\n\r\nlabel {\r\n    font-size: calc(1rem - 2.5px);\r\n    padding-bottom: 0.5px;\r\n    padding-top: 0.5px;\r\n    padding-right: 6px;\r\n    margin-right: -3px;\r\n}\r\n\r\nmain {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n#loader {\r\n    position: fixed;\r\n    z-index: 10000;\r\n    text-align: center;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-color: var(--dark);\r\n    opacity: 0.9;\r\n    h1, p {\r\n        animation-name: loadingOpacity;\r\n        animation-duration: 0.75s;\r\n        animation-iteration-count: infinite;\r\n        animation-direction: alternate;\r\n    }\r\n    p {\r\n        animation-delay: 0.5s;\r\n    }\r\n}\r\n\r\n@keyframes loadingOpacity {\r\n    from {opacity: 0.5;}\r\n    to {opacity: 1;}\r\n  }\r\n\r\n#toolbar {\r\n    width: 100%;\r\n    flex: 0;\r\n    margin-top: -3px;\r\n    margin-bottom: 6px;\r\n    display: flex;\r\n    menu {\r\n        margin: 0;\r\n        padding: 0;\r\n        display: block;\r\n        flex-shrink: 1;\r\n        flex-basis: auto;\r\n        align-self: auto;\r\n        &#main {   \r\n            flex-grow: 1;\r\n        }\r\n        .toggled-dropdown {\r\n            position: absolute;\r\n            z-index: 1600; /* MUI Tooltip sits at z 1600 */\r\n            left: 0.5rem;\r\n            top: 2rem;\r\n            background-color: var(--light);\r\n            border-radius: 3px;\r\n            border: solid 1.5px var(--light-grey);\r\n            color: var(--dark-grey);\r\n            ul {\r\n                list-style-type: none;\r\n                margin: 0;\r\n                padding: 0;\r\n                li {\r\n                    padding: 0.25rem 0.5rem;\r\n                    transition: background-color 0.1s ease-in-out, color 0.1s ease-in-out;\r\n                    font-size: 0.9rem;\r\n                    cursor: pointer;\r\n                    &:not(:last-child) {\r\n                        border-bottom: solid 1.5px var(--light-grey);\r\n                    }\r\n                    &.active {\r\n                        background-color: var(--highlight);\r\n                        color: var(--light-grey);\r\n                    }\r\n                    &:hover {\r\n                        background-color: var(--dark-grey);\r\n                        color: var(--light);\r\n                    }\r\n                }\r\n            }\r\n            p {\r\n                margin: 0;\r\n                padding: 0.25rem;\r\n                background-color: var(--dark-grey);\r\n                button {\r\n                    background-color: var(--highlight);\r\n                    color: var(--dark);\r\n                    &:hover {\r\n                        background-color: var(--light-grey);\r\n                        color: var(--light);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n#information {\r\n    width: 100%;\r\n    flex: 0;\r\n    p {\r\n        &:has(small) {\r\n            margin-top: 0;\r\n        }\r\n    }\r\n}\r\n\r\n#timeline {\r\n    width: 100%;\r\n    height: 100%;\r\n    flex: 1;\r\n    display: block;\r\n    position: relative;\r\n    min-width: 100%;\r\n    min-height: 50px;\r\n    border-radius: 3px;\r\n    border: solid 3px var(--light-grey);\r\n    background-color: transparent;\r\n    overflow-x: auto;\r\n    .grid-timeline, .grid-bar, .grid-layers, .grid-audiowaveform {\r\n        column-gap: 3px;\r\n        min-width: 100%;\r\n    }\r\n    .grid-bar, .grid-beat, .grid-audiowaveform {\r\n        height: 100%;\r\n    }\r\n    .grid-timeline {\r\n        position: sticky;\r\n        top: 0;\r\n        left: 0;\r\n        z-index: -10;\r\n        height: 100%;\r\n        display: grid;\r\n        grid-template: 100% / repeat(3, 1fr);\r\n        background-color: var(--light-grey); /* Color of bar vertical lines */\r\n        .grid-bar {\r\n            display: grid;\r\n            grid-template: repeat(1, 1fr) / repeat(4, 1fr);\r\n            background-color: var(--semi-grey); /* Color of beat vertical lines */\r\n            .grid-beat {\r\n                background-color: var(--dark-grey);\r\n            }\r\n        }\r\n    }\r\n    .grid-layers {\r\n        position: relative;\r\n        z-index: 100;\r\n        display: grid;\r\n        grid-template: repeat(1, 1fr) / repeat(12, 1fr);\r\n        background-color: transparent;\r\n        height: 0;\r\n        overflow-x: clip;\r\n        .timeline-layer {\r\n            position: relative;\r\n            background-color: darkorchid;\r\n            border-radius: 3px;\r\n            padding: 3px;\r\n            margin-top: 6px;\r\n            margin-bottom: 6px;\r\n            grid-column-start: 3;\r\n            grid-column-end: 6;\r\n            font-size: 0.9rem;\r\n            white-space: nowrap;\r\n            cursor: ew-resize;\r\n            -webkit-touch-callout: none !important;\r\n            -webkit-user-select: none !important;\r\n            -webkit-user-drag: none !important;\r\n            -khtml-user-select: none !important;\r\n            -moz-user-select: none !important;\r\n            -ms-user-select: none !important;\r\n            user-select: none !important;\r\n            .timeline-layer-button {\r\n                position: absolute;\r\n                top: 0;\r\n                width: 50%;\r\n                height: 100%;\r\n                &.left {\r\n                    left: 0;\r\n                }\r\n                &.right {\r\n                    right: 0;\r\n                }\r\n            }\r\n            span {\r\n                color: #ffffff;\r\n                mix-blend-mode: difference;\r\n                pointer-events: none;\r\n                transform-origin: left;\r\n            }\r\n            &.ghost {\r\n                background-color: transparent;\r\n                outline-style: solid;\r\n                outline-width: 3px;\r\n                outline-offset: 2px;\r\n            }\r\n        }\r\n    }\r\n    .grid-audiowaveform {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        z-index: 0;\r\n        opacity: .25;\r\n    }\r\n}"],sourceRoot:""}]);const l=a},39:(e,t,n)=>{var r=n(540),o=n.t(r,2),i=n(338);function a(e,...t){const n=new URL(`https://mui.com/production-error/?code=${e}`);return t.forEach((e=>n.searchParams.append("args[]",e))),`Minified MUI error #${e}; visit ${n} for the full message.`}var l=n(405);function s(e){if("object"!=typeof e||null===e)return!1;const t=Object.getPrototypeOf(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)}function u(e){if(r.isValidElement(e)||(0,l.Hy)(e)||!s(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=u(e[n])})),t}function c(e,t,n={clone:!0}){const o=n.clone?{...e}:e;return s(e)&&s(t)&&Object.keys(t).forEach((i=>{r.isValidElement(t[i])||(0,l.Hy)(t[i])?o[i]=t[i]:s(t[i])&&Object.prototype.hasOwnProperty.call(e,i)&&s(e[i])?o[i]=c(e[i],t[i],n):n.clone?o[i]=s(t[i])?u(t[i]):t[i]:o[i]=t[i]})),o}function d(e,t=0,n=1){return function(e,t=Number.MIN_SAFE_INTEGER,n=Number.MAX_SAFE_INTEGER){return Math.max(t,Math.min(e,n))}(e,t,n)}function f(e){if(e.type)return e;if("#"===e.charAt(0))return f(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(!["rgb","rgba","hsl","hsla","color"].includes(n))throw new Error(a(9,e));let r,o=e.substring(t+1,e.length-1);if("color"===n){if(o=o.split(" "),r=o.shift(),4===o.length&&"/"===o[3].charAt(0)&&(o[3]=o[3].slice(1)),!["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].includes(r))throw new Error(a(10,r))}else o=o.split(",");return o=o.map((e=>parseFloat(e))),{type:n,values:o,colorSpace:r}}const p=(e,t)=>{try{return(e=>{const t=f(e);return t.values.slice(0,3).map(((e,n)=>t.type.includes("hsl")&&0!==n?`${e}%`:e)).join(" ")})(e)}catch(t){return e}};function h(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return t.includes("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):t.includes("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=t.includes("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function m(e){e=f(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,i=r*Math.min(o,1-o),a=(e,t=(e+n/30)%12)=>o-i*Math.max(Math.min(t-3,9-t,1),-1);let l="rgb";const s=[Math.round(255*a(0)),Math.round(255*a(8)),Math.round(255*a(4))];return"hsla"===e.type&&(l+="a",s.push(t[3])),h({type:l,values:s})}function g(e){let t="hsl"===(e=f(e)).type||"hsla"===e.type?f(m(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function y(e,t){return e=f(e),t=d(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,h(e)}function v(e,t,n){try{return y(e,t)}catch(t){return e}}function b(e,t){if(e=f(e),t=d(t),e.type.includes("hsl"))e.values[2]*=1-t;else if(e.type.includes("rgb")||e.type.includes("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return h(e)}function w(e,t,n){try{return b(e,t)}catch(t){return e}}function S(e,t){if(e=f(e),t=d(t),e.type.includes("hsl"))e.values[2]+=(100-e.values[2])*t;else if(e.type.includes("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(e.type.includes("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return h(e)}function k(e,t,n){try{return S(e,t)}catch(t){return e}}function A(e,t,n){try{return function(e,t=.15){return g(e)>.5?b(e,t):S(e,t)}(e,t)}catch(t){return e}}const C={black:"#000",white:"#fff"},x={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},E="#f3e5f5",P="#ce93d8",O="#ba68c8",T="#ab47bc",L="#9c27b0",_="#7b1fa2",M="#e57373",R="#ef5350",N="#f44336",D="#d32f2f",z="#c62828",I="#ffb74d",j="#ffa726",$="#ff9800",B="#f57c00",F="#e65100",W="#e3f2fd",H="#90caf9",U="#42a5f5",V="#1976d2",G="#1565c0",q="#4fc3f7",K="#29b6f6",Q="#03a9f4",X="#0288d1",Y="#01579b",J="#81c784",Z="#66bb6a",ee="#4caf50",te="#388e3c",ne="#2e7d32",re="#1b5e20";function oe(){return{text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:C.white,default:C.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}}}const ie=oe();function ae(){return{text:{primary:C.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:C.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}}}const le=ae();function se(e,t,n,r){const o=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=S(e.main,o):"dark"===t&&(e.dark=b(e.main,i)))}function ue(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2,...o}=e,i=e.primary||function(e="light"){return"dark"===e?{main:H,light:W,dark:U}:{main:V,light:U,dark:G}}(t),l=e.secondary||function(e="light"){return"dark"===e?{main:P,light:E,dark:T}:{main:L,light:O,dark:_}}(t),s=e.error||function(e="light"){return"dark"===e?{main:N,light:M,dark:D}:{main:D,light:R,dark:z}}(t),u=e.info||function(e="light"){return"dark"===e?{main:K,light:q,dark:X}:{main:X,light:Q,dark:Y}}(t),d=e.success||function(e="light"){return"dark"===e?{main:Z,light:J,dark:te}:{main:ne,light:ee,dark:re}}(t),f=e.warning||function(e="light"){return"dark"===e?{main:j,light:I,dark:B}:{main:"#ed6c02",light:$,dark:F}}(t);function p(e){const t=function(e,t){const n=g(e),r=g(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,le.text.primary)>=n?le.text.primary:ie.text.primary;return t}const h=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:i=700})=>{if(!(e={...e}).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error(a(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error(a(12,t?` (${t})`:"",JSON.stringify(e.main)));return se(e,"light",o,r),se(e,"dark",i,r),e.contrastText||(e.contrastText=p(e.main)),e};let m;return"light"===t?m=oe():"dark"===t&&(m=ae()),c({common:{...C},mode:t,primary:h({color:i,name:"primary"}),secondary:h({color:l,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:h({color:s,name:"error"}),warning:h({color:f,name:"warning"}),info:h({color:u,name:"info"}),success:h({color:d,name:"success"}),grey:x,contrastThreshold:n,getContrastText:p,augmentColor:h,tonalOffset:r,...m},o)}function ce(e=""){function t(...n){if(!n.length)return"";const r=n[0];return"string"!=typeof r||r.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)?`, ${r}`:`, var(--${e?`${e}-`:""}${r}${t(...n.slice(1))})`}return(n,...r)=>`var(--${e?`${e}-`:""}${n}${t(...r)})`}function de(e,t){if(!e.containerQueries)return t;const n=Object.keys(t).filter((e=>e.startsWith("@container"))).sort(((e,t)=>{const n=/min-width:\s*([0-9.]+)/;return+(e.match(n)?.[1]||0)-+(t.match(n)?.[1]||0)}));return n.length?n.reduce(((e,n)=>{const r=t[n];return delete e[n],e[n]=r,e}),{...t}):t}const fe={xs:0,sm:600,md:900,lg:1200,xl:1536},pe={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${fe[e]}px)`},he={containerQueries:e=>({up:t=>{let n="number"==typeof t?t:fe[t]||t;return"number"==typeof n&&(n=`${n}px`),e?`@container ${e} (min-width:${n})`:`@container (min-width:${n})`}})};function me(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||pe;return t.reduce(((r,o,i)=>(r[e.up(e.keys[i])]=n(t[i]),r)),{})}if("object"==typeof t){const e=r.breakpoints||pe;return Object.keys(t).reduce(((o,i)=>{if(a=e.keys,"@"===(l=i)||l.startsWith("@")&&(a.some((e=>l.startsWith(`@${e}`)))||l.match(/^@\d/))){const e=function(e,t){const n=t.match(/^@([^/]+)?\/?(.+)?$/);if(!n)return null;const[,r,o]=n,i=Number.isNaN(+r)?r||0:+r;return e.containerQueries(o).up(i)}(r.containerQueries?r:he,i);e&&(o[e]=n(t[i],i))}else if(Object.keys(e.values||fe).includes(i))o[e.up(i)]=n(t[i],i);else{const e=i;o[e]=t[e]}var a,l;return o}),{})}return n(t)}function ge(e,t){return e.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),t)}function ye(e){if("string"!=typeof e)throw new Error(a(7));return e.charAt(0).toUpperCase()+e.slice(1)}function ve(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function be(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:ve(e,n)||r,t&&(o=t(o,r,e)),o}const we=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:r,transform:o}=e,i=e=>{if(null==e[t])return null;const i=e[t],a=ve(e.theme,r)||{};return me(e,i,(e=>{let r=be(a,o,e);return e===r&&"string"==typeof e&&(r=be(a,o,`${t}${"default"===e?"":ye(e)}`,e)),!1===n?r:{[n]:r}}))};return i.propTypes={},i.filterProps=[t],i},Se=function(e,t){return t?c(e,t,{clone:!1}):e},ke={m:"margin",p:"padding"},Ae={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},Ce={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},xe=function(){const e={};return t=>(void 0===e[t]&&(e[t]=(e=>{if(e.length>2){if(!Ce[e])return[e];e=Ce[e]}const[t,n]=e.split(""),r=ke[t],o=Ae[n]||"";return Array.isArray(o)?o.map((e=>r+e)):[r+o]})(t)),e[t])}(),Ee=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],Pe=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],Oe=[...Ee,...Pe];function Te(e,t,n,r){const o=ve(e,t,!0)??n;return"number"==typeof o||"string"==typeof o?e=>"string"==typeof e?e:"string"==typeof o?o.startsWith("var(")&&0===e?0:o.startsWith("var(")&&1===e?o:`calc(${e} * ${o})`:o*e:Array.isArray(o)?e=>{if("string"==typeof e)return e;const t=Math.abs(e),n=o[t];return e>=0?n:"number"==typeof n?-n:"string"==typeof n&&n.startsWith("var(")?`calc(-1 * ${n})`:`-${n}`}:"function"==typeof o?o:()=>{}}function Le(e){return Te(e,"spacing",8)}function _e(e,t){return"string"==typeof t||null==t?t:e(t)}function Me(e,t){const n=Le(e.theme);return Object.keys(e).map((r=>function(e,t,n,r){if(!t.includes(n))return null;const o=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=_e(t,n),e)),{})}(xe(n),r);return me(e,e[n],o)}(e,t,r,n))).reduce(Se,{})}function Re(e){return Me(e,Ee)}function Ne(e){return Me(e,Pe)}function De(e){return Me(e,Oe)}function ze(e=8,t=Le({spacing:e})){if(e.mui)return e;const n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}function Ie(e){const t={};return Object.entries(e).forEach((e=>{const[n,r]=e;"object"==typeof r&&(t[n]=`${r.fontStyle?`${r.fontStyle} `:""}${r.fontVariant?`${r.fontVariant} `:""}${r.fontWeight?`${r.fontWeight} `:""}${r.fontStretch?`${r.fontStretch} `:""}${r.fontSize||""}${r.lineHeight?`/${r.lineHeight} `:""}${r.fontFamily||""}`)})),t}Re.propTypes={},Re.filterProps=Ee,Ne.propTypes={},Ne.filterProps=Pe,De.propTypes={},De.filterProps=Oe;const je=(e,t,n,r=[])=>{let o=e;t.forEach(((e,i)=>{i===t.length-1?Array.isArray(o)?o[Number(e)]=n:o&&"object"==typeof o&&(o[e]=n):o&&"object"==typeof o&&(o[e]||(o[e]=r.includes(e)?[]:{}),o=o[e])}))};function $e(e,t){const{prefix:n,shouldSkipGeneratingVar:r}=t||{},o={},i={},a={};var l,s;return l=(e,t,l)=>{if(!("string"!=typeof t&&"number"!=typeof t||r&&r(e,t))){const r=`--${n?`${n}-`:""}${e.join("-")}`,s=((e,t)=>"number"==typeof t?["lineHeight","fontWeight","opacity","zIndex"].some((t=>e.includes(t)))||e[e.length-1].toLowerCase().includes("opacity")?t:`${t}px`:t)(e,t);Object.assign(o,{[r]:s}),je(i,e,`var(${r})`,l),je(a,e,`var(${r}, ${s})`,l)}},s=e=>"vars"===e[0],function e(t,n=[],r=[]){Object.entries(t).forEach((([t,o])=>{(!s||s&&!s([...n,t]))&&null!=o&&("object"==typeof o&&Object.keys(o).length>0?e(o,[...n,t],Array.isArray(o)?[...r,t]:r):l([...n,t],o,r))}))}(e),{css:o,vars:i,varsWithDefaults:a}}const Be=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?Se(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};function Fe(e){return"number"!=typeof e?e:`${e}px solid`}function We(e,t){return we({prop:e,themeKey:"borders",transform:t})}const He=We("border",Fe),Ue=We("borderTop",Fe),Ve=We("borderRight",Fe),Ge=We("borderBottom",Fe),qe=We("borderLeft",Fe),Ke=We("borderColor"),Qe=We("borderTopColor"),Xe=We("borderRightColor"),Ye=We("borderBottomColor"),Je=We("borderLeftColor"),Ze=We("outline",Fe),et=We("outlineColor"),tt=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=Te(e.theme,"shape.borderRadius",4),n=e=>({borderRadius:_e(t,e)});return me(e,e.borderRadius,n)}return null};tt.propTypes={},tt.filterProps=["borderRadius"],Be(He,Ue,Ve,Ge,qe,Ke,Qe,Xe,Ye,Je,tt,Ze,et);const nt=e=>{if(void 0!==e.gap&&null!==e.gap){const t=Te(e.theme,"spacing",8),n=e=>({gap:_e(t,e)});return me(e,e.gap,n)}return null};nt.propTypes={},nt.filterProps=["gap"];const rt=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=Te(e.theme,"spacing",8),n=e=>({columnGap:_e(t,e)});return me(e,e.columnGap,n)}return null};rt.propTypes={},rt.filterProps=["columnGap"];const ot=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=Te(e.theme,"spacing",8),n=e=>({rowGap:_e(t,e)});return me(e,e.rowGap,n)}return null};function it(e,t){return"grey"===t?t:e}function at(e){return e<=1&&0!==e?100*e+"%":e}ot.propTypes={},ot.filterProps=["rowGap"],Be(nt,rt,ot,we({prop:"gridColumn"}),we({prop:"gridRow"}),we({prop:"gridAutoFlow"}),we({prop:"gridAutoColumns"}),we({prop:"gridAutoRows"}),we({prop:"gridTemplateColumns"}),we({prop:"gridTemplateRows"}),we({prop:"gridTemplateAreas"}),we({prop:"gridArea"})),Be(we({prop:"color",themeKey:"palette",transform:it}),we({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:it}),we({prop:"backgroundColor",themeKey:"palette",transform:it}));const lt=we({prop:"width",transform:at}),st=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{const n=e.theme?.breakpoints?.values?.[t]||fe[t];return n?"px"!==e.theme?.breakpoints?.unit?{maxWidth:`${n}${e.theme.breakpoints.unit}`}:{maxWidth:n}:{maxWidth:at(t)}};return me(e,e.maxWidth,t)}return null};st.filterProps=["maxWidth"];const ut=we({prop:"minWidth",transform:at}),ct=we({prop:"height",transform:at}),dt=we({prop:"maxHeight",transform:at}),ft=we({prop:"minHeight",transform:at}),pt=(we({prop:"size",cssProperty:"width",transform:at}),we({prop:"size",cssProperty:"height",transform:at}),Be(lt,st,ut,ct,dt,ft,we({prop:"boxSizing"})),{border:{themeKey:"borders",transform:Fe},borderTop:{themeKey:"borders",transform:Fe},borderRight:{themeKey:"borders",transform:Fe},borderBottom:{themeKey:"borders",transform:Fe},borderLeft:{themeKey:"borders",transform:Fe},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},outline:{themeKey:"borders",transform:Fe},outlineColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:tt},color:{themeKey:"palette",transform:it},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:it},backgroundColor:{themeKey:"palette",transform:it},p:{style:Ne},pt:{style:Ne},pr:{style:Ne},pb:{style:Ne},pl:{style:Ne},px:{style:Ne},py:{style:Ne},padding:{style:Ne},paddingTop:{style:Ne},paddingRight:{style:Ne},paddingBottom:{style:Ne},paddingLeft:{style:Ne},paddingX:{style:Ne},paddingY:{style:Ne},paddingInline:{style:Ne},paddingInlineStart:{style:Ne},paddingInlineEnd:{style:Ne},paddingBlock:{style:Ne},paddingBlockStart:{style:Ne},paddingBlockEnd:{style:Ne},m:{style:Re},mt:{style:Re},mr:{style:Re},mb:{style:Re},ml:{style:Re},mx:{style:Re},my:{style:Re},margin:{style:Re},marginTop:{style:Re},marginRight:{style:Re},marginBottom:{style:Re},marginLeft:{style:Re},marginX:{style:Re},marginY:{style:Re},marginInline:{style:Re},marginInlineStart:{style:Re},marginInlineEnd:{style:Re},marginBlock:{style:Re},marginBlockStart:{style:Re},marginBlockEnd:{style:Re},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:nt},rowGap:{style:ot},columnGap:{style:rt},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:at},maxWidth:{style:st},minWidth:{transform:at},height:{transform:at},maxHeight:{transform:at},minHeight:{transform:at},boxSizing:{},font:{themeKey:"font"},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}}),ht=function(){function e(e,t,n,r){const o={[e]:t,theme:n},i=r[e];if(!i)return{[e]:t};const{cssProperty:a=e,themeKey:l,transform:s,style:u}=i;if(null==t)return null;if("typography"===l&&"inherit"===t)return{[e]:t};const c=ve(n,l)||{};return u?u(o):me(o,t,(t=>{let n=be(c,s,t);return t===n&&"string"==typeof t&&(n=be(c,s,`${e}${"default"===t?"":ye(t)}`,t)),!1===a?n:{[a]:n}}))}return function t(n){const{sx:r,theme:o={},nested:i}=n||{};if(!r)return null;const a=o.unstable_sxConfig??pt;function l(n){let r=n;if("function"==typeof n)r=n(o);else if("object"!=typeof n)return n;if(!r)return null;const l=function(e={}){const t=e.keys?.reduce(((t,n)=>(t[e.up(n)]={},t)),{});return t||{}}(o.breakpoints),s=Object.keys(l);let u=l;return Object.keys(r).forEach((n=>{const i=function(e,t){return"function"==typeof e?e(t):e}(r[n],o);if(null!=i)if("object"==typeof i)if(a[n])u=Se(u,e(n,i,o,a));else{const e=me({theme:o},i,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,i)?u=Se(u,e):u[n]=t({sx:i,theme:o,nested:!0})}else u=Se(u,e(n,i,o,a))})),!i&&o.modularCssLayers?{"@layer sx":de(o,ge(s,u))}:de(o,ge(s,u))}return Array.isArray(r)?r.map(l):l(r)}}();ht.filterProps=["sx"];const mt=ht;function gt(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:r=5,...o}=e,i=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>({...e,[t.key]:t.val})),{})})(t),a=Object.keys(i);function l(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function s(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-r/100}${n})`}function u(e,o){const i=a.indexOf(o);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==i&&"number"==typeof t[a[i]]?t[a[i]]:o)-r/100}${n})`}return{keys:a,values:i,up:l,down:s,between:u,only:function(e){return a.indexOf(e)+1<a.length?u(e,a[a.indexOf(e)+1]):l(e)},not:function(e){const t=a.indexOf(e);return 0===t?l(a[1]):t===a.length-1?s(a[t]):u(e,a[a.indexOf(e)+1]).replace("@media","@media not all and")},unit:n,...o}}const yt={borderRadius:4};function vt(e,t){const n=this;if(n.vars){if(!n.colorSchemes?.[e]||"function"!=typeof n.getColorSchemeSelector)return{};let r=n.getColorSchemeSelector(e);return"&"===r?t:((r.includes("data-")||r.includes("."))&&(r=`*:where(${r.replace(/\s*&$/,"")}) &`),{[r]:t})}return n.palette.mode===e?t:{}}const bt=function(e={},...t){const{breakpoints:n={},palette:r={},spacing:o,shape:i={},...a}=e;let l=c({breakpoints:gt(n),direction:"ltr",components:{},palette:{mode:"light",...r},spacing:ze(o),shape:{...yt,...i}},a);return l=function(e){const t=(e,t)=>e.replace("@media",t?`@container ${t}`:"@container");function n(n,r){n.up=(...n)=>t(e.breakpoints.up(...n),r),n.down=(...n)=>t(e.breakpoints.down(...n),r),n.between=(...n)=>t(e.breakpoints.between(...n),r),n.only=(...n)=>t(e.breakpoints.only(...n),r),n.not=(...n)=>{const o=t(e.breakpoints.not(...n),r);return o.includes("not all and")?o.replace("not all and ","").replace("min-width:","width<").replace("max-width:","width>").replace("and","or"):o}}const r={},o=e=>(n(r,e),r);return n(o),{...e,containerQueries:o}}(l),l.applyStyles=vt,l=t.reduce(((e,t)=>c(e,t)),l),l.unstable_sxConfig={...pt,...a?.unstable_sxConfig},l.unstable_sx=function(e){return mt({sx:e,theme:this})},l};const wt={textTransform:"uppercase"},St='"Roboto", "Helvetica", "Arial", sans-serif';function kt(e,t){const{fontFamily:n=St,fontSize:r=14,fontWeightLight:o=300,fontWeightRegular:i=400,fontWeightMedium:a=500,fontWeightBold:l=700,htmlFontSize:s=16,allVariants:u,pxToRem:d,...f}="function"==typeof t?t(e):t,p=r/14,h=d||(e=>e/s*p+"rem"),m=(e,t,r,o,i)=>{return{fontFamily:n,fontWeight:e,fontSize:h(t),lineHeight:r,...n===St?{letterSpacing:(a=o/t,Math.round(1e5*a)/1e5+"em")}:{},...i,...u};var a},g={h1:m(o,96,1.167,-1.5),h2:m(o,60,1.2,-.5),h3:m(i,48,1.167,0),h4:m(i,34,1.235,.25),h5:m(i,24,1.334,0),h6:m(a,20,1.6,.15),subtitle1:m(i,16,1.75,.15),subtitle2:m(a,14,1.57,.1),body1:m(i,16,1.5,.15),body2:m(i,14,1.43,.15),button:m(a,14,1.75,.4,wt),caption:m(i,12,1.66,.4),overline:m(i,12,2.66,1,wt),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return c({htmlFontSize:s,pxToRem:h,fontFamily:n,fontSize:r,fontWeightLight:o,fontWeightRegular:i,fontWeightMedium:a,fontWeightBold:l,...g},f,{clone:!1})}function At(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const Ct=["none",At(0,2,1,-1,0,1,1,0,0,1,3,0),At(0,3,1,-2,0,2,2,0,0,1,5,0),At(0,3,3,-2,0,3,4,0,0,1,8,0),At(0,2,4,-1,0,4,5,0,0,1,10,0),At(0,3,5,-1,0,5,8,0,0,1,14,0),At(0,3,5,-1,0,6,10,0,0,1,18,0),At(0,4,5,-2,0,7,10,1,0,2,16,1),At(0,5,5,-3,0,8,10,1,0,3,14,2),At(0,5,6,-3,0,9,12,1,0,3,16,2),At(0,6,6,-3,0,10,14,1,0,4,18,3),At(0,6,7,-4,0,11,15,1,0,4,20,3),At(0,7,8,-4,0,12,17,2,0,5,22,4),At(0,7,8,-4,0,13,19,2,0,5,24,4),At(0,7,9,-4,0,14,21,2,0,5,26,4),At(0,8,9,-5,0,15,22,2,0,6,28,5),At(0,8,10,-5,0,16,24,2,0,6,30,5),At(0,8,11,-5,0,17,26,2,0,6,32,5),At(0,9,11,-5,0,18,28,2,0,7,34,6),At(0,9,12,-6,0,19,29,2,0,7,36,6),At(0,10,13,-6,0,20,31,3,0,8,38,7),At(0,10,13,-6,0,21,33,3,0,8,40,7),At(0,10,14,-6,0,22,35,3,0,8,42,7),At(0,11,14,-7,0,23,36,3,0,9,44,8),At(0,11,15,-7,0,24,38,3,0,9,46,8)],xt={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Et={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Pt(e){return`${Math.round(e)}ms`}function Ot(e){if(!e)return 0;const t=e/36;return Math.min(Math.round(10*(4+15*t**.25+t/5)),3e3)}function Tt(e){const t={...xt,...e.easing},n={...Et,...e.duration};return{getAutoHeightDuration:Ot,create:(e=["all"],r={})=>{const{duration:o=n.standard,easing:i=t.easeInOut,delay:a=0,...l}=r;return(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof o?o:Pt(o)} ${i} ${"string"==typeof a?a:Pt(a)}`)).join(",")},...e,easing:t,duration:n}}const Lt={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};function _t(e={}){const t={...e};return function e(t){const n=Object.entries(t);for(let o=0;o<n.length;o++){const[i,a]=n[o];!s(r=a)&&void 0!==r&&"string"!=typeof r&&"boolean"!=typeof r&&"number"!=typeof r&&!Array.isArray(r)||i.startsWith("unstable_")?delete t[i]:s(a)&&(t[i]={...a},e(t[i]))}var r}(t),`import { unstable_createBreakpoints as createBreakpoints, createTransitions } from '@mui/material/styles';\n\nconst theme = ${JSON.stringify(t,null,2)};\n\ntheme.breakpoints = createBreakpoints(theme.breakpoints || {});\ntheme.transitions = createTransitions(theme.transitions || {});\n\nexport default theme;`}const Mt=function(e={},...t){const{breakpoints:n,mixins:r={},spacing:o,palette:i={},transitions:l={},typography:s={},shape:u,...d}=e;if(e.vars&&void 0===e.generateThemeVars)throw new Error(a(20));const f=ue(i),p=bt(e);let h=c(p,{mixins:(m=p.breakpoints,g=r,{toolbar:{minHeight:56,[m.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[m.up("sm")]:{minHeight:64}},...g}),palette:f,shadows:Ct.slice(),typography:kt(f,s),transitions:Tt(l),zIndex:{...Lt}});var m,g;return h=c(h,d),h=t.reduce(((e,t)=>c(e,t)),h),h.unstable_sxConfig={...pt,...d?.unstable_sxConfig},h.unstable_sx=function(e){return mt({sx:e,theme:this})},h.toRuntimeSource=_t,h};function Rt(e){let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,Math.round(10*t)/1e3}const Nt=[...Array(25)].map(((e,t)=>{if(0===t)return"none";const n=Rt(t);return`linear-gradient(rgba(255 255 255 / ${n}), rgba(255 255 255 / ${n}))`}));function Dt(e){return{inputPlaceholder:"dark"===e?.5:.42,inputUnderline:"dark"===e?.7:.42,switchTrackDisabled:"dark"===e?.2:.12,switchTrack:"dark"===e?.3:.38}}function zt(e){return"dark"===e?Nt:[]}function It(e){return!!e[0].match(/(cssVarPrefix|colorSchemeSelector|modularCssLayers|rootSelector|typography|mixins|breakpoints|direction|transitions)/)||!!e[0].match(/sxConfig$/)||"palette"===e[0]&&!!e[1]?.match(/(mode|contrastThreshold|tonalOffset)/)}const jt=e=>(t,n)=>{const r=e.rootSelector||":root",o=e.colorSchemeSelector;let i=o;if("class"===o&&(i=".%s"),"data"===o&&(i="[data-%s]"),o?.startsWith("data-")&&!o.includes("%s")&&(i=`[${o}="%s"]`),e.defaultColorScheme===t){if("dark"===t){const o={};return(a=e.cssVarPrefix,[...[...Array(25)].map(((e,t)=>`--${a?`${a}-`:""}overlays-${t}`)),`--${a?`${a}-`:""}palette-AppBar-darkBg`,`--${a?`${a}-`:""}palette-AppBar-darkColor`]).forEach((e=>{o[e]=n[e],delete n[e]})),"media"===i?{[r]:n,"@media (prefers-color-scheme: dark)":{[r]:o}}:i?{[i.replace("%s",t)]:o,[`${r}, ${i.replace("%s",t)}`]:n}:{[r]:{...n,...o}}}if(i&&"media"!==i)return`${r}, ${i.replace("%s",String(t))}`}else if(t){if("media"===i)return{[`@media (prefers-color-scheme: ${String(t)})`]:{[r]:n}};if(i)return i.replace("%s",String(t))}var a;return r};function $t(e,t,n){!e[t]&&n&&(e[t]=n)}function Bt(e){return"string"==typeof e&&e.startsWith("hsl")?m(e):e}function Ft(e,t){`${t}Channel`in e||(e[`${t}Channel`]=p(Bt(e[t])))}const Wt=e=>{try{return e()}catch(e){}};function Ht(e,t,n,r){if(!t)return;t=!0===t?{}:t;const o="dark"===r?"dark":"light";if(!n)return void(e[r]=function(e){const{palette:t={mode:"light"},opacity:n,overlays:r,...o}=e,i=ue(t);return{palette:i,opacity:{...Dt(i.mode),...n},overlays:r||zt(i.mode),...o}}({...t,palette:{mode:o,...t?.palette}}));const{palette:i,...a}=Mt({...n,palette:{mode:o,...t?.palette}});return e[r]={...t,palette:i,opacity:{...Dt(o),...t?.opacity},overlays:t?.overlays||zt(o)},a}function Ut(e={},...t){const{colorSchemes:n={light:!0},defaultColorScheme:r,disableCssColorScheme:o=!1,cssVarPrefix:i="mui",shouldSkipGeneratingVar:l=It,colorSchemeSelector:s=(n.light&&n.dark?"media":void 0),rootSelector:u=":root",...d}=e,f=Object.keys(n)[0],h=r||(n.light&&"light"!==f?"light":f),m=((e="mui")=>ce(e))(i),{[h]:g,light:y,dark:b,...S}=n,C={...S};let x=g;if(("dark"===h&&!("dark"in n)||"light"===h&&!("light"in n))&&(x=!0),!x)throw new Error(a(21,h));const E=Ht(C,x,d,h);y&&!C.light&&Ht(C,y,void 0,"light"),b&&!C.dark&&Ht(C,b,void 0,"dark");let P={defaultColorScheme:h,...E,cssVarPrefix:i,colorSchemeSelector:s,rootSelector:u,getCssVar:m,colorSchemes:C,font:{...Ie(E.typography),...E.font},spacing:(O=d.spacing,"number"==typeof O?`${O}px`:"string"==typeof O||"function"==typeof O||Array.isArray(O)?O:"8px")};var O;Object.keys(P.colorSchemes).forEach((e=>{const t=P.colorSchemes[e].palette,n=e=>{const n=e.split("-"),r=n[1],o=n[2];return m(e,t[r][o])};var r;if("light"===t.mode&&($t(t.common,"background","#fff"),$t(t.common,"onBackground","#000")),"dark"===t.mode&&($t(t.common,"background","#000"),$t(t.common,"onBackground","#fff")),r=t,["Alert","AppBar","Avatar","Button","Chip","FilledInput","LinearProgress","Skeleton","Slider","SnackbarContent","SpeedDialAction","StepConnector","StepContent","Switch","TableCell","Tooltip"].forEach((e=>{r[e]||(r[e]={})})),"light"===t.mode){$t(t.Alert,"errorColor",w(t.error.light,.6)),$t(t.Alert,"infoColor",w(t.info.light,.6)),$t(t.Alert,"successColor",w(t.success.light,.6)),$t(t.Alert,"warningColor",w(t.warning.light,.6)),$t(t.Alert,"errorFilledBg",n("palette-error-main")),$t(t.Alert,"infoFilledBg",n("palette-info-main")),$t(t.Alert,"successFilledBg",n("palette-success-main")),$t(t.Alert,"warningFilledBg",n("palette-warning-main")),$t(t.Alert,"errorFilledColor",Wt((()=>t.getContrastText(t.error.main)))),$t(t.Alert,"infoFilledColor",Wt((()=>t.getContrastText(t.info.main)))),$t(t.Alert,"successFilledColor",Wt((()=>t.getContrastText(t.success.main)))),$t(t.Alert,"warningFilledColor",Wt((()=>t.getContrastText(t.warning.main)))),$t(t.Alert,"errorStandardBg",k(t.error.light,.9)),$t(t.Alert,"infoStandardBg",k(t.info.light,.9)),$t(t.Alert,"successStandardBg",k(t.success.light,.9)),$t(t.Alert,"warningStandardBg",k(t.warning.light,.9)),$t(t.Alert,"errorIconColor",n("palette-error-main")),$t(t.Alert,"infoIconColor",n("palette-info-main")),$t(t.Alert,"successIconColor",n("palette-success-main")),$t(t.Alert,"warningIconColor",n("palette-warning-main")),$t(t.AppBar,"defaultBg",n("palette-grey-100")),$t(t.Avatar,"defaultBg",n("palette-grey-400")),$t(t.Button,"inheritContainedBg",n("palette-grey-300")),$t(t.Button,"inheritContainedHoverBg",n("palette-grey-A100")),$t(t.Chip,"defaultBorder",n("palette-grey-400")),$t(t.Chip,"defaultAvatarColor",n("palette-grey-700")),$t(t.Chip,"defaultIconColor",n("palette-grey-700")),$t(t.FilledInput,"bg","rgba(0, 0, 0, 0.06)"),$t(t.FilledInput,"hoverBg","rgba(0, 0, 0, 0.09)"),$t(t.FilledInput,"disabledBg","rgba(0, 0, 0, 0.12)"),$t(t.LinearProgress,"primaryBg",k(t.primary.main,.62)),$t(t.LinearProgress,"secondaryBg",k(t.secondary.main,.62)),$t(t.LinearProgress,"errorBg",k(t.error.main,.62)),$t(t.LinearProgress,"infoBg",k(t.info.main,.62)),$t(t.LinearProgress,"successBg",k(t.success.main,.62)),$t(t.LinearProgress,"warningBg",k(t.warning.main,.62)),$t(t.Skeleton,"bg",`rgba(${n("palette-text-primaryChannel")} / 0.11)`),$t(t.Slider,"primaryTrack",k(t.primary.main,.62)),$t(t.Slider,"secondaryTrack",k(t.secondary.main,.62)),$t(t.Slider,"errorTrack",k(t.error.main,.62)),$t(t.Slider,"infoTrack",k(t.info.main,.62)),$t(t.Slider,"successTrack",k(t.success.main,.62)),$t(t.Slider,"warningTrack",k(t.warning.main,.62));const e=A(t.background.default,.8);$t(t.SnackbarContent,"bg",e),$t(t.SnackbarContent,"color",Wt((()=>t.getContrastText(e)))),$t(t.SpeedDialAction,"fabHoverBg",A(t.background.paper,.15)),$t(t.StepConnector,"border",n("palette-grey-400")),$t(t.StepContent,"border",n("palette-grey-400")),$t(t.Switch,"defaultColor",n("palette-common-white")),$t(t.Switch,"defaultDisabledColor",n("palette-grey-100")),$t(t.Switch,"primaryDisabledColor",k(t.primary.main,.62)),$t(t.Switch,"secondaryDisabledColor",k(t.secondary.main,.62)),$t(t.Switch,"errorDisabledColor",k(t.error.main,.62)),$t(t.Switch,"infoDisabledColor",k(t.info.main,.62)),$t(t.Switch,"successDisabledColor",k(t.success.main,.62)),$t(t.Switch,"warningDisabledColor",k(t.warning.main,.62)),$t(t.TableCell,"border",k(v(t.divider,1),.88)),$t(t.Tooltip,"bg",v(t.grey[700],.92))}if("dark"===t.mode){$t(t.Alert,"errorColor",k(t.error.light,.6)),$t(t.Alert,"infoColor",k(t.info.light,.6)),$t(t.Alert,"successColor",k(t.success.light,.6)),$t(t.Alert,"warningColor",k(t.warning.light,.6)),$t(t.Alert,"errorFilledBg",n("palette-error-dark")),$t(t.Alert,"infoFilledBg",n("palette-info-dark")),$t(t.Alert,"successFilledBg",n("palette-success-dark")),$t(t.Alert,"warningFilledBg",n("palette-warning-dark")),$t(t.Alert,"errorFilledColor",Wt((()=>t.getContrastText(t.error.dark)))),$t(t.Alert,"infoFilledColor",Wt((()=>t.getContrastText(t.info.dark)))),$t(t.Alert,"successFilledColor",Wt((()=>t.getContrastText(t.success.dark)))),$t(t.Alert,"warningFilledColor",Wt((()=>t.getContrastText(t.warning.dark)))),$t(t.Alert,"errorStandardBg",w(t.error.light,.9)),$t(t.Alert,"infoStandardBg",w(t.info.light,.9)),$t(t.Alert,"successStandardBg",w(t.success.light,.9)),$t(t.Alert,"warningStandardBg",w(t.warning.light,.9)),$t(t.Alert,"errorIconColor",n("palette-error-main")),$t(t.Alert,"infoIconColor",n("palette-info-main")),$t(t.Alert,"successIconColor",n("palette-success-main")),$t(t.Alert,"warningIconColor",n("palette-warning-main")),$t(t.AppBar,"defaultBg",n("palette-grey-900")),$t(t.AppBar,"darkBg",n("palette-background-paper")),$t(t.AppBar,"darkColor",n("palette-text-primary")),$t(t.Avatar,"defaultBg",n("palette-grey-600")),$t(t.Button,"inheritContainedBg",n("palette-grey-800")),$t(t.Button,"inheritContainedHoverBg",n("palette-grey-700")),$t(t.Chip,"defaultBorder",n("palette-grey-700")),$t(t.Chip,"defaultAvatarColor",n("palette-grey-300")),$t(t.Chip,"defaultIconColor",n("palette-grey-300")),$t(t.FilledInput,"bg","rgba(255, 255, 255, 0.09)"),$t(t.FilledInput,"hoverBg","rgba(255, 255, 255, 0.13)"),$t(t.FilledInput,"disabledBg","rgba(255, 255, 255, 0.12)"),$t(t.LinearProgress,"primaryBg",w(t.primary.main,.5)),$t(t.LinearProgress,"secondaryBg",w(t.secondary.main,.5)),$t(t.LinearProgress,"errorBg",w(t.error.main,.5)),$t(t.LinearProgress,"infoBg",w(t.info.main,.5)),$t(t.LinearProgress,"successBg",w(t.success.main,.5)),$t(t.LinearProgress,"warningBg",w(t.warning.main,.5)),$t(t.Skeleton,"bg",`rgba(${n("palette-text-primaryChannel")} / 0.13)`),$t(t.Slider,"primaryTrack",w(t.primary.main,.5)),$t(t.Slider,"secondaryTrack",w(t.secondary.main,.5)),$t(t.Slider,"errorTrack",w(t.error.main,.5)),$t(t.Slider,"infoTrack",w(t.info.main,.5)),$t(t.Slider,"successTrack",w(t.success.main,.5)),$t(t.Slider,"warningTrack",w(t.warning.main,.5));const e=A(t.background.default,.98);$t(t.SnackbarContent,"bg",e),$t(t.SnackbarContent,"color",Wt((()=>t.getContrastText(e)))),$t(t.SpeedDialAction,"fabHoverBg",A(t.background.paper,.15)),$t(t.StepConnector,"border",n("palette-grey-600")),$t(t.StepContent,"border",n("palette-grey-600")),$t(t.Switch,"defaultColor",n("palette-grey-300")),$t(t.Switch,"defaultDisabledColor",n("palette-grey-600")),$t(t.Switch,"primaryDisabledColor",w(t.primary.main,.55)),$t(t.Switch,"secondaryDisabledColor",w(t.secondary.main,.55)),$t(t.Switch,"errorDisabledColor",w(t.error.main,.55)),$t(t.Switch,"infoDisabledColor",w(t.info.main,.55)),$t(t.Switch,"successDisabledColor",w(t.success.main,.55)),$t(t.Switch,"warningDisabledColor",w(t.warning.main,.55)),$t(t.TableCell,"border",w(v(t.divider,1),.68)),$t(t.Tooltip,"bg",v(t.grey[700],.92))}Ft(t.background,"default"),Ft(t.background,"paper"),Ft(t.common,"background"),Ft(t.common,"onBackground"),Ft(t,"divider"),Object.keys(t).forEach((e=>{const n=t[e];"tonalOffset"!==e&&n&&"object"==typeof n&&(n.main&&$t(t[e],"mainChannel",p(Bt(n.main))),n.light&&$t(t[e],"lightChannel",p(Bt(n.light))),n.dark&&$t(t[e],"darkChannel",p(Bt(n.dark))),n.contrastText&&$t(t[e],"contrastTextChannel",p(Bt(n.contrastText))),"text"===e&&(Ft(t[e],"primary"),Ft(t[e],"secondary")),"action"===e&&(n.active&&Ft(t[e],"active"),n.selected&&Ft(t[e],"selected")))}))})),P=t.reduce(((e,t)=>c(e,t)),P);const T={prefix:i,disableCssColorScheme:o,shouldSkipGeneratingVar:l,getSelector:jt(P)},{vars:L,generateThemeVars:_,generateStyleSheets:M}=function(e,t={}){const{getSelector:n=y,disableCssColorScheme:r,colorSchemeSelector:o}=t,{colorSchemes:i={},components:a,defaultColorScheme:l="light",...s}=e,{vars:u,css:d,varsWithDefaults:f}=$e(s,t);let p=f;const h={},{[l]:m,...g}=i;if(Object.entries(g||{}).forEach((([e,n])=>{const{vars:r,css:o,varsWithDefaults:i}=$e(n,t);p=c(p,i),h[e]={css:o,vars:r}})),m){const{css:e,vars:n,varsWithDefaults:r}=$e(m,t);p=c(p,r),h[l]={css:e,vars:n}}function y(t,n){let r=o;if("class"===o&&(r=".%s"),"data"===o&&(r="[data-%s]"),o?.startsWith("data-")&&!o.includes("%s")&&(r=`[${o}="%s"]`),t){if("media"===r){if(e.defaultColorScheme===t)return":root";const r=i[t]?.palette?.mode||t;return{[`@media (prefers-color-scheme: ${r})`]:{":root":n}}}if(r)return e.defaultColorScheme===t?`:root, ${r.replace("%s",String(t))}`:r.replace("%s",String(t))}return":root"}return{vars:p,generateThemeVars:()=>{let e={...u};return Object.entries(h).forEach((([,{vars:t}])=>{e=c(e,t)})),e},generateStyleSheets:()=>{const t=[],o=e.defaultColorScheme||"light";function a(e,n){Object.keys(n).length&&t.push("string"==typeof e?{[e]:{...n}}:e)}a(n(void 0,{...d}),d);const{[o]:l,...s}=h;if(l){const{css:e}=l,t=i[o]?.palette?.mode,s=!r&&t?{colorScheme:t,...e}:{...e};a(n(o,{...s}),s)}return Object.entries(s).forEach((([e,{css:t}])=>{const o=i[e]?.palette?.mode,l=!r&&o?{colorScheme:o,...t}:{...t};a(n(e,{...l}),l)})),t}}}(P,T);return P.vars=L,Object.entries(P.colorSchemes[P.defaultColorScheme]).forEach((([e,t])=>{P[e]=t})),P.generateThemeVars=_,P.generateStyleSheets=M,P.generateSpacing=function(){return ze(d.spacing,Le(this))},P.getColorSchemeSelector=function(e){return function(t){return"media"===e?`@media (prefers-color-scheme: ${t})`:e?e.startsWith("data-")&&!e.includes("%s")?`[${e}="${t}"] &`:"class"===e?`.${t} &`:"data"===e?`[data-${t}] &`:`${e.replace("%s",t)} &`:"&"}}(s),P.spacing=P.generateSpacing(),P.shouldSkipGeneratingVar=l,P.unstable_sxConfig={...pt,...d?.unstable_sxConfig},P.unstable_sx=function(e){return mt({sx:e,theme:this})},P.toRuntimeSource=_t,P}function Vt(e,t,n){e.colorSchemes&&n&&(e.colorSchemes[t]={...!0!==n&&n,palette:ue({...!0===n?{}:n.palette,mode:t})})}function Gt(e={},...t){const{palette:n,cssVariables:r=!1,colorSchemes:o=(n?void 0:{light:!0}),defaultColorScheme:i=n?.mode,...a}=e,l=i||"light",s=o?.[l],u={...o,...n?{[l]:{..."boolean"!=typeof s&&s,palette:n}}:void 0};if(!1===r){if(!("colorSchemes"in e))return Mt(e,...t);let r=n;"palette"in e||u[l]&&(!0!==u[l]?r=u[l].palette:"dark"===l&&(r={mode:"dark"}));const o=Mt({...e,palette:r},...t);return o.defaultColorScheme=l,o.colorSchemes=u,"light"===o.palette.mode&&(o.colorSchemes.light={...!0!==u.light&&u.light,palette:o.palette},Vt(o,"dark",u.dark)),"dark"===o.palette.mode&&(o.colorSchemes.dark={...!0!==u.dark&&u.dark,palette:o.palette},Vt(o,"light",u.light)),o}return n||"light"in u||"light"!==l||(u.light=!0),Ut({...a,colorSchemes:u,defaultColorScheme:l,..."boolean"!=typeof r&&r},...t)}const qt=r.createContext(null);function Kt(){return r.useContext(qt)}const Qt="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__";var Xt=n(848);const Yt=function(e){const{children:t,theme:n}=e,o=Kt(),i=r.useMemo((()=>{const e=null===o?{...n}:function(e,t){return"function"==typeof t?t(e):{...e,...t}}(o,n);return null!=e&&(e[Qt]=null!==o),e}),[n,o]);return(0,Xt.jsx)(qt.Provider,{value:i,children:t})};var Jt=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){var t;return null==(t=e.parentNode)?void 0:t.removeChild(e)})),this.tags=[],this.ctr=0},e}(),Zt=Math.abs,en=String.fromCharCode,tn=Object.assign;function nn(e){return e.trim()}function rn(e,t,n){return e.replace(t,n)}function on(e,t){return e.indexOf(t)}function an(e,t){return 0|e.charCodeAt(t)}function ln(e,t,n){return e.slice(t,n)}function sn(e){return e.length}function un(e){return e.length}function cn(e,t){return t.push(e),e}var dn=1,fn=1,pn=0,hn=0,mn=0,gn="";function yn(e,t,n,r,o,i,a){return{value:e,root:t,parent:n,type:r,props:o,children:i,line:dn,column:fn,length:a,return:""}}function vn(e,t){return tn(yn("",null,null,"",null,null,0),e,{length:-e.length},t)}function bn(){return mn=hn>0?an(gn,--hn):0,fn--,10===mn&&(fn=1,dn--),mn}function wn(){return mn=hn<pn?an(gn,hn++):0,fn++,10===mn&&(fn=1,dn++),mn}function Sn(){return an(gn,hn)}function kn(){return hn}function An(e,t){return ln(gn,e,t)}function Cn(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function xn(e){return dn=fn=1,pn=sn(gn=e),hn=0,[]}function En(e){return gn="",e}function Pn(e){return nn(An(hn-1,Ln(91===e?e+2:40===e?e+1:e)))}function On(e){for(;(mn=Sn())&&mn<33;)wn();return Cn(e)>2||Cn(mn)>3?"":" "}function Tn(e,t){for(;--t&&wn()&&!(mn<48||mn>102||mn>57&&mn<65||mn>70&&mn<97););return An(e,kn()+(t<6&&32==Sn()&&32==wn()))}function Ln(e){for(;wn();)switch(mn){case e:return hn;case 34:case 39:34!==e&&39!==e&&Ln(mn);break;case 40:41===e&&Ln(e);break;case 92:wn()}return hn}function _n(e,t){for(;wn()&&e+mn!==57&&(e+mn!==84||47!==Sn()););return"/*"+An(t,hn-1)+"*"+en(47===e?e:wn())}function Mn(e){for(;!Cn(Sn());)wn();return An(e,hn)}var Rn="-ms-",Nn="-moz-",Dn="-webkit-",zn="comm",In="rule",jn="decl",$n="@keyframes";function Bn(e,t){for(var n="",r=un(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function Fn(e,t,n,r){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case jn:return e.return=e.return||e.value;case zn:return"";case $n:return e.return=e.value+"{"+Bn(e.children,r)+"}";case In:e.value=e.props.join(",")}return sn(n=Bn(e.children,r))?e.return=e.value+"{"+n+"}":""}function Wn(e){return En(Hn("",null,null,null,[""],e=xn(e),0,[0],e))}function Hn(e,t,n,r,o,i,a,l,s){for(var u=0,c=0,d=a,f=0,p=0,h=0,m=1,g=1,y=1,v=0,b="",w=o,S=i,k=r,A=b;g;)switch(h=v,v=wn()){case 40:if(108!=h&&58==an(A,d-1)){-1!=on(A+=rn(Pn(v),"&","&\f"),"&\f")&&(y=-1);break}case 34:case 39:case 91:A+=Pn(v);break;case 9:case 10:case 13:case 32:A+=On(h);break;case 92:A+=Tn(kn()-1,7);continue;case 47:switch(Sn()){case 42:case 47:cn(Vn(_n(wn(),kn()),t,n),s);break;default:A+="/"}break;case 123*m:l[u++]=sn(A)*y;case 125*m:case 59:case 0:switch(v){case 0:case 125:g=0;case 59+c:-1==y&&(A=rn(A,/\f/g,"")),p>0&&sn(A)-d&&cn(p>32?Gn(A+";",r,n,d-1):Gn(rn(A," ","")+";",r,n,d-2),s);break;case 59:A+=";";default:if(cn(k=Un(A,t,n,u,c,o,l,b,w=[],S=[],d),i),123===v)if(0===c)Hn(A,t,k,k,w,i,d,l,S);else switch(99===f&&110===an(A,3)?100:f){case 100:case 108:case 109:case 115:Hn(e,k,k,r&&cn(Un(e,k,k,0,0,o,l,b,o,w=[],d),S),o,S,d,l,r?w:S);break;default:Hn(A,k,k,k,[""],S,0,l,S)}}u=c=p=0,m=y=1,b=A="",d=a;break;case 58:d=1+sn(A),p=h;default:if(m<1)if(123==v)--m;else if(125==v&&0==m++&&125==bn())continue;switch(A+=en(v),v*m){case 38:y=c>0?1:(A+="\f",-1);break;case 44:l[u++]=(sn(A)-1)*y,y=1;break;case 64:45===Sn()&&(A+=Pn(wn())),f=Sn(),c=d=sn(b=A+=Mn(kn())),v++;break;case 45:45===h&&2==sn(A)&&(m=0)}}return i}function Un(e,t,n,r,o,i,a,l,s,u,c){for(var d=o-1,f=0===o?i:[""],p=un(f),h=0,m=0,g=0;h<r;++h)for(var y=0,v=ln(e,d+1,d=Zt(m=a[h])),b=e;y<p;++y)(b=nn(m>0?f[y]+" "+v:rn(v,/&\f/g,f[y])))&&(s[g++]=b);return yn(e,t,n,0===o?In:l,s,u,c)}function Vn(e,t,n){return yn(e,t,n,zn,en(mn),ln(e,2,-2),0)}function Gn(e,t,n,r){return yn(e,t,n,jn,ln(e,0,r),ln(e,r+1,-1),r)}var qn=function(e,t,n){for(var r=0,o=0;r=o,o=Sn(),38===r&&12===o&&(t[n]=1),!Cn(o);)wn();return An(e,hn)},Kn=new WeakMap,Qn=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||Kn.get(n))&&!r){Kn.set(e,!0);for(var o=[],i=function(e,t){return En(function(e,t){var n=-1,r=44;do{switch(Cn(r)){case 0:38===r&&12===Sn()&&(t[n]=1),e[n]+=qn(hn-1,t,n);break;case 2:e[n]+=Pn(r);break;case 4:if(44===r){e[++n]=58===Sn()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=en(r)}}while(r=wn());return e}(xn(e),t))}(t,o),a=n.props,l=0,s=0;l<i.length;l++)for(var u=0;u<a.length;u++,s++)e.props[s]=o[l]?i[l].replace(/&\f/g,a[u]):a[u]+" "+i[l]}}},Xn=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function Yn(e,t){switch(function(e,t){return 45^an(e,0)?(((t<<2^an(e,0))<<2^an(e,1))<<2^an(e,2))<<2^an(e,3):0}(e,t)){case 5103:return Dn+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return Dn+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return Dn+e+Nn+e+Rn+e+e;case 6828:case 4268:return Dn+e+Rn+e+e;case 6165:return Dn+e+Rn+"flex-"+e+e;case 5187:return Dn+e+rn(e,/(\w+).+(:[^]+)/,Dn+"box-$1$2"+Rn+"flex-$1$2")+e;case 5443:return Dn+e+Rn+"flex-item-"+rn(e,/flex-|-self/,"")+e;case 4675:return Dn+e+Rn+"flex-line-pack"+rn(e,/align-content|flex-|-self/,"")+e;case 5548:return Dn+e+Rn+rn(e,"shrink","negative")+e;case 5292:return Dn+e+Rn+rn(e,"basis","preferred-size")+e;case 6060:return Dn+"box-"+rn(e,"-grow","")+Dn+e+Rn+rn(e,"grow","positive")+e;case 4554:return Dn+rn(e,/([^-])(transform)/g,"$1"+Dn+"$2")+e;case 6187:return rn(rn(rn(e,/(zoom-|grab)/,Dn+"$1"),/(image-set)/,Dn+"$1"),e,"")+e;case 5495:case 3959:return rn(e,/(image-set\([^]*)/,Dn+"$1$`$1");case 4968:return rn(rn(e,/(.+:)(flex-)?(.*)/,Dn+"box-pack:$3"+Rn+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+Dn+e+e;case 4095:case 3583:case 4068:case 2532:return rn(e,/(.+)-inline(.+)/,Dn+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(sn(e)-1-t>6)switch(an(e,t+1)){case 109:if(45!==an(e,t+4))break;case 102:return rn(e,/(.+:)(.+)-([^]+)/,"$1"+Dn+"$2-$3$1"+Nn+(108==an(e,t+3)?"$3":"$2-$3"))+e;case 115:return~on(e,"stretch")?Yn(rn(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==an(e,t+1))break;case 6444:switch(an(e,sn(e)-3-(~on(e,"!important")&&10))){case 107:return rn(e,":",":"+Dn)+e;case 101:return rn(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+Dn+(45===an(e,14)?"inline-":"")+"box$3$1"+Dn+"$2$3$1"+Rn+"$2box$3")+e}break;case 5936:switch(an(e,t+11)){case 114:return Dn+e+Rn+rn(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return Dn+e+Rn+rn(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return Dn+e+Rn+rn(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return Dn+e+Rn+e+e}return e}var Jn=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case jn:e.return=Yn(e.value,e.length);break;case $n:return Bn([vn(e,{value:rn(e.value,"@","@"+Dn)})],r);case In:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return Bn([vn(e,{props:[rn(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return Bn([vn(e,{props:[rn(t,/:(plac\w+)/,":"+Dn+"input-$1")]}),vn(e,{props:[rn(t,/:(plac\w+)/,":-moz-$1")]}),vn(e,{props:[rn(t,/:(plac\w+)/,Rn+"input-$1")]})],r)}return""}))}}],Zn=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,o,i=e.stylisPlugins||Jn,a={},l=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)a[t[n]]=!0;l.push(e)}));var s,u,c,d,f=[Fn,(d=function(e){s.insert(e)},function(e){e.root||(e=e.return)&&d(e)})],p=(u=[Qn,Xn].concat(i,f),c=un(u),function(e,t,n,r){for(var o="",i=0;i<c;i++)o+=u[i](e,t,n,r)||"";return o});o=function(e,t,n,r){s=n,function(e){Bn(Wn(e),p)}(e?e+"{"+t.styles+"}":t.styles),r&&(h.inserted[t.name]=!0)};var h={key:t,sheet:new Jt({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:a,registered:{},insert:o};return h.sheet.hydrate(l),h};function er(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):n&&(r+=n+" ")})),r}var tr=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},nr=function(e,t,n){tr(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var o=t;do{e.insert(t===o?"."+r:"",o,e.sheet,!0),o=o.next}while(void 0!==o)}},rr={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,scale:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};function or(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}var ir=/[A-Z]|^ms/g,ar=/_EMO_([^_]+?)_([^]*?)_EMO_/g,lr=function(e){return 45===e.charCodeAt(1)},sr=function(e){return null!=e&&"boolean"!=typeof e},ur=or((function(e){return lr(e)?e:e.replace(ir,"-$&").toLowerCase()})),cr=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(ar,(function(e,t,n){return fr={name:t,styles:n,next:fr},t}))}return 1===rr[e]||lr(e)||"number"!=typeof t||0===t?t:t+"px"};function dr(e,t,n){if(null==n)return"";var r=n;if(void 0!==r.__emotion_styles)return r;switch(typeof n){case"boolean":return"";case"object":var o=n;if(1===o.anim)return fr={name:o.name,styles:o.styles,next:fr},o.name;var i=n;if(void 0!==i.styles){var a=i.next;if(void 0!==a)for(;void 0!==a;)fr={name:a.name,styles:a.styles,next:fr},a=a.next;return i.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=dr(e,t,n[o])+";";else for(var i in n){var a=n[i];if("object"!=typeof a){var l=a;null!=t&&void 0!==t[l]?r+=i+"{"+t[l]+"}":sr(l)&&(r+=ur(i)+":"+cr(i,l)+";")}else if(!Array.isArray(a)||"string"!=typeof a[0]||null!=t&&void 0!==t[a[0]]){var s=dr(e,t,a);switch(i){case"animation":case"animationName":r+=ur(i)+":"+s+";";break;default:r+=i+"{"+s+"}"}}else for(var u=0;u<a.length;u++)sr(a[u])&&(r+=ur(i)+":"+cr(i,a[u])+";")}return r}(e,t,n);case"function":if(void 0!==e){var l=fr,s=n(e);return fr=l,dr(e,t,s)}}var u=n;if(null==t)return u;var c=t[u];return void 0!==c?c:u}var fr,pr=/label:\s*([^\s;{]+)\s*(;|$)/g;function hr(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";fr=void 0;var i=e[0];null==i||void 0===i.raw?(r=!1,o+=dr(n,t,i)):o+=i[0];for(var a=1;a<e.length;a++)o+=dr(n,t,e[a]),r&&(o+=i[a]);pr.lastIndex=0;for(var l,s="";null!==(l=pr.exec(o));)s+="-"+l[1];var u=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(o)+s;return{name:u,styles:o,next:fr}}var mr=!!o.useInsertionEffect&&o.useInsertionEffect,gr=mr||function(e){return e()},yr=mr||r.useLayoutEffect,vr=r.createContext("undefined"!=typeof HTMLElement?Zn({key:"css"}):null),br=(vr.Provider,function(e){return(0,r.forwardRef)((function(t,n){var o=(0,r.useContext)(vr);return e(t,o,n)}))}),wr=r.createContext({}),Sr={}.hasOwnProperty,kr="__EMOTION_TYPE_PLEASE_DO_NOT_USE__",Ar=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return tr(t,n,r),gr((function(){return nr(t,n,r)})),null},Cr=br((function(e,t,n){var o=e.css;"string"==typeof o&&void 0!==t.registered[o]&&(o=t.registered[o]);var i=e[kr],a=[o],l="";"string"==typeof e.className?l=er(t.registered,a,e.className):null!=e.className&&(l=e.className+" ");var s=hr(a,void 0,r.useContext(wr));l+=t.key+"-"+s.name;var u={};for(var c in e)Sr.call(e,c)&&"css"!==c&&c!==kr&&(u[c]=e[c]);return u.className=l,n&&(u.ref=n),r.createElement(r.Fragment,null,r.createElement(Ar,{cache:t,serialized:s,isStringTag:"string"==typeof i}),r.createElement(i,u))}));const xr=function(e=null){const t=r.useContext(wr);return t&&(n=t,0!==Object.keys(n).length)?t:e;var n},Er=r.createContext(),Pr=()=>r.useContext(Er)??!1,Or=function({value:e,...t}){return(0,Xt.jsx)(Er.Provider,{value:e??!0,...t})};function Tr(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(n=Tr(e[t]))&&(r&&(r+=" "),r+=n)}else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}const Lr=function(){for(var e,t,n=0,r="",o=arguments.length;n<o;n++)(e=arguments[n])&&(t=Tr(e))&&(r&&(r+=" "),r+=t);return r};function _r(e,t,n=!1){const r={...t};for(const o in e)if(Object.prototype.hasOwnProperty.call(e,o)){const i=o;if("components"===i||"slots"===i)r[i]={...e[i],...r[i]};else if("componentsProps"===i||"slotProps"===i){const o=e[i],a=t[i];if(a)if(o){r[i]={...a};for(const e in o)if(Object.prototype.hasOwnProperty.call(o,e)){const t=e;r[i][t]=_r(o[t],a[t],n)}}else r[i]=a;else r[i]=o||{}}else"className"===i&&n&&t.className?r.className=Lr(e?.className,t?.className):"style"===i&&n&&t.style?r.style={...e?.style,...t?.style}:void 0===r[i]&&(r[i]=e[i])}return r}const Mr=r.createContext(void 0);const Rr=function({value:e,children:t}){return(0,Xt.jsx)(Mr.Provider,{value:e,children:t})},Nr="undefined"!=typeof window?r.useLayoutEffect:r.useEffect;let Dr=0;const zr={...o}.useId;function Ir(e){if(void 0!==zr){const t=zr();return e??t}return function(e){const[t,n]=r.useState(e),o=e||t;return r.useEffect((()=>{null==t&&(Dr+=1,n(`mui-${Dr}`))}),[t]),o}(e)}function jr(){return jr=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},jr.apply(null,arguments)}var $r=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,Br=or((function(e){return $r.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),Fr=function(e){return"theme"!==e},Wr=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?Br:Fr},Hr=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},Ur=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return tr(t,n,r),gr((function(){return nr(t,n,r)})),null},Vr=function e(t,n){var o,i,a=t.__emotion_real===t,l=a&&t.__emotion_base||t;void 0!==n&&(o=n.label,i=n.target);var s=Hr(t,n,a),u=s||Wr(l),c=!u("as");return function(){var d=arguments,f=a&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==o&&f.push("label:"+o+";"),null==d[0]||void 0===d[0].raw)f.push.apply(f,d);else{var p=d[0];f.push(p[0]);for(var h=d.length,m=1;m<h;m++)f.push(d[m],p[m])}var g=br((function(e,t,n){var o=c&&e.as||l,a="",d=[],p=e;if(null==e.theme){for(var h in p={},e)p[h]=e[h];p.theme=r.useContext(wr)}"string"==typeof e.className?a=er(t.registered,d,e.className):null!=e.className&&(a=e.className+" ");var m=hr(f.concat(d),t.registered,p);a+=t.key+"-"+m.name,void 0!==i&&(a+=" "+i);var g=c&&void 0===s?Wr(o):u,y={};for(var v in e)c&&"as"===v||g(v)&&(y[v]=e[v]);return y.className=a,n&&(y.ref=n),r.createElement(r.Fragment,null,r.createElement(Ur,{cache:t,serialized:m,isStringTag:"string"==typeof o}),r.createElement(o,y))}));return g.displayName=void 0!==o?o:"Styled("+("string"==typeof l?l:l.displayName||l.name||"Component")+")",g.defaultProps=t.defaultProps,g.__emotion_real=g,g.__emotion_base=l,g.__emotion_styles=f,g.__emotion_forwardProp=s,Object.defineProperty(g,"toString",{value:function(){return"."+i}}),g.withComponent=function(t,r){return e(t,jr({},n,r,{shouldForwardProp:Hr(g,r,!0)})).apply(void 0,f)},g}}.bind(null);["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){Vr[e]=Vr(e)}));const Gr=[];function qr(e){return Gr[0]=e,hr(Gr)}n(146);var Kr,Qr,Xr=function(e,t){var n=arguments;if(null==t||!Sr.call(t,"css"))return r.createElement.apply(void 0,n);var o=n.length,i=new Array(o);i[0]=Cr,i[1]=function(e,t){var n={};for(var r in t)Sr.call(t,r)&&(n[r]=t[r]);return n[kr]=e,n}(e,t);for(var a=2;a<o;a++)i[a]=n[a];return r.createElement.apply(null,i)};Kr=Xr||(Xr={}),Qr||(Qr=Kr.JSX||(Kr.JSX={}));var Yr=br((function(e,t){var n=hr([e.styles],void 0,r.useContext(wr)),o=r.useRef();return yr((function(){var e=t.key+"-global",r=new t.sheet.constructor({key:e,nonce:t.sheet.nonce,container:t.sheet.container,speedy:t.sheet.isSpeedy}),i=!1,a=document.querySelector('style[data-emotion="'+e+" "+n.name+'"]');return t.sheet.tags.length&&(r.before=t.sheet.tags[0]),null!==a&&(i=!0,a.setAttribute("data-emotion",e),r.hydrate([a])),o.current=[r,i],function(){r.flush()}}),[t]),yr((function(){var e=o.current,r=e[0];if(e[1])e[1]=!1;else{if(void 0!==n.next&&nr(t,n.next,!0),r.tags.length){var i=r.tags[r.tags.length-1].nextElementSibling;r.before=i,r.flush()}t.insert("",n,r,!1)}}),[t,n.name]),null}));function Jr(e){const{styles:t,defaultTheme:n={}}=e,r="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,Xt.jsx)(Yr,{styles:r})}const Zr=bt(),eo=function(e=Zr){return xr(e)};function to(e){const t=qr(e);return e!==t&&t.styles?(t.styles.match(/^@layer\s+[^{]*$/)||(t.styles=`@layer global{${t.styles}}`),t):e}const no=function({styles:e,themeId:t,defaultTheme:n={}}){const r=eo(n),o=t&&r[t]||r;let i="function"==typeof e?e(o):e;return o.modularCssLayers&&(i=Array.isArray(i)?i.map((e=>to("function"==typeof e?e(o):e))):to(i)),(0,Xt.jsx)(Jr,{styles:i})},ro={};function oo(e,t,n,o=!1){return r.useMemo((()=>{const r=e&&t[e]||t;if("function"==typeof n){const i=n(r),a=e?{...t,[e]:i}:i;return o?()=>a:a}return e?{...t,[e]:n}:{...t,...n}}),[e,t,n,o])}const io=function(e){const{children:t,theme:n,themeId:r}=e,o=xr(ro),i=Kt()||ro,a=oo(r,o,n),l=oo(r,i,n,!0),s="rtl"===(r?a[r]:a).direction,u=function(e){const t=xr(),n=Ir()||"",{modularCssLayers:r}=e;let o="mui.global, mui.components, mui.theme, mui.custom, mui.sx";return o=r&&null===t?"string"==typeof r?r.replace(/mui(?!\.)/g,o):`@layer ${o};`:"",Nr((()=>{const e=document.querySelector("head");if(!e)return;const t=e.firstChild;if(o){if(t&&t.hasAttribute?.("data-mui-layer-order")&&t.getAttribute("data-mui-layer-order")===n)return;const r=document.createElement("style");r.setAttribute("data-mui-layer-order",n),r.textContent=o,e.prepend(r)}else e.querySelector(`style[data-mui-layer-order="${n}"]`)?.remove()}),[o,n]),o?(0,Xt.jsx)(no,{styles:o}):null}(a);return(0,Xt.jsx)(Yt,{theme:l,children:(0,Xt.jsx)(wr.Provider,{value:a,children:(0,Xt.jsx)(Or,{value:s,children:(0,Xt.jsxs)(Rr,{value:r?a[r].components:a.components,children:[u,t]})})})})},ao="$$material";function lo({theme:e,...t}){const n=ao in e?e[ao]:void 0;return(0,Xt.jsx)(io,{...t,themeId:n?ao:void 0,theme:n||e})}const so="mode",uo="color-scheme",co="data-color-scheme";function fo(){}const po=({key:e,storageWindow:t})=>(t||"undefined"==typeof window||(t=window),{get(n){if("undefined"==typeof window)return;if(!t)return n;let r;try{r=t.localStorage.getItem(e)}catch{}return r||n},set:n=>{if(t)try{t.localStorage.setItem(e,n)}catch{}},subscribe:n=>{if(!t)return fo;const r=t=>{const r=t.newValue;t.key===e&&n(r)};return t.addEventListener("storage",r),()=>{t.removeEventListener("storage",r)}}});function ho(){}function mo(e){if("undefined"!=typeof window&&"function"==typeof window.matchMedia&&"system"===e)return window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"}function go(e,t){return"light"===e.mode||"system"===e.mode&&"light"===e.systemMode?t("light"):"dark"===e.mode||"system"===e.mode&&"dark"===e.systemMode?t("dark"):void 0}const yo="mui-color-scheme",vo="light",bo="dark",wo="mui-mode",{CssVarsProvider:So,useColorScheme:ko,getInitColorSchemeScript:Ao}=function(e){const{themeId:t,theme:n={},modeStorageKey:o=so,colorSchemeStorageKey:i=uo,disableTransitionOnChange:a=!1,defaultColorScheme:l,resolveTheme:s}=e,u={allColorSchemes:[],colorScheme:void 0,darkColorScheme:void 0,lightColorScheme:void 0,mode:void 0,setColorScheme:()=>{},setMode:()=>{},systemMode:void 0},c=r.createContext(void 0),d={},f={},p="string"==typeof l?l:l.light,h="string"==typeof l?l:l.dark;return{CssVarsProvider:function(e){const{children:u,theme:p,modeStorageKey:h=o,colorSchemeStorageKey:m=i,disableTransitionOnChange:g=a,storageManager:y,storageWindow:v=("undefined"==typeof window?void 0:window),documentNode:b=("undefined"==typeof document?void 0:document),colorSchemeNode:w=("undefined"==typeof document?void 0:document.documentElement),disableNestedContext:S=!1,disableStyleSheetGeneration:k=!1,defaultMode:A="system",forceThemeRerender:C=!1,noSsr:x}=e,E=r.useRef(!1),P=Kt(),O=r.useContext(c),T=!!O&&!S,L=r.useMemo((()=>p||("function"==typeof n?n():n)),[p]),_=L[t],M=_||L,{colorSchemes:R=d,components:N=f,cssVarPrefix:D}=M,z=Object.keys(R).filter((e=>!!R[e])).join(","),I=r.useMemo((()=>z.split(",")),[z]),j="string"==typeof l?l:l.light,$="string"==typeof l?l:l.dark,B=R[j]&&R[$]?A:R[M.defaultColorScheme]?.palette?.mode||M.palette?.mode,{mode:F,setMode:W,systemMode:H,lightColorScheme:U,darkColorScheme:V,colorScheme:G,setColorScheme:q}=function(e){const{defaultMode:t="light",defaultLightColorScheme:n,defaultDarkColorScheme:o,supportedColorSchemes:i=[],modeStorageKey:a=so,colorSchemeStorageKey:l=uo,storageWindow:s=("undefined"==typeof window?void 0:window),storageManager:u=po,noSsr:c=!1}=e,d=i.join(","),f=i.length>1,p=r.useMemo((()=>u?.({key:a,storageWindow:s})),[u,a,s]),h=r.useMemo((()=>u?.({key:`${l}-light`,storageWindow:s})),[u,l,s]),m=r.useMemo((()=>u?.({key:`${l}-dark`,storageWindow:s})),[u,l,s]),[g,y]=r.useState((()=>{const e=p?.get(t)||t,r=h?.get(n)||n,i=m?.get(o)||o;return{mode:e,systemMode:mo(e),lightColorScheme:r,darkColorScheme:i}})),[v,b]=r.useState(c||!f);r.useEffect((()=>{b(!0)}),[]);const w=function(e){return go(e,(t=>"light"===t?e.lightColorScheme:"dark"===t?e.darkColorScheme:void 0))}(g),S=r.useCallback((e=>{y((n=>{if(e===n.mode)return n;const r=e??t;return p?.set(r),{...n,mode:r,systemMode:mo(r)}}))}),[p,t]),k=r.useCallback((e=>{e?"string"==typeof e?e&&!d.includes(e)?console.error(`\`${e}\` does not exist in \`theme.colorSchemes\`.`):y((t=>{const n={...t};return go(t,(t=>{"light"===t&&(h?.set(e),n.lightColorScheme=e),"dark"===t&&(m?.set(e),n.darkColorScheme=e)})),n})):y((t=>{const r={...t},i=null===e.light?n:e.light,a=null===e.dark?o:e.dark;return i&&(d.includes(i)?(r.lightColorScheme=i,h?.set(i)):console.error(`\`${i}\` does not exist in \`theme.colorSchemes\`.`)),a&&(d.includes(a)?(r.darkColorScheme=a,m?.set(a)):console.error(`\`${a}\` does not exist in \`theme.colorSchemes\`.`)),r})):y((e=>(h?.set(n),m?.set(o),{...e,lightColorScheme:n,darkColorScheme:o})))}),[d,h,m,n,o]),A=r.useCallback((e=>{"system"===g.mode&&y((t=>{const n=e?.matches?"dark":"light";return t.systemMode===n?t:{...t,systemMode:n}}))}),[g.mode]),C=r.useRef(A);return C.current=A,r.useEffect((()=>{if("function"!=typeof window.matchMedia||!f)return;const e=(...e)=>C.current(...e),t=window.matchMedia("(prefers-color-scheme: dark)");return t.addListener(e),e(t),()=>{t.removeListener(e)}}),[f]),r.useEffect((()=>{if(f){const e=p?.subscribe((e=>{e&&!["light","dark","system"].includes(e)||S(e||t)}))||ho,n=h?.subscribe((e=>{e&&!d.match(e)||k({light:e})}))||ho,r=m?.subscribe((e=>{e&&!d.match(e)||k({dark:e})}))||ho;return()=>{e(),n(),r()}}}),[k,S,d,t,s,f,p,h,m]),{...g,mode:v?g.mode:void 0,systemMode:v?g.systemMode:void 0,colorScheme:v?w:void 0,setMode:S,setColorScheme:k}}({supportedColorSchemes:I,defaultLightColorScheme:j,defaultDarkColorScheme:$,modeStorageKey:h,colorSchemeStorageKey:m,defaultMode:B,storageManager:y,storageWindow:v,noSsr:x});let K=F,Q=G;T&&(K=O.mode,Q=O.colorScheme);let X=Q||M.defaultColorScheme;M.vars&&!C&&(X=M.defaultColorScheme);const Y=r.useMemo((()=>{const e=M.generateThemeVars?.()||M.vars,t={...M,components:N,colorSchemes:R,cssVarPrefix:D,vars:e};if("function"==typeof t.generateSpacing&&(t.spacing=t.generateSpacing()),X){const e=R[X];e&&"object"==typeof e&&Object.keys(e).forEach((n=>{e[n]&&"object"==typeof e[n]?t[n]={...t[n],...e[n]}:t[n]=e[n]}))}return s?s(t):t}),[M,X,N,R,D]),J=M.colorSchemeSelector;Nr((()=>{if(Q&&w&&J&&"media"!==J){const e=J;let t=J;if("class"===e&&(t=".%s"),"data"===e&&(t="[data-%s]"),e?.startsWith("data-")&&!e.includes("%s")&&(t=`[${e}="%s"]`),t.startsWith("."))w.classList.remove(...I.map((e=>t.substring(1).replace("%s",e)))),w.classList.add(t.substring(1).replace("%s",Q));else{const e=t.replace("%s",Q).match(/\[([^\]]+)\]/);if(e){const[t,n]=e[1].split("=");n||I.forEach((e=>{w.removeAttribute(t.replace(Q,e))})),w.setAttribute(t,n?n.replace(/"|'/g,""):"")}else w.setAttribute(t,Q)}}}),[Q,J,w,I]),r.useEffect((()=>{let e;if(g&&E.current&&b){const t=b.createElement("style");t.appendChild(b.createTextNode("*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}")),b.head.appendChild(t),window.getComputedStyle(b.body),e=setTimeout((()=>{b.head.removeChild(t)}),1)}return()=>{clearTimeout(e)}}),[Q,g,b]),r.useEffect((()=>(E.current=!0,()=>{E.current=!1})),[]);const Z=r.useMemo((()=>({allColorSchemes:I,colorScheme:Q,darkColorScheme:V,lightColorScheme:U,mode:K,setColorScheme:q,setMode:W,systemMode:H})),[I,Q,V,U,K,q,W,H,Y.colorSchemeSelector]);let ee=!0;(k||!1===M.cssVariables||T&&P?.cssVarPrefix===D)&&(ee=!1);const te=(0,Xt.jsxs)(r.Fragment,{children:[(0,Xt.jsx)(io,{themeId:_?t:void 0,theme:Y,children:u}),ee&&(0,Xt.jsx)(Jr,{styles:Y.generateStyleSheets?.()||[]})]});return T?te:(0,Xt.jsx)(c.Provider,{value:Z,children:te})},useColorScheme:()=>r.useContext(c)||u,getInitColorSchemeScript:e=>function(e){const{defaultMode:t="system",defaultLightColorScheme:n="light",defaultDarkColorScheme:r="dark",modeStorageKey:o=so,colorSchemeStorageKey:i=uo,attribute:a=co,colorSchemeNode:l="document.documentElement",nonce:s}=e||{};let u="",c=a;if("class"===a&&(c=".%s"),"data"===a&&(c="[data-%s]"),c.startsWith(".")){const e=c.substring(1);u+=`${l}.classList.remove('${e}'.replace('%s', light), '${e}'.replace('%s', dark));\n      ${l}.classList.add('${e}'.replace('%s', colorScheme));`}const d=c.match(/\[([^\]]+)\]/);if(d){const[e,t]=d[1].split("=");t||(u+=`${l}.removeAttribute('${e}'.replace('%s', light));\n      ${l}.removeAttribute('${e}'.replace('%s', dark));`),u+=`\n      ${l}.setAttribute('${e}'.replace('%s', colorScheme), ${t?`${t}.replace('%s', colorScheme)`:'""'});`}else u+=`${l}.setAttribute('${c}', colorScheme);`;return(0,Xt.jsx)("script",{suppressHydrationWarning:!0,nonce:"undefined"==typeof window?s:"",dangerouslySetInnerHTML:{__html:`(function() {\ntry {\n  let colorScheme = '';\n  const mode = localStorage.getItem('${o}') || '${t}';\n  const dark = localStorage.getItem('${i}-dark') || '${r}';\n  const light = localStorage.getItem('${i}-light') || '${n}';\n  if (mode === 'system') {\n    // handle system mode\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n    if (mql.matches) {\n      colorScheme = dark\n    } else {\n      colorScheme = light\n    }\n  }\n  if (mode === 'light') {\n    colorScheme = light;\n  }\n  if (mode === 'dark') {\n    colorScheme = dark;\n  }\n  if (colorScheme) {\n    ${u}\n  }\n} catch(e){}})();`}},"mui-color-scheme-init")}({colorSchemeStorageKey:i,defaultLightColorScheme:p,defaultDarkColorScheme:h,modeStorageKey:o,...e})}}({themeId:ao,theme:()=>Gt({cssVariables:!0}),colorSchemeStorageKey:yo,modeStorageKey:wo,defaultColorScheme:{light:vo,dark:bo},resolveTheme:e=>{const t={...e,typography:kt(e.palette,e.typography)};return t.unstable_sx=function(e){return mt({sx:e,theme:this})},t}}),Co=So;function xo({theme:e,...t}){const n=r.useMemo((()=>{if("function"==typeof e)return e;const t=ao in e?e[ao]:e;return"colorSchemes"in t?null:"vars"in t?e:{...e,vars:null}}),[e]);return n?(0,Xt.jsx)(lo,{theme:n,...t}):(0,Xt.jsx)(Co,{theme:e,...t})}function Eo(e,t,n=void 0){const r={};for(const o in e){const i=e[o];let a="",l=!0;for(let e=0;e<i.length;e+=1){const r=i[e];r&&(a+=(!0===l?"":" ")+t(r),l=!1,n&&n[r]&&(a+=" "+n[r]))}r[o]=a}return r}const Po=ye;function Oo(...e){const t=r.useRef(void 0),n=r.useCallback((t=>{const n=e.map((e=>{if(null==e)return null;if("function"==typeof e){const n=e,r=n(t);return"function"==typeof r?r:()=>{n(null)}}return e.current=t,()=>{e.current=null}}));return()=>{n.forEach((e=>e?.()))}}),e);return r.useMemo((()=>e.every((e=>null==e))?null:e=>{t.current&&(t.current(),t.current=void 0),null!=e&&(t.current=n(e))}),e)}function To(e){return e&&e.ownerDocument||document}function Lo(e){return parseInt(r.version,10)>=19?e?.props?.ref||null:e?.ref||null}const _o=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'].join(",");function Mo(e){const t=[],n=[];return Array.from(e.querySelectorAll(_o)).forEach(((e,r)=>{const o=function(e){const t=parseInt(e.getAttribute("tabindex")||"",10);return Number.isNaN(t)?"true"===e.contentEditable||("AUDIO"===e.nodeName||"VIDEO"===e.nodeName||"DETAILS"===e.nodeName)&&null===e.getAttribute("tabindex")?0:e.tabIndex:t}(e);-1!==o&&function(e){return!(e.disabled||"INPUT"===e.tagName&&"hidden"===e.type||function(e){if("INPUT"!==e.tagName||"radio"!==e.type)return!1;if(!e.name)return!1;const t=t=>e.ownerDocument.querySelector(`input[type="radio"]${t}`);let n=t(`[name="${e.name}"]:checked`);return n||(n=t(`[name="${e.name}"]`)),n!==e}(e))}(e)&&(0===o?t.push(e):n.push({documentOrder:r,tabIndex:o,node:e}))})),n.sort(((e,t)=>e.tabIndex===t.tabIndex?e.documentOrder-t.documentOrder:e.tabIndex-t.tabIndex)).map((e=>e.node)).concat(t)}function Ro(){return!0}const No=function(e){const{children:t,disableAutoFocus:n=!1,disableEnforceFocus:o=!1,disableRestoreFocus:i=!1,getTabbable:a=Mo,isEnabled:l=Ro,open:s}=e,u=r.useRef(!1),c=r.useRef(null),d=r.useRef(null),f=r.useRef(null),p=r.useRef(null),h=r.useRef(!1),m=r.useRef(null),g=Oo(Lo(t),m),y=r.useRef(null);r.useEffect((()=>{s&&m.current&&(h.current=!n)}),[n,s]),r.useEffect((()=>{if(!s||!m.current)return;const e=To(m.current);return m.current.contains(e.activeElement)||(m.current.hasAttribute("tabIndex")||m.current.setAttribute("tabIndex","-1"),h.current&&m.current.focus()),()=>{i||(f.current&&f.current.focus&&(u.current=!0,f.current.focus()),f.current=null)}}),[s]),r.useEffect((()=>{if(!s||!m.current)return;const e=To(m.current),t=t=>{y.current=t,!o&&l()&&"Tab"===t.key&&e.activeElement===m.current&&t.shiftKey&&(u.current=!0,d.current&&d.current.focus())},n=()=>{const t=m.current;if(null===t)return;if(!e.hasFocus()||!l()||u.current)return void(u.current=!1);if(t.contains(e.activeElement))return;if(o&&e.activeElement!==c.current&&e.activeElement!==d.current)return;if(e.activeElement!==p.current)p.current=null;else if(null!==p.current)return;if(!h.current)return;let n=[];if(e.activeElement!==c.current&&e.activeElement!==d.current||(n=a(m.current)),n.length>0){const e=Boolean(y.current?.shiftKey&&"Tab"===y.current?.key),t=n[0],r=n[n.length-1];"string"!=typeof t&&"string"!=typeof r&&(e?r.focus():t.focus())}else t.focus()};e.addEventListener("focusin",n),e.addEventListener("keydown",t,!0);const r=setInterval((()=>{e.activeElement&&"BODY"===e.activeElement.tagName&&n()}),50);return()=>{clearInterval(r),e.removeEventListener("focusin",n),e.removeEventListener("keydown",t,!0)}}),[n,o,i,l,s,a]);const v=e=>{null===f.current&&(f.current=e.relatedTarget),h.current=!0};return(0,Xt.jsxs)(r.Fragment,{children:[(0,Xt.jsx)("div",{tabIndex:s?0:-1,onFocus:v,ref:c,"data-testid":"sentinelStart"}),r.cloneElement(t,{ref:g,onFocus:e=>{null===f.current&&(f.current=e.relatedTarget),h.current=!0,p.current=e.target;const n=t.props.onFocus;n&&n(e)}}),(0,Xt.jsx)("div",{tabIndex:s?0:-1,onFocus:v,ref:d,"data-testid":"sentinelEnd"})]})};var Do=n(961);function zo(e,t){"function"==typeof e?e(t):e&&(e.current=t)}const Io=r.forwardRef((function(e,t){const{children:n,container:o,disablePortal:i=!1}=e,[a,l]=r.useState(null),s=Oo(r.isValidElement(n)?Lo(n):null,t);if(Nr((()=>{i||l(function(e){return"function"==typeof e?e():e}(o)||document.body)}),[o,i]),Nr((()=>{if(a&&!i)return zo(t,a),()=>{zo(t,null)}}),[t,a,i]),i){if(r.isValidElement(n)){const e={ref:s};return r.cloneElement(n,e)}return n}return a?Do.createPortal(n,a):a}));function jo(e){const{variants:t,...n}=e,r={variants:t,style:qr(n),isProcessed:!0};return r.style===n||t&&t.forEach((e=>{"function"!=typeof e.style&&(e.style=qr(e.style))})),r}const $o=bt();function Bo(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}function Fo(e,t){return t&&e&&"object"==typeof e&&e.styles&&!e.styles.startsWith("@layer")&&(e.styles=`@layer ${t}{${String(e.styles)}}`),e}function Wo(e){return e?(t,n)=>n[e]:null}function Ho(e,t,n){const r="function"==typeof t?t(e):t;if(Array.isArray(r))return r.flatMap((t=>Ho(e,t,n)));if(Array.isArray(r?.variants)){let t;if(r.isProcessed)t=n?Fo(r.style,n):r.style;else{const{variants:e,...o}=r;t=n?Fo(qr(o),n):o}return Uo(e,r.variants,[t],n)}return r?.isProcessed?n?Fo(qr(r.style),n):r.style:n?Fo(qr(r),n):r}function Uo(e,t,n=[],r=void 0){let o;e:for(let i=0;i<t.length;i+=1){const a=t[i];if("function"==typeof a.props){if(o??={...e,...e.ownerState,ownerState:e.ownerState},!a.props(o))continue}else for(const t in a.props)if(e[t]!==a.props[t]&&e.ownerState?.[t]!==a.props[t])continue e;"function"==typeof a.style?(o??={...e,...e.ownerState,ownerState:e.ownerState},n.push(r?Fo(qr(a.style(o)),r):a.style(o))):n.push(r?Fo(qr(a.style),r):a.style)}return n}function Vo(e){return e?e.charAt(0).toLowerCase()+e.slice(1):e}const Go=Gt(),qo=function(e={}){const{themeId:t,defaultTheme:n=$o,rootShouldForwardProp:r=Bo,slotShouldForwardProp:o=Bo}=e;function i(e){!function(e,t,n){e.theme=function(e){for(const t in e)return!1;return!0}(e.theme)?n:e.theme[t]||e.theme}(e,t,n)}return(e,t={})=>{!function(e){Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=(e=>e.filter((e=>e!==mt)))(e.__emotion_styles))}(e);const{name:n,slot:a,skipVariantsResolver:l,skipSx:u,overridesResolver:c=Wo(Vo(a)),...d}=t,f=n&&n.startsWith("Mui")||a?"components":"custom",p=void 0!==l?l:a&&"Root"!==a&&"root"!==a||!1,h=u||!1;let m=Bo;"Root"===a||"root"===a?m=r:a?m=o:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(m=void 0);const g=function(e,t){return Vr(e,t)}(e,{shouldForwardProp:m,label:void 0,...d}),y=e=>{if(e.__emotion_real===e)return e;if("function"==typeof e)return function(t){return Ho(t,e,t.theme.modularCssLayers?f:void 0)};if(s(e)){const t=jo(e);return function(e){return t.variants?Ho(e,t,e.theme.modularCssLayers?f:void 0):e.theme.modularCssLayers?Fo(t.style,f):t.style}}return e},v=(...t)=>{const r=[],o=t.map(y),a=[];if(r.push(i),n&&c&&a.push((function(e){const t=e.theme,r=t.components?.[n]?.styleOverrides;if(!r)return null;const o={};for(const t in r)o[t]=Ho(e,r[t],e.theme.modularCssLayers?"theme":void 0);return c(e,o)})),n&&!p&&a.push((function(e){const t=e.theme,r=t?.components?.[n]?.variants;return r?Uo(e,r,[],e.theme.modularCssLayers?"theme":void 0):null})),h||a.push(mt),Array.isArray(o[0])){const e=o.shift(),t=new Array(r.length).fill(""),n=new Array(a.length).fill("");let i;i=[...t,...e,...n],i.raw=[...t,...e.raw,...n],r.unshift(i)}const l=[...r,...o,...a],s=g(...l);return e.muiName&&(s.muiName=e.muiName),s};return g.withConfig&&(v.withConfig=g.withConfig),v}}({themeId:ao,defaultTheme:Go,rootShouldForwardProp:e=>function(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}(e)&&"classes"!==e}),Ko=qo,Qo={theme:void 0},Xo=function(e){let t,n;return function(r){let o=t;return void 0!==o&&r.theme===n||(Qo.theme=r.theme,o=jo(e(Qo)),t=o,n=r.theme),o}};function Yo(e){return function({props:e,name:t}){return function(e){const{theme:t,name:n,props:r}=e;if(!t||!t.components||!t.components[n])return r;const o=t.components[n];return o.defaultProps?_r(o.defaultProps,r,t.components.mergeClassNameAndStyle):o.styleOverrides||o.variants?r:_r(o,r,t.components.mergeClassNameAndStyle)}({props:e,name:t,theme:{components:r.useContext(Mr)}})}(e)}const Jo=function(e,t,n){return void 0===e||"string"==typeof e?t:{...t,ownerState:{...t.ownerState,...n}}},Zo=function(e,t,n){return"function"==typeof e?e(t,n):e},ei=function(e,t=[]){if(void 0===e)return{};const n={};return Object.keys(e).filter((n=>n.match(/^on[A-Z]/)&&"function"==typeof e[n]&&!t.includes(n))).forEach((t=>{n[t]=e[t]})),n},ti=function(e){if(void 0===e)return{};const t={};return Object.keys(e).filter((t=>!(t.match(/^on[A-Z]/)&&"function"==typeof e[t]))).forEach((n=>{t[n]=e[n]})),t},ni=function(e){const{getSlotProps:t,additionalProps:n,externalSlotProps:r,externalForwardedProps:o,className:i}=e;if(!t){const e=Lr(n?.className,i,o?.className,r?.className),t={...n?.style,...o?.style,...r?.style},a={...n,...o,...r};return e.length>0&&(a.className=e),Object.keys(t).length>0&&(a.style=t),{props:a,internalRef:void 0}}const a=ei({...o,...r}),l=ti(r),s=ti(o),u=t(a),c=Lr(u?.className,n?.className,i,o?.className,r?.className),d={...u?.style,...n?.style,...o?.style,...r?.style},f={...u,...n,...s,...l};return c.length>0&&(f.className=c),Object.keys(d).length>0&&(f.style=d),{props:f,internalRef:u.ref}};function ri(e,t){const{className:n,elementType:r,ownerState:o,externalForwardedProps:i,internalForwardedProps:a,shouldForwardComponentProp:l=!1,...s}=t,{component:u,slots:c={[e]:void 0},slotProps:d={[e]:void 0},...f}=i,p=c[e]||r,h=Zo(d[e],o),{props:{component:m,...g},internalRef:y}=ni({className:n,...s,externalForwardedProps:"root"===e?f:void 0,externalSlotProps:h}),v=Oo(y,h?.ref,t.ref),b="root"===e?m||u:m;return[p,Jo(p,{..."root"===e&&!u&&!c[e]&&a,..."root"!==e&&!c[e]&&a,...g,...b&&!l&&{as:b},...b&&l&&{component:b},ref:v},o)]}function oi(e,t){return oi=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},oi(e,t)}const ii=r.createContext(null);var ai="unmounted",li="exited",si="entering",ui="entered",ci="exiting",di=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var o,i=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?i?(o=li,r.appearStatus=si):o=ui:o=t.unmountOnExit||t.mountOnEnter?ai:li,r.state={status:o},r.nextCallback=null,r}!function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,oi(e,t)}(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===ai?{status:li}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==si&&n!==ui&&(t=si):n!==si&&n!==ui||(t=ci)}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),t===si){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:Do.findDOMNode(this);n&&function(e){e.scrollTop}(n)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===li&&this.setState({status:ai})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,o=this.props.nodeRef?[r]:[Do.findDOMNode(this),r],i=o[0],a=o[1],l=this.getTimeouts(),s=r?l.appear:l.enter;e||n?(this.props.onEnter(i,a),this.safeSetState({status:si},(function(){t.props.onEntering(i,a),t.onTransitionEnd(s,(function(){t.safeSetState({status:ui},(function(){t.props.onEntered(i,a)}))}))}))):this.safeSetState({status:ui},(function(){t.props.onEntered(i)}))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:Do.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:ci},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:li},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:li},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:Do.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],i=o[0],a=o[1];this.props.addEndListener(i,a)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if(e===ai)return null;var t=this.props,n=t.children,o=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,function(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(-1!==t.indexOf(r))continue;n[r]=e[r]}return n}(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return r.createElement(ii.Provider,{value:null},"function"==typeof n?n(e,o):r.cloneElement(r.Children.only(n),o))},t}(r.Component);function fi(){}di.contextType=ii,di.propTypes={},di.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:fi,onEntering:fi,onEntered:fi,onExit:fi,onExiting:fi,onExited:fi},di.UNMOUNTED=ai,di.EXITED=li,di.ENTERING=si,di.ENTERED=ui,di.EXITING=ci;const pi=di;function hi(){const e=eo(Go);return e[ao]||e}const mi=e=>e.scrollTop;function gi(e,t){const{timeout:n,easing:r,style:o={}}=e;return{duration:o.transitionDuration??("number"==typeof n?n:n[t.mode]||0),easing:o.transitionTimingFunction??("object"==typeof r?r[t.mode]:r),delay:o.transitionDelay}}const yi=Oo,vi={entering:{opacity:1},entered:{opacity:1}},bi=r.forwardRef((function(e,t){const n=hi(),o={enter:n.transitions.duration.enteringScreen,exit:n.transitions.duration.leavingScreen},{addEndListener:i,appear:a=!0,children:l,easing:s,in:u,onEnter:c,onEntered:d,onEntering:f,onExit:p,onExited:h,onExiting:m,style:g,timeout:y=o,TransitionComponent:v=pi,...b}=e,w=r.useRef(null),S=yi(w,Lo(l),t),k=e=>t=>{if(e){const n=w.current;void 0===t?e(n):e(n,t)}},A=k(f),C=k(((e,t)=>{mi(e);const r=gi({style:g,timeout:y,easing:s},{mode:"enter"});e.style.webkitTransition=n.transitions.create("opacity",r),e.style.transition=n.transitions.create("opacity",r),c&&c(e,t)})),x=k(d),E=k(m),P=k((e=>{const t=gi({style:g,timeout:y,easing:s},{mode:"exit"});e.style.webkitTransition=n.transitions.create("opacity",t),e.style.transition=n.transitions.create("opacity",t),p&&p(e)})),O=k(h);return(0,Xt.jsx)(v,{appear:a,in:u,nodeRef:w,onEnter:C,onEntered:x,onEntering:A,onExit:P,onExited:O,onExiting:E,addEndListener:e=>{i&&i(w.current,e)},timeout:y,...b,children:(e,{ownerState:t,...n})=>r.cloneElement(l,{style:{opacity:0,visibility:"exited"!==e||u?void 0:"hidden",...vi[e],...g,...l.props.style},ref:S,...n})})})),wi=bi,Si=e=>e,ki=(()=>{let e=Si;return{configure(t){e=t},generate:t=>e(t),reset(){e=Si}}})(),Ai={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",open:"open",readOnly:"readOnly",required:"required",selected:"selected"};function Ci(e,t,n="Mui"){const r=Ai[t];return r?`${n}-${r}`:`${ki.generate(e)}-${t}`}function xi(e,t,n="Mui"){const r={};return t.forEach((t=>{r[t]=Ci(e,t,n)})),r}function Ei(e){return Ci("MuiBackdrop",e)}xi("MuiBackdrop",["root","invisible"]);const Pi=Ko("div",{name:"MuiBackdrop",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.invisible&&t.invisible]}})({position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent",variants:[{props:{invisible:!0},style:{backgroundColor:"transparent"}}]}),Oi=r.forwardRef((function(e,t){const n=Yo({props:e,name:"MuiBackdrop"}),{children:r,className:o,component:i="div",invisible:a=!1,open:l,components:s={},componentsProps:u={},slotProps:c={},slots:d={},TransitionComponent:f,transitionDuration:p,...h}=n,m={...n,component:i,invisible:a},g=(e=>{const{classes:t,invisible:n}=e;return Eo({root:["root",n&&"invisible"]},Ei,t)})(m),y={component:i,slots:{transition:f,root:s.Root,...d},slotProps:{...u,...c}},[v,b]=ri("root",{elementType:Pi,externalForwardedProps:y,className:Lr(g.root,o),ownerState:m}),[w,S]=ri("transition",{elementType:wi,externalForwardedProps:y,ownerState:m});return(0,Xt.jsx)(w,{in:l,timeout:p,...h,...S,children:(0,Xt.jsx)(v,{"aria-hidden":!0,...b,classes:g,ref:t,children:r})})})),Ti=function(e){const t=r.useRef(e);return Nr((()=>{t.current=e})),r.useRef(((...e)=>(0,t.current)(...e))).current};function Li(...e){return e.reduce(((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)}),(()=>{}))}function _i(e){return To(e).defaultView||window}function Mi(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function Ri(e){return parseInt(_i(e).getComputedStyle(e).paddingRight,10)||0}function Ni(e,t,n,r,o){const i=[t,n,...r];[].forEach.call(e.children,(e=>{const t=!i.includes(e),n=!function(e){const t=["TEMPLATE","SCRIPT","STYLE","LINK","MAP","META","NOSCRIPT","PICTURE","COL","COLGROUP","PARAM","SLOT","SOURCE","TRACK"].includes(e.tagName),n="INPUT"===e.tagName&&"hidden"===e.getAttribute("type");return t||n}(e);t&&n&&Mi(e,o)}))}function Di(e,t){let n=-1;return e.some(((e,r)=>!!t(e)&&(n=r,!0))),n}const zi=()=>{},Ii=new class{constructor(){this.modals=[],this.containers=[]}add(e,t){let n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&Mi(e.modalRef,!1);const r=function(e){const t=[];return[].forEach.call(e.children,(e=>{"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);Ni(t,e.mount,e.modalRef,r,!0);const o=Di(this.containers,(e=>e.container===t));return-1!==o?(this.containers[o].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblings:r}),n)}mount(e,t){const n=Di(this.containers,(t=>t.modals.includes(e))),r=this.containers[n];r.restore||(r.restore=function(e,t){const n=[],r=e.container;if(!t.disableScrollLock){if(function(e){const t=To(e);return t.body===e?_i(e).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(r)){const e=function(e=window){const t=e.document.documentElement.clientWidth;return e.innerWidth-t}(_i(r));n.push({value:r.style.paddingRight,property:"padding-right",el:r}),r.style.paddingRight=`${Ri(r)+e}px`;const t=To(r).querySelectorAll(".mui-fixed");[].forEach.call(t,(t=>{n.push({value:t.style.paddingRight,property:"padding-right",el:t}),t.style.paddingRight=`${Ri(t)+e}px`}))}let e;if(r.parentNode instanceof DocumentFragment)e=To(r).body;else{const t=r.parentElement,n=_i(r);e="HTML"===t?.nodeName&&"scroll"===n.getComputedStyle(t).overflowY?t:r}n.push({value:e.style.overflow,property:"overflow",el:e},{value:e.style.overflowX,property:"overflow-x",el:e},{value:e.style.overflowY,property:"overflow-y",el:e}),e.style.overflow="hidden"}return()=>{n.forEach((({value:e,el:t,property:n})=>{e?t.style.setProperty(n,e):t.style.removeProperty(n)}))}}(r,t))}remove(e,t=!0){const n=this.modals.indexOf(e);if(-1===n)return n;const r=Di(this.containers,(t=>t.modals.includes(e))),o=this.containers[r];if(o.modals.splice(o.modals.indexOf(e),1),this.modals.splice(n,1),0===o.modals.length)o.restore&&o.restore(),e.modalRef&&Mi(e.modalRef,t),Ni(o.container,e.mount,e.modalRef,o.hiddenSiblings,!1),this.containers.splice(r,1);else{const e=o.modals[o.modals.length-1];e.modalRef&&Mi(e.modalRef,!1)}return n}isTopModal(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}};function ji(e){return Ci("MuiModal",e)}xi("MuiModal",["root","hidden","backdrop"]);const $i=Ko("div",{name:"MuiModal",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.open&&n.exited&&t.hidden]}})(Xo((({theme:e})=>({position:"fixed",zIndex:(e.vars||e).zIndex.modal,right:0,bottom:0,top:0,left:0,variants:[{props:({ownerState:e})=>!e.open&&e.exited,style:{visibility:"hidden"}}]})))),Bi=Ko(Oi,{name:"MuiModal",slot:"Backdrop"})({zIndex:-1}),Fi=r.forwardRef((function(e,t){const n=Yo({name:"MuiModal",props:e}),{BackdropComponent:o=Bi,BackdropProps:i,classes:a,className:l,closeAfterTransition:s=!1,children:u,container:c,component:d,components:f={},componentsProps:p={},disableAutoFocus:h=!1,disableEnforceFocus:m=!1,disableEscapeKeyDown:g=!1,disablePortal:y=!1,disableRestoreFocus:v=!1,disableScrollLock:b=!1,hideBackdrop:w=!1,keepMounted:S=!1,onClose:k,onTransitionEnter:A,onTransitionExited:C,open:x,slotProps:E={},slots:P={},theme:O,...T}=n,L={...n,closeAfterTransition:s,disableAutoFocus:h,disableEnforceFocus:m,disableEscapeKeyDown:g,disablePortal:y,disableRestoreFocus:v,disableScrollLock:b,hideBackdrop:w,keepMounted:S},{getRootProps:_,getBackdropProps:M,getTransitionProps:R,portalRef:N,isTopModal:D,exited:z,hasTransition:I}=function(e){const{container:t,disableEscapeKeyDown:n=!1,disableScrollLock:o=!1,closeAfterTransition:i=!1,onTransitionEnter:a,onTransitionExited:l,children:s,onClose:u,open:c,rootRef:d}=e,f=r.useRef({}),p=r.useRef(null),h=r.useRef(null),m=Oo(h,d),[g,y]=r.useState(!c),v=function(e){return!!e&&e.props.hasOwnProperty("in")}(s);let b=!0;"false"!==e["aria-hidden"]&&!1!==e["aria-hidden"]||(b=!1);const w=()=>(f.current.modalRef=h.current,f.current.mount=p.current,f.current),S=()=>{Ii.mount(w(),{disableScrollLock:o}),h.current&&(h.current.scrollTop=0)},k=Ti((()=>{const e=function(e){return"function"==typeof e?e():e}(t)||To(p.current).body;Ii.add(w(),e),h.current&&S()})),A=()=>Ii.isTopModal(w()),C=Ti((e=>{p.current=e,e&&(c&&A()?S():h.current&&Mi(h.current,b))})),x=r.useCallback((()=>{Ii.remove(w(),b)}),[b]);r.useEffect((()=>()=>{x()}),[x]),r.useEffect((()=>{c?k():v&&i||x()}),[c,x,v,i,k]);const E=e=>t=>{e.onKeyDown?.(t),"Escape"===t.key&&229!==t.which&&A()&&(n||(t.stopPropagation(),u&&u(t,"escapeKeyDown")))},P=e=>t=>{e.onClick?.(t),t.target===t.currentTarget&&u&&u(t,"backdropClick")};return{getRootProps:(t={})=>{const n=ei(e);delete n.onTransitionEnter,delete n.onTransitionExited;const r={...n,...t};return{role:"presentation",...r,onKeyDown:E(r),ref:m}},getBackdropProps:(e={})=>{const t=e;return{"aria-hidden":!0,...t,onClick:P(t),open:c}},getTransitionProps:()=>({onEnter:Li((()=>{y(!1),a&&a()}),s?.props.onEnter??zi),onExited:Li((()=>{y(!0),l&&l(),i&&x()}),s?.props.onExited??zi)}),rootRef:m,portalRef:C,isTopModal:A,exited:g,hasTransition:v}}({...L,rootRef:t}),j={...L,exited:z},$=(e=>{const{open:t,exited:n,classes:r}=e;return Eo({root:["root",!t&&n&&"hidden"],backdrop:["backdrop"]},ji,r)})(j),B={};if(void 0===u.props.tabIndex&&(B.tabIndex="-1"),I){const{onEnter:e,onExited:t}=R();B.onEnter=e,B.onExited=t}const F={slots:{root:f.Root,backdrop:f.Backdrop,...P},slotProps:{...p,...E}},[W,H]=ri("root",{ref:t,elementType:$i,externalForwardedProps:{...F,...T,component:d},getSlotProps:_,ownerState:j,className:Lr(l,$?.root,!j.open&&j.exited&&$?.hidden)}),[U,V]=ri("backdrop",{ref:i?.ref,elementType:o,externalForwardedProps:F,shouldForwardComponentProp:!0,additionalProps:i,getSlotProps:e=>M({...e,onClick:t=>{e?.onClick&&e.onClick(t)}}),className:Lr(i?.className,$?.backdrop),ownerState:j});return S||x||I&&!z?(0,Xt.jsx)(Io,{ref:N,container:c,disablePortal:y,children:(0,Xt.jsxs)(W,{...H,children:[!w&&o?(0,Xt.jsx)(U,{...V}):null,(0,Xt.jsx)(No,{disableEnforceFocus:m,disableAutoFocus:h,disableRestoreFocus:v,isEnabled:D,open:x,children:r.cloneElement(u,B)})]})}):null})),Wi=Fi;function Hi(e){return Ci("MuiPaper",e)}xi("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const Ui=Ko("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})(Xo((({theme:e})=>({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow"),variants:[{props:({ownerState:e})=>!e.square,style:{borderRadius:e.shape.borderRadius}},{props:{variant:"outlined"},style:{border:`1px solid ${(e.vars||e).palette.divider}`}},{props:{variant:"elevation"},style:{boxShadow:"var(--Paper-shadow)",backgroundImage:"var(--Paper-overlay)"}}]})))),Vi=r.forwardRef((function(e,t){const n=Yo({props:e,name:"MuiPaper"}),r=hi(),{className:o,component:i="div",elevation:a=1,square:l=!1,variant:s="elevation",...u}=n,c={...n,component:i,elevation:a,square:l,variant:s},d=(e=>{const{square:t,elevation:n,variant:r,classes:o}=e;return Eo({root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]},Hi,o)})(c);return(0,Xt.jsx)(Ui,{as:i,ownerState:c,className:Lr(d.root,o),ref:t,...u,style:{..."elevation"===s&&{"--Paper-shadow":(r.vars||r).shadows[a],...r.vars&&{"--Paper-overlay":r.vars.overlays?.[a]},...!r.vars&&"dark"===r.palette.mode&&{"--Paper-overlay":`linear-gradient(${y("#fff",Rt(a))}, ${y("#fff",Rt(a))})`}},...u.style}})}));function Gi(e){return Ci("MuiDialog",e)}const qi=xi("MuiDialog",["root","scrollPaper","scrollBody","container","paper","paperScrollPaper","paperScrollBody","paperWidthFalse","paperWidthXs","paperWidthSm","paperWidthMd","paperWidthLg","paperWidthXl","paperFullWidth","paperFullScreen"]),Ki=r.createContext({}),Qi=Ko(Oi,{name:"MuiDialog",slot:"Backdrop",overrides:(e,t)=>t.backdrop})({zIndex:-1}),Xi=Ko(Wi,{name:"MuiDialog",slot:"Root"})({"@media print":{position:"absolute !important"}}),Yi=Ko("div",{name:"MuiDialog",slot:"Container",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.container,t[`scroll${Po(n.scroll)}`]]}})({height:"100%","@media print":{height:"auto"},outline:0,variants:[{props:{scroll:"paper"},style:{display:"flex",justifyContent:"center",alignItems:"center"}},{props:{scroll:"body"},style:{overflowY:"auto",overflowX:"hidden",textAlign:"center","&::after":{content:'""',display:"inline-block",verticalAlign:"middle",height:"100%",width:"0"}}}]}),Ji=Ko(Vi,{name:"MuiDialog",slot:"Paper",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.paper,t[`scrollPaper${Po(n.scroll)}`],t[`paperWidth${Po(String(n.maxWidth))}`],n.fullWidth&&t.paperFullWidth,n.fullScreen&&t.paperFullScreen]}})(Xo((({theme:e})=>({margin:32,position:"relative",overflowY:"auto","@media print":{overflowY:"visible",boxShadow:"none"},variants:[{props:{scroll:"paper"},style:{display:"flex",flexDirection:"column",maxHeight:"calc(100% - 64px)"}},{props:{scroll:"body"},style:{display:"inline-block",verticalAlign:"middle",textAlign:"initial"}},{props:({ownerState:e})=>!e.maxWidth,style:{maxWidth:"calc(100% - 64px)"}},{props:{maxWidth:"xs"},style:{maxWidth:"px"===e.breakpoints.unit?Math.max(e.breakpoints.values.xs,444):`max(${e.breakpoints.values.xs}${e.breakpoints.unit}, 444px)`,[`&.${qi.paperScrollBody}`]:{[e.breakpoints.down(Math.max(e.breakpoints.values.xs,444)+64)]:{maxWidth:"calc(100% - 64px)"}}}},...Object.keys(e.breakpoints.values).filter((e=>"xs"!==e)).map((t=>({props:{maxWidth:t},style:{maxWidth:`${e.breakpoints.values[t]}${e.breakpoints.unit}`,[`&.${qi.paperScrollBody}`]:{[e.breakpoints.down(e.breakpoints.values[t]+64)]:{maxWidth:"calc(100% - 64px)"}}}}))),{props:({ownerState:e})=>e.fullWidth,style:{width:"calc(100% - 64px)"}},{props:({ownerState:e})=>e.fullScreen,style:{margin:0,width:"100%",maxWidth:"100%",height:"100%",maxHeight:"none",borderRadius:0,[`&.${qi.paperScrollBody}`]:{margin:0,maxWidth:"100%"}}}]})))),Zi=r.forwardRef((function(e,t){const n=Yo({props:e,name:"MuiDialog"}),o=hi(),i={enter:o.transitions.duration.enteringScreen,exit:o.transitions.duration.leavingScreen},{"aria-describedby":a,"aria-labelledby":l,"aria-modal":s=!0,BackdropComponent:u,BackdropProps:c,children:d,className:f,disableEscapeKeyDown:p=!1,fullScreen:h=!1,fullWidth:m=!1,maxWidth:g="sm",onClick:y,onClose:v,open:b,PaperComponent:w=Vi,PaperProps:S={},scroll:k="paper",slots:A={},slotProps:C={},TransitionComponent:x=wi,transitionDuration:E=i,TransitionProps:P,...O}=n,T={...n,disableEscapeKeyDown:p,fullScreen:h,fullWidth:m,maxWidth:g,scroll:k},L=(e=>{const{classes:t,scroll:n,maxWidth:r,fullWidth:o,fullScreen:i}=e;return Eo({root:["root"],container:["container",`scroll${Po(n)}`],paper:["paper",`paperScroll${Po(n)}`,`paperWidth${Po(String(r))}`,o&&"paperFullWidth",i&&"paperFullScreen"]},Gi,t)})(T),_=r.useRef(),M=Ir(l),R=r.useMemo((()=>({titleId:M})),[M]),N={slots:{transition:x,...A},slotProps:{transition:P,paper:S,backdrop:c,...C}},[D,z]=ri("root",{elementType:Xi,shouldForwardComponentProp:!0,externalForwardedProps:N,ownerState:T,className:Lr(L.root,f),ref:t}),[I,j]=ri("backdrop",{elementType:Qi,shouldForwardComponentProp:!0,externalForwardedProps:N,ownerState:T}),[$,B]=ri("paper",{elementType:Ji,shouldForwardComponentProp:!0,externalForwardedProps:N,ownerState:T,className:Lr(L.paper,S.className)}),[F,W]=ri("container",{elementType:Yi,externalForwardedProps:N,ownerState:T,className:L.container}),[H,U]=ri("transition",{elementType:wi,externalForwardedProps:N,ownerState:T,additionalProps:{appear:!0,in:b,timeout:E,role:"presentation"}});return(0,Xt.jsx)(D,{closeAfterTransition:!0,slots:{backdrop:I},slotProps:{backdrop:{transitionDuration:E,as:u,...j}},disableEscapeKeyDown:p,onClose:v,open:b,onClick:e=>{y&&y(e),_.current&&(_.current=null,v&&v(e,"backdropClick"))},...z,...O,children:(0,Xt.jsx)(H,{...U,children:(0,Xt.jsx)(F,{onMouseDown:e=>{_.current=e.target===e.currentTarget},...W,children:(0,Xt.jsx)($,{as:w,elevation:24,role:"dialog","aria-describedby":a,"aria-labelledby":M,"aria-modal":s,...B,children:(0,Xt.jsx)(Ki.Provider,{value:R,children:d})})})})})})),ea=Zi;n(376);const ta={},na=[];class ra{static create(){return new ra}currentId=null;start(e,t){this.clear(),this.currentId=setTimeout((()=>{this.currentId=null,t()}),e)}clear=()=>{null!==this.currentId&&(clearTimeout(this.currentId),this.currentId=null)};disposeEffect=()=>this.clear}function oa(){const e=function(e){const t=r.useRef(ta);return t.current===ta&&(t.current=e(void 0)),t}(ra.create).current;var t;return t=e.disposeEffect,r.useEffect(t,na),e}function ia(e){try{return e.matches(":focus-visible")}catch(e){}return!1}function aa(e){return`scale(${e}, ${e**2})`}const la={entering:{opacity:1,transform:aa(1)},entered:{opacity:1,transform:"none"}},sa="undefined"!=typeof navigator&&/^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent)&&/(os |version\/)15(.|_)4/i.test(navigator.userAgent),ua=r.forwardRef((function(e,t){const{addEndListener:n,appear:o=!0,children:i,easing:a,in:l,onEnter:s,onEntered:u,onEntering:c,onExit:d,onExited:f,onExiting:p,style:h,timeout:m="auto",TransitionComponent:g=pi,...y}=e,v=oa(),b=r.useRef(),w=hi(),S=r.useRef(null),k=yi(S,Lo(i),t),A=e=>t=>{if(e){const n=S.current;void 0===t?e(n):e(n,t)}},C=A(c),x=A(((e,t)=>{mi(e);const{duration:n,delay:r,easing:o}=gi({style:h,timeout:m,easing:a},{mode:"enter"});let i;"auto"===m?(i=w.transitions.getAutoHeightDuration(e.clientHeight),b.current=i):i=n,e.style.transition=[w.transitions.create("opacity",{duration:i,delay:r}),w.transitions.create("transform",{duration:sa?i:.666*i,delay:r,easing:o})].join(","),s&&s(e,t)})),E=A(u),P=A(p),O=A((e=>{const{duration:t,delay:n,easing:r}=gi({style:h,timeout:m,easing:a},{mode:"exit"});let o;"auto"===m?(o=w.transitions.getAutoHeightDuration(e.clientHeight),b.current=o):o=t,e.style.transition=[w.transitions.create("opacity",{duration:o,delay:n}),w.transitions.create("transform",{duration:sa?o:.666*o,delay:sa?n:n||.333*o,easing:r})].join(","),e.style.opacity=0,e.style.transform=aa(.75),d&&d(e)})),T=A(f);return(0,Xt.jsx)(g,{appear:o,in:l,nodeRef:S,onEnter:x,onEntered:E,onEntering:C,onExit:O,onExited:T,onExiting:P,addEndListener:e=>{"auto"===m&&v.start(b.current||0,e),n&&n(S.current,e)},timeout:"auto"===m?null:m,...y,children:(e,{ownerState:t,...n})=>r.cloneElement(i,{style:{opacity:0,transform:aa(.75),visibility:"exited"!==e||l?void 0:"hidden",...la[e],...h,...i.props.style},ref:k,...n})})}));ua&&(ua.muiSupportAuto=!0);const ca=ua;function da(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function fa(e){return e instanceof da(e).Element||e instanceof Element}function pa(e){return e instanceof da(e).HTMLElement||e instanceof HTMLElement}function ha(e){return"undefined"!=typeof ShadowRoot&&(e instanceof da(e).ShadowRoot||e instanceof ShadowRoot)}var ma=Math.max,ga=Math.min,ya=Math.round;function va(){var e=navigator.userAgentData;return null!=e&&e.brands&&Array.isArray(e.brands)?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}function ba(){return!/^((?!chrome|android).)*safari/i.test(va())}function wa(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var r=e.getBoundingClientRect(),o=1,i=1;t&&pa(e)&&(o=e.offsetWidth>0&&ya(r.width)/e.offsetWidth||1,i=e.offsetHeight>0&&ya(r.height)/e.offsetHeight||1);var a=(fa(e)?da(e):window).visualViewport,l=!ba()&&n,s=(r.left+(l&&a?a.offsetLeft:0))/o,u=(r.top+(l&&a?a.offsetTop:0))/i,c=r.width/o,d=r.height/i;return{width:c,height:d,top:u,right:s+c,bottom:u+d,left:s,x:s,y:u}}function Sa(e){var t=da(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function ka(e){return e?(e.nodeName||"").toLowerCase():null}function Aa(e){return((fa(e)?e.ownerDocument:e.document)||window.document).documentElement}function Ca(e){return wa(Aa(e)).left+Sa(e).scrollLeft}function xa(e){return da(e).getComputedStyle(e)}function Ea(e){var t=xa(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+r)}function Pa(e,t,n){void 0===n&&(n=!1);var r=pa(t),o=pa(t)&&function(e){var t=e.getBoundingClientRect(),n=ya(t.width)/e.offsetWidth||1,r=ya(t.height)/e.offsetHeight||1;return 1!==n||1!==r}(t),i=Aa(t),a=wa(e,o,n),l={scrollLeft:0,scrollTop:0},s={x:0,y:0};return(r||!r&&!n)&&(("body"!==ka(t)||Ea(i))&&(l=function(e){return e!==da(e)&&pa(e)?{scrollLeft:(t=e).scrollLeft,scrollTop:t.scrollTop}:Sa(e);var t}(t)),pa(t)?((s=wa(t,!0)).x+=t.clientLeft,s.y+=t.clientTop):i&&(s.x=Ca(i))),{x:a.left+l.scrollLeft-s.x,y:a.top+l.scrollTop-s.y,width:a.width,height:a.height}}function Oa(e){var t=wa(e),n=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:r}}function Ta(e){return"html"===ka(e)?e:e.assignedSlot||e.parentNode||(ha(e)?e.host:null)||Aa(e)}function La(e){return["html","body","#document"].indexOf(ka(e))>=0?e.ownerDocument.body:pa(e)&&Ea(e)?e:La(Ta(e))}function _a(e,t){var n;void 0===t&&(t=[]);var r=La(e),o=r===(null==(n=e.ownerDocument)?void 0:n.body),i=da(r),a=o?[i].concat(i.visualViewport||[],Ea(r)?r:[]):r,l=t.concat(a);return o?l:l.concat(_a(Ta(a)))}function Ma(e){return["table","td","th"].indexOf(ka(e))>=0}function Ra(e){return pa(e)&&"fixed"!==xa(e).position?e.offsetParent:null}function Na(e){for(var t=da(e),n=Ra(e);n&&Ma(n)&&"static"===xa(n).position;)n=Ra(n);return n&&("html"===ka(n)||"body"===ka(n)&&"static"===xa(n).position)?t:n||function(e){var t=/firefox/i.test(va());if(/Trident/i.test(va())&&pa(e)&&"fixed"===xa(e).position)return null;var n=Ta(e);for(ha(n)&&(n=n.host);pa(n)&&["html","body"].indexOf(ka(n))<0;){var r=xa(n);if("none"!==r.transform||"none"!==r.perspective||"paint"===r.contain||-1!==["transform","perspective"].indexOf(r.willChange)||t&&"filter"===r.willChange||t&&r.filter&&"none"!==r.filter)return n;n=n.parentNode}return null}(e)||t}var Da="top",za="bottom",Ia="right",ja="left",$a="auto",Ba=[Da,za,Ia,ja],Fa="start",Wa="end",Ha="viewport",Ua="popper",Va=Ba.reduce((function(e,t){return e.concat([t+"-"+Fa,t+"-"+Wa])}),[]),Ga=[].concat(Ba,[$a]).reduce((function(e,t){return e.concat([t,t+"-"+Fa,t+"-"+Wa])}),[]),qa=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function Ka(e){var t=new Map,n=new Set,r=[];function o(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var r=t.get(e);r&&o(r)}})),r.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||o(e)})),r}var Qa={placement:"bottom",modifiers:[],strategy:"absolute"};function Xa(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Ya(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,r=void 0===n?[]:n,o=t.defaultOptions,i=void 0===o?Qa:o;return function(e,t,n){void 0===n&&(n=i);var o,a,l={placement:"bottom",orderedModifiers:[],options:Object.assign({},Qa,i),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},s=[],u=!1,c={state:l,setOptions:function(n){var o="function"==typeof n?n(l.options):n;d(),l.options=Object.assign({},i,l.options,o),l.scrollParents={reference:fa(e)?_a(e):e.contextElement?_a(e.contextElement):[],popper:_a(t)};var a,u,f=function(e){var t=Ka(e);return qa.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((a=[].concat(r,l.options.modifiers),u=a.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(u).map((function(e){return u[e]}))));return l.orderedModifiers=f.filter((function(e){return e.enabled})),l.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,r=void 0===n?{}:n,o=e.effect;if("function"==typeof o){var i=o({state:l,name:t,instance:c,options:r});s.push(i||function(){})}})),c.update()},forceUpdate:function(){if(!u){var e=l.elements,t=e.reference,n=e.popper;if(Xa(t,n)){l.rects={reference:Pa(t,Na(n),"fixed"===l.options.strategy),popper:Oa(n)},l.reset=!1,l.placement=l.options.placement,l.orderedModifiers.forEach((function(e){return l.modifiersData[e.name]=Object.assign({},e.data)}));for(var r=0;r<l.orderedModifiers.length;r++)if(!0!==l.reset){var o=l.orderedModifiers[r],i=o.fn,a=o.options,s=void 0===a?{}:a,d=o.name;"function"==typeof i&&(l=i({state:l,options:s,name:d,instance:c})||l)}else l.reset=!1,r=-1}}},update:(o=function(){return new Promise((function(e){c.forceUpdate(),e(l)}))},function(){return a||(a=new Promise((function(e){Promise.resolve().then((function(){a=void 0,e(o())}))}))),a}),destroy:function(){d(),u=!0}};if(!Xa(e,t))return c;function d(){s.forEach((function(e){return e()})),s=[]}return c.setOptions(n).then((function(e){!u&&n.onFirstUpdate&&n.onFirstUpdate(e)})),c}}var Ja={passive:!0};function Za(e){return e.split("-")[0]}function el(e){return e.split("-")[1]}function tl(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function nl(e){var t,n=e.reference,r=e.element,o=e.placement,i=o?Za(o):null,a=o?el(o):null,l=n.x+n.width/2-r.width/2,s=n.y+n.height/2-r.height/2;switch(i){case Da:t={x:l,y:n.y-r.height};break;case za:t={x:l,y:n.y+n.height};break;case Ia:t={x:n.x+n.width,y:s};break;case ja:t={x:n.x-r.width,y:s};break;default:t={x:n.x,y:n.y}}var u=i?tl(i):null;if(null!=u){var c="y"===u?"height":"width";switch(a){case Fa:t[u]=t[u]-(n[c]/2-r[c]/2);break;case Wa:t[u]=t[u]+(n[c]/2-r[c]/2)}}return t}var rl={top:"auto",right:"auto",bottom:"auto",left:"auto"};function ol(e){var t,n=e.popper,r=e.popperRect,o=e.placement,i=e.variation,a=e.offsets,l=e.position,s=e.gpuAcceleration,u=e.adaptive,c=e.roundOffsets,d=e.isFixed,f=a.x,p=void 0===f?0:f,h=a.y,m=void 0===h?0:h,g="function"==typeof c?c({x:p,y:m}):{x:p,y:m};p=g.x,m=g.y;var y=a.hasOwnProperty("x"),v=a.hasOwnProperty("y"),b=ja,w=Da,S=window;if(u){var k=Na(n),A="clientHeight",C="clientWidth";k===da(n)&&"static"!==xa(k=Aa(n)).position&&"absolute"===l&&(A="scrollHeight",C="scrollWidth"),(o===Da||(o===ja||o===Ia)&&i===Wa)&&(w=za,m-=(d&&k===S&&S.visualViewport?S.visualViewport.height:k[A])-r.height,m*=s?1:-1),o!==ja&&(o!==Da&&o!==za||i!==Wa)||(b=Ia,p-=(d&&k===S&&S.visualViewport?S.visualViewport.width:k[C])-r.width,p*=s?1:-1)}var x,E=Object.assign({position:l},u&&rl),P=!0===c?function(e,t){var n=e.x,r=e.y,o=t.devicePixelRatio||1;return{x:ya(n*o)/o||0,y:ya(r*o)/o||0}}({x:p,y:m},da(n)):{x:p,y:m};return p=P.x,m=P.y,s?Object.assign({},E,((x={})[w]=v?"0":"",x[b]=y?"0":"",x.transform=(S.devicePixelRatio||1)<=1?"translate("+p+"px, "+m+"px)":"translate3d("+p+"px, "+m+"px, 0)",x)):Object.assign({},E,((t={})[w]=v?m+"px":"",t[b]=y?p+"px":"",t.transform="",t))}var il={left:"right",right:"left",bottom:"top",top:"bottom"};function al(e){return e.replace(/left|right|bottom|top/g,(function(e){return il[e]}))}var ll={start:"end",end:"start"};function sl(e){return e.replace(/start|end/g,(function(e){return ll[e]}))}function ul(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&ha(n)){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function cl(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function dl(e,t,n){return t===Ha?cl(function(e,t){var n=da(e),r=Aa(e),o=n.visualViewport,i=r.clientWidth,a=r.clientHeight,l=0,s=0;if(o){i=o.width,a=o.height;var u=ba();(u||!u&&"fixed"===t)&&(l=o.offsetLeft,s=o.offsetTop)}return{width:i,height:a,x:l+Ca(e),y:s}}(e,n)):fa(t)?function(e,t){var n=wa(e,!1,"fixed"===t);return n.top=n.top+e.clientTop,n.left=n.left+e.clientLeft,n.bottom=n.top+e.clientHeight,n.right=n.left+e.clientWidth,n.width=e.clientWidth,n.height=e.clientHeight,n.x=n.left,n.y=n.top,n}(t,n):cl(function(e){var t,n=Aa(e),r=Sa(e),o=null==(t=e.ownerDocument)?void 0:t.body,i=ma(n.scrollWidth,n.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),a=ma(n.scrollHeight,n.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),l=-r.scrollLeft+Ca(e),s=-r.scrollTop;return"rtl"===xa(o||n).direction&&(l+=ma(n.clientWidth,o?o.clientWidth:0)-i),{width:i,height:a,x:l,y:s}}(Aa(e)))}function fl(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function pl(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}function hl(e,t){void 0===t&&(t={});var n=t,r=n.placement,o=void 0===r?e.placement:r,i=n.strategy,a=void 0===i?e.strategy:i,l=n.boundary,s=void 0===l?"clippingParents":l,u=n.rootBoundary,c=void 0===u?Ha:u,d=n.elementContext,f=void 0===d?Ua:d,p=n.altBoundary,h=void 0!==p&&p,m=n.padding,g=void 0===m?0:m,y=fl("number"!=typeof g?g:pl(g,Ba)),v=f===Ua?"reference":Ua,b=e.rects.popper,w=e.elements[h?v:f],S=function(e,t,n,r){var o="clippingParents"===t?function(e){var t=_a(Ta(e)),n=["absolute","fixed"].indexOf(xa(e).position)>=0&&pa(e)?Na(e):e;return fa(n)?t.filter((function(e){return fa(e)&&ul(e,n)&&"body"!==ka(e)})):[]}(e):[].concat(t),i=[].concat(o,[n]),a=i[0],l=i.reduce((function(t,n){var o=dl(e,n,r);return t.top=ma(o.top,t.top),t.right=ga(o.right,t.right),t.bottom=ga(o.bottom,t.bottom),t.left=ma(o.left,t.left),t}),dl(e,a,r));return l.width=l.right-l.left,l.height=l.bottom-l.top,l.x=l.left,l.y=l.top,l}(fa(w)?w:w.contextElement||Aa(e.elements.popper),s,c,a),k=wa(e.elements.reference),A=nl({reference:k,element:b,strategy:"absolute",placement:o}),C=cl(Object.assign({},b,A)),x=f===Ua?C:k,E={top:S.top-x.top+y.top,bottom:x.bottom-S.bottom+y.bottom,left:S.left-x.left+y.left,right:x.right-S.right+y.right},P=e.modifiersData.offset;if(f===Ua&&P){var O=P[o];Object.keys(E).forEach((function(e){var t=[Ia,za].indexOf(e)>=0?1:-1,n=[Da,za].indexOf(e)>=0?"y":"x";E[e]+=O[n]*t}))}return E}const ml={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name;if(!t.modifiersData[r]._skip){for(var o=n.mainAxis,i=void 0===o||o,a=n.altAxis,l=void 0===a||a,s=n.fallbackPlacements,u=n.padding,c=n.boundary,d=n.rootBoundary,f=n.altBoundary,p=n.flipVariations,h=void 0===p||p,m=n.allowedAutoPlacements,g=t.options.placement,y=Za(g),v=s||(y!==g&&h?function(e){if(Za(e)===$a)return[];var t=al(e);return[sl(e),t,sl(t)]}(g):[al(g)]),b=[g].concat(v).reduce((function(e,n){return e.concat(Za(n)===$a?function(e,t){void 0===t&&(t={});var n=t,r=n.placement,o=n.boundary,i=n.rootBoundary,a=n.padding,l=n.flipVariations,s=n.allowedAutoPlacements,u=void 0===s?Ga:s,c=el(r),d=c?l?Va:Va.filter((function(e){return el(e)===c})):Ba,f=d.filter((function(e){return u.indexOf(e)>=0}));0===f.length&&(f=d);var p=f.reduce((function(t,n){return t[n]=hl(e,{placement:n,boundary:o,rootBoundary:i,padding:a})[Za(n)],t}),{});return Object.keys(p).sort((function(e,t){return p[e]-p[t]}))}(t,{placement:n,boundary:c,rootBoundary:d,padding:u,flipVariations:h,allowedAutoPlacements:m}):n)}),[]),w=t.rects.reference,S=t.rects.popper,k=new Map,A=!0,C=b[0],x=0;x<b.length;x++){var E=b[x],P=Za(E),O=el(E)===Fa,T=[Da,za].indexOf(P)>=0,L=T?"width":"height",_=hl(t,{placement:E,boundary:c,rootBoundary:d,altBoundary:f,padding:u}),M=T?O?Ia:ja:O?za:Da;w[L]>S[L]&&(M=al(M));var R=al(M),N=[];if(i&&N.push(_[P]<=0),l&&N.push(_[M]<=0,_[R]<=0),N.every((function(e){return e}))){C=E,A=!1;break}k.set(E,N)}if(A)for(var D=function(e){var t=b.find((function(t){var n=k.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return C=t,"break"},z=h?3:1;z>0&&"break"!==D(z);z--);t.placement!==C&&(t.modifiersData[r]._skip=!0,t.placement=C,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function gl(e,t,n){return ma(e,ga(t,n))}const yl={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name,o=n.mainAxis,i=void 0===o||o,a=n.altAxis,l=void 0!==a&&a,s=n.boundary,u=n.rootBoundary,c=n.altBoundary,d=n.padding,f=n.tether,p=void 0===f||f,h=n.tetherOffset,m=void 0===h?0:h,g=hl(t,{boundary:s,rootBoundary:u,padding:d,altBoundary:c}),y=Za(t.placement),v=el(t.placement),b=!v,w=tl(y),S="x"===w?"y":"x",k=t.modifiersData.popperOffsets,A=t.rects.reference,C=t.rects.popper,x="function"==typeof m?m(Object.assign({},t.rects,{placement:t.placement})):m,E="number"==typeof x?{mainAxis:x,altAxis:x}:Object.assign({mainAxis:0,altAxis:0},x),P=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,O={x:0,y:0};if(k){if(i){var T,L="y"===w?Da:ja,_="y"===w?za:Ia,M="y"===w?"height":"width",R=k[w],N=R+g[L],D=R-g[_],z=p?-C[M]/2:0,I=v===Fa?A[M]:C[M],j=v===Fa?-C[M]:-A[M],$=t.elements.arrow,B=p&&$?Oa($):{width:0,height:0},F=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},W=F[L],H=F[_],U=gl(0,A[M],B[M]),V=b?A[M]/2-z-U-W-E.mainAxis:I-U-W-E.mainAxis,G=b?-A[M]/2+z+U+H+E.mainAxis:j+U+H+E.mainAxis,q=t.elements.arrow&&Na(t.elements.arrow),K=q?"y"===w?q.clientTop||0:q.clientLeft||0:0,Q=null!=(T=null==P?void 0:P[w])?T:0,X=R+G-Q,Y=gl(p?ga(N,R+V-Q-K):N,R,p?ma(D,X):D);k[w]=Y,O[w]=Y-R}if(l){var J,Z="x"===w?Da:ja,ee="x"===w?za:Ia,te=k[S],ne="y"===S?"height":"width",re=te+g[Z],oe=te-g[ee],ie=-1!==[Da,ja].indexOf(y),ae=null!=(J=null==P?void 0:P[S])?J:0,le=ie?re:te-A[ne]-C[ne]-ae+E.altAxis,se=ie?te+A[ne]+C[ne]-ae-E.altAxis:oe,ue=p&&ie?function(e,t,n){var r=gl(e,t,n);return r>n?n:r}(le,te,se):gl(p?le:re,te,p?se:oe);k[S]=ue,O[S]=ue-te}t.modifiersData[r]=O}},requiresIfExists:["offset"]},vl={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,r=e.name,o=e.options,i=n.elements.arrow,a=n.modifiersData.popperOffsets,l=Za(n.placement),s=tl(l),u=[ja,Ia].indexOf(l)>=0?"height":"width";if(i&&a){var c=function(e,t){return fl("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:pl(e,Ba))}(o.padding,n),d=Oa(i),f="y"===s?Da:ja,p="y"===s?za:Ia,h=n.rects.reference[u]+n.rects.reference[s]-a[s]-n.rects.popper[u],m=a[s]-n.rects.reference[s],g=Na(i),y=g?"y"===s?g.clientHeight||0:g.clientWidth||0:0,v=h/2-m/2,b=c[f],w=y-d[u]-c[p],S=y/2-d[u]/2+v,k=gl(b,S,w),A=s;n.modifiersData[r]=((t={})[A]=k,t.centerOffset=k-S,t)}},effect:function(e){var t=e.state,n=e.options.element,r=void 0===n?"[data-popper-arrow]":n;null!=r&&("string"!=typeof r||(r=t.elements.popper.querySelector(r)))&&ul(t.elements.popper,r)&&(t.elements.arrow=r)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function bl(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function wl(e){return[Da,Ia,za,ja].some((function(t){return e[t]>=0}))}var Sl=Ya({defaultModifiers:[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=e.options,o=r.scroll,i=void 0===o||o,a=r.resize,l=void 0===a||a,s=da(t.elements.popper),u=[].concat(t.scrollParents.reference,t.scrollParents.popper);return i&&u.forEach((function(e){e.addEventListener("scroll",n.update,Ja)})),l&&s.addEventListener("resize",n.update,Ja),function(){i&&u.forEach((function(e){e.removeEventListener("scroll",n.update,Ja)})),l&&s.removeEventListener("resize",n.update,Ja)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=nl({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,r=n.gpuAcceleration,o=void 0===r||r,i=n.adaptive,a=void 0===i||i,l=n.roundOffsets,s=void 0===l||l,u={placement:Za(t.placement),variation:el(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:o,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,ol(Object.assign({},u,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:a,roundOffsets:s})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,ol(Object.assign({},u,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:s})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},r=t.attributes[e]||{},o=t.elements[e];pa(o)&&ka(o)&&(Object.assign(o.style,n),Object.keys(r).forEach((function(e){var t=r[e];!1===t?o.removeAttribute(e):o.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var r=t.elements[e],o=t.attributes[e]||{},i=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});pa(r)&&ka(r)&&(Object.assign(r.style,i),Object.keys(o).forEach((function(e){r.removeAttribute(e)})))}))}},requires:["computeStyles"]},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,r=e.name,o=n.offset,i=void 0===o?[0,0]:o,a=Ga.reduce((function(e,n){return e[n]=function(e,t,n){var r=Za(e),o=[ja,Da].indexOf(r)>=0?-1:1,i="function"==typeof n?n(Object.assign({},t,{placement:e})):n,a=i[0],l=i[1];return a=a||0,l=(l||0)*o,[ja,Ia].indexOf(r)>=0?{x:l,y:a}:{x:a,y:l}}(n,t.rects,i),e}),{}),l=a[t.placement],s=l.x,u=l.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=s,t.modifiersData.popperOffsets.y+=u),t.modifiersData[r]=a}},ml,yl,vl,{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,o=t.rects.popper,i=t.modifiersData.preventOverflow,a=hl(t,{elementContext:"reference"}),l=hl(t,{altBoundary:!0}),s=bl(a,r),u=bl(l,o,i),c=wl(s),d=wl(u);t.modifiersData[n]={referenceClippingOffsets:s,popperEscapeOffsets:u,isReferenceHidden:c,hasPopperEscaped:d},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":c,"data-popper-escaped":d})}}]});function kl(e){return Ci("MuiPopper",e)}function Al(e){return"function"==typeof e?e():e}xi("MuiPopper",["root"]);const Cl={},xl=r.forwardRef((function(e,t){const{anchorEl:n,children:o,direction:i,disablePortal:a,modifiers:l,open:s,placement:u,popperOptions:c,popperRef:d,slotProps:f={},slots:p={},TransitionProps:h,ownerState:m,...g}=e,y=r.useRef(null),v=Oo(y,t),b=r.useRef(null),w=Oo(b,d),S=r.useRef(w);Nr((()=>{S.current=w}),[w]),r.useImperativeHandle(d,(()=>b.current),[]);const k=function(e,t){if("ltr"===t)return e;switch(e){case"bottom-end":return"bottom-start";case"bottom-start":return"bottom-end";case"top-end":return"top-start";case"top-start":return"top-end";default:return e}}(u,i),[A,C]=r.useState(k),[x,E]=r.useState(Al(n));r.useEffect((()=>{b.current&&b.current.forceUpdate()})),r.useEffect((()=>{n&&E(Al(n))}),[n]),Nr((()=>{if(!x||!s)return;let e=[{name:"preventOverflow",options:{altBoundary:a}},{name:"flip",options:{altBoundary:a}},{name:"onUpdate",enabled:!0,phase:"afterWrite",fn:({state:e})=>{C(e.placement)}}];null!=l&&(e=e.concat(l)),c&&null!=c.modifiers&&(e=e.concat(c.modifiers));const t=Sl(x,y.current,{placement:k,...c,modifiers:e});return S.current(t),()=>{t.destroy(),S.current(null)}}),[x,a,l,s,c,k]);const P={placement:A};null!==h&&(P.TransitionProps=h);const O=(e=>{const{classes:t}=e;return Eo({root:["root"]},kl,t)})(e),T=p.root??"div",L=function(e){const{elementType:t,externalSlotProps:n,ownerState:r,skipResolvingSlotProps:o=!1,...i}=e,a=o?{}:Zo(n,r),{props:l,internalRef:s}=ni({...i,externalSlotProps:a}),u=Oo(s,a?.ref,e.additionalProps?.ref);return Jo(t,{...l,ref:u},r)}({elementType:T,externalSlotProps:f.root,externalForwardedProps:g,additionalProps:{role:"tooltip",ref:v},ownerState:e,className:O.root});return(0,Xt.jsx)(T,{...L,children:"function"==typeof o?o(P):o})})),El=Ko(r.forwardRef((function(e,t){const{anchorEl:n,children:o,container:i,direction:a="ltr",disablePortal:l=!1,keepMounted:s=!1,modifiers:u,open:c,placement:d="bottom",popperOptions:f=Cl,popperRef:p,style:h,transition:m=!1,slotProps:g={},slots:y={},...v}=e,[b,w]=r.useState(!0);if(!s&&!c&&(!m||b))return null;let S;if(i)S=i;else if(n){const e=Al(n);S=e&&void 0!==e.nodeType?To(e).body:To(null).body}const k=c||!s||m&&!b?void 0:"none",A=m?{in:c,onEnter:()=>{w(!1)},onExited:()=>{w(!0)}}:void 0;return(0,Xt.jsx)(Io,{disablePortal:l,container:S,children:(0,Xt.jsx)(xl,{anchorEl:n,direction:a,disablePortal:l,modifiers:u,ref:t,open:m?!b:c,placement:d,popperOptions:f,popperRef:p,slotProps:g,slots:y,...v,style:{position:"fixed",top:0,left:0,display:k,...h},TransitionProps:A,children:o})})})),{name:"MuiPopper",slot:"Root"})({}),Pl=r.forwardRef((function(e,t){const n=Pr(),r=Yo({props:e,name:"MuiPopper"}),{anchorEl:o,component:i,components:a,componentsProps:l,container:s,disablePortal:u,keepMounted:c,modifiers:d,open:f,placement:p,popperOptions:h,popperRef:m,transition:g,slots:y,slotProps:v,...b}=r,w=y?.root??a?.Root,S={anchorEl:o,container:s,disablePortal:u,keepMounted:c,modifiers:d,open:f,placement:p,popperOptions:h,popperRef:m,transition:g,...b};return(0,Xt.jsx)(El,{as:i,direction:n?"rtl":"ltr",slots:{root:w},slotProps:v??l,...S,ref:t})})),Ol=Ti,Tl=Ir;function Ll(e){return Ci("MuiTooltip",e)}const _l=xi("MuiTooltip",["popper","popperInteractive","popperArrow","popperClose","tooltip","tooltipArrow","touch","tooltipPlacementLeft","tooltipPlacementRight","tooltipPlacementTop","tooltipPlacementBottom","arrow"]),Ml=Ko(Pl,{name:"MuiTooltip",slot:"Popper",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.popper,!n.disableInteractive&&t.popperInteractive,n.arrow&&t.popperArrow,!n.open&&t.popperClose]}})(Xo((({theme:e})=>({zIndex:(e.vars||e).zIndex.tooltip,pointerEvents:"none",variants:[{props:({ownerState:e})=>!e.disableInteractive,style:{pointerEvents:"auto"}},{props:({open:e})=>!e,style:{pointerEvents:"none"}},{props:({ownerState:e})=>e.arrow,style:{[`&[data-popper-placement*="bottom"] .${_l.arrow}`]:{top:0,marginTop:"-0.71em","&::before":{transformOrigin:"0 100%"}},[`&[data-popper-placement*="top"] .${_l.arrow}`]:{bottom:0,marginBottom:"-0.71em","&::before":{transformOrigin:"100% 0"}},[`&[data-popper-placement*="right"] .${_l.arrow}`]:{height:"1em",width:"0.71em","&::before":{transformOrigin:"100% 100%"}},[`&[data-popper-placement*="left"] .${_l.arrow}`]:{height:"1em",width:"0.71em","&::before":{transformOrigin:"0 0"}}}},{props:({ownerState:e})=>e.arrow&&!e.isRtl,style:{[`&[data-popper-placement*="right"] .${_l.arrow}`]:{left:0,marginLeft:"-0.71em"}}},{props:({ownerState:e})=>e.arrow&&!!e.isRtl,style:{[`&[data-popper-placement*="right"] .${_l.arrow}`]:{right:0,marginRight:"-0.71em"}}},{props:({ownerState:e})=>e.arrow&&!e.isRtl,style:{[`&[data-popper-placement*="left"] .${_l.arrow}`]:{right:0,marginRight:"-0.71em"}}},{props:({ownerState:e})=>e.arrow&&!!e.isRtl,style:{[`&[data-popper-placement*="left"] .${_l.arrow}`]:{left:0,marginLeft:"-0.71em"}}}]})))),Rl=Ko("div",{name:"MuiTooltip",slot:"Tooltip",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.tooltip,n.touch&&t.touch,n.arrow&&t.tooltipArrow,t[`tooltipPlacement${Po(n.placement.split("-")[0])}`]]}})(Xo((({theme:e})=>{return{backgroundColor:e.vars?e.vars.palette.Tooltip.bg:y(e.palette.grey[700],.92),borderRadius:(e.vars||e).shape.borderRadius,color:(e.vars||e).palette.common.white,fontFamily:e.typography.fontFamily,padding:"4px 8px",fontSize:e.typography.pxToRem(11),maxWidth:300,margin:2,wordWrap:"break-word",fontWeight:e.typography.fontWeightMedium,[`.${_l.popper}[data-popper-placement*="left"] &`]:{transformOrigin:"right center"},[`.${_l.popper}[data-popper-placement*="right"] &`]:{transformOrigin:"left center"},[`.${_l.popper}[data-popper-placement*="top"] &`]:{transformOrigin:"center bottom",marginBottom:"14px"},[`.${_l.popper}[data-popper-placement*="bottom"] &`]:{transformOrigin:"center top",marginTop:"14px"},variants:[{props:({ownerState:e})=>e.arrow,style:{position:"relative",margin:0}},{props:({ownerState:e})=>e.touch,style:{padding:"8px 16px",fontSize:e.typography.pxToRem(14),lineHeight:(t=16/14,Math.round(1e5*t)/1e5+"em"),fontWeight:e.typography.fontWeightRegular}},{props:({ownerState:e})=>!e.isRtl,style:{[`.${_l.popper}[data-popper-placement*="left"] &`]:{marginRight:"14px"},[`.${_l.popper}[data-popper-placement*="right"] &`]:{marginLeft:"14px"}}},{props:({ownerState:e})=>!e.isRtl&&e.touch,style:{[`.${_l.popper}[data-popper-placement*="left"] &`]:{marginRight:"24px"},[`.${_l.popper}[data-popper-placement*="right"] &`]:{marginLeft:"24px"}}},{props:({ownerState:e})=>!!e.isRtl,style:{[`.${_l.popper}[data-popper-placement*="left"] &`]:{marginLeft:"14px"},[`.${_l.popper}[data-popper-placement*="right"] &`]:{marginRight:"14px"}}},{props:({ownerState:e})=>!!e.isRtl&&e.touch,style:{[`.${_l.popper}[data-popper-placement*="left"] &`]:{marginLeft:"24px"},[`.${_l.popper}[data-popper-placement*="right"] &`]:{marginRight:"24px"}}},{props:({ownerState:e})=>e.touch,style:{[`.${_l.popper}[data-popper-placement*="top"] &`]:{marginBottom:"24px"}}},{props:({ownerState:e})=>e.touch,style:{[`.${_l.popper}[data-popper-placement*="bottom"] &`]:{marginTop:"24px"}}}]};var t}))),Nl=Ko("span",{name:"MuiTooltip",slot:"Arrow"})(Xo((({theme:e})=>({overflow:"hidden",position:"absolute",width:"1em",height:"0.71em",boxSizing:"border-box",color:e.vars?e.vars.palette.Tooltip.bg:y(e.palette.grey[700],.9),"&::before":{content:'""',margin:"auto",display:"block",width:"100%",height:"100%",backgroundColor:"currentColor",transform:"rotate(45deg)"}}))));let Dl=!1;const zl=new ra;let Il={x:0,y:0};function jl(e,t){return(n,...r)=>{t&&t(n,...r),e(n,...r)}}const $l=r.forwardRef((function(e,t){const n=Yo({props:e,name:"MuiTooltip"}),{arrow:o=!1,children:i,classes:a,components:l={},componentsProps:s={},describeChild:u=!1,disableFocusListener:c=!1,disableHoverListener:d=!1,disableInteractive:f=!1,disableTouchListener:p=!1,enterDelay:h=100,enterNextDelay:m=0,enterTouchDelay:g=700,followCursor:y=!1,id:v,leaveDelay:b=0,leaveTouchDelay:w=1500,onClose:S,onOpen:k,open:A,placement:C="bottom",PopperComponent:x,PopperProps:E={},slotProps:P={},slots:O={},title:T,TransitionComponent:L,TransitionProps:_,...M}=n,R=r.isValidElement(i)?i:(0,Xt.jsx)("span",{children:i}),N=hi(),D=Pr(),[z,I]=r.useState(),[j,$]=r.useState(null),B=r.useRef(!1),F=f||y,W=oa(),H=oa(),U=oa(),V=oa(),[G,q]=function(e){const{controlled:t,default:n,name:o,state:i="value"}=e,{current:a}=r.useRef(void 0!==t),[l,s]=r.useState(n);return[a?t:l,r.useCallback((e=>{a||s(e)}),[])]}({controlled:A,default:!1,name:"Tooltip",state:"open"});let K=G;const Q=Tl(v),X=r.useRef(),Y=Ol((()=>{void 0!==X.current&&(document.body.style.WebkitUserSelect=X.current,X.current=void 0),V.clear()}));r.useEffect((()=>Y),[Y]);const J=e=>{zl.clear(),Dl=!0,q(!0),k&&!K&&k(e)},Z=Ol((e=>{zl.start(800+b,(()=>{Dl=!1})),q(!1),S&&K&&S(e),W.start(N.transitions.duration.shortest,(()=>{B.current=!1}))})),ee=e=>{B.current&&"touchstart"!==e.type||(z&&z.removeAttribute("title"),H.clear(),U.clear(),h||Dl&&m?H.start(Dl?m:h,(()=>{J(e)})):J(e))},te=e=>{H.clear(),U.start(b,(()=>{Z(e)}))},[,ne]=r.useState(!1),re=e=>{ia(e.target)||(ne(!1),te(e))},oe=e=>{z||I(e.currentTarget),ia(e.target)&&(ne(!0),ee(e))},ie=e=>{B.current=!0;const t=R.props;t.onTouchStart&&t.onTouchStart(e)};r.useEffect((()=>{if(K)return document.addEventListener("keydown",e),()=>{document.removeEventListener("keydown",e)};function e(e){"Escape"===e.key&&Z(e)}}),[Z,K]);const ae=yi(Lo(R),I,t);T||0===T||(K=!1);const le=r.useRef(),se={},ue="string"==typeof T;u?(se.title=K||!ue||d?null:T,se["aria-describedby"]=K?Q:null):(se["aria-label"]=ue?T:null,se["aria-labelledby"]=K&&!ue?Q:null);const ce={...se,...M,...R.props,className:Lr(M.className,R.props.className),onTouchStart:ie,ref:ae,...y?{onMouseMove:e=>{const t=R.props;t.onMouseMove&&t.onMouseMove(e),Il={x:e.clientX,y:e.clientY},le.current&&le.current.update()}}:{}},de={};p||(ce.onTouchStart=e=>{ie(e),U.clear(),W.clear(),Y(),X.current=document.body.style.WebkitUserSelect,document.body.style.WebkitUserSelect="none",V.start(g,(()=>{document.body.style.WebkitUserSelect=X.current,ee(e)}))},ce.onTouchEnd=e=>{R.props.onTouchEnd&&R.props.onTouchEnd(e),Y(),U.start(w,(()=>{Z(e)}))}),d||(ce.onMouseOver=jl(ee,ce.onMouseOver),ce.onMouseLeave=jl(te,ce.onMouseLeave),F||(de.onMouseOver=ee,de.onMouseLeave=te)),c||(ce.onFocus=jl(oe,ce.onFocus),ce.onBlur=jl(re,ce.onBlur),F||(de.onFocus=oe,de.onBlur=re));const fe={...n,isRtl:D,arrow:o,disableInteractive:F,placement:C,PopperComponentProp:x,touch:B.current},pe="function"==typeof P.popper?P.popper(fe):P.popper,he=r.useMemo((()=>{let e=[{name:"arrow",enabled:Boolean(j),options:{element:j,padding:4}}];return E.popperOptions?.modifiers&&(e=e.concat(E.popperOptions.modifiers)),pe?.popperOptions?.modifiers&&(e=e.concat(pe.popperOptions.modifiers)),{...E.popperOptions,...pe?.popperOptions,modifiers:e}}),[j,E.popperOptions,pe?.popperOptions]),me=(e=>{const{classes:t,disableInteractive:n,arrow:r,touch:o,placement:i}=e;return Eo({popper:["popper",!n&&"popperInteractive",r&&"popperArrow"],tooltip:["tooltip",r&&"tooltipArrow",o&&"touch",`tooltipPlacement${Po(i.split("-")[0])}`],arrow:["arrow"]},Ll,t)})(fe),ge="function"==typeof P.transition?P.transition(fe):P.transition,ye={slots:{popper:l.Popper,transition:l.Transition??L,tooltip:l.Tooltip,arrow:l.Arrow,...O},slotProps:{arrow:P.arrow??s.arrow,popper:{...E,...pe??s.popper},tooltip:P.tooltip??s.tooltip,transition:{..._,...ge??s.transition}}},[ve,be]=ri("popper",{elementType:Ml,externalForwardedProps:ye,ownerState:fe,className:Lr(me.popper,E?.className)}),[we,Se]=ri("transition",{elementType:ca,externalForwardedProps:ye,ownerState:fe}),[ke,Ae]=ri("tooltip",{elementType:Rl,className:me.tooltip,externalForwardedProps:ye,ownerState:fe}),[Ce,xe]=ri("arrow",{elementType:Nl,className:me.arrow,externalForwardedProps:ye,ownerState:fe,ref:$});return(0,Xt.jsxs)(r.Fragment,{children:[r.cloneElement(R,ce),(0,Xt.jsx)(ve,{as:x??Pl,placement:C,anchorEl:y?{getBoundingClientRect:()=>({top:Il.y,left:Il.x,right:Il.x,bottom:Il.y,width:0,height:0})}:z,popperRef:le,open:!!z&&K,id:Q,transition:!0,...de,...be,popperOptions:he,children:({TransitionProps:e})=>(0,Xt.jsx)(we,{timeout:N.transitions.duration.shorter,...e,...Se,children:(0,Xt.jsxs)(ke,{...Ae,children:[T,o?(0,Xt.jsx)(Ce,{...xe}):null]})})})]})}));var Bl;function Fl(){return Fl=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Fl.apply(null,arguments)}const Wl=function(e){return r.createElement("svg",Fl({xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1",viewBox:"0 0 119.4 122.88"},e),Bl||(Bl=r.createElement("path",{d:"M83.91 26.34a43.8 43.8 0 0 0-22.68-7 42 42 0 0 0-24.42 7 50 50 0 0 0-7.46 6.09 42.07 42.07 0 0 0-5.47 54.1A49 49 0 0 0 30 94a41.83 41.83 0 0 0 18.6 10.9 42.77 42.77 0 0 0 21.77.13 47.2 47.2 0 0 0 19.2-9.62 38 38 0 0 0 11.14-16 37 37 0 0 0 1.64-6.18 38.4 38.4 0 0 0 .61-6.69 8.24 8.24 0 1 1 16.47 0 55 55 0 0 1-.8 9.53A54.77 54.77 0 0 1 100.26 108a63.6 63.6 0 0 1-25.92 13.1 59.1 59.1 0 0 1-30.1-.25 58.45 58.45 0 0 1-26-15.17 66 66 0 0 1-8.1-9.86 58.56 58.56 0 0 1 7.54-75 65.7 65.7 0 0 1 9.92-8.09 58.4 58.4 0 0 1 33.95-9.85 60.5 60.5 0 0 1 32.5 10.42l-.47-4.11A8.25 8.25 0 1 1 110 7.32l2.64 22.77a8.24 8.24 0 0 1-6.73 9l-23.38 4.22a8.23 8.23 0 1 1-2.9-16.21z"})))};var Hl;function Ul(){return Ul=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ul.apply(null,arguments)}const Vl=function(e){return r.createElement("svg",Ul({xmlns:"http://www.w3.org/2000/svg",fillRule:"evenodd",clipRule:"evenodd",imageRendering:"optimizeQuality",shapeRendering:"geometricPrecision",textRendering:"geometricPrecision",viewBox:"0 0 512 410.73"},e),Hl||(Hl=r.createElement("path",{d:"M335.62 410.73H164.96V239.89L13.31 59.96C7.33 52.52 3.19 44.79 1.29 37.65c-1.79-6.72-1.76-13.28.34-19.1 2.3-6.44 6.92-11.63 13.91-14.9C20.35 1.41 26.3.13 33.4.1L472.7.04c7.93-.29 14.95.96 20.74 3.44 7.02 2.97 12.28 7.87 15.44 14.17 3.05 6.1 3.93 13.27 2.34 21.06-1.5 7.24-5.17 15.11-11.32 23.16l-151.94 178.1v170.76zm95.61-347.71-69.16 81.05-18.67-16.01 69.16-81.05zm-84.8 99.39-24.45 28.66-18.68-16.01 24.45-28.66z"})))};var Gl;function ql(){return ql=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ql.apply(null,arguments)}const Kl=function(e){return r.createElement("svg",ql({xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",viewBox:"0 0 122.879 119.801"},e),Gl||(Gl=r.createElement("path",{d:"M49.991 0h.015v.006C63.8.01 76.3 5.607 85.342 14.651c9.026 9.031 14.618 21.515 14.628 35.303h.006v.074h-.006a50 50 0 0 1-3.471 18.301v.007a50 50 0 0 1-5.548 10.307l29.08 26.14.018.015.157.146.012.012a8.6 8.6 0 0 1 2.648 5.779 8.6 8.6 0 0 1-1.976 5.971l-.011.016-.176.204-.039.046-.145.155-.011.011a8.6 8.6 0 0 1-5.782 2.651 8.6 8.6 0 0 1-5.975-1.978l-.012-.012-.203-.175-.029-.024-29.743-26.735a50 50 0 0 1-2.687 1.763 50 50 0 0 1-3.816 2.117c-6.699 3.342-14.266 5.223-22.27 5.223v.006h-.016v-.006c-13.797-.005-26.297-5.601-35.334-14.644l-.004.005C5.608 76.3.016 63.81.007 50.021H0v-.049h.007c.005-13.799 5.601-26.297 14.646-35.339C23.684 5.607 36.169.015 49.958.006V0zm17.796 43.397a6.56 6.56 0 0 1 3.322.872l-.002.002c.365.21.708.454 1.01.715.306.264.594.569.851.895h.004a6.52 6.52 0 0 1 1.394 4.053 6.63 6.63 0 0 1-.906 3.335 6.7 6.7 0 0 1-1.791 1.996 6.7 6.7 0 0 1-1.168.688v.002a6.6 6.6 0 0 1-2.722.6l-11.051.08-.08 11.062a6.5 6.5 0 0 1-1.366 3.96l-.006.007a6.646 6.646 0 0 1-5.247 2.568v-.007a6.6 6.6 0 0 1-1.743-.232 6.56 6.56 0 0 1-2.899-1.689 6.5 6.5 0 0 1-1.672-2.893v-.006a6.6 6.6 0 0 1-.215-1.728v-.005l.075-10.945-10.962.076a6.5 6.5 0 0 1-3.327-.873l.002-.002a6.3 6.3 0 0 1-1.86-1.613h-.004a6.52 6.52 0 0 1-1.393-4.053 6.6 6.6 0 0 1 .906-3.328l-.004-.002a6.8 6.8 0 0 1 1.442-1.714h.004a6.7 6.7 0 0 1 1.942-1.151 6.6 6.6 0 0 1 2.296-.423l11.051-.082.08-11.062a6.5 6.5 0 0 1 .921-3.309l.004.002c.224-.374.467-.715.727-1.003.264-.296.576-.584.908-.839l.005-.004v.002a6.62 6.62 0 0 1 4.055-1.375 6.6 6.6 0 0 1 3.317.897c.479.279.928.631 1.32 1.025l.004-.004a6.5 6.5 0 0 1 1.887 4.637l-.075 10.942zM50.006 11.212v.006h-.049v-.006c-10.683.007-20.367 4.348-27.376 11.354l.002.002c-7.019 7.018-11.365 16.711-11.368 27.404h.006v.049h-.006c.006 10.683 4.347 20.365 11.354 27.377l.002-.002c7.018 7.018 16.711 11.365 27.404 11.367v-.007h.049v.007c10.685-.007 20.367-4.348 27.381-11.359 7.012-7.009 11.359-16.702 11.361-27.401h-.006v-.049h.007c-.007-10.681-4.348-20.363-11.36-27.374v-.007c-7.009-7.011-16.702-11.359-27.401-11.361"})))};var Ql;function Xl(){return Xl=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Xl.apply(null,arguments)}const Yl=function(e){return r.createElement("svg",Xl({xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",viewBox:"0 0 122.879 119.801"},e),Ql||(Ql=r.createElement("path",{fillRule:"evenodd",d:"M49.991 0h.015v.006C63.8.01 76.3 5.607 85.342 14.651c9.026 9.031 14.618 21.515 14.628 35.303h.006v.074h-.006a50 50 0 0 1-3.471 18.301v.007a50 50 0 0 1-5.548 10.307l29.08 26.14.018.015.157.146.012.012a8.6 8.6 0 0 1 2.648 5.779 8.6 8.6 0 0 1-1.976 5.971l-.011.016-.176.204-.039.046-.145.155-.011.011a8.6 8.6 0 0 1-5.782 2.651 8.6 8.6 0 0 1-5.975-1.978l-.012-.012-.203-.175-.029-.024-29.743-26.735a50 50 0 0 1-2.687 1.763 50 50 0 0 1-3.816 2.117c-6.699 3.342-14.266 5.223-22.27 5.223v.006h-.016v-.006c-13.797-.005-26.297-5.601-35.334-14.644l-.004.005C5.608 76.3.016 63.81.007 50.021H0v-.049h.007c.005-13.799 5.601-26.297 14.646-35.339C23.684 5.607 36.169.015 49.958.006V0zm17.796 43.397a6.56 6.56 0 0 1 3.322.872l-.002.002c.365.21.708.454 1.01.715.306.264.594.569.851.895h.004a6.52 6.52 0 0 1 1.394 4.053 6.63 6.63 0 0 1-.906 3.335 6.7 6.7 0 0 1-1.791 1.996 6.7 6.7 0 0 1-1.168.688v.002a6.6 6.6 0 0 1-2.722.6l-35.166.248a6.5 6.5 0 0 1-3.327-.873l.002-.002a6.3 6.3 0 0 1-1.86-1.613h-.004a6.52 6.52 0 0 1-1.393-4.053 6.6 6.6 0 0 1 .906-3.328l-.004-.002a6.8 6.8 0 0 1 1.442-1.714h.004a6.7 6.7 0 0 1 1.942-1.151 6.6 6.6 0 0 1 2.296-.423zM50.006 11.212v.006h-.049v-.006c-10.683.007-20.367 4.348-27.376 11.354l.002.002c-7.019 7.018-11.365 16.711-11.368 27.404h.006v.049h-.006c.006 10.683 4.347 20.365 11.354 27.377l.002-.002c7.018 7.018 16.711 11.365 27.404 11.367v-.007h.049v.007c10.685-.007 20.367-4.348 27.381-11.359 7.012-7.009 11.359-16.702 11.361-27.401h-.006v-.049h.007c-.007-10.681-4.348-20.363-11.36-27.374v-.007c-7.009-7.011-16.702-11.359-27.401-11.361",clipRule:"evenodd"})))};function Jl(){return Jl=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Jl.apply(null,arguments)}const Zl=function(e){return r.createElement("svg",Jl({xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1",viewBox:"0 0 122.88 122.85"},e),r.createElement("path",{d:"m83.6 61.48.42-.42a1.1 1.1 0 0 1 1.54 0l15.65 15.64a1.1 1.1 0 0 1 0 1.54L89 90.45 71.81 73.27zm28.22 9.59a2.93 2.93 0 0 1-.86-5.8l8.56-1.27a2.93 2.93 0 1 1 .86 5.8zm-15.2-20.6a2.95 2.95 0 0 1-5.89 0v-9a2.95 2.95 0 1 1 5.89 0zm10.94 7.17a2.93 2.93 0 0 1-4.18-4.11l5.9-6a2.93 2.93 0 0 1 4.18 4.11zM73.28 32.53a2.93 2.93 0 1 1-.87-5.8L81 25.46a2.93 2.93 0 1 1 .86 5.8l-8.55 1.27Zm-15.2-20.61a2.95 2.95 0 1 1-5.89 0v-9a2.95 2.95 0 0 1 5.89 0zM69 19.1a2.93 2.93 0 0 1-4.16-4.1l5.47-5.57a2.93 2.93 0 1 1 4.17 4.11zm13.63 77.71-15.42 15.41A39.6 39.6 0 0 1 56.35 120a28.56 28.56 0 0 1-12.49 2.85 27.4 27.4 0 0 1-11.51-2.28c-8.75-4-19.49-15.31-25.39-22.82A32.6 32.6 0 0 1 1.2 87.47 28.6 28.6 0 0 1 .09 76.75a25 25 0 0 1 2.75-10.08 47 47 0 0 1 7.82-11l15.43-15.4 17.14 17.14-15.32 15.34q-4.56 4.57-4.61 9.63c0 6.86 10.3 17.23 17.15 17.23 3.34 0 6.59-1.56 9.67-4.64l15.33-15.34zM32.46 33.93l11.81-11.78.42-.42a1.1 1.1 0 0 1 1.54 0l15.56 15.55a1.08 1.08 0 0 1 0 1.53l-.41.42L49.57 51z",style:{fillRule:"evenodd"}}))};var es;function ts(){return ts=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ts.apply(null,arguments)}const ns=function(e){return r.createElement("svg",ts({xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",viewBox:"0 0 72.7 60"},e),es||(es=r.createElement("path",{d:"M72.4 28.5v-.2c-.1-.2-.3-.5-.5-.7L58.3 10.9c-1.3-1.6-3.6-1.9-5.2-.6s-1.9 3.6-.6 5.2l8.6 10.7H11.5l8.7-10.7c1.3-1.6 1-4-.6-5.2-1.6-1.3-4-1-5.2.6L.9 27.6c-.2.2-.3.4-.5.7v.2c-.3.4-.4.8-.4 1.3v.4c0 .4.1.9.3 1.3v.2c.1.2.3.5.5.7l13.5 16.7c1.3 1.6 3.6 1.9 5.2.6s1.9-3.6.6-5.2l-8.6-10.7h49.6l-8.7 10.7c-1.3 1.6-1 4 .6 5.2 1.6 1.3 4 1 5.2-.6l13.5-16.7c.2-.2.3-.4.5-.7v-.2c.2-.4.3-.8.3-1.3v-.4c.2-.5.1-.9-.1-1.3"})))};var rs;function os(){return os=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},os.apply(null,arguments)}const is=function(e){return r.createElement("svg",os({xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",viewBox:"0 0 122.9 60"},e),rs||(rs=r.createElement("path",{d:"M48.5 0c-2.1 0-3.8 1.7-3.8 3.8v22.5H11.5l8.7-10.7c1.3-1.6 1-4-.6-5.2-1.6-1.3-4-1-5.2.6L.9 27.6c-.2.2-.3.4-.5.7v.2c-.3.4-.4.8-.4 1.3v.4c0 .4.1.9.3 1.3v.2c.1.2.3.5.5.7l13.5 16.7c1.3 1.6 3.6 1.9 5.2.6s1.9-3.6.6-5.2l-8.6-10.7h33.2v22.5c0 2.1 1.7 3.7 3.8 3.8 2.1 0 3.8-1.7 3.8-3.8V3.7c-.1-2-1.8-3.7-3.8-3.7M74.4 60c2.1 0 3.8-1.7 3.8-3.8V33.7h33.2l-8.7 10.7c-1.3 1.6-1 4 .6 5.2 1.6 1.3 4 1 5.2-.6L122 32.4c.2-.2.3-.4.5-.7v-.2c.2-.4.3-.9.3-1.3v-.4c0-.4-.1-.9-.3-1.3v-.2c-.1-.2-.3-.5-.5-.7l-13.5-16.7c-1.3-1.6-3.6-1.9-5.2-.6s-1.9 3.6-.6 5.2l8.6 10.7H78.1V3.7c0-2.1-1.7-3.7-3.8-3.8-2.1 0-3.8 1.7-3.8 3.8v52.5c.2 2.1 1.8 3.8 3.9 3.8"})))};var as;function ls(){return ls=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ls.apply(null,arguments)}const ss=function(e){return r.createElement("svg",ls({xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",viewBox:"0 0 94.85 122.88"},e),as||(as=r.createElement("path",{d:"M60.56 122.49c-1.63.83-3.68.29-4.56-1.22L38.48 91.1 21.1 110.61c-5.24 5.88-12.16 7.34-12.85-1.57L0 1.59C-.04 1.03.2.46.65.13 1.17-.1 1.78-.02 2.24.3l88.92 60.87c7.37 5.05 2.65 10.31-5.06 11.91l-25.58 5.3 17.37 30.26c.86 1.51.31 3.56-1.22 4.55z"})))};var us;function cs(){return cs=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},cs.apply(null,arguments)}const ds=function(e){return r.createElement("svg",cs({xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",viewBox:"0 0 122.88 111.96"},e),us||(us=r.createElement("path",{d:"M61.15 0 0 26.52l61.41 24.96 61.47-24.88zm61.73 57.12L95.46 45.31 62.73 58.56c-.88.36-1.83.33-2.65 0L27.27 45.22 0 57.05 61.41 82zM96.14 75.56 62.73 89.08c-.88.36-1.83.33-2.65 0L26.59 75.47 0 87.01l61.41 24.96 61.47-24.88z"})))};function fs(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],s=!0,u=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ps(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ps(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ps(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function hs(e){var t=e.bpm,n=e.setBpm,o=e.beatsPerBar,i=e.setBeatsPerBar,a=(e.zoomLevel,e.increaseZoom),l=e.decreaseZoom,s=e.showInactive,u=e.setShowInactive,c=e.showHidden,d=e.setShowHidden,f=e.updateView,p=e.modeSnap,h=e.setModeSnap,m=e.mode,g=e.setMode,y=e.actionDuplicateCount,v=e.setActionDuplicateCount,b=e.actionDuplicateMode,w=e.setActionDuplicateMode,S=e.duplicateLayer,k=e.audioLayers,A=e.setSelectedAudioURL,C=e.saveCompDataJSON,x=e.loadCompDataJSON,E=fs((0,r.useState)(!1),2),P=E[0],O=E[1],T=function(){return O(!P)},L=fs((0,r.useState)(!1),2),_=L[0],M=L[1],R=function(){return M(!_)};return r.createElement("div",{id:"toolbar"},r.createElement("menu",{id:"main"},r.createElement($l,{title:"Refresh View"},r.createElement(Wl,{onClick:f})),r.createElement($l,{title:"Filter View"},r.createElement(Vl,{onClick:T,className:"".concat(s&&c?"":"active")})),P&&r.createElement("div",{className:"toggled-dropdown"},r.createElement("ul",null,r.createElement("li",{onClick:function(){u(!s),T()},className:"".concat(s?"":"active")},"Hide invisible / inaudible layers"),r.createElement("li",{onClick:function(){d(!c),T()},className:"".concat(c?"":"active")},"Hide hidden layers"))),r.createElement("label",{htmlFor:"bpm"},"BPM"),r.createElement($l,{title:"Beats per Minute"},r.createElement("input",{name:"bpm",type:"number",size:"3",style:{width:"3rem"},value:t,onChange:function(e){return n(e.target.value)}})),r.createElement($l,{title:"Beats per Bar (in View)"},r.createElement("select",{name:"beatsPerBar",id:"beatsPerBarSelect",value:o,onChange:function(e){return i(e.target.value)}},r.createElement("option",{value:"2"},"2"),r.createElement("option",{value:"4"},"4"),r.createElement("option",{value:"8"},"8"),r.createElement("option",{value:"16"},"16"))),r.createElement($l,{title:"Zoom In"},r.createElement(Kl,{onClick:a,style:{marginLeft:"1.5px"}})),r.createElement($l,{title:"Zoom Out"},r.createElement(Yl,{onClick:l,style:{marginLeft:"0"}})),r.createElement($l,{title:"Select Layer"},r.createElement(ss,{onClick:function(){return g("select")},className:"".concat("select"===m?"active":""),style:{marginLeft:"0"}})),r.createElement("div",{style:{display:"inline",height:"100%",borderLeft:"solid 3px var(--light-grey)",marginLeft:"1.5px",marginRight:"6px"}}),r.createElement($l,{title:"Snap Layer to Beats when changing"},r.createElement(Zl,{onClick:function(){return h(!p)},className:"".concat(p?"active":""),style:{marginLeft:"0"}})),r.createElement($l,{title:"Move Layer by beat"},r.createElement(ns,{onClick:function(){return g("move")},className:"".concat("move"===m?"active":""),style:{marginLeft:"0"}})),r.createElement($l,{title:"Scale Layer by beat"},r.createElement(is,{onClick:function(){return g("scale")},className:"".concat("scale"===m?"active":""),style:{marginLeft:"0"}})),r.createElement("div",{style:{display:"inline",height:"100%",borderLeft:"solid 3px var(--light-grey)",marginLeft:"1.5px",marginRight:"6px"}}),r.createElement($l,{title:"Repeat Layer on beat"},r.createElement(ds,{onClick:R,className:"action",style:{marginLeft:"0"}})),r.createElement(ea,{open:_,onClose:R,"aria-labelledby":"alert-dialog-title","aria-describedby":"alert-dialog-description"},r.createElement("p",{style:{margin:"0"}},r.createElement("label",{htmlFor:"duplicateCount"},"Repeat Layer for"),r.createElement("input",{name:"duplicateCount",type:"number",size:"4",style:{width:"3rem"},value:y,onChange:function(e){return v(e.target.value)}}),r.createElement("select",{name:"duplicateMode",value:b,onChange:function(e){return w(e.target.value)}},r.createElement("option",{value:"beat"},"beats"),r.createElement("option",{value:"bar"},"bars")),r.createElement("button",{onClick:function(){S(),R()}},"GO!")))),r.createElement("menu",{id:"second"},r.createElement("select",{onChange:function(e){var t="file://".concat(e.target.value.replace(/\\/g,"/"));A(t),console.log("Selected Audio URL",t)}},r.createElement("option",null,"Select audio layer"),k.map((function(e){return r.createElement("option",{key:e.index,value:e.url},e.name)}))),r.createElement("button",{onClick:function(){return C("soundsync")}},"SAVE JSON"),r.createElement("button",{onClick:x},"LOAD JSON")))}function ms(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{s(r.next(e))}catch(e){i(e)}}function l(e){try{s(r.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}s((r=r.apply(e,t||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;class gs{constructor(){this.listeners={}}on(e,t,n){if(this.listeners[e]||(this.listeners[e]=new Set),this.listeners[e].add(t),null==n?void 0:n.once){const n=()=>{this.un(e,n),this.un(e,t)};return this.on(e,n),n}return()=>this.un(e,t)}un(e,t){var n;null===(n=this.listeners[e])||void 0===n||n.delete(t)}once(e,t){return this.on(e,t,{once:!0})}unAll(){this.listeners={}}emit(e,...t){this.listeners[e]&&this.listeners[e].forEach((e=>e(...t)))}}const ys={decode:function(e,t){return ms(this,void 0,void 0,(function*(){const n=new AudioContext({sampleRate:t});return n.decodeAudioData(e).finally((()=>n.close()))}))},createBuffer:function(e,t){return"number"==typeof e[0]&&(e=[e]),function(e){const t=e[0];if(t.some((e=>e>1||e<-1))){const n=t.length;let r=0;for(let e=0;e<n;e++){const n=Math.abs(t[e]);n>r&&(r=n)}for(const t of e)for(let e=0;e<n;e++)t[e]/=r}}(e),{duration:t,length:e[0].length,sampleRate:e[0].length/t,numberOfChannels:e.length,getChannelData:t=>null==e?void 0:e[t],copyFromChannel:AudioBuffer.prototype.copyFromChannel,copyToChannel:AudioBuffer.prototype.copyToChannel}}};function vs(e,t){const n=t.xmlns?document.createElementNS(t.xmlns,e):document.createElement(e);for(const[e,r]of Object.entries(t))if("children"===e&&r)for(const[e,t]of Object.entries(r))t instanceof Node?n.appendChild(t):"string"==typeof t?n.appendChild(document.createTextNode(t)):n.appendChild(vs(e,t));else"style"===e?Object.assign(n.style,r):"textContent"===e?n.textContent=r:n.setAttribute(e,r.toString());return n}function bs(e,t,n){const r=vs(e,t||{});return null==n||n.appendChild(r),r}var ws=Object.freeze({__proto__:null,createElement:bs,default:bs});const Ss={fetchBlob:function(e,t,n){return ms(this,void 0,void 0,(function*(){const r=yield fetch(e,n);if(r.status>=400)throw new Error(`Failed to fetch ${e}: ${r.status} (${r.statusText})`);return function(e,t){ms(this,void 0,void 0,(function*(){if(!e.body||!e.headers)return;const n=e.body.getReader(),r=Number(e.headers.get("Content-Length"))||0;let o=0;const i=e=>ms(this,void 0,void 0,(function*(){o+=(null==e?void 0:e.length)||0;const n=Math.round(o/r*100);t(n)})),a=()=>ms(this,void 0,void 0,(function*(){let e;try{e=yield n.read()}catch(e){return}e.done||(i(e.value),yield a())}));a()}))}(r.clone(),t),r.blob()}))}};class ks extends gs{constructor(e){super(),this.isExternalMedia=!1,e.media?(this.media=e.media,this.isExternalMedia=!0):this.media=document.createElement("audio"),e.mediaControls&&(this.media.controls=!0),e.autoplay&&(this.media.autoplay=!0),null!=e.playbackRate&&this.onMediaEvent("canplay",(()=>{null!=e.playbackRate&&(this.media.playbackRate=e.playbackRate)}),{once:!0})}onMediaEvent(e,t,n){return this.media.addEventListener(e,t,n),()=>this.media.removeEventListener(e,t,n)}getSrc(){return this.media.currentSrc||this.media.src||""}revokeSrc(){const e=this.getSrc();e.startsWith("blob:")&&URL.revokeObjectURL(e)}canPlayType(e){return""!==this.media.canPlayType(e)}setSrc(e,t){const n=this.getSrc();if(e&&n===e)return;this.revokeSrc();const r=t instanceof Blob&&(this.canPlayType(t.type)||!e)?URL.createObjectURL(t):e;if(n&&this.media.removeAttribute("src"),r||e)try{this.media.src=r}catch(t){this.media.src=e}}destroy(){this.isExternalMedia||(this.media.pause(),this.media.remove(),this.revokeSrc(),this.media.removeAttribute("src"),this.media.load())}setMediaElement(e){this.media=e}play(){return ms(this,void 0,void 0,(function*(){try{return yield this.media.play()}catch(e){if(e instanceof DOMException&&"AbortError"===e.name)return;throw e}}))}pause(){this.media.pause()}isPlaying(){return!this.media.paused&&!this.media.ended}setTime(e){this.media.currentTime=Math.max(0,Math.min(e,this.getDuration()))}getDuration(){return this.media.duration}getCurrentTime(){return this.media.currentTime}getVolume(){return this.media.volume}setVolume(e){this.media.volume=e}getMuted(){return this.media.muted}setMuted(e){this.media.muted=e}getPlaybackRate(){return this.media.playbackRate}isSeeking(){return this.media.seeking}setPlaybackRate(e,t){null!=t&&(this.media.preservesPitch=t),this.media.playbackRate=e}getMediaElement(){return this.media}setSinkId(e){return this.media.setSinkId(e)}}class As extends gs{constructor(e,t){super(),this.timeouts=[],this.isScrollable=!1,this.audioData=null,this.resizeObserver=null,this.lastContainerWidth=0,this.isDragging=!1,this.subscriptions=[],this.unsubscribeOnScroll=[],this.subscriptions=[],this.options=e;const n=this.parentFromOptionsContainer(e.container);this.parent=n;const[r,o]=this.initHtml();n.appendChild(r),this.container=r,this.scrollContainer=o.querySelector(".scroll"),this.wrapper=o.querySelector(".wrapper"),this.canvasWrapper=o.querySelector(".canvases"),this.progressWrapper=o.querySelector(".progress"),this.cursor=o.querySelector(".cursor"),t&&o.appendChild(t),this.initEvents()}parentFromOptionsContainer(e){let t;if("string"==typeof e?t=document.querySelector(e):e instanceof HTMLElement&&(t=e),!t)throw new Error("Container not found");return t}initEvents(){const e=e=>{const t=this.wrapper.getBoundingClientRect(),n=e.clientX-t.left,r=e.clientY-t.top;return[n/t.width,r/t.height]};if(this.wrapper.addEventListener("click",(t=>{const[n,r]=e(t);this.emit("click",n,r)})),this.wrapper.addEventListener("dblclick",(t=>{const[n,r]=e(t);this.emit("dblclick",n,r)})),!0!==this.options.dragToSeek&&"object"!=typeof this.options.dragToSeek||this.initDrag(),this.scrollContainer.addEventListener("scroll",(()=>{const{scrollLeft:e,scrollWidth:t,clientWidth:n}=this.scrollContainer,r=e/t,o=(e+n)/t;this.emit("scroll",r,o,e,e+n)})),"function"==typeof ResizeObserver){const e=this.createDelay(100);this.resizeObserver=new ResizeObserver((()=>{e().then((()=>this.onContainerResize())).catch((()=>{}))})),this.resizeObserver.observe(this.scrollContainer)}}onContainerResize(){const e=this.parent.clientWidth;e===this.lastContainerWidth&&"auto"!==this.options.height||(this.lastContainerWidth=e,this.reRender())}initDrag(){this.subscriptions.push(function(e,t,n,r,o=3,i=0,a=100){if(!e)return()=>{};const l=matchMedia("(pointer: coarse)").matches;let s=()=>{};const u=u=>{if(u.button!==i)return;u.preventDefault(),u.stopPropagation();let c=u.clientX,d=u.clientY,f=!1;const p=Date.now(),h=r=>{if(r.preventDefault(),r.stopPropagation(),l&&Date.now()-p<a)return;const i=r.clientX,s=r.clientY,u=i-c,h=s-d;if(f||Math.abs(u)>o||Math.abs(h)>o){const r=e.getBoundingClientRect(),{left:o,top:a}=r;f||(null==n||n(c-o,d-a),f=!0),t(u,h,i-o,s-a),c=i,d=s}},m=t=>{if(f){const n=t.clientX,o=t.clientY,i=e.getBoundingClientRect(),{left:a,top:l}=i;null==r||r(n-a,o-l)}s()},g=e=>{e.relatedTarget&&e.relatedTarget!==document.documentElement||m(e)},y=e=>{f&&(e.stopPropagation(),e.preventDefault())},v=e=>{f&&e.preventDefault()};document.addEventListener("pointermove",h),document.addEventListener("pointerup",m),document.addEventListener("pointerout",g),document.addEventListener("pointercancel",g),document.addEventListener("touchmove",v,{passive:!1}),document.addEventListener("click",y,{capture:!0}),s=()=>{document.removeEventListener("pointermove",h),document.removeEventListener("pointerup",m),document.removeEventListener("pointerout",g),document.removeEventListener("pointercancel",g),document.removeEventListener("touchmove",v),setTimeout((()=>{document.removeEventListener("click",y,{capture:!0})}),10)}};return e.addEventListener("pointerdown",u),()=>{s(),e.removeEventListener("pointerdown",u)}}(this.wrapper,((e,t,n)=>{this.emit("drag",Math.max(0,Math.min(1,n/this.wrapper.getBoundingClientRect().width)))}),(e=>{this.isDragging=!0,this.emit("dragstart",Math.max(0,Math.min(1,e/this.wrapper.getBoundingClientRect().width)))}),(e=>{this.isDragging=!1,this.emit("dragend",Math.max(0,Math.min(1,e/this.wrapper.getBoundingClientRect().width)))})))}getHeight(e,t){var n;const r=(null===(n=this.audioData)||void 0===n?void 0:n.numberOfChannels)||1;if(null==e)return 128;if(!isNaN(Number(e)))return Number(e);if("auto"===e){const e=this.parent.clientHeight||128;return(null==t?void 0:t.every((e=>!e.overlay)))?e/r:e}return 128}initHtml(){const e=document.createElement("div"),t=e.attachShadow({mode:"open"}),n=this.options.cspNonce&&"string"==typeof this.options.cspNonce?this.options.cspNonce.replace(/"/g,""):"";return t.innerHTML=`\n      <style${n?` nonce="${n}"`:""}>\n        :host {\n          user-select: none;\n          min-width: 1px;\n        }\n        :host audio {\n          display: block;\n          width: 100%;\n        }\n        :host .scroll {\n          overflow-x: auto;\n          overflow-y: hidden;\n          width: 100%;\n          position: relative;\n        }\n        :host .noScrollbar {\n          scrollbar-color: transparent;\n          scrollbar-width: none;\n        }\n        :host .noScrollbar::-webkit-scrollbar {\n          display: none;\n          -webkit-appearance: none;\n        }\n        :host .wrapper {\n          position: relative;\n          overflow: visible;\n          z-index: 2;\n        }\n        :host .canvases {\n          min-height: ${this.getHeight(this.options.height,this.options.splitChannels)}px;\n        }\n        :host .canvases > div {\n          position: relative;\n        }\n        :host canvas {\n          display: block;\n          position: absolute;\n          top: 0;\n          image-rendering: pixelated;\n        }\n        :host .progress {\n          pointer-events: none;\n          position: absolute;\n          z-index: 2;\n          top: 0;\n          left: 0;\n          width: 0;\n          height: 100%;\n          overflow: hidden;\n        }\n        :host .progress > div {\n          position: relative;\n        }\n        :host .cursor {\n          pointer-events: none;\n          position: absolute;\n          z-index: 5;\n          top: 0;\n          left: 0;\n          height: 100%;\n          border-radius: 2px;\n        }\n      </style>\n\n      <div class="scroll" part="scroll">\n        <div class="wrapper" part="wrapper">\n          <div class="canvases" part="canvases"></div>\n          <div class="progress" part="progress"></div>\n          <div class="cursor" part="cursor"></div>\n        </div>\n      </div>\n    `,[e,t]}setOptions(e){if(this.options.container!==e.container){const t=this.parentFromOptionsContainer(e.container);t.appendChild(this.container),this.parent=t}!0!==e.dragToSeek&&"object"!=typeof this.options.dragToSeek||this.initDrag(),this.options=e,this.reRender()}getWrapper(){return this.wrapper}getWidth(){return this.scrollContainer.clientWidth}getScroll(){return this.scrollContainer.scrollLeft}setScroll(e){this.scrollContainer.scrollLeft=e}setScrollPercentage(e){const{scrollWidth:t}=this.scrollContainer,n=t*e;this.setScroll(n)}destroy(){var e,t;this.subscriptions.forEach((e=>e())),this.container.remove(),null===(e=this.resizeObserver)||void 0===e||e.disconnect(),null===(t=this.unsubscribeOnScroll)||void 0===t||t.forEach((e=>e())),this.unsubscribeOnScroll=[]}createDelay(e=10){let t,n;const r=()=>{t&&clearTimeout(t),n&&n()};return this.timeouts.push(r),()=>new Promise(((o,i)=>{r(),n=i,t=setTimeout((()=>{t=void 0,n=void 0,o()}),e)}))}convertColorValues(e){if(!Array.isArray(e))return e||"";if(e.length<2)return e[0]||"";const t=document.createElement("canvas"),n=t.getContext("2d"),r=t.height*(window.devicePixelRatio||1),o=n.createLinearGradient(0,0,0,r),i=1/(e.length-1);return e.forEach(((e,t)=>{const n=t*i;o.addColorStop(n,e)})),o}getPixelRatio(){return Math.max(1,window.devicePixelRatio||1)}renderBarWaveform(e,t,n,r){const o=e[0],i=e[1]||e[0],a=o.length,{width:l,height:s}=n.canvas,u=s/2,c=this.getPixelRatio(),d=t.barWidth?t.barWidth*c:1,f=t.barGap?t.barGap*c:t.barWidth?d/2:0,p=t.barRadius||0,h=l/(d+f)/a,m=p&&"roundRect"in n?"roundRect":"rect";n.beginPath();let g=0,y=0,v=0;for(let e=0;e<=a;e++){const a=Math.round(e*h);if(a>g){const e=Math.round(y*u*r),o=e+Math.round(v*u*r)||1;let i=u-e;"top"===t.barAlign?i=0:"bottom"===t.barAlign&&(i=s-o),n[m](g*(d+f),i,d,o,p),g=a,y=0,v=0}const l=Math.abs(o[e]||0),c=Math.abs(i[e]||0);l>y&&(y=l),c>v&&(v=c)}n.fill(),n.closePath()}renderLineWaveform(e,t,n,r){const o=t=>{const o=e[t]||e[0],i=o.length,{height:a}=n.canvas,l=a/2,s=n.canvas.width/i;n.moveTo(0,l);let u=0,c=0;for(let e=0;e<=i;e++){const i=Math.round(e*s);if(i>u){const e=l+(Math.round(c*l*r)||1)*(0===t?-1:1);n.lineTo(u,e),u=i,c=0}const a=Math.abs(o[e]||0);a>c&&(c=a)}n.lineTo(u,l)};n.beginPath(),o(0),o(1),n.fill(),n.closePath()}renderWaveform(e,t,n){if(n.fillStyle=this.convertColorValues(t.waveColor),t.renderFunction)return void t.renderFunction(e,n);let r=t.barHeight||1;if(t.normalize){const t=Array.from(e[0]).reduce(((e,t)=>Math.max(e,Math.abs(t))),0);r=t?1/t:1}t.barWidth||t.barGap||t.barAlign?this.renderBarWaveform(e,t,n,r):this.renderLineWaveform(e,t,n,r)}renderSingleCanvas(e,t,n,r,o,i,a){const l=this.getPixelRatio(),s=document.createElement("canvas");s.width=Math.round(n*l),s.height=Math.round(r*l),s.style.width=`${n}px`,s.style.height=`${r}px`,s.style.left=`${Math.round(o)}px`,i.appendChild(s);const u=s.getContext("2d");if(this.renderWaveform(e,t,u),s.width>0&&s.height>0){const e=s.cloneNode(),n=e.getContext("2d");n.drawImage(s,0,0),n.globalCompositeOperation="source-in",n.fillStyle=this.convertColorValues(t.progressColor),n.fillRect(0,0,s.width,s.height),a.appendChild(e)}}renderMultiCanvas(e,t,n,r,o,i){const a=this.getPixelRatio(),{clientWidth:l}=this.scrollContainer,s=n/a;let u=Math.min(As.MAX_CANVAS_WIDTH,l,s),c={};if(t.barWidth||t.barGap){const e=t.barWidth||.5,n=e+(t.barGap||e/2);u%n!=0&&(u=Math.floor(u/n)*n)}if(0===u)return;const d=n=>{if(n<0||n>=f)return;if(c[n])return;c[n]=!0;const a=n*u;let l=Math.min(s-a,u);if(t.barWidth||t.barGap){const e=t.barWidth||.5,n=e+(t.barGap||e/2);l=Math.floor(l/n)*n}if(l<=0)return;const d=e.map((e=>{const t=Math.floor(a/s*e.length),n=Math.floor((a+l)/s*e.length);return e.slice(t,n)}));this.renderSingleCanvas(d,t,l,r,a,o,i)},f=Math.ceil(s/u);if(!this.isScrollable){for(let e=0;e<f;e++)d(e);return}const p=this.scrollContainer.scrollLeft/s,h=Math.floor(p*f);if(d(h-1),d(h),d(h+1),f>1){const e=this.on("scroll",(()=>{const{scrollLeft:e}=this.scrollContainer,t=Math.floor(e/s*f);Object.keys(c).length>As.MAX_NODES&&(o.innerHTML="",i.innerHTML="",c={}),d(t-1),d(t),d(t+1)}));this.unsubscribeOnScroll.push(e)}}renderChannel(e,t,n,r){var{overlay:o}=t,i=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(t,["overlay"]);const a=document.createElement("div"),l=this.getHeight(i.height,i.splitChannels);a.style.height=`${l}px`,o&&r>0&&(a.style.marginTop=`-${l}px`),this.canvasWrapper.style.minHeight=`${l}px`,this.canvasWrapper.appendChild(a);const s=a.cloneNode();this.progressWrapper.appendChild(s),this.renderMultiCanvas(e,i,n,l,a,s)}render(e){return ms(this,void 0,void 0,(function*(){var t;this.timeouts.forEach((e=>e())),this.timeouts=[],this.canvasWrapper.innerHTML="",this.progressWrapper.innerHTML="",null!=this.options.width&&(this.scrollContainer.style.width="number"==typeof this.options.width?`${this.options.width}px`:this.options.width);const n=this.getPixelRatio(),r=this.scrollContainer.clientWidth,o=Math.ceil(e.duration*(this.options.minPxPerSec||0));this.isScrollable=o>r;const i=this.options.fillParent&&!this.isScrollable,a=(i?r:o)*n;if(this.wrapper.style.width=i?"100%":`${o}px`,this.scrollContainer.style.overflowX=this.isScrollable?"auto":"hidden",this.scrollContainer.classList.toggle("noScrollbar",!!this.options.hideScrollbar),this.cursor.style.backgroundColor=`${this.options.cursorColor||this.options.progressColor}`,this.cursor.style.width=`${this.options.cursorWidth}px`,this.audioData=e,this.emit("render"),this.options.splitChannels)for(let n=0;n<e.numberOfChannels;n++){const r=Object.assign(Object.assign({},this.options),null===(t=this.options.splitChannels)||void 0===t?void 0:t[n]);this.renderChannel([e.getChannelData(n)],r,a,n)}else{const t=[e.getChannelData(0)];e.numberOfChannels>1&&t.push(e.getChannelData(1)),this.renderChannel(t,this.options,a,0)}Promise.resolve().then((()=>this.emit("rendered")))}))}reRender(){if(this.unsubscribeOnScroll.forEach((e=>e())),this.unsubscribeOnScroll=[],!this.audioData)return;const{scrollWidth:e}=this.scrollContainer,{right:t}=this.progressWrapper.getBoundingClientRect();if(this.render(this.audioData),this.isScrollable&&e!==this.scrollContainer.scrollWidth){const{right:e}=this.progressWrapper.getBoundingClientRect();let n=e-t;n*=2,n=n<0?Math.floor(n):Math.ceil(n),n/=2,this.scrollContainer.scrollLeft+=n}}zoom(e){this.options.minPxPerSec=e,this.reRender()}scrollIntoView(e,t=!1){const{scrollLeft:n,scrollWidth:r,clientWidth:o}=this.scrollContainer,i=e*r,a=n,l=n+o,s=o/2;if(this.isDragging){const e=30;i+e>l?this.scrollContainer.scrollLeft+=e:i-e<a&&(this.scrollContainer.scrollLeft-=e)}else{(i<a||i>l)&&(this.scrollContainer.scrollLeft=i-(this.options.autoCenter?s:0));const e=i-n-s;t&&this.options.autoCenter&&e>0&&(this.scrollContainer.scrollLeft+=Math.min(e,10))}{const e=this.scrollContainer.scrollLeft,t=e/r,n=(e+o)/r;this.emit("scroll",t,n,e,e+o)}}renderProgress(e,t){if(isNaN(e))return;const n=100*e;this.canvasWrapper.style.clipPath=`polygon(${n}% 0%, 100% 0%, 100% 100%, ${n}% 100%)`,this.progressWrapper.style.width=`${n}%`,this.cursor.style.left=`${n}%`,this.cursor.style.transform=this.options.cursorWidth?`translateX(-${e*this.options.cursorWidth}px)`:"",this.isScrollable&&this.options.autoScroll&&this.scrollIntoView(e,t)}exportImage(e,t,n){return ms(this,void 0,void 0,(function*(){const r=this.canvasWrapper.querySelectorAll("canvas");if(!r.length)throw new Error("No waveform data");if("dataURL"===n){const n=Array.from(r).map((n=>n.toDataURL(e,t)));return Promise.resolve(n)}return Promise.all(Array.from(r).map((n=>new Promise(((r,o)=>{n.toBlob((e=>{e?r(e):o(new Error("Could not export image"))}),e,t)})))))}))}}As.MAX_CANVAS_WIDTH=8e3,As.MAX_NODES=10;class Cs extends gs{constructor(){super(...arguments),this.unsubscribe=()=>{}}start(){this.unsubscribe=this.on("tick",(()=>{requestAnimationFrame((()=>{this.emit("tick")}))})),this.emit("tick")}stop(){this.unsubscribe()}destroy(){this.unsubscribe()}}class xs extends gs{constructor(e=new AudioContext){super(),this.bufferNode=null,this.playStartTime=0,this.playedDuration=0,this._muted=!1,this._playbackRate=1,this._duration=void 0,this.buffer=null,this.currentSrc="",this.paused=!0,this.crossOrigin=null,this.seeking=!1,this.autoplay=!1,this.addEventListener=this.on,this.removeEventListener=this.un,this.audioContext=e,this.gainNode=this.audioContext.createGain(),this.gainNode.connect(this.audioContext.destination)}load(){return ms(this,void 0,void 0,(function*(){}))}get src(){return this.currentSrc}set src(e){if(this.currentSrc=e,this._duration=void 0,!e)return this.buffer=null,void this.emit("emptied");fetch(e).then((t=>{if(t.status>=400)throw new Error(`Failed to fetch ${e}: ${t.status} (${t.statusText})`);return t.arrayBuffer()})).then((t=>this.currentSrc!==e?null:this.audioContext.decodeAudioData(t))).then((t=>{this.currentSrc===e&&(this.buffer=t,this.emit("loadedmetadata"),this.emit("canplay"),this.autoplay&&this.play())}))}_play(){var e;if(!this.paused)return;this.paused=!1,null===(e=this.bufferNode)||void 0===e||e.disconnect(),this.bufferNode=this.audioContext.createBufferSource(),this.buffer&&(this.bufferNode.buffer=this.buffer),this.bufferNode.playbackRate.value=this._playbackRate,this.bufferNode.connect(this.gainNode);let t=this.playedDuration*this._playbackRate;(t>=this.duration||t<0)&&(t=0,this.playedDuration=0),this.bufferNode.start(this.audioContext.currentTime,t),this.playStartTime=this.audioContext.currentTime,this.bufferNode.onended=()=>{this.currentTime>=this.duration&&(this.pause(),this.emit("ended"))}}_pause(){var e;this.paused=!0,null===(e=this.bufferNode)||void 0===e||e.stop(),this.playedDuration+=this.audioContext.currentTime-this.playStartTime}play(){return ms(this,void 0,void 0,(function*(){this.paused&&(this._play(),this.emit("play"))}))}pause(){this.paused||(this._pause(),this.emit("pause"))}stopAt(e){const t=e-this.currentTime,n=this.bufferNode;null==n||n.stop(this.audioContext.currentTime+t),null==n||n.addEventListener("ended",(()=>{n===this.bufferNode&&(this.bufferNode=null,this.pause())}),{once:!0})}setSinkId(e){return ms(this,void 0,void 0,(function*(){return this.audioContext.setSinkId(e)}))}get playbackRate(){return this._playbackRate}set playbackRate(e){this._playbackRate=e,this.bufferNode&&(this.bufferNode.playbackRate.value=e)}get currentTime(){return(this.paused?this.playedDuration:this.playedDuration+(this.audioContext.currentTime-this.playStartTime))*this._playbackRate}set currentTime(e){const t=!this.paused;t&&this._pause(),this.playedDuration=e/this._playbackRate,t&&this._play(),this.emit("seeking"),this.emit("timeupdate")}get duration(){var e,t;return null!==(e=this._duration)&&void 0!==e?e:(null===(t=this.buffer)||void 0===t?void 0:t.duration)||0}set duration(e){this._duration=e}get volume(){return this.gainNode.gain.value}set volume(e){this.gainNode.gain.value=e,this.emit("volumechange")}get muted(){return this._muted}set muted(e){this._muted!==e&&(this._muted=e,this._muted?this.gainNode.disconnect():this.gainNode.connect(this.audioContext.destination))}canPlayType(e){return/^(audio|video)\//.test(e)}getGainNode(){return this.gainNode}getChannelData(){const e=[];if(!this.buffer)return e;const t=this.buffer.numberOfChannels;for(let n=0;n<t;n++)e.push(this.buffer.getChannelData(n));return e}removeAttribute(e){switch(e){case"src":this.src="";break;case"playbackRate":this.playbackRate=0;break;case"currentTime":this.currentTime=0;break;case"duration":this.duration=0;break;case"volume":this.volume=0;break;case"muted":this.muted=!1}}}const Es={waveColor:"#999",progressColor:"#555",cursorWidth:1,minPxPerSec:0,fillParent:!0,interact:!0,dragToSeek:!1,autoScroll:!0,autoCenter:!0,sampleRate:8e3};class Ps extends ks{static create(e){return new Ps(e)}constructor(e){const t=e.media||("WebAudio"===e.backend?new xs:void 0);super({media:t,mediaControls:e.mediaControls,autoplay:e.autoplay,playbackRate:e.audioRate}),this.plugins=[],this.decodedData=null,this.stopAtPosition=null,this.subscriptions=[],this.mediaSubscriptions=[],this.abortController=null,this.options=Object.assign({},Es,e),this.timer=new Cs;const n=t?void 0:this.getMediaElement();this.renderer=new As(this.options,n),this.initPlayerEvents(),this.initRendererEvents(),this.initTimerEvents(),this.initPlugins();const r=this.options.url||this.getSrc()||"";Promise.resolve().then((()=>{this.emit("init");const{peaks:e,duration:t}=this.options;(r||e&&t)&&this.load(r,e,t).catch((()=>null))}))}updateProgress(e=this.getCurrentTime()){return this.renderer.renderProgress(e/this.getDuration(),this.isPlaying()),e}initTimerEvents(){this.subscriptions.push(this.timer.on("tick",(()=>{if(!this.isSeeking()){const e=this.updateProgress();this.emit("timeupdate",e),this.emit("audioprocess",e),null!=this.stopAtPosition&&this.isPlaying()&&e>=this.stopAtPosition&&this.pause()}})))}initPlayerEvents(){this.isPlaying()&&(this.emit("play"),this.timer.start()),this.mediaSubscriptions.push(this.onMediaEvent("timeupdate",(()=>{const e=this.updateProgress();this.emit("timeupdate",e)})),this.onMediaEvent("play",(()=>{this.emit("play"),this.timer.start()})),this.onMediaEvent("pause",(()=>{this.emit("pause"),this.timer.stop(),this.stopAtPosition=null})),this.onMediaEvent("emptied",(()=>{this.timer.stop(),this.stopAtPosition=null})),this.onMediaEvent("ended",(()=>{this.emit("timeupdate",this.getDuration()),this.emit("finish"),this.stopAtPosition=null})),this.onMediaEvent("seeking",(()=>{this.emit("seeking",this.getCurrentTime())})),this.onMediaEvent("error",(()=>{var e;this.emit("error",null!==(e=this.getMediaElement().error)&&void 0!==e?e:new Error("Media error")),this.stopAtPosition=null})))}initRendererEvents(){this.subscriptions.push(this.renderer.on("click",((e,t)=>{this.options.interact&&(this.seekTo(e),this.emit("interaction",e*this.getDuration()),this.emit("click",e,t))})),this.renderer.on("dblclick",((e,t)=>{this.emit("dblclick",e,t)})),this.renderer.on("scroll",((e,t,n,r)=>{const o=this.getDuration();this.emit("scroll",e*o,t*o,n,r)})),this.renderer.on("render",(()=>{this.emit("redraw")})),this.renderer.on("rendered",(()=>{this.emit("redrawcomplete")})),this.renderer.on("dragstart",(e=>{this.emit("dragstart",e)})),this.renderer.on("dragend",(e=>{this.emit("dragend",e)})));{let e;this.subscriptions.push(this.renderer.on("drag",(t=>{if(!this.options.interact)return;let n;this.renderer.renderProgress(t),clearTimeout(e),this.isPlaying()?n=0:!0===this.options.dragToSeek?n=200:"object"==typeof this.options.dragToSeek&&void 0!==this.options.dragToSeek&&(n=this.options.dragToSeek.debounceTime),e=setTimeout((()=>{this.seekTo(t)}),n),this.emit("interaction",t*this.getDuration()),this.emit("drag",t)})))}}initPlugins(){var e;(null===(e=this.options.plugins)||void 0===e?void 0:e.length)&&this.options.plugins.forEach((e=>{this.registerPlugin(e)}))}unsubscribePlayerEvents(){this.mediaSubscriptions.forEach((e=>e())),this.mediaSubscriptions=[]}setOptions(e){this.options=Object.assign({},this.options,e),e.duration&&!e.peaks&&(this.decodedData=ys.createBuffer(this.exportPeaks(),e.duration)),e.peaks&&e.duration&&(this.decodedData=ys.createBuffer(e.peaks,e.duration)),this.renderer.setOptions(this.options),e.audioRate&&this.setPlaybackRate(e.audioRate),null!=e.mediaControls&&(this.getMediaElement().controls=e.mediaControls)}registerPlugin(e){if(this.plugins.includes(e))return e;e._init(this),this.plugins.push(e);const t=e.once("destroy",(()=>{this.plugins=this.plugins.filter((t=>t!==e)),this.subscriptions=this.subscriptions.filter((e=>e!==t))}));return this.subscriptions.push(t),e}unregisterPlugin(e){this.plugins=this.plugins.filter((t=>t!==e)),e.destroy()}getWrapper(){return this.renderer.getWrapper()}getWidth(){return this.renderer.getWidth()}getScroll(){return this.renderer.getScroll()}setScroll(e){return this.renderer.setScroll(e)}setScrollTime(e){const t=e/this.getDuration();this.renderer.setScrollPercentage(t)}getActivePlugins(){return this.plugins}loadAudio(e,t,n,r){return ms(this,void 0,void 0,(function*(){var o;if(this.emit("load",e),!this.options.media&&this.isPlaying()&&this.pause(),this.decodedData=null,this.stopAtPosition=null,!t&&!n){const n=this.options.fetchParams||{};window.AbortController&&!n.signal&&(this.abortController=new AbortController,n.signal=null===(o=this.abortController)||void 0===o?void 0:o.signal);const r=e=>this.emit("loading",e);t=yield Ss.fetchBlob(e,r,n);const i=this.options.blobMimeType;i&&(t=new Blob([t],{type:i}))}this.setSrc(e,t);const i=yield new Promise((e=>{const t=r||this.getDuration();t?e(t):this.mediaSubscriptions.push(this.onMediaEvent("loadedmetadata",(()=>e(this.getDuration())),{once:!0}))}));if(!e&&!t){const e=this.getMediaElement();e instanceof xs&&(e.duration=i)}if(n)this.decodedData=ys.createBuffer(n,i||0);else if(t){const e=yield t.arrayBuffer();this.decodedData=yield ys.decode(e,this.options.sampleRate)}this.decodedData&&(this.emit("decode",this.getDuration()),this.renderer.render(this.decodedData)),this.emit("ready",this.getDuration())}))}load(e,t,n){return ms(this,void 0,void 0,(function*(){try{return yield this.loadAudio(e,void 0,t,n)}catch(e){throw this.emit("error",e),e}}))}loadBlob(e,t,n){return ms(this,void 0,void 0,(function*(){try{return yield this.loadAudio("",e,t,n)}catch(e){throw this.emit("error",e),e}}))}zoom(e){if(!this.decodedData)throw new Error("No audio loaded");this.renderer.zoom(e),this.emit("zoom",e)}getDecodedData(){return this.decodedData}exportPeaks({channels:e=2,maxLength:t=8e3,precision:n=1e4}={}){if(!this.decodedData)throw new Error("The audio has not been decoded yet");const r=Math.min(e,this.decodedData.numberOfChannels),o=[];for(let e=0;e<r;e++){const r=this.decodedData.getChannelData(e),i=[],a=r.length/t;for(let e=0;e<t;e++){const t=r.slice(Math.floor(e*a),Math.ceil((e+1)*a));let o=0;for(let e=0;e<t.length;e++){const n=t[e];Math.abs(n)>Math.abs(o)&&(o=n)}i.push(Math.round(o*n)/n)}o.push(i)}return o}getDuration(){let e=super.getDuration()||0;return 0!==e&&e!==1/0||!this.decodedData||(e=this.decodedData.duration),e}toggleInteraction(e){this.options.interact=e}setTime(e){this.stopAtPosition=null,super.setTime(e),this.updateProgress(e),this.emit("timeupdate",e)}seekTo(e){const t=this.getDuration()*e;this.setTime(t)}play(e,t){const n=Object.create(null,{play:{get:()=>super.play}});return ms(this,void 0,void 0,(function*(){null!=e&&this.setTime(e);const r=yield n.play.call(this);return null!=t&&(this.media instanceof xs?this.media.stopAt(t):this.stopAtPosition=t),r}))}playPause(){return ms(this,void 0,void 0,(function*(){return this.isPlaying()?this.pause():this.play()}))}stop(){this.pause(),this.setTime(0)}skip(e){this.setTime(this.getCurrentTime()+e)}empty(){this.load("",[[0]],.001)}setMediaElement(e){this.unsubscribePlayerEvents(),super.setMediaElement(e),this.initPlayerEvents()}exportImage(){return ms(this,arguments,void 0,(function*(e="image/png",t=1,n="dataURL"){return this.renderer.exportImage(e,t,n)}))}destroy(){var e;this.emit("destroy"),null===(e=this.abortController)||void 0===e||e.abort(),this.plugins.forEach((e=>e.destroy())),this.subscriptions.forEach((e=>e())),this.unsubscribePlayerEvents(),this.timer.destroy(),this.renderer.destroy(),super.destroy()}}function Os(e,t){const[n,o]=(0,r.useState)(null),i=(0,r.useMemo)((()=>Object.entries(t).flat()),[t]);return(0,r.useEffect)((()=>{if(!(null==e?void 0:e.current))return;const n=Ps.create(Object.assign(Object.assign({},t),{container:e.current}));return o(n),()=>{n.destroy()}}),[e,...i]),n}Ps.BasePlugin=class extends gs{constructor(e){super(),this.subscriptions=[],this.isDestroyed=!1,this.options=e}onInit(){}_init(e){this.isDestroyed&&(this.subscriptions=[],this.isDestroyed=!1),this.wavesurfer=e,this.onInit()}destroy(){this.emit("destroy"),this.subscriptions.forEach((e=>e())),this.subscriptions=[],this.isDestroyed=!0,this.wavesurfer=void 0}},Ps.dom=ws;const Ts=/^on([A-Z])/,Ls=e=>Ts.test(e);function _s(e){return _s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_s(e)}function Ms(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Rs(r.key),r)}}function Rs(e){var t=function(e){if("object"!=_s(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=_s(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==_s(t)?t:t+""}(0,r.memo)((e=>{const t=(0,r.useRef)(null),[n,o]=function(e){return(0,r.useMemo)((()=>{const t=Object.assign({},e),n=Object.assign({},e);for(const e in t)Ls(e)?delete t[e]:delete n[e];return[t,n]}),[e])}(e);return function(e,t){const n=(0,r.useMemo)((()=>Object.entries(t).flat()),[t]);(0,r.useEffect)((()=>{if(!e)return;const n=Object.entries(t);if(!n.length)return;const r=n.map((([t,n])=>{const r=t.replace(Ts,((e,t)=>t.toLowerCase()));return e.on(r,((...t)=>n(e,...t)))}));return()=>{r.forEach((e=>e()))}}),[e,...n])}(Os(t,n),o),(0,Xt.jsx)("div",{ref:t})}));var Ns=function(){return function(e,t){return t&&Ms(e.prototype,t),Object.defineProperty(e,"prototype",{writable:!1}),e}((function e(t,n,r,o,i,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.index=t.index,this.arrayIndex=n,this.name=t.name,this.color=t.color,this.shy=t.shy,this.visible=t.visible,this.audioActive=t.audioActive,this.inPoint=t.inPoint,this.outPoint=t.outPoint,this.duration=t.duration,this.compDuration=r.duration,this.totalBeats=o,this.gridStart=Math.floor(this.inPoint/this.compDuration*this.totalBeats)+1,this.gridStart<1&&(this.gridStart=1),this.closestGridStart=Math.round(this.inPoint/this.compDuration*this.totalBeats)+1,this.closestGridStart<1&&(this.closestGridStart=1),this.gridEnd=Math.ceil(this.outPoint/this.compDuration*this.totalBeats)+1,this.gridEnd>this.totalBeats&&(this.gridEnd=this.totalBeats),this.closestGridEnd=Math.round(this.outPoint/this.compDuration*this.totalBeats)+1,this.closestGridEnd>this.totalBeats&&(this.closestGridEnd=this.totalBeats),this.gridDuration=this.gridEnd-this.gridStart,this.scaling=this.duration/(this.gridDuration*(this.compDuration/this.totalBeats)),this.baseGridX=(this.gridStart-1)*i,this.trueX=this.inPoint/this.compDuration*a,this.translateX=this.trueX-this.baseGridX}),[{key:"rescaleLayer",value:function(e,t){this.gridDuration=this.gridEnd-this.gridStart,this.scaling=this.duration/(this.gridDuration*(this.compDuration/this.totalBeats)),this.baseGridX=(this.gridStart-1)*e,this.trueX=this.inPoint/this.compDuration*t,this.translateX=this.trueX-this.baseGridX}},{key:"moveLayer",value:function(e,t,n,r){var o=this.gridEnd-this.gridStart,i=this.closestGridEnd-this.closestGridStart;this.gridStart+=e,this.closestGridStart+=e,this.closestGridStart<1&&(this.closestGridStart=1),this.gridStart<1||t?(this.gridStart=1,this.gridStart=this.closestGridStart,this.gridEnd=this.gridStart+o,this.closestGridEnd=this.closestGridStart+i):(this.gridEnd+=e,this.gridEnd>this.totalBeats&&(this.gridEnd=this.totalBeats),this.closestGridEnd+=e,this.closestGridEnd>this.totalBeats&&(this.closestGridEnd=this.totalBeats)),this.inPoint=(this.gridStart-1)*this.compDuration/this.totalBeats,this.outPoint=(this.gridEnd-1)*this.compDuration/this.totalBeats,this.inPoint<0&&(this.inPoint=0),this.outPoint>this.compDuration&&(this.outPoint=this.compDuration),this.duration=this.outPoint-this.inPoint,this.rescaleLayer(n,r),console.log("moved new in:",this.inPoint,"new gridStart:",this.gridStart)}},{key:"scaleLayer",value:function(e,t,n,r,o){"in"===e&&(this.gridStart+=t,this.closestGridStart+=t,this.closestGridStart<1&&(this.closestGridStart=1),(this.gridStart<1||n)&&(this.gridStart=1,this.gridStart=this.closestGridStart)),"out"===e&&(this.gridEnd+=t,this.closestGridEnd+=t,this.closestGridEnd>this.totalBeats&&(this.closestGridEnd=1),(this.gridEnd>this.totalBeats||n)&&(this.gridEnd=1,this.gridEnd=this.closestGridEnd)),this.inPoint=(this.gridStart-1)*this.compDuration/this.totalBeats,this.outPoint=(this.gridEnd-1)*this.compDuration/this.totalBeats,this.inPoint<0&&(this.inPoint=0),this.outPoint>this.compDuration&&(this.outPoint=this.compDuration),this.duration=this.outPoint-this.inPoint,this.rescaleLayer(r,o),console.log("moved",e,"by",t,"beats")}}])}();function Ds(e){return Ds="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ds(e)}function zs(){zs=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",l=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var i=t&&t.prototype instanceof y?t:y,a=Object.create(i.prototype),l=new L(r||[]);return o(a,"_invoke",{value:E(e,n,l)}),a}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=c;var f="suspendedStart",p="suspendedYield",h="executing",m="completed",g={};function y(){}function v(){}function b(){}var w={};u(w,a,(function(){return this}));var S=Object.getPrototypeOf,k=S&&S(S(_([])));k&&k!==n&&r.call(k,a)&&(w=k);var A=b.prototype=y.prototype=Object.create(w);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function n(o,i,a,l){var s=d(e[o],e,i);if("throw"!==s.type){var u=s.arg,c=u.value;return c&&"object"==Ds(c)&&r.call(c,"__await")?t.resolve(c.__await).then((function(e){n("next",e,a,l)}),(function(e){n("throw",e,a,l)})):t.resolve(c).then((function(e){u.value=e,a(u)}),(function(e){return n("throw",e,a,l)}))}l(s.arg)}var i;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return i=i?i.then(o,o):o()}})}function E(t,n,r){var o=f;return function(i,a){if(o===h)throw Error("Generator is already running");if(o===m){if("throw"===i)throw a;return{value:e,done:!0}}for(r.method=i,r.arg=a;;){var l=r.delegate;if(l){var s=P(l,r);if(s){if(s===g)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=d(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===g)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function P(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,P(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var i=d(o,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,g;var a=i.arg;return a?a.done?(n[t.resultName]=a.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[a];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return i.next=i}}throw new TypeError(Ds(t)+" is not iterable")}return v.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:v,configurable:!0}),v.displayName=u(b,s,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,s,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(x.prototype),u(x.prototype,l,(function(){return this})),t.AsyncIterator=x,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new x(c(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},C(A),u(A,s,"Generator"),u(A,a,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(T),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],l=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var s=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(s&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,g):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;T(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function Is(e,t,n,r,o,i,a){try{var l=e[i](a),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function js(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Is(i,r,o,a,l,"next",e)}function l(e){Is(i,r,o,a,l,"throw",e)}a(void 0)}))}}function $s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Bs(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?$s(Object(n),!0).forEach((function(t){Fs(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):$s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Fs(e,t,n){return(t=function(e){var t=function(e){if("object"!=Ds(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Ds(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Ds(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ws(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],s=!0,u=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Hs(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Hs(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Hs(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function Us(e){var t=e.compData,n=e.bpm,o=e.beatsPerBar,i=e.zoomLevel,a=e.showInactive,l=e.showHidden,s=e.updateView,u=e.waitingForAERef,c=e.setLoading,d=e.setLoadingText,f=e.setSelectedLayer,p=e.modeSnapRef,h=e.modeRef,m=e.selectedAudioURL,g=(0,r.useRef)(null),y=function(e){var{container:t}=e;const n=Os(t,function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(e,["container"])),o=function(e){const[t,n]=(0,r.useState)(!1),[o,i]=(0,r.useState)(!1),[a,l]=(0,r.useState)(!1),[s,u]=(0,r.useState)(0);return(0,r.useEffect)((()=>{if(!e)return;const t=[e.on("load",(()=>{n(!1),i(!1),u(0)})),e.on("ready",(()=>{n(!0),i(!1),l(!1),u(0)})),e.on("finish",(()=>{l(!0)})),e.on("play",(()=>{i(!0)})),e.on("pause",(()=>{i(!1)})),e.on("timeupdate",(()=>{u(e.getCurrentTime())})),e.on("destroy",(()=>{n(!1),i(!1)}))];return()=>{t.forEach((e=>e()))}}),[e]),(0,r.useMemo)((()=>({isReady:t,isPlaying:o,hasFinished:a,currentTime:s})),[o,a,s,t])}(n);return(0,r.useMemo)((()=>Object.assign(Object.assign({},o),{wavesurfer:n})),[o,n])}({container:g,url:m,waveColor:"#4096f3",height:"auto",dragToSeek:"false",barWidth:"3",barHeight:"1"}),v=(y.wavesurfer,y.isReady,y.isPlaying,y.currentTime,(0,r.useMemo)((function(){return n/60*(o/4)}),[n,o])),b=n/60*1,w=(0,r.useMemo)((function(){return Math.floor(t.duration*v)}),[n,t.duration,o,v]),S=(0,r.useMemo)((function(){return Math.floor(t.duration*b)}),[n,t]),k=(0,r.useMemo)((function(){return Math.ceil(w/o)*o}),[w,o]),A=Math.ceil(S/4),C=(0,r.useRef)(null),x=Ws((0,r.useState)(0),2),E=x[0],P=x[1],O=Ws((0,r.useState)(0),2),T=O[0],L=O[1];(0,r.useEffect)((function(){var e=function(){C.current&&P(C.current.getBoundingClientRect().width)};return e(),window.addEventListener("resize",e),function(){return window.removeEventListener("resize",e)}}),[t,i]),(0,r.useEffect)((function(){E>0&&w>0&&L(E/w)}),[E,w]);var _=Ws((0,r.useState)([]),2),M=_[0],R=_[1];(0,r.useEffect)((function(){var e=t.layers.map((function(e,n){return new Ns(e,n,t,w,T,E)}));R(e)}),[t,w,T,E]);var N=Ws((0,r.useState)(null),2),D=N[0],z=N[1],I=(0,r.useRef)(null),j=(0,r.useRef)(0),$=(0,r.useRef)(0),B=(0,r.useRef)(!1),F=(0,r.useRef)(null),W=(0,r.useRef)(""),H=(0,r.useRef)(0);(0,r.useEffect)((function(){var e=function(e){if(B.current&&T>0&&($.current=e.pageX,H.current=-Math.round((j.current-$.current)/T),I.current&&0!==H.current)){var n=new Ns(Bs({},F.current),F.current.arrayIndex,t,w,T,E);"move"===h.current?n.moveLayer(H.current,p.current,T,E):"scale"===h.current&&n.scaleLayer(W.current,H.current,p.current,T,E),I.current=n,z(n)}};return window.addEventListener("mousemove",e),function(){return window.removeEventListener("mousemove",e)}}),[T]);var U=function(e,n){f(e),W.current=n,j.current=$.current,B.current=!0,H.current=0,F.current=M.find((function(t){return t.index===e.index}));var r=new Ns(Bs({},F.current),F.current.arrayIndex,t,w,T,E);I.current=r,z(r)},V=function(){if(B.current&&0!==H.current){B.current=!1,I.current=null,z(null);var e=H.current;H.current=0;var t=W.current;W.current="",R((function(n){return n.map((function(n){if(n===F.current&&"move"===h.current){var r=n;return r.moveLayer(e,p.current,T,E),u.current||(u.current=!0,d("Moving Layer by ".concat(e," Beats")),c(!0),G(r.index,r.inPoint).then((function(){s(),u.current=!1,c(!1)})).catch((function(e){return console.error("Error moving AE layer:",e)}))),r}if(n===F.current&&"scale"===h.current){var o=n;return o.scaleLayer(t,e,p.current,T,E),u.current||(u.current=!0,d("Scaling Layer by ".concat(e," Beats")),c(!0),q(o.index,o.inPoint,o.outPoint).then((function(){s(),u.current=!1,c(!1)})).catch((function(e){return console.error("Error moving AE layer:",e)}))),o}return n}))}))}},G=function(){var e=js(zs().mark((function e(t,n){return zs().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e,r){window.CSInterface?(new window.CSInterface).evalScript("moveLayer(".concat(t,", ").concat(n,")"),(function(t){"success"===t?e():r(t)})):r("CSInterface is not available. Make sure CSInterface.js is loaded.")})));case 1:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),q=function(){var e=js(zs().mark((function e(t,n,r){return zs().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e,o){window.CSInterface?(new window.CSInterface).evalScript("scaleLayer(".concat(t,", ").concat(n,", ").concat(r,")"),(function(t){"success"===t?e():o(t)})):o("CSInterface is not available. Make sure CSInterface.js is loaded.")})));case 1:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}();return(0,r.useEffect)((function(){var e=function(){V()};return document.addEventListener("mouseup",e),function(){return document.removeEventListener("mouseup",e)}}),[]),r.createElement("div",{id:"timeline",onMouseMove:function(e){return $.current=e.pageX}},r.createElement("div",{className:"grid-layers",ref:C,style:{gridTemplate:"auto / repeat(".concat(k,", minmax(0, 1fr))"),width:"".concat(100*i,"%")}},M.filter((function(e){var t=a||e.visible||e.audioActive,n=l||!e.shy;return t&&n})).map((function(e,t){return r.createElement("div",{key:t,className:"timeline-layer",style:{gridColumnStart:e.closestGridStart,gridColumnEnd:e.closestGridEnd,gridRow:e.index,backgroundColor:"rgb(".concat(e.color[0],", ").concat(e.color[1],", ").concat(e.color[2],")"),transform:"scaleX(".concat(e.scaling,") translateX(").concat(e.translateX,"px)"),transformOrigin:"left"}},r.createElement("div",{className:"timeline-layer-button left",onMouseDown:function(){return U(e,"in")},onMouseUp:function(){return V()}}," "),r.createElement("div",{className:"timeline-layer-button right",onMouseDown:function(){return U(e,"out")},onMouseUp:function(){return V()}}," "),r.createElement("span",{style:{display:"inline-block",transform:"scaleX(".concat(1/e.scaling,")")}},e.name," Visible? ",e.visible.toString()," Shy? ",e.shy.toString(),"  audioActive? ",e.audioActive.toString()))})),D&&r.createElement("div",{className:"timeline-layer ghost",style:{gridColumnStart:D.closestGridStart,gridColumnEnd:D.closestGridEnd,gridRow:D.index,outlineColor:"rgb(".concat(D.color[0],", ").concat(D.color[1],", ").concat(D.color[2],")"),transform:"scaleX(".concat(D.scaling,") translateX(").concat(D.translateX,"px)"),transformOrigin:"left"}})),r.createElement("div",{className:"grid-timeline",style:{gridTemplate:"100% / repeat(".concat(A,", minmax(0, 1fr))"),width:"".concat(100*i,"%")}},Array.from({length:A}).map((function(e,t){return r.createElement("div",{key:t,className:"grid-bar",style:{gridTemplate:"100% / repeat(".concat(o,", minmax(0, 1fr))")}},Array.from({length:o}).map((function(e,t){return r.createElement("div",{key:t,className:"grid-beat"})})))})),m&&r.createElement("div",{className:"grid-audiowaveform",ref:g})))}function Vs(e){var t=e.text,n=void 0===t?"":t;return r.createElement("div",{id:"loader"},r.createElement("h1",null,"Loading ..."),r.createElement("p",null,n))}function Gs(e){return Gs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Gs(e)}function qs(){qs=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",l=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var i=t&&t.prototype instanceof y?t:y,a=Object.create(i.prototype),l=new L(r||[]);return o(a,"_invoke",{value:E(e,n,l)}),a}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=c;var f="suspendedStart",p="suspendedYield",h="executing",m="completed",g={};function y(){}function v(){}function b(){}var w={};u(w,a,(function(){return this}));var S=Object.getPrototypeOf,k=S&&S(S(_([])));k&&k!==n&&r.call(k,a)&&(w=k);var A=b.prototype=y.prototype=Object.create(w);function C(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function n(o,i,a,l){var s=d(e[o],e,i);if("throw"!==s.type){var u=s.arg,c=u.value;return c&&"object"==Gs(c)&&r.call(c,"__await")?t.resolve(c.__await).then((function(e){n("next",e,a,l)}),(function(e){n("throw",e,a,l)})):t.resolve(c).then((function(e){u.value=e,a(u)}),(function(e){return n("throw",e,a,l)}))}l(s.arg)}var i;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return i=i?i.then(o,o):o()}})}function E(t,n,r){var o=f;return function(i,a){if(o===h)throw Error("Generator is already running");if(o===m){if("throw"===i)throw a;return{value:e,done:!0}}for(r.method=i,r.arg=a;;){var l=r.delegate;if(l){var s=P(l,r);if(s){if(s===g)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===f)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var u=d(t,n,r);if("normal"===u.type){if(o=r.done?m:p,u.arg===g)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(o=m,r.method="throw",r.arg=u.arg)}}}function P(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,P(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),g;var i=d(o,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,g;var a=i.arg;return a?a.done?(n[t.resultName]=a.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,g):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function O(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(O,this),this.reset(!0)}function _(t){if(t||""===t){var n=t[a];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return i.next=i}}throw new TypeError(Gs(t)+" is not iterable")}return v.prototype=b,o(A,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:v,configurable:!0}),v.displayName=u(b,s,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,u(e,s,"GeneratorFunction")),e.prototype=Object.create(A),e},t.awrap=function(e){return{__await:e}},C(x.prototype),u(x.prototype,l,(function(){return this})),t.AsyncIterator=x,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new x(c(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},C(A),u(A,s,"Generator"),u(A,a,(function(){return this})),u(A,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=_,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(T),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],l=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var s=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(s&&u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,g):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;T(n)}return o}}throw Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:_(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),g}},t}function Ks(e,t,n,r,o,i,a){try{var l=e[i](a),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}function Qs(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Ks(i,r,o,a,l,"next",e)}function l(e){Ks(i,r,o,a,l,"throw",e)}a(void 0)}))}}function Xs(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],s=!0,u=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ys(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ys(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ys(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}const Js=function(){var e=Gt({components:{MuiTooltip:{styleOverrides:{tooltip:{backgroundColor:"var(--light-grey)",border:"solid 1px var(--light)",fontSize:"0.75rem",color:"var(--lightest)"}}},MuiDialog:{styleOverrides:{paper:{backgroundColor:"var(--light-grey)",border:"solid 1px var(--light)",fontSize:"1rem",color:"var(--lightest)",padding:"0.25rem"}}}}}),t=Xs((0,r.useState)(!1),2),n=t[0],o=t[1],i=Xs((0,r.useState)(""),2),a=i[0],l=i[1],s=Xs((0,r.useState)(!1),2),u=s[0],c=s[1],d=(0,r.useRef)("Alert!"),f=(0,r.useRef)("Text of the alert."),p=Xs((0,r.useState)(120),2),h=p[0],m=p[1],g=Xs((0,r.useState)(4),2),y=g[0],v=g[1],b=Xs((0,r.useState)(1),2),w=b[0],S=b[1],k=Xs((0,r.useState)(!1),2),A=k[0],C=k[1],x=Xs((0,r.useState)(!1),2),E=x[0],P=x[1],O=Xs((0,r.useState)(null),2),T=O[0],L=O[1],_=((0,r.useRef)(T),Xs((0,r.useState)(!1),2)),M=_[0],R=(_[1],(0,r.useRef)(M)),N=Xs((0,r.useState)(!0),2),D=N[0],z=N[1],I=(0,r.useRef)(D);(0,r.useEffect)((function(){I.current=D}),[D]);var j=Xs((0,r.useState)("move"),2),$=j[0],B=j[1],F=(0,r.useRef)($);(0,r.useEffect)((function(){F.current=$}),[$]);var W=Xs((0,r.useState)(4),2),H=W[0],U=W[1],V=Xs((0,r.useState)("beats"),2),G=V[0],q=V[1],K=Xs((0,r.useState)({name:"Placeholder Comp",duration:0,frameRate:0,width:0,height:0,layers:[]}),2),Q=K[0],X=K[1],Y=Xs((0,r.useState)([]),2),J=Y[0],Z=Y[1],ee=Xs((0,r.useState)(null),2),te=ee[0],ne=ee[1],re=function(){var e=Qs(qs().mark((function e(){return qs().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e,t){window.CSInterface?(new window.CSInterface).evalScript("getCompData()",(function(n){try{var r=JSON.parse(n);console.log(r),r.error?t(r.error):e(r)}catch(e){t("Invalid JSON response from ExtendScript.")}})):t("CSInterface is not available. Make sure CSInterface.js is loaded.")})));case 1:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),oe=function(){R.current||(R.current=!0,l("Fetching Composition Data"),o(!0),re().then((function(e){console.log("Updating View with Comp Data",e),X(e),R.current=!1,o(!1)})).catch((function(e,t){console.error("Error fetching comp data:",e),console.log("Data returned:",t),R.current=!1})),R.current=!0,l("Fetching Audio Layers"),o(!0),new Promise((function(e,t){window.CSInterface?(new window.CSInterface).evalScript("getAudioLayers()",(function(n){try{var r=JSON.parse(n);r.error?t(r.error):e(r.layers)}catch(e){t("Invalid JSON from ExtendScript")}})):t("CSInterface is not available. Make sure CSInterface.js is loaded.")})).then((function(e){console.log("Updating Audio Layers",e),Z(e),R.current=!1,o(!1)})).catch((function(e,t){console.error("Error fetching audio layers:",e),console.log("Data returned:",t),R.current=!1})))};window.addEventListener("focus",oe);var ie=function(){var e=Qs(qs().mark((function e(t,n,r,o){return qs().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return console.log(t,n,r,o),e.abrupt("return",new Promise((function(e,i){window.CSInterface?(new window.CSInterface).evalScript("duplicateLayer(".concat(t,", ").concat(n,", ").concat(r,', "').concat(o,'")'),(function(t){"success"===t?e():i(t)})):i("CSInterface is not available. Make sure CSInterface.js is loaded.")})));case 2:case"end":return e.stop()}}),e)})));return function(t,n,r,o){return e.apply(this,arguments)}}(),ae=function(){var e=Qs(qs().mark((function e(){var t,n,r;return qs().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,null!==T){e.next=3;break}throw"No Layer selected";case 3:t=T.index,n=H,r=G,R.current||(R.current=!0,l("Duplicating Layer for ".concat(n," ").concat(r)),o(!0),ie(t,h,n,r).then((function(){oe(),R.current=!1,o(!1)})).catch((function(e){return console.error("Error duplicating AE layer:",e)}))),e.next=15;break;case 9:e.prev=9,e.t0=e.catch(0),console.error(e.t0),c(!0),d.current="Error!",f.current=e.t0;case 15:case"end":return e.stop()}}),e,null,[[0,9]])})));return function(){return e.apply(this,arguments)}}();return r.createElement(xo,{theme:e},r.createElement("main",null,n&&r.createElement(Vs,{text:a}),r.createElement(ea,{open:u,onClose:function(){return c(!1)},"aria-labelledby":"alert-dialog-title","aria-describedby":"alert-dialog-description"},r.createElement("h1",{style:{margin:"0.25rem",color:"var(--warning)",textAlign:"center"}},d.current),r.createElement("p",{style:{margin:"0.25rem"}},f.current),r.createElement("button",{onClick:function(){return c(!1)}},"Okay")),r.createElement(hs,{bpm:h,setBpm:m,beatsPerBar:y,setBeatsPerBar:v,zoomLevel:w,increaseZoom:function(){return S(w+.25)},decreaseZoom:function(){return w-.25>=1?S(w-.25):null},showInactive:A,setShowInactive:C,showHidden:E,setShowHidden:P,updateView:oe,modeSnap:D,setModeSnap:z,mode:$,setMode:B,actionDuplicateCount:H,setActionDuplicateCount:U,actionDuplicateMode:G,setActionDuplicateMode:q,duplicateLayer:ae,audioLayers:J,setSelectedAudioURL:ne,saveCompDataJSON:function(e){var t=new Blob([JSON.stringify(Q,null,2)],{type:"application/json"}),n=URL.createObjectURL(t),r=document.createElement("a");r.href=n,r.download="".concat(e,".json"),r.click(),URL.revokeObjectURL(n),console.log(JSON.stringify(Q))},loadCompDataJSON:function(){var e=document.createElement("input");e.type="file",e.style.display="none",e.onchange=function(t){var n=t.target.files[0];if(n){var r=new FileReader;r.onload=function(t){var n=t.target.result;e.func(n),document.body.removeChild(e)},r.readAsText(n)}},e.func=function(e){return X(JSON.parse(e))},document.body.appendChild(e),e.click()}}),r.createElement(Us,{compData:Q,bpm:h,beatsPerBar:y,zoomLevel:w,showInactive:A,showHidden:E,updateView:oe,waitingForAERef:R,setLoading:o,setLoadingText:l,setSelectedLayer:L,modeSnapRef:I,modeRef:F,selectedAudioURL:te}),r.createElement("div",{id:"information"},r.createElement("hr",null),r.createElement("p",null,r.createElement("small",null,"comp duration: ",Q.duration," seconds | total beats: ",Math.floor(Q.duration*(h/60*(y/4)))," | total bars: ",Math.ceil(Math.floor(Q.duration*(h/60*1))/4)," | beats per second: ",h/60*(y/4))))))};(0,i.createRoot)(document.getElementById("root")).render(r.createElement(Js,null))},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],l=0;l<e.length;l++){var s=e[l],u=r.base?s[0]+r.base:s[0],c=i[u]||0,d="".concat(u," ").concat(c);i[u]=c+1;var f=n(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=o(p,r);r.byIndex=l,t.splice(l,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var l=n(i[a]);t[l].references--}for(var s=r(e,o),u=0;u<i.length;u++){var c=n(i[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=s}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},146:(e,t,n)=>{var r=n(404),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(e){return r.isMemo(e)?a:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=a;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);d&&(a=a.concat(d(n)));for(var l=s(t),m=s(n),g=0;g<a.length;++g){var y=a[g];if(!(i[y]||r&&r[y]||m&&m[y]||l&&l[y])){var v=f(n,y);try{u(t,y,v)}catch(e){}}}}return t}},159:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},221:(e,t,n)=>{var r=n(540);function o(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function i(){}var a={d:{f:i,r:function(){throw Error(o(522))},D:i,C:i,L:i,m:i,X:i,S:i,M:i},p:0,findDOMNode:null},l=Symbol.for("react.portal"),s=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function u(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=a,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(o(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:l,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=s.T,n=a.p;try{if(s.T=null,a.p=2,e)return e()}finally{s.T=t,a.p=n,a.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,a.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&a.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin),o="string"==typeof t.integrity?t.integrity:void 0,i="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?a.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:o,fetchPriority:i}):"script"===n&&a.d.X(e,{crossOrigin:r,integrity:o,fetchPriority:i,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=u(t.as,t.crossOrigin);a.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&a.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin);a.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=u(t.as,t.crossOrigin);a.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else a.d.m(e)},t.requestFormReset=function(e){a.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return s.H.useFormState(e,t,n)},t.useFormStatus=function(){return s.H.useHostTransitionStatus()},t.version="19.0.0"},247:(e,t,n)=>{var r=n(982),o=n(540),i=n(961);function a(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=Symbol.for("react.element"),s=Symbol.for("react.transitional.element"),u=Symbol.for("react.portal"),c=Symbol.for("react.fragment"),d=Symbol.for("react.strict_mode"),f=Symbol.for("react.profiler"),p=Symbol.for("react.provider"),h=Symbol.for("react.consumer"),m=Symbol.for("react.context"),g=Symbol.for("react.forward_ref"),y=Symbol.for("react.suspense"),v=Symbol.for("react.suspense_list"),b=Symbol.for("react.memo"),w=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var S=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var k=Symbol.for("react.memo_cache_sentinel"),A=Symbol.iterator;function C(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=A&&e[A]||e["@@iterator"])?e:null}var x=Symbol.for("react.client.reference");function E(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===x?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case c:return"Fragment";case u:return"Portal";case f:return"Profiler";case d:return"StrictMode";case y:return"Suspense";case v:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case m:return(e.displayName||"Context")+".Provider";case h:return(e._context.displayName||"Context")+".Consumer";case g:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case b:return null!==(t=e.displayName||null)?t:E(e.type)||"Memo";case w:t=e._payload,e=e._init;try{return E(e(t))}catch(e){}}return null}var P,O,T=o.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,L=Object.assign;function _(e){if(void 0===P)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);P=t&&t[1]||"",O=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+P+e+O}var M=!1;function R(e,t){if(!e||M)return"";M=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var o=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");o&&o.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var i=r.DetermineComponentFrameRoot(),a=i[0],l=i[1];if(a&&l){var s=a.split("\n"),u=l.split("\n");for(o=r=0;r<s.length&&!s[r].includes("DetermineComponentFrameRoot");)r++;for(;o<u.length&&!u[o].includes("DetermineComponentFrameRoot");)o++;if(r===s.length||o===u.length)for(r=s.length-1,o=u.length-1;1<=r&&0<=o&&s[r]!==u[o];)o--;for(;1<=r&&0<=o;r--,o--)if(s[r]!==u[o]){if(1!==r||1!==o)do{if(r--,0>--o||s[r]!==u[o]){var c="\n"+s[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=o);break}}}finally{M=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?_(n):""}function N(e){switch(e.tag){case 26:case 27:case 5:return _(e.type);case 16:return _("Lazy");case 13:return _("Suspense");case 19:return _("SuspenseList");case 0:case 15:return R(e.type,!1);case 11:return R(e.type.render,!1);case 1:return R(e.type,!0);default:return""}}function D(e){try{var t="";do{t+=N(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function z(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function I(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function j(e){if(z(e)!==e)throw Error(a(188))}function $(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=$(e)))return t;e=e.sibling}return null}var B=Array.isArray,F=i.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,W={pending:!1,data:null,method:null,action:null},H=[],U=-1;function V(e){return{current:e}}function G(e){0>U||(e.current=H[U],H[U]=null,U--)}function q(e,t){U++,H[U]=e.current,e.current=t}var K=V(null),Q=V(null),X=V(null),Y=V(null);function J(e,t){switch(q(X,t),q(Q,e),q(K,null),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)&&(t=t.namespaceURI)?Qc(t):0;break;default:if(t=(e=8===e?t.parentNode:t).tagName,e=e.namespaceURI)t=Xc(e=Qc(e),t);else switch(t){case"svg":t=1;break;case"math":t=2;break;default:t=0}}G(K),q(K,t)}function Z(){G(K),G(Q),G(X)}function ee(e){null!==e.memoizedState&&q(Y,e);var t=K.current,n=Xc(t,e.type);t!==n&&(q(Q,e),q(K,n))}function te(e){Q.current===e&&(G(K),G(Q)),Y.current===e&&(G(Y),Dd._currentValue=W)}var ne=Object.prototype.hasOwnProperty,re=r.unstable_scheduleCallback,oe=r.unstable_cancelCallback,ie=r.unstable_shouldYield,ae=r.unstable_requestPaint,le=r.unstable_now,se=r.unstable_getCurrentPriorityLevel,ue=r.unstable_ImmediatePriority,ce=r.unstable_UserBlockingPriority,de=r.unstable_NormalPriority,fe=r.unstable_LowPriority,pe=r.unstable_IdlePriority,he=r.log,me=r.unstable_setDisableYieldValue,ge=null,ye=null;function ve(e){if("function"==typeof he&&me(e),ye&&"function"==typeof ye.setStrictMode)try{ye.setStrictMode(ge,e)}catch(e){}}var be=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(we(e)/Se|0)|0},we=Math.log,Se=Math.LN2,ke=128,Ae=4194304;function Ce(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194176&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function xe(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=e.warmLanes;e=0!==e.finishedLanes;var l=134217727&n;return 0!==l?0!=(n=l&~o)?r=Ce(n):0!=(i&=l)?r=Ce(i):e||0!=(a=l&~a)&&(r=Ce(a)):0!=(l=n&~o)?r=Ce(l):0!==i?r=Ce(i):e||0!=(a=n&~a)&&(r=Ce(a)),0===r?0:0===t||t===r||t&o||!((o=r&-r)>=(a=t&-t)||32===o&&4194176&a)?r:t}function Ee(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function Pe(e,t){switch(e){case 1:case 2:case 4:case 8:return t+250;case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function Oe(){var e=ke;return!(4194176&(ke<<=1))&&(ke=128),e}function Te(){var e=Ae;return!(62914560&(Ae<<=1))&&(Ae=4194304),e}function Le(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function _e(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function Me(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-be(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194218&n}function Re(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-be(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}function Ne(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function De(){var e=F.p;return 0!==e?e:void 0===(e=window.event)?32:Kd(e.type)}var ze=Math.random().toString(36).slice(2),Ie="__reactFiber$"+ze,je="__reactProps$"+ze,$e="__reactContainer$"+ze,Be="__reactEvents$"+ze,Fe="__reactListeners$"+ze,We="__reactHandles$"+ze,He="__reactResources$"+ze,Ue="__reactMarker$"+ze;function Ve(e){delete e[Ie],delete e[je],delete e[Be],delete e[Fe],delete e[We]}function Ge(e){var t=e[Ie];if(t)return t;for(var n=e.parentNode;n;){if(t=n[$e]||n[Ie]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ld(e);null!==e;){if(n=e[Ie])return n;e=ld(e)}return t}n=(e=n).parentNode}return null}function qe(e){if(e=e[Ie]||e[$e]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function Ke(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(a(33))}function Qe(e){var t=e[He];return t||(t=e[He]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function Xe(e){e[Ue]=!0}var Ye=new Set,Je={};function Ze(e,t){et(e,t),et(e+"Capture",t)}function et(e,t){for(Je[e]=t,e=0;e<t.length;e++)Ye.add(t[e])}var tt=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),nt=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),rt={},ot={};function it(e,t,n){if(o=t,ne.call(ot,o)||!ne.call(rt,o)&&(nt.test(o)?ot[o]=!0:(rt[o]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var o}function at(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function lt(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function st(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ut(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ct(e){e._valueTracker||(e._valueTracker=function(e){var t=ut(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function dt(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ut(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ft(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var pt=/[\n"\\]/g;function ht(e){return e.replace(pt,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function mt(e,t,n,r,o,i,a,l){e.name="",null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a?e.type=a:e.removeAttribute("type"),null!=t?"number"===a?(0===t&&""===e.value||e.value!=t)&&(e.value=""+st(t)):e.value!==""+st(t)&&(e.value=""+st(t)):"submit"!==a&&"reset"!==a||e.removeAttribute("value"),null!=t?yt(e,a,st(t)):null!=n?yt(e,a,st(n)):null!=r&&e.removeAttribute("value"),null==o&&null!=i&&(e.defaultChecked=!!i),null!=o&&(e.checked=o&&"function"!=typeof o&&"symbol"!=typeof o),null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?e.name=""+st(l):e.removeAttribute("name")}function gt(e,t,n,r,o,i,a,l){if(null!=i&&"function"!=typeof i&&"symbol"!=typeof i&&"boolean"!=typeof i&&(e.type=i),null!=t||null!=n){if(("submit"===i||"reset"===i)&&null==t)return;n=null!=n?""+st(n):"",t=null!=t?""+st(t):n,l||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:o)&&"symbol"!=typeof r&&!!r,e.checked=l?e.checked:!!r,e.defaultChecked=!!r,null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(e.name=a)}function yt(e,t,n){"number"===t&&ft(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function vt(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+st(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function bt(e,t,n){null==t||((t=""+st(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+st(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function wt(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(a(92));if(B(r)){if(1<r.length)throw Error(a(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=st(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function St(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var kt=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function At(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||kt.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function Ct(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(a(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var o in t)r=t[o],t.hasOwnProperty(o)&&n[o]!==r&&At(e,o,r)}else for(var i in t)t.hasOwnProperty(i)&&At(e,i,t[i])}function xt(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Et=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Pt=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Ot(e){return Pt.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Tt=null;function Lt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var _t=null,Mt=null;function Rt(e){var t=qe(e);if(t&&(e=t.stateNode)){var n=e[je]||null;e:switch(e=t.stateNode,t.type){case"input":if(mt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+ht(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=r[je]||null;if(!o)throw Error(a(90));mt(r,o.value,o.defaultValue,o.defaultValue,o.checked,o.defaultChecked,o.type,o.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&dt(r)}break e;case"textarea":bt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&vt(e,!!n.multiple,t,!1)}}}var Nt=!1;function Dt(e,t,n){if(Nt)return e(t,n);Nt=!0;try{return e(t)}finally{if(Nt=!1,(null!==_t||null!==Mt)&&(Iu(),_t&&(t=_t,e=Mt,Mt=_t=null,Rt(t),e)))for(t=0;t<e.length;t++)Rt(e[t])}}function zt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[je]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var It=!1;if(tt)try{var jt={};Object.defineProperty(jt,"passive",{get:function(){It=!0}}),window.addEventListener("test",jt,jt),window.removeEventListener("test",jt,jt)}catch(e){It=!1}var $t=null,Bt=null,Ft=null;function Wt(){if(Ft)return Ft;var e,t,n=Bt,r=n.length,o="value"in $t?$t.value:$t.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Ft=o.slice(e,1<t?1-t:void 0)}function Ht(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Ut(){return!0}function Vt(){return!1}function Gt(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?Ut:Vt,this.isPropagationStopped=Vt,this}return L(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Ut)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Ut)},persist:function(){},isPersistent:Ut}),t}var qt,Kt,Qt,Xt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Yt=Gt(Xt),Jt=L({},Xt,{view:0,detail:0}),Zt=Gt(Jt),en=L({},Jt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:fn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Qt&&(Qt&&"mousemove"===e.type?(qt=e.screenX-Qt.screenX,Kt=e.screenY-Qt.screenY):Kt=qt=0,Qt=e),qt)},movementY:function(e){return"movementY"in e?e.movementY:Kt}}),tn=Gt(en),nn=Gt(L({},en,{dataTransfer:0})),rn=Gt(L({},Jt,{relatedTarget:0})),on=Gt(L({},Xt,{animationName:0,elapsedTime:0,pseudoElement:0})),an=Gt(L({},Xt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),ln=Gt(L({},Xt,{data:0})),sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},un={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function dn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=cn[e])&&!!t[e]}function fn(){return dn}var pn=Gt(L({},Jt,{key:function(e){if(e.key){var t=sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Ht(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?un[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:fn,charCode:function(e){return"keypress"===e.type?Ht(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Ht(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),hn=Gt(L({},en,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),mn=Gt(L({},Jt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:fn})),gn=Gt(L({},Xt,{propertyName:0,elapsedTime:0,pseudoElement:0})),yn=Gt(L({},en,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),vn=Gt(L({},Xt,{newState:0,oldState:0})),bn=[9,13,27,32],wn=tt&&"CompositionEvent"in window,Sn=null;tt&&"documentMode"in document&&(Sn=document.documentMode);var kn=tt&&"TextEvent"in window&&!Sn,An=tt&&(!wn||Sn&&8<Sn&&11>=Sn),Cn=String.fromCharCode(32),xn=!1;function En(e,t){switch(e){case"keyup":return-1!==bn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Pn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var On=!1,Tn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ln(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Tn[e.type]:"textarea"===t}function _n(e,t,n,r){_t?Mt?Mt.push(r):Mt=[r]:_t=r,0<(t=Dc(t,"onChange")).length&&(n=new Yt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Mn=null,Rn=null;function Nn(e){Pc(e,0)}function Dn(e){if(dt(Ke(e)))return e}function zn(e,t){if("change"===e)return t}var In=!1;if(tt){var jn;if(tt){var $n="oninput"in document;if(!$n){var Bn=document.createElement("div");Bn.setAttribute("oninput","return;"),$n="function"==typeof Bn.oninput}jn=$n}else jn=!1;In=jn&&(!document.documentMode||9<document.documentMode)}function Fn(){Mn&&(Mn.detachEvent("onpropertychange",Wn),Rn=Mn=null)}function Wn(e){if("value"===e.propertyName&&Dn(Rn)){var t=[];_n(t,Rn,e,Lt(e)),Dt(Nn,t)}}function Hn(e,t,n){"focusin"===e?(Fn(),Rn=n,(Mn=t).attachEvent("onpropertychange",Wn)):"focusout"===e&&Fn()}function Un(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Dn(Rn)}function Vn(e,t){if("click"===e)return Dn(t)}function Gn(e,t){if("input"===e||"change"===e)return Dn(t)}var qn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Kn(e,t){if(qn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!ne.call(t,o)||!qn(e[o],t[o]))return!1}return!0}function Qn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Xn(e,t){var n,r=Qn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Qn(r)}}function Yn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Yn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Jn(e){for(var t=ft((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=ft((e=t.contentWindow).document)}return t}function Zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function er(e,t){var n=Jn(t);t=e.focusedElem;var r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&Yn(t.ownerDocument.documentElement,t)){if(null!==r&&Zn(t))if(e=r.start,void 0===(n=r.end)&&(n=e),"selectionStart"in t)t.selectionStart=e,t.selectionEnd=Math.min(n,t.value.length);else if((n=(e=t.ownerDocument||document)&&e.defaultView||window).getSelection){n=n.getSelection();var o=t.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!n.extend&&i>r&&(o=r,r=i,i=o),o=Xn(t,i);var a=Xn(t,r);o&&a&&(1!==n.rangeCount||n.anchorNode!==o.node||n.anchorOffset!==o.offset||n.focusNode!==a.node||n.focusOffset!==a.offset)&&((e=e.createRange()).setStart(o.node,o.offset),n.removeAllRanges(),i>r?(n.addRange(e),n.extend(a.node,a.offset)):(e.setEnd(a.node,a.offset),n.addRange(e)))}for(e=[],n=t;n=n.parentNode;)1===n.nodeType&&e.push({element:n,left:n.scrollLeft,top:n.scrollTop});for("function"==typeof t.focus&&t.focus(),t=0;t<e.length;t++)(n=e[t]).element.scrollLeft=n.left,n.element.scrollTop=n.top}}var tr=tt&&"documentMode"in document&&11>=document.documentMode,nr=null,rr=null,or=null,ir=!1;function ar(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;ir||null==nr||nr!==ft(r)||(r="selectionStart"in(r=nr)&&Zn(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},or&&Kn(or,r)||(or=r,0<(r=Dc(rr,"onSelect")).length&&(t=new Yt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=nr)))}function lr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var sr={animationend:lr("Animation","AnimationEnd"),animationiteration:lr("Animation","AnimationIteration"),animationstart:lr("Animation","AnimationStart"),transitionrun:lr("Transition","TransitionRun"),transitionstart:lr("Transition","TransitionStart"),transitioncancel:lr("Transition","TransitionCancel"),transitionend:lr("Transition","TransitionEnd")},ur={},cr={};function dr(e){if(ur[e])return ur[e];if(!sr[e])return e;var t,n=sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in cr)return ur[e]=n[t];return e}tt&&(cr=document.createElement("div").style,"AnimationEvent"in window||(delete sr.animationend.animation,delete sr.animationiteration.animation,delete sr.animationstart.animation),"TransitionEvent"in window||delete sr.transitionend.transition);var fr=dr("animationend"),pr=dr("animationiteration"),hr=dr("animationstart"),mr=dr("transitionrun"),gr=dr("transitionstart"),yr=dr("transitioncancel"),vr=dr("transitionend"),br=new Map,wr="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll scrollEnd toggle touchMove waiting wheel".split(" ");function Sr(e,t){br.set(e,t),Ze(t,[e])}var kr=[],Ar=0,Cr=0;function xr(){for(var e=Ar,t=Cr=Ar=0;t<e;){var n=kr[t];kr[t++]=null;var r=kr[t];kr[t++]=null;var o=kr[t];kr[t++]=null;var i=kr[t];if(kr[t++]=null,null!==r&&null!==o){var a=r.pending;null===a?o.next=o:(o.next=a.next,a.next=o),r.pending=o}0!==i&&Tr(n,o,i)}}function Er(e,t,n,r){kr[Ar++]=e,kr[Ar++]=t,kr[Ar++]=n,kr[Ar++]=r,Cr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Pr(e,t,n,r){return Er(e,t,n,r),Lr(e)}function Or(e,t){return Er(e,null,null,t),Lr(e)}function Tr(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var o=!1,i=e.return;null!==i;)i.childLanes|=n,null!==(r=i.alternate)&&(r.childLanes|=n),22===i.tag&&(null===(e=i.stateNode)||1&e._visibility||(o=!0)),e=i,i=i.return;o&&null!==t&&3===e.tag&&(i=e.stateNode,o=31-be(n),null===(e=(i=i.hiddenUpdates)[o])?i[o]=[t]:e.push(t),t.lane=536870912|n)}function Lr(e){if(50<Pu)throw Pu=0,Ou=null,Error(a(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var _r={},Mr=new WeakMap;function Rr(e,t){if("object"==typeof e&&null!==e){var n=Mr.get(e);return void 0!==n?n:(t={value:e,source:t,stack:D(t)},Mr.set(e,t),t)}return{value:e,source:t,stack:D(t)}}var Nr=[],Dr=0,zr=null,Ir=0,jr=[],$r=0,Br=null,Fr=1,Wr="";function Hr(e,t){Nr[Dr++]=Ir,Nr[Dr++]=zr,zr=e,Ir=t}function Ur(e,t,n){jr[$r++]=Fr,jr[$r++]=Wr,jr[$r++]=Br,Br=e;var r=Fr;e=Wr;var o=32-be(r)-1;r&=~(1<<o),n+=1;var i=32-be(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Fr=1<<32-be(t)+o|n<<o|r,Wr=i+e}else Fr=1<<i|n<<o|r,Wr=e}function Vr(e){null!==e.return&&(Hr(e,1),Ur(e,1,0))}function Gr(e){for(;e===zr;)zr=Nr[--Dr],Nr[Dr]=null,Ir=Nr[--Dr],Nr[Dr]=null;for(;e===Br;)Br=jr[--$r],jr[$r]=null,Wr=jr[--$r],jr[$r]=null,Fr=jr[--$r],jr[$r]=null}var qr=null,Kr=null,Qr=!1,Xr=null,Yr=!1,Jr=Error(a(519));function Zr(e){throw oo(Rr(Error(a(418,"")),e)),Jr}function eo(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[Ie]=e,t[je]=r,n){case"dialog":Oc("cancel",t),Oc("close",t);break;case"iframe":case"object":case"embed":Oc("load",t);break;case"video":case"audio":for(n=0;n<xc.length;n++)Oc(xc[n],t);break;case"source":Oc("error",t);break;case"img":case"image":case"link":Oc("error",t),Oc("load",t);break;case"details":Oc("toggle",t);break;case"input":Oc("invalid",t),gt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),ct(t);break;case"select":Oc("invalid",t);break;case"textarea":Oc("invalid",t),wt(t,r.value,r.defaultValue,r.children),ct(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Fc(t.textContent,n)?(null!=r.popover&&(Oc("beforetoggle",t),Oc("toggle",t)),null!=r.onScroll&&Oc("scroll",t),null!=r.onScrollEnd&&Oc("scrollend",t),null!=r.onClick&&(t.onclick=Wc),t=!0):t=!1,t||Zr(e)}function to(e){for(qr=e.return;qr;)switch(qr.tag){case 3:case 27:return void(Yr=!0);case 5:case 13:return void(Yr=!1);default:qr=qr.return}}function no(e){if(e!==qr)return!1;if(!Qr)return to(e),Qr=!0,!1;var t,n=!1;if((t=3!==e.tag&&27!==e.tag)&&((t=5===e.tag)&&(t=!("form"!==(t=e.type)&&"button"!==t)||Yc(e.type,e.memoizedProps)),t=!t),t&&(n=!0),n&&Kr&&Zr(e),to(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){Kr=ad(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}Kr=null}}else Kr=qr?ad(e.stateNode.nextSibling):null;return!0}function ro(){Kr=qr=null,Qr=!1}function oo(e){null===Xr?Xr=[e]:Xr.push(e)}var io=Error(a(460)),ao=Error(a(474)),lo={then:function(){}};function so(e){return"fulfilled"===(e=e.status)||"rejected"===e}function uo(){}function co(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(uo,uo),t=n),t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===io)throw Error(a(483));throw e;default:if("string"==typeof t.status)t.then(uo,uo);else{if(null!==(e=eu)&&100<e.shellSuspendCounter)throw Error(a(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":if((e=t.reason)===io)throw Error(a(483));throw e}throw fo=t,io}}var fo=null;function po(){if(null===fo)throw Error(a(459));var e=fo;return fo=null,e}var ho=null,mo=0;function go(e){var t=mo;return mo+=1,null===ho&&(ho=[]),co(ho,e,t)}function yo(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function vo(e,t){if(t.$$typeof===l)throw Error(a(525));throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function bo(e){return(0,e._init)(e._payload)}function wo(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function o(e,t){return(e=zs(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=33554434,n):r:(t.flags|=33554434,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=33554434),t}function d(e,t,n,r){return null===t||6!==t.tag?((t=Fs(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n,r){var i=n.type;return i===c?h(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===w&&bo(i)===t.type)?(yo(t=o(t,n.props),n),t.return=e,t):(yo(t=js(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function p(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ws(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function h(e,t,n,r,i){return null===t||7!==t.tag?((t=$s(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function g(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=Fs(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case s:return yo(n=js(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case u:return(t=Ws(t,e.mode,n)).return=e,t;case w:return g(e,t=(0,t._init)(t._payload),n)}if(B(t)||C(t))return(t=$s(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return g(e,go(t),n);if(t.$$typeof===m)return g(e,xl(e,t),n);vo(e,t)}return null}function y(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==o?null:d(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case s:return n.key===o?f(e,t,n,r):null;case u:return n.key===o?p(e,t,n,r):null;case w:return y(e,t,n=(o=n._init)(n._payload),r)}if(B(n)||C(n))return null!==o?null:h(e,t,n,r,null);if("function"==typeof n.then)return y(e,t,go(n),r);if(n.$$typeof===m)return y(e,t,xl(e,n),r);vo(e,n)}return null}function v(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return d(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case s:return f(t,e=e.get(null===r.key?n:r.key)||null,r,o);case u:return p(t,e=e.get(null===r.key?n:r.key)||null,r,o);case w:return v(e,t,n,r=(0,r._init)(r._payload),o)}if(B(r)||C(r))return h(t,e=e.get(n)||null,r,o,null);if("function"==typeof r.then)return v(e,t,n,go(r),o);if(r.$$typeof===m)return v(e,t,n,xl(t,r),o);vo(t,r)}return null}function b(d,f,p,h){if("object"==typeof p&&null!==p&&p.type===c&&null===p.key&&(p=p.props.children),"object"==typeof p&&null!==p){switch(p.$$typeof){case s:e:{for(var S=p.key;null!==f;){if(f.key===S){if((S=p.type)===c){if(7===f.tag){n(d,f.sibling),(h=o(f,p.props.children)).return=d,d=h;break e}}else if(f.elementType===S||"object"==typeof S&&null!==S&&S.$$typeof===w&&bo(S)===f.type){n(d,f.sibling),yo(h=o(f,p.props),p),h.return=d,d=h;break e}n(d,f);break}t(d,f),f=f.sibling}p.type===c?((h=$s(p.props.children,d.mode,h,p.key)).return=d,d=h):(yo(h=js(p.type,p.key,p.props,null,d.mode,h),p),h.return=d,d=h)}return l(d);case u:e:{for(S=p.key;null!==f;){if(f.key===S){if(4===f.tag&&f.stateNode.containerInfo===p.containerInfo&&f.stateNode.implementation===p.implementation){n(d,f.sibling),(h=o(f,p.children||[])).return=d,d=h;break e}n(d,f);break}t(d,f),f=f.sibling}(h=Ws(p,d.mode,h)).return=d,d=h}return l(d);case w:return b(d,f,p=(S=p._init)(p._payload),h)}if(B(p))return function(o,a,l,s){for(var u=null,c=null,d=a,f=a=0,p=null;null!==d&&f<l.length;f++){d.index>f?(p=d,d=null):p=d.sibling;var h=y(o,d,l[f],s);if(null===h){null===d&&(d=p);break}e&&d&&null===h.alternate&&t(o,d),a=i(h,a,f),null===c?u=h:c.sibling=h,c=h,d=p}if(f===l.length)return n(o,d),Qr&&Hr(o,f),u;if(null===d){for(;f<l.length;f++)null!==(d=g(o,l[f],s))&&(a=i(d,a,f),null===c?u=d:c.sibling=d,c=d);return Qr&&Hr(o,f),u}for(d=r(d);f<l.length;f++)null!==(p=v(d,o,f,l[f],s))&&(e&&null!==p.alternate&&d.delete(null===p.key?f:p.key),a=i(p,a,f),null===c?u=p:c.sibling=p,c=p);return e&&d.forEach((function(e){return t(o,e)})),Qr&&Hr(o,f),u}(d,f,p,h);if(C(p)){if("function"!=typeof(S=C(p)))throw Error(a(150));return function(o,l,s,u){if(null==s)throw Error(a(151));for(var c=null,d=null,f=l,p=l=0,h=null,m=s.next();null!==f&&!m.done;p++,m=s.next()){f.index>p?(h=f,f=null):h=f.sibling;var b=y(o,f,m.value,u);if(null===b){null===f&&(f=h);break}e&&f&&null===b.alternate&&t(o,f),l=i(b,l,p),null===d?c=b:d.sibling=b,d=b,f=h}if(m.done)return n(o,f),Qr&&Hr(o,p),c;if(null===f){for(;!m.done;p++,m=s.next())null!==(m=g(o,m.value,u))&&(l=i(m,l,p),null===d?c=m:d.sibling=m,d=m);return Qr&&Hr(o,p),c}for(f=r(f);!m.done;p++,m=s.next())null!==(m=v(f,o,p,m.value,u))&&(e&&null!==m.alternate&&f.delete(null===m.key?p:m.key),l=i(m,l,p),null===d?c=m:d.sibling=m,d=m);return e&&f.forEach((function(e){return t(o,e)})),Qr&&Hr(o,p),c}(d,f,p=S.call(p),h)}if("function"==typeof p.then)return b(d,f,go(p),h);if(p.$$typeof===m)return b(d,f,xl(d,p),h);vo(d,p)}return"string"==typeof p&&""!==p||"number"==typeof p||"bigint"==typeof p?(p=""+p,null!==f&&6===f.tag?(n(d,f.sibling),(h=o(f,p)).return=d,d=h):(n(d,f),(h=Fs(p,d.mode,h)).return=d,d=h),l(d)):n(d,f)}return function(e,t,n,r){try{mo=0;var o=b(e,t,n,r);return ho=null,o}catch(t){if(t===io)throw t;var i=Ns(29,t,null,e.mode);return i.lanes=r,i.return=e,i}}}var So=wo(!0),ko=wo(!1),Ao=V(null),Co=V(0);function xo(e,t){q(Co,e=su),q(Ao,t),su=e|t.baseLanes}function Eo(){q(Co,su),q(Ao,Ao.current)}function Po(){su=Co.current,G(Ao),G(Co)}var Oo=V(null),To=null;function Lo(e){var t=e.alternate;q(No,1&No.current),q(Oo,e),null===To&&(null===t||null!==Ao.current||null!==t.memoizedState)&&(To=e)}function _o(e){if(22===e.tag){if(q(No,No.current),q(Oo,e),null===To){var t=e.alternate;null!==t&&null!==t.memoizedState&&(To=e)}}else Mo()}function Mo(){q(No,No.current),q(Oo,Oo.current)}function Ro(e){G(Oo),To===e&&(To=null),G(No)}var No=V(0);function Do(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var zo="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Io=r.unstable_scheduleCallback,jo=r.unstable_NormalPriority,$o={$$typeof:m,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Bo(){return{controller:new zo,data:new Map,refCount:0}}function Fo(e){e.refCount--,0===e.refCount&&Io(jo,(function(){e.controller.abort()}))}var Wo=null,Ho=0,Uo=0,Vo=null;function Go(){if(0==--Ho&&null!==Wo){null!==Vo&&(Vo.status="fulfilled");var e=Wo;Wo=null,Uo=0,Vo=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var qo=T.S;T.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Wo){var n=Wo=[];Ho=0,Uo=wc(),Vo={status:"pending",value:void 0,then:function(e){n.push(e)}}}Ho++,t.then(Go,Go)}(0,t),null!==qo&&qo(e,t)};var Ko=V(null);function Qo(){var e=Ko.current;return null!==e?e:eu.pooledCache}function Xo(e,t){q(Ko,null===t?Ko.current:t.pool)}function Yo(){var e=Qo();return null===e?null:{parent:$o._currentValue,pool:e}}var Jo=0,Zo=null,ei=null,ti=null,ni=!1,ri=!1,oi=!1,ii=0,ai=0,li=null,si=0;function ui(){throw Error(a(321))}function ci(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!qn(e[n],t[n]))return!1;return!0}function di(e,t,n,r,o,i){return Jo=i,Zo=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,T.H=null===e||null===e.memoizedState?xa:Ea,oi=!1,i=n(r,o),oi=!1,ri&&(i=pi(t,n,r,o)),fi(e),i}function fi(e){T.H=Ca;var t=null!==ei&&null!==ei.next;if(Jo=0,ti=ei=Zo=null,ni=!1,ai=0,li=null,t)throw Error(a(300));null===e||Ha||null!==(e=e.dependencies)&&kl(e)&&(Ha=!0)}function pi(e,t,n,r){Zo=e;var o=0;do{if(ri&&(li=null),ai=0,ri=!1,25<=o)throw Error(a(301));if(o+=1,ti=ei=null,null!=e.updateQueue){var i=e.updateQueue;i.lastEffect=null,i.events=null,i.stores=null,null!=i.memoCache&&(i.memoCache.index=0)}T.H=Pa,i=t(n,r)}while(ri);return i}function hi(){var e=T.H,t=e.useState()[0];return t="function"==typeof t.then?wi(t):t,e=e.useState()[0],(null!==ei?ei.memoizedState:null)!==e&&(Zo.flags|=1024),t}function mi(){var e=0!==ii;return ii=0,e}function gi(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function yi(e){if(ni){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}ni=!1}Jo=0,ti=ei=Zo=null,ri=!1,ai=ii=0,li=null}function vi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ti?Zo.memoizedState=ti=e:ti=ti.next=e,ti}function bi(){if(null===ei){var e=Zo.alternate;e=null!==e?e.memoizedState:null}else e=ei.next;var t=null===ti?Zo.memoizedState:ti.next;if(null!==t)ti=t,ei=e;else{if(null===e){if(null===Zo.alternate)throw Error(a(467));throw Error(a(310))}e={memoizedState:(ei=e).memoizedState,baseState:ei.baseState,baseQueue:ei.baseQueue,queue:ei.queue,next:null},null===ti?Zo.memoizedState=ti=e:ti=ti.next=e}return ti}function wi(e){var t=ai;return ai+=1,null===li&&(li=[]),e=co(li,e,t),t=Zo,null===(null===ti?t.memoizedState:ti.next)&&(t=t.alternate,T.H=null===t||null===t.memoizedState?xa:Ea),e}function Si(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return wi(e);if(e.$$typeof===m)return Cl(e)}throw Error(a(438,String(e)))}function ki(e){var t=null,n=Zo.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=Zo.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},Zo.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=k;return t.index++,n}function Ai(e,t){return"function"==typeof t?t(e):t}function Ci(e){return xi(bi(),ei,e)}function xi(e,t,n){var r=e.queue;if(null===r)throw Error(a(311));r.lastRenderedReducer=n;var o=e.baseQueue,i=r.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}t.baseQueue=o=i,r.pending=null}if(i=e.baseState,null===o)e.memoizedState=i;else{var s=l=null,u=null,c=t=o.next,d=!1;do{var f=-536870913&c.lane;if(f!==c.lane?(nu&f)===f:(Jo&f)===f){var p=c.revertLane;if(0===p)null!==u&&(u=u.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),f===Uo&&(d=!0);else{if((Jo&p)===p){c=c.next,p===Uo&&(d=!0);continue}f={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=f,l=i):u=u.next=f,Zo.lanes|=p,cu|=p}f=c.action,oi&&n(i,f),i=c.hasEagerState?c.eagerState:n(i,f)}else p={lane:f,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=p,l=i):u=u.next=p,Zo.lanes|=f,cu|=f;c=c.next}while(null!==c&&c!==t);if(null===u?l=i:u.next=s,!qn(i,e.memoizedState)&&(Ha=!0,d&&null!==(n=Vo)))throw n;e.memoizedState=i,e.baseState=l,e.baseQueue=u,r.lastRenderedState=i}return null===o&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Ei(e){var t=bi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);qn(i,t.memoizedState)||(Ha=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Pi(e,t,n){var r=Zo,o=bi(),i=Qr;if(i){if(void 0===n)throw Error(a(407));n=n()}else n=t();var l=!qn((ei||o).memoizedState,n);if(l&&(o.memoizedState=n,Ha=!0),o=o.queue,Ji(Li.bind(null,r,o,e),[e]),o.getSnapshot!==t||l||null!==ti&&1&ti.memoizedState.tag){if(r.flags|=2048,qi(9,Ti.bind(null,r,o,n,t),{destroy:void 0},null),null===eu)throw Error(a(349));i||60&Jo||Oi(r,t,n)}return n}function Oi(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=Zo.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},Zo.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ti(e,t,n,r){t.value=n,t.getSnapshot=r,_i(t)&&Mi(e)}function Li(e,t,n){return n((function(){_i(t)&&Mi(e)}))}function _i(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!qn(e,n)}catch(e){return!0}}function Mi(e){var t=Or(e,2);null!==t&&_u(t,0,2)}function Ri(e){var t=vi();if("function"==typeof e){var n=e;if(e=n(),oi){ve(!0);try{n()}finally{ve(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ai,lastRenderedState:e},t}function Ni(e,t,n,r){return e.baseState=n,xi(e,ei,"function"==typeof r?r:Ai)}function Di(e,t,n,r,o){if(Sa(e))throw Error(a(485));if(null!==(e=t.action)){var i={payload:o,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){i.listeners.push(e)}};null!==T.T?n(!0):i.isTransition=!1,r(i),null===(n=t.pending)?(i.next=t.pending=i,zi(t,i)):(i.next=n.next,t.pending=n.next=i)}}function zi(e,t){var n=t.action,r=t.payload,o=e.state;if(t.isTransition){var i=T.T,a={};T.T=a;try{var l=n(o,r),s=T.S;null!==s&&s(a,l),Ii(e,t,l)}catch(n){$i(e,t,n)}finally{T.T=i}}else try{Ii(e,t,i=n(o,r))}catch(n){$i(e,t,n)}}function Ii(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){ji(e,t,n)}),(function(n){return $i(e,t,n)})):ji(e,t,n)}function ji(e,t,n){t.status="fulfilled",t.value=n,Bi(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,zi(e,n)))}function $i(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,Bi(t),t=t.next}while(t!==r)}e.action=null}function Bi(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function Fi(e,t){return t}function Wi(e,t){if(Qr){var n=eu.formState;if(null!==n){e:{var r=Zo;if(Qr){if(Kr){t:{for(var o=Kr,i=Yr;8!==o.nodeType;){if(!i){o=null;break t}if(null===(o=ad(o.nextSibling))){o=null;break t}}o="F!"===(i=o.data)||"F"===i?o:null}if(o){Kr=ad(o.nextSibling),r="F!"===o.data;break e}}Zr(r)}r=!1}r&&(t=n[0])}}return(n=vi()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Fi,lastRenderedState:t},n.queue=r,n=va.bind(null,Zo,r),r.dispatch=n,r=Ri(!1),i=wa.bind(null,Zo,!1,r.queue),o={state:t,dispatch:null,action:e,pending:null},(r=vi()).queue=o,n=Di.bind(null,Zo,o,i,n),o.dispatch=n,r.memoizedState=e,[t,n,!1]}function Hi(e){return Ui(bi(),ei,e)}function Ui(e,t,n){t=xi(e,t,Fi)[0],e=Ci(Ai)[0],t="object"==typeof t&&null!==t&&"function"==typeof t.then?wi(t):t;var r=bi(),o=r.queue,i=o.dispatch;return n!==r.memoizedState&&(Zo.flags|=2048,qi(9,Vi.bind(null,o,n),{destroy:void 0},null)),[t,i,e]}function Vi(e,t){e.action=t}function Gi(e){var t=bi(),n=ei;if(null!==n)return Ui(t,n,e);bi(),t=t.memoizedState;var r=(n=bi()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function qi(e,t,n,r){return e={tag:e,create:t,inst:n,deps:r,next:null},null===(t=Zo.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},Zo.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ki(){return bi().memoizedState}function Qi(e,t,n,r){var o=vi();Zo.flags|=e,o.memoizedState=qi(1|t,n,{destroy:void 0},void 0===r?null:r)}function Xi(e,t,n,r){var o=bi();r=void 0===r?null:r;var i=o.memoizedState.inst;null!==ei&&null!==r&&ci(r,ei.memoizedState.deps)?o.memoizedState=qi(t,n,i,r):(Zo.flags|=e,o.memoizedState=qi(1|t,n,i,r))}function Yi(e,t){Qi(8390656,8,e,t)}function Ji(e,t){Xi(2048,8,e,t)}function Zi(e,t){return Xi(4,2,e,t)}function ea(e,t){return Xi(4,4,e,t)}function ta(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function na(e,t,n){n=null!=n?n.concat([e]):null,Xi(4,4,ta.bind(null,t,e),n)}function ra(){}function oa(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&ci(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function ia(e,t){var n=bi();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&ci(t,r[1]))return r[0];if(r=e(),oi){ve(!0);try{e()}finally{ve(!1)}}return n.memoizedState=[r,t],r}function aa(e,t,n){return void 0===n||1073741824&Jo?e.memoizedState=t:(e.memoizedState=n,e=Lu(),Zo.lanes|=e,cu|=e,n)}function la(e,t,n,r){return qn(n,t)?n:null!==Ao.current?(e=aa(e,n,r),qn(e,t)||(Ha=!0),e):42&Jo?(e=Lu(),Zo.lanes|=e,cu|=e,t):(Ha=!0,e.memoizedState=n)}function sa(e,t,n,r,o){var i=F.p;F.p=0!==i&&8>i?i:8;var a,l,s,u=T.T,c={};T.T=c,wa(e,!1,t,n);try{var d=o(),f=T.S;null!==f&&f(c,d),null!==d&&"object"==typeof d&&"function"==typeof d.then?ba(e,t,(a=r,l=[],s={status:"pending",value:null,reason:null,then:function(e){l.push(e)}},d.then((function(){s.status="fulfilled",s.value=a;for(var e=0;e<l.length;e++)(0,l[e])(a)}),(function(e){for(s.status="rejected",s.reason=e,e=0;e<l.length;e++)(0,l[e])(void 0)})),s),Tu()):ba(e,t,r,Tu())}catch(n){ba(e,t,{then:function(){},status:"rejected",reason:n},Tu())}finally{F.p=i,T.T=u}}function ua(){}function ca(e,t,n,r){if(5!==e.tag)throw Error(a(476));var o=da(e).queue;sa(e,o,t,W,null===n?ua:function(){return fa(e),n(r)})}function da(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:W,baseState:W,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ai,lastRenderedState:W},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ai,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function fa(e){ba(e,da(e).next.queue,{},Tu())}function pa(){return Cl(Dd)}function ha(){return bi().memoizedState}function ma(){return bi().memoizedState}function ga(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Tu(),r=_l(t,e=Ll(n),n);return null!==r&&(_u(r,0,n),Ml(r,t,n)),t={cache:Bo()},void(e.payload=t)}t=t.return}}function ya(e,t,n){var r=Tu();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},Sa(e)?ka(t,n):null!==(n=Pr(e,t,n,r))&&(_u(n,0,r),Aa(n,t,r))}function va(e,t,n){ba(e,t,n,Tu())}function ba(e,t,n,r){var o={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if(Sa(e))ka(t,o);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=i(a,n);if(o.hasEagerState=!0,o.eagerState=l,qn(l,a))return Er(e,t,o,0),null===eu&&xr(),!1}catch(e){}if(null!==(n=Pr(e,t,o,r)))return _u(n,0,r),Aa(n,t,r),!0}return!1}function wa(e,t,n,r){if(r={lane:2,revertLane:wc(),action:r,hasEagerState:!1,eagerState:null,next:null},Sa(e)){if(t)throw Error(a(479))}else null!==(t=Pr(e,n,r,2))&&_u(t,0,2)}function Sa(e){var t=e.alternate;return e===Zo||null!==t&&t===Zo}function ka(e,t){ri=ni=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Aa(e,t,n){if(4194176&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Re(e,n)}}var Ca={readContext:Cl,use:Si,useCallback:ui,useContext:ui,useEffect:ui,useImperativeHandle:ui,useLayoutEffect:ui,useInsertionEffect:ui,useMemo:ui,useReducer:ui,useRef:ui,useState:ui,useDebugValue:ui,useDeferredValue:ui,useTransition:ui,useSyncExternalStore:ui,useId:ui};Ca.useCacheRefresh=ui,Ca.useMemoCache=ui,Ca.useHostTransitionStatus=ui,Ca.useFormState=ui,Ca.useActionState=ui,Ca.useOptimistic=ui;var xa={readContext:Cl,use:Si,useCallback:function(e,t){return vi().memoizedState=[e,void 0===t?null:t],e},useContext:Cl,useEffect:Yi,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,Qi(4194308,4,ta.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Qi(4194308,4,e,t)},useInsertionEffect:function(e,t){Qi(4,2,e,t)},useMemo:function(e,t){var n=vi();t=void 0===t?null:t;var r=e();if(oi){ve(!0);try{e()}finally{ve(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=vi();if(void 0!==n){var o=n(t);if(oi){ve(!0);try{n(t)}finally{ve(!1)}}}else o=t;return r.memoizedState=r.baseState=o,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:o},r.queue=e,e=e.dispatch=ya.bind(null,Zo,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},vi().memoizedState=e},useState:function(e){var t=(e=Ri(e)).queue,n=va.bind(null,Zo,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:ra,useDeferredValue:function(e,t){return aa(vi(),e,t)},useTransition:function(){var e=Ri(!1);return e=sa.bind(null,Zo,e.queue,!0,!1),vi().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=Zo,o=vi();if(Qr){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===eu)throw Error(a(349));60&nu||Oi(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Yi(Li.bind(null,r,i,e),[e]),r.flags|=2048,qi(9,Ti.bind(null,r,i,n,t),{destroy:void 0},null),n},useId:function(){var e=vi(),t=eu.identifierPrefix;if(Qr){var n=Wr;t=":"+t+"R"+(n=(Fr&~(1<<32-be(Fr)-1)).toString(32)+n),0<(n=ii++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=si++).toString(32)+":";return e.memoizedState=t},useCacheRefresh:function(){return vi().memoizedState=ga.bind(null,Zo)}};xa.useMemoCache=ki,xa.useHostTransitionStatus=pa,xa.useFormState=Wi,xa.useActionState=Wi,xa.useOptimistic=function(e){var t=vi();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=wa.bind(null,Zo,!0,n),n.dispatch=t,[e,t]};var Ea={readContext:Cl,use:Si,useCallback:oa,useContext:Cl,useEffect:Ji,useImperativeHandle:na,useInsertionEffect:Zi,useLayoutEffect:ea,useMemo:ia,useReducer:Ci,useRef:Ki,useState:function(){return Ci(Ai)},useDebugValue:ra,useDeferredValue:function(e,t){return la(bi(),ei.memoizedState,e,t)},useTransition:function(){var e=Ci(Ai)[0],t=bi().memoizedState;return["boolean"==typeof e?e:wi(e),t]},useSyncExternalStore:Pi,useId:ha};Ea.useCacheRefresh=ma,Ea.useMemoCache=ki,Ea.useHostTransitionStatus=pa,Ea.useFormState=Hi,Ea.useActionState=Hi,Ea.useOptimistic=function(e,t){return Ni(bi(),0,e,t)};var Pa={readContext:Cl,use:Si,useCallback:oa,useContext:Cl,useEffect:Ji,useImperativeHandle:na,useInsertionEffect:Zi,useLayoutEffect:ea,useMemo:ia,useReducer:Ei,useRef:Ki,useState:function(){return Ei(Ai)},useDebugValue:ra,useDeferredValue:function(e,t){var n=bi();return null===ei?aa(n,e,t):la(n,ei.memoizedState,e,t)},useTransition:function(){var e=Ei(Ai)[0],t=bi().memoizedState;return["boolean"==typeof e?e:wi(e),t]},useSyncExternalStore:Pi,useId:ha};function Oa(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:L({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}Pa.useCacheRefresh=ma,Pa.useMemoCache=ki,Pa.useHostTransitionStatus=pa,Pa.useFormState=Gi,Pa.useActionState=Gi,Pa.useOptimistic=function(e,t){var n=bi();return null!==ei?Ni(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])};var Ta={isMounted:function(e){return!!(e=e._reactInternals)&&z(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Tu(),o=Ll(r);o.payload=t,null!=n&&(o.callback=n),null!==(t=_l(e,o,r))&&(_u(t,0,r),Ml(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Tu(),o=Ll(r);o.tag=1,o.payload=t,null!=n&&(o.callback=n),null!==(t=_l(e,o,r))&&(_u(t,0,r),Ml(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Tu(),r=Ll(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=_l(e,r,n))&&(_u(t,0,n),Ml(t,e,n))}};function La(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&Kn(n,r)&&Kn(o,i))}function _a(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Ta.enqueueReplaceState(t,t.state,null)}function Ma(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var o in n===t&&(n=L({},n)),e)void 0===n[o]&&(n[o]=e[o]);return n}var Ra="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function Na(e){Ra(e)}function Da(e){console.error(e)}function za(e){Ra(e)}function Ia(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function ja(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function $a(e,t,n){return(n=Ll(n)).tag=3,n.payload={element:null},n.callback=function(){Ia(e,t)},n}function Ba(e){return(e=Ll(e)).tag=3,e}function Fa(e,t,n,r){var o=n.type.getDerivedStateFromError;if("function"==typeof o){var i=r.value;e.payload=function(){return o(i)},e.callback=function(){ja(t,n,r)}}var a=n.stateNode;null!==a&&"function"==typeof a.componentDidCatch&&(e.callback=function(){ja(t,n,r),"function"!=typeof o&&(null===Su?Su=new Set([this]):Su.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var Wa=Error(a(461)),Ha=!1;function Ua(e,t,n,r){t.child=null===e?ko(t,null,n,r):So(t,e.child,n,r)}function Va(e,t,n,r,o){n=n.render;var i=t.ref;if("ref"in r){var a={};for(var l in r)"ref"!==l&&(a[l]=r[l])}else a=r;return Al(t),r=di(e,t,n,a,i,o),l=mi(),null===e||Ha?(Qr&&l&&Vr(t),t.flags|=1,Ua(e,t,r,o),t.child):(gi(e,t,o),dl(e,t,o))}function Ga(e,t,n,r,o){if(null===e){var i=n.type;return"function"!=typeof i||Ds(i)||void 0!==i.defaultProps||null!==n.compare?((e=js(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,qa(e,t,i,r,o))}if(i=e.child,!fl(e,o)){var a=i.memoizedProps;if((n=null!==(n=n.compare)?n:Kn)(a,r)&&e.ref===t.ref)return dl(e,t,o)}return t.flags|=1,(e=zs(i,r)).ref=t.ref,e.return=t,t.child=e}function qa(e,t,n,r,o){if(null!==e){var i=e.memoizedProps;if(Kn(i,r)&&e.ref===t.ref){if(Ha=!1,t.pendingProps=r=i,!fl(e,o))return t.lanes=e.lanes,dl(e,t,o);131072&e.flags&&(Ha=!0)}}return Ya(e,t,n,r,o)}function Ka(e,t,n){var r=t.pendingProps,o=r.children,i=!!(2&t.stateNode._pendingVisibility),a=null!==e?e.memoizedState:null;if(Xa(e,t),"hidden"===r.mode||i){if(128&t.flags){if(r=null!==a?a.baseLanes|n:n,null!==e){for(o=t.child=e.child,i=0;null!==o;)i=i|o.lanes|o.childLanes,o=o.sibling;t.childLanes=i&~r}else t.childLanes=0,t.child=null;return Qa(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Qa(e,t,null!==a?a.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Xo(0,null!==a?a.cachePool:null),null!==a?xo(t,a):Eo(),_o(t)}else null!==a?(Xo(0,a.cachePool),xo(t,a),Mo(),t.memoizedState=null):(null!==e&&Xo(0,null),Eo(),Mo());return Ua(e,t,o,n),t.child}function Qa(e,t,n,r){var o=Qo();return o=null===o?null:{parent:$o._currentValue,pool:o},t.memoizedState={baseLanes:n,cachePool:o},null!==e&&Xo(0,null),Eo(),_o(t),null!==e&&Sl(e,t,r,!0),null}function Xa(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=2097664);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(a(284));null!==e&&e.ref===n||(t.flags|=2097664)}}function Ya(e,t,n,r,o){return Al(t),n=di(e,t,n,r,void 0,o),r=mi(),null===e||Ha?(Qr&&r&&Vr(t),t.flags|=1,Ua(e,t,n,o),t.child):(gi(e,t,o),dl(e,t,o))}function Ja(e,t,n,r,o,i){return Al(t),t.updateQueue=null,n=pi(t,r,n,o),fi(e),r=mi(),null===e||Ha?(Qr&&r&&Vr(t),t.flags|=1,Ua(e,t,n,i),t.child):(gi(e,t,i),dl(e,t,i))}function Za(e,t,n,r,o){if(Al(t),null===t.stateNode){var i=_r,a=n.contextType;"object"==typeof a&&null!==a&&(i=Cl(a)),i=new n(r,i),t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,i.updater=Ta,t.stateNode=i,i._reactInternals=t,(i=t.stateNode).props=r,i.state=t.memoizedState,i.refs={},Ol(t),a=n.contextType,i.context="object"==typeof a&&null!==a?Cl(a):_r,i.state=t.memoizedState,"function"==typeof(a=n.getDerivedStateFromProps)&&(Oa(t,n,a,r),i.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(a=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),a!==i.state&&Ta.enqueueReplaceState(i,i.state,null),zl(t,r,i,o),Dl(),i.state=t.memoizedState),"function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){i=t.stateNode;var l=t.memoizedProps,s=Ma(n,l);i.props=s;var u=i.context,c=n.contextType;a=_r,"object"==typeof c&&null!==c&&(a=Cl(c));var d=n.getDerivedStateFromProps;c="function"==typeof d||"function"==typeof i.getSnapshotBeforeUpdate,l=t.pendingProps!==l,c||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l||u!==a)&&_a(t,i,r,a),Pl=!1;var f=t.memoizedState;i.state=f,zl(t,r,i,o),Dl(),u=t.memoizedState,l||f!==u||Pl?("function"==typeof d&&(Oa(t,n,d,r),u=t.memoizedState),(s=Pl||La(t,n,s,r,f,u,a))?(c||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=a,r=s):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Tl(e,t),c=Ma(n,a=t.memoizedProps),i.props=c,d=t.pendingProps,f=i.context,u=n.contextType,s=_r,"object"==typeof u&&null!==u&&(s=Cl(u)),(u="function"==typeof(l=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(a!==d||f!==s)&&_a(t,i,r,s),Pl=!1,f=t.memoizedState,i.state=f,zl(t,r,i,o),Dl();var p=t.memoizedState;a!==d||f!==p||Pl||null!==e&&null!==e.dependencies&&kl(e.dependencies)?("function"==typeof l&&(Oa(t,n,l,r),p=t.memoizedState),(c=Pl||La(t,n,c,r,f,p,s)||null!==e&&null!==e.dependencies&&kl(e.dependencies))?(u||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,p,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||a===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||a===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),i.props=r,i.state=p,i.context=s,r=c):("function"!=typeof i.componentDidUpdate||a===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||a===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return i=r,Xa(e,t),r=!!(128&t.flags),i||r?(i=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:i.render(),t.flags|=1,null!==e&&r?(t.child=So(t,e.child,null,o),t.child=So(t,null,n,o)):Ua(e,t,n,o),t.memoizedState=i.state,e=t.child):e=dl(e,t,o),e}function el(e,t,n,r){return ro(),t.flags|=256,Ua(e,t,n,r),t.child}var tl={dehydrated:null,treeContext:null,retryLane:0};function nl(e){return{baseLanes:e,cachePool:Yo()}}function rl(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=pu),e}function ol(e,t,n){var r,o=t.pendingProps,i=!1,l=!!(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&No.current)),r&&(i=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(Qr){if(i?Lo(t):Mo(),Qr){var s,u=Kr;if(s=u){e:{for(s=u,u=Yr;8!==s.nodeType;){if(!u){u=null;break e}if(null===(s=ad(s.nextSibling))){u=null;break e}}u=s}null!==u?(t.memoizedState={dehydrated:u,treeContext:null!==Br?{id:Fr,overflow:Wr}:null,retryLane:536870912},(s=Ns(18,null,null,0)).stateNode=u,s.return=t,t.child=s,qr=t,Kr=null,s=!0):s=!1}s||Zr(t)}if(null!==(u=t.memoizedState)&&null!==(u=u.dehydrated))return"$!"===u.data?t.lanes=16:t.lanes=536870912,null;Ro(t)}return u=o.children,o=o.fallback,i?(Mo(),u=al({mode:"hidden",children:u},i=t.mode),o=$s(o,i,n,null),u.return=t,o.return=t,u.sibling=o,t.child=u,(i=t.child).memoizedState=nl(n),i.childLanes=rl(e,r,n),t.memoizedState=tl,o):(Lo(t),il(t,u))}if(null!==(s=e.memoizedState)&&null!==(u=s.dehydrated)){if(l)256&t.flags?(Lo(t),t.flags&=-257,t=ll(e,t,n)):null!==t.memoizedState?(Mo(),t.child=e.child,t.flags|=128,t=null):(Mo(),i=o.fallback,u=t.mode,o=al({mode:"visible",children:o.children},u),(i=$s(i,u,n,null)).flags|=2,o.return=t,i.return=t,o.sibling=i,t.child=o,So(t,e.child,null,n),(o=t.child).memoizedState=nl(n),o.childLanes=rl(e,r,n),t.memoizedState=tl,t=i);else if(Lo(t),"$!"===u.data){if(r=u.nextSibling&&u.nextSibling.dataset)var c=r.dgst;r=c,(o=Error(a(419))).stack="",o.digest=r,oo({value:o,source:null,stack:null}),t=ll(e,t,n)}else if(Ha||Sl(e,t,n,!1),r=!!(n&e.childLanes),Ha||r){if(null!==(r=eu)){if(42&(o=n&-n))o=1;else switch(o){case 2:o=1;break;case 8:o=4;break;case 32:o=16;break;case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:o=64;break;case 268435456:o=134217728;break;default:o=0}if(0!==(o=o&(r.suspendedLanes|n)?0:o)&&o!==s.retryLane)throw s.retryLane=o,Or(e,o),_u(r,0,o),Wa}"$?"===u.data||Hu(),t=ll(e,t,n)}else"$?"===u.data?(t.flags|=128,t.child=e.child,t=ac.bind(null,e),u._reactRetry=t,t=null):(e=s.treeContext,Kr=ad(u.nextSibling),qr=t,Qr=!0,Xr=null,Yr=!1,null!==e&&(jr[$r++]=Fr,jr[$r++]=Wr,jr[$r++]=Br,Fr=e.id,Wr=e.overflow,Br=t),(t=il(t,o.children)).flags|=4096);return t}return i?(Mo(),i=o.fallback,u=t.mode,c=(s=e.child).sibling,(o=zs(s,{mode:"hidden",children:o.children})).subtreeFlags=31457280&s.subtreeFlags,null!==c?i=zs(c,i):(i=$s(i,u,n,null)).flags|=2,i.return=t,o.return=t,o.sibling=i,t.child=o,o=i,i=t.child,null===(u=e.child.memoizedState)?u=nl(n):(null!==(s=u.cachePool)?(c=$o._currentValue,s=s.parent!==c?{parent:c,pool:c}:s):s=Yo(),u={baseLanes:u.baseLanes|n,cachePool:s}),i.memoizedState=u,i.childLanes=rl(e,r,n),t.memoizedState=tl,o):(Lo(t),e=(n=e.child).sibling,(n=zs(n,{mode:"visible",children:o.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function il(e,t){return(t=al({mode:"visible",children:t},e.mode)).return=e,e.child=t}function al(e,t){return Bs(e,t,0,null)}function ll(e,t,n){return So(t,e.child,null,n),(e=il(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function sl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),bl(e.return,t,n)}function ul(e,t,n,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function cl(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Ua(e,t,r.children,n),2&(r=No.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&sl(e,n,t);else if(19===e.tag)sl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(q(No,r),o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Do(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),ul(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Do(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}ul(t,!0,n,null,i);break;case"together":ul(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function dl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),cu|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(Sl(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=zs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=zs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function fl(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!kl(e))}function pl(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)Ha=!0;else{if(!(fl(e,n)||128&t.flags))return Ha=!1,function(e,t,n){switch(t.tag){case 3:J(t,t.stateNode.containerInfo),yl(0,$o,e.memoizedState.cache),ro();break;case 27:case 5:ee(t);break;case 4:J(t,t.stateNode.containerInfo);break;case 10:yl(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(Lo(t),t.flags|=128,null):n&t.child.childLanes?ol(e,t,n):(Lo(t),null!==(e=dl(e,t,n))?e.sibling:null);Lo(t);break;case 19:var o=!!(128&e.flags);if((r=!!(n&t.childLanes))||(Sl(e,t,n,!1),r=!!(n&t.childLanes)),o){if(r)return cl(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),q(No,No.current),r)break;return null;case 22:case 23:return t.lanes=0,Ka(e,t,n);case 24:yl(0,$o,e.memoizedState.cache)}return dl(e,t,n)}(e,t,n);Ha=!!(131072&e.flags)}else Ha=!1,Qr&&1048576&t.flags&&Ur(t,Ir,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,o=r._init;if(r=o(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((o=r.$$typeof)===g){t.tag=11,t=Va(null,t,r,e,n);break e}if(o===b){t.tag=14,t=Ga(null,t,r,e,n);break e}}throw t=E(r)||r,Error(a(306,t,""))}Ds(r)?(e=Ma(r,e),t.tag=1,t=Za(null,t,r,e,n)):(t.tag=0,t=Ya(null,t,r,e,n))}return t;case 0:return Ya(e,t,t.type,t.pendingProps,n);case 1:return Za(e,t,r=t.type,o=Ma(r,t.pendingProps),n);case 3:e:{if(J(t,t.stateNode.containerInfo),null===e)throw Error(a(387));var i=t.pendingProps;r=(o=t.memoizedState).element,Tl(e,t),zl(t,i,null,n);var l=t.memoizedState;if(i=l.cache,yl(0,$o,i),i!==o.cache&&wl(t,[$o],n,!0),Dl(),i=l.element,o.isDehydrated){if(o={element:i,isDehydrated:!1,cache:l.cache},t.updateQueue.baseState=o,t.memoizedState=o,256&t.flags){t=el(e,t,i,n);break e}if(i!==r){oo(r=Rr(Error(a(424)),t)),t=el(e,t,i,n);break e}for(Kr=ad(t.stateNode.containerInfo.firstChild),qr=t,Qr=!0,Xr=null,Yr=!0,n=ko(t,null,i,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ro(),i===r){t=dl(e,t,n);break e}Ua(e,t,i,n)}t=t.child}return t;case 26:return Xa(e,t),null===e?(n=md(t.type,null,t.pendingProps,null))?t.memoizedState=n:Qr||(n=t.type,e=t.pendingProps,(r=Kc(X.current).createElement(n))[Ie]=t,r[je]=e,Vc(r,n,e),Xe(r),t.stateNode=r):t.memoizedState=md(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return ee(t),null===e&&Qr&&(r=t.stateNode=sd(t.type,t.pendingProps,X.current),qr=t,Yr=!0,Kr=ad(r.firstChild)),r=t.pendingProps.children,null!==e||Qr?Ua(e,t,r,n):t.child=So(t,null,r,n),Xa(e,t),t.child;case 5:return null===e&&Qr&&((o=r=Kr)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var o=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Ue])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(i=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(i!==o.rel||e.getAttribute("href")!==(null==o.href?null:o.href)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin)||e.getAttribute("title")!==(null==o.title?null:o.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((i=e.getAttribute("src"))!==(null==o.src?null:o.src)||e.getAttribute("type")!==(null==o.type?null:o.type)||e.getAttribute("crossorigin")!==(null==o.crossOrigin?null:o.crossOrigin))&&i&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var i=null==o.name?null:""+o.name;if("hidden"===o.type&&e.getAttribute("name")===i)return e}if(null===(e=ad(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,Yr))?(t.stateNode=r,qr=t,Kr=ad(r.firstChild),Yr=!1,o=!0):o=!1),o||Zr(t)),ee(t),o=t.type,i=t.pendingProps,l=null!==e?e.memoizedProps:null,r=i.children,Yc(o,i)?r=null:null!==l&&Yc(o,l)&&(t.flags|=32),null!==t.memoizedState&&(o=di(e,t,hi,null,null,n),Dd._currentValue=o),Xa(e,t),Ua(e,t,r,n),t.child;case 6:return null===e&&Qr&&((e=n=Kr)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=ad(e.nextSibling)))return null}return e}(n,t.pendingProps,Yr))?(t.stateNode=n,qr=t,Kr=null,e=!0):e=!1),e||Zr(t)),null;case 13:return ol(e,t,n);case 4:return J(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=So(t,null,r,n):Ua(e,t,r,n),t.child;case 11:return Va(e,t,t.type,t.pendingProps,n);case 7:return Ua(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ua(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,yl(0,t.type,r.value),Ua(e,t,r.children,n),t.child;case 9:return o=t.type._context,r=t.pendingProps.children,Al(t),r=r(o=Cl(o)),t.flags|=1,Ua(e,t,r,n),t.child;case 14:return Ga(e,t,t.type,t.pendingProps,n);case 15:return qa(e,t,t.type,t.pendingProps,n);case 19:return cl(e,t,n);case 22:return Ka(e,t,n);case 24:return Al(t),r=Cl($o),null===e?(null===(o=Qo())&&(o=eu,i=Bo(),o.pooledCache=i,i.refCount++,null!==i&&(o.pooledCacheLanes|=n),o=i),t.memoizedState={parent:r,cache:o},Ol(t),yl(0,$o,o)):(!!(e.lanes&n)&&(Tl(e,t),zl(t,null,null,n),Dl()),o=e.memoizedState,i=t.memoizedState,o.parent!==r?(o={parent:r,cache:r},t.memoizedState=o,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=o),yl(0,$o,r)):(r=i.cache,yl(0,$o,r),r!==o.cache&&wl(t,[$o],n,!0))),Ua(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(a(156,t.tag))}var hl=V(null),ml=null,gl=null;function yl(e,t,n){q(hl,t._currentValue),t._currentValue=n}function vl(e){e._currentValue=hl.current,G(hl)}function bl(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function wl(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){var i=o.dependencies;if(null!==i){var l=o.child;i=i.firstContext;e:for(;null!==i;){var s=i;i=o;for(var u=0;u<t.length;u++)if(s.context===t[u]){i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),bl(i.return,n,e),r||(l=null);break e}i=s.next}}else if(18===o.tag){if(null===(l=o.return))throw Error(a(341));l.lanes|=n,null!==(i=l.alternate)&&(i.lanes|=n),bl(l,n,e),l=null}else l=o.child;if(null!==l)l.return=o;else for(l=o;null!==l;){if(l===e){l=null;break}if(null!==(o=l.sibling)){o.return=l.return,l=o;break}l=l.return}o=l}}function Sl(e,t,n,r){e=null;for(var o=t,i=!1;null!==o;){if(!i)if(524288&o.flags)i=!0;else if(262144&o.flags)break;if(10===o.tag){var l=o.alternate;if(null===l)throw Error(a(387));if(null!==(l=l.memoizedProps)){var s=o.type;qn(o.pendingProps.value,l.value)||(null!==e?e.push(s):e=[s])}}else if(o===Y.current){if(null===(l=o.alternate))throw Error(a(387));l.memoizedState.memoizedState!==o.memoizedState.memoizedState&&(null!==e?e.push(Dd):e=[Dd])}o=o.return}null!==e&&wl(t,e,n,r),t.flags|=262144}function kl(e){for(e=e.firstContext;null!==e;){if(!qn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Al(e){ml=e,gl=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function Cl(e){return El(ml,e)}function xl(e,t){return null===ml&&Al(e),El(e,t)}function El(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===gl){if(null===e)throw Error(a(308));gl=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else gl=gl.next=t;return n}var Pl=!1;function Ol(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function Tl(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function Ll(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function _l(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Zs){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,t=Lr(e),Tr(e,null,n),t}return Er(e,r,t,n),Lr(e)}function Ml(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194176&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Re(e,n)}}function Rl(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var Nl=!1;function Dl(){if(Nl&&null!==Vo)throw Vo}function zl(e,t,n,r){Nl=!1;var o=e.updateQueue;Pl=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var s=l,u=s.next;s.next=null,null===a?i=u:a.next=u,a=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==i){var d=o.baseState;for(a=0,c=u=s=null,l=i;;){var f=-536870913&l.lane,p=f!==l.lane;if(p?(nu&f)===f:(r&f)===f){0!==f&&f===Uo&&(Nl=!0),null!==c&&(c=c.next={lane:0,tag:l.tag,payload:l.payload,callback:null,next:null});e:{var h=e,m=l;f=t;var g=n;switch(m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(g,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=m.payload)?h.call(g,d,f):h))break e;d=L({},d,f);break e;case 2:Pl=!0}}null!==(f=l.callback)&&(e.flags|=64,p&&(e.flags|=8192),null===(p=o.callbacks)?o.callbacks=[f]:p.push(f))}else p={lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=p,s=d):c=c.next=p,a|=f;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(p=l).next,p.next=null,o.lastBaseUpdate=p,o.shared.pending=null}}null===c&&(s=d),o.baseState=s,o.firstBaseUpdate=u,o.lastBaseUpdate=c,null===i&&(o.shared.lanes=0),cu|=a,e.lanes=a,e.memoizedState=d}}function Il(e,t){if("function"!=typeof e)throw Error(a(191,e));e.call(t)}function jl(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)Il(n[e],t)}function $l(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var o=r.next;n=o;do{if((n.tag&e)===e){r=void 0;var i=n.create,a=n.inst;r=i(),a.destroy=r}n=n.next}while(n!==o)}}catch(e){nc(t,t.return,e)}}function Bl(e,t,n){try{var r=t.updateQueue,o=null!==r?r.lastEffect:null;if(null!==o){var i=o.next;r=i;do{if((r.tag&e)===e){var a=r.inst,l=a.destroy;if(void 0!==l){a.destroy=void 0,o=t;var s=n;try{l()}catch(e){nc(o,s,e)}}}r=r.next}while(r!==i)}}catch(e){nc(t,t.return,e)}}function Fl(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{jl(t,n)}catch(t){nc(e,e.return,t)}}}function Wl(e,t,n){n.props=Ma(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){nc(e,t,n)}}function Hl(e,t){try{var n=e.ref;if(null!==n){var r=e.stateNode;switch(e.tag){case 26:case 27:case 5:var o=r;break;default:o=r}"function"==typeof n?e.refCleanup=n(o):n.current=o}}catch(n){nc(e,t,n)}}function Ul(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){nc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){nc(e,t,n)}else n.current=null}function Vl(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){nc(e,e.return,t)}}function Gl(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var o=null,i=null,l=null,s=null,u=null,c=null,d=null;for(h in n){var f=n[h];if(n.hasOwnProperty(h)&&null!=f)switch(h){case"checked":case"value":break;case"defaultValue":u=f;default:r.hasOwnProperty(h)||Hc(e,t,h,null,r,f)}}for(var p in r){var h=r[p];if(f=n[p],r.hasOwnProperty(p)&&(null!=h||null!=f))switch(p){case"type":i=h;break;case"name":o=h;break;case"checked":c=h;break;case"defaultChecked":d=h;break;case"value":l=h;break;case"defaultValue":s=h;break;case"children":case"dangerouslySetInnerHTML":if(null!=h)throw Error(a(137,t));break;default:h!==f&&Hc(e,t,p,h,r,f)}}return void mt(e,l,s,u,c,d,i,o);case"select":for(i in h=l=s=p=null,n)if(u=n[i],n.hasOwnProperty(i)&&null!=u)switch(i){case"value":break;case"multiple":h=u;default:r.hasOwnProperty(i)||Hc(e,t,i,null,r,u)}for(o in r)if(i=r[o],u=n[o],r.hasOwnProperty(o)&&(null!=i||null!=u))switch(o){case"value":p=i;break;case"defaultValue":s=i;break;case"multiple":l=i;default:i!==u&&Hc(e,t,o,i,r,u)}return t=s,n=l,r=h,void(null!=p?vt(e,!!n,p,!1):!!r!=!!n&&(null!=t?vt(e,!!n,t,!0):vt(e,!!n,n?[]:"",!1)));case"textarea":for(s in h=p=null,n)if(o=n[s],n.hasOwnProperty(s)&&null!=o&&!r.hasOwnProperty(s))switch(s){case"value":case"children":break;default:Hc(e,t,s,null,r,o)}for(l in r)if(o=r[l],i=n[l],r.hasOwnProperty(l)&&(null!=o||null!=i))switch(l){case"value":p=o;break;case"defaultValue":h=o;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=o)throw Error(a(91));break;default:o!==i&&Hc(e,t,l,o,r,i)}return void bt(e,p,h);case"option":for(var m in n)p=n[m],n.hasOwnProperty(m)&&null!=p&&!r.hasOwnProperty(m)&&("selected"===m?e.selected=!1:Hc(e,t,m,null,r,p));for(u in r)p=r[u],h=n[u],!r.hasOwnProperty(u)||p===h||null==p&&null==h||("selected"===u?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Hc(e,t,u,p,r,h));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&Hc(e,t,g,null,r,p);for(c in r)if(p=r[c],h=n[c],r.hasOwnProperty(c)&&p!==h&&(null!=p||null!=h))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(a(137,t));break;default:Hc(e,t,c,p,r,h)}return;default:if(xt(t)){for(var y in n)p=n[y],n.hasOwnProperty(y)&&void 0!==p&&!r.hasOwnProperty(y)&&Uc(e,t,y,void 0,r,p);for(d in r)p=r[d],h=n[d],!r.hasOwnProperty(d)||p===h||void 0===p&&void 0===h||Uc(e,t,d,p,r,h);return}}for(var v in n)p=n[v],n.hasOwnProperty(v)&&null!=p&&!r.hasOwnProperty(v)&&Hc(e,t,v,null,r,p);for(f in r)p=r[f],h=n[f],!r.hasOwnProperty(f)||p===h||null==p&&null==h||Hc(e,t,f,p,r,h)}(r,e.type,n,t),r[je]=t}catch(t){nc(e,e.return,t)}}function ql(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag||4===e.tag}function Kl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ql(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&27!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Ql(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Wc));else if(4!==r&&27!==r&&null!==(e=e.child))for(Ql(e,t,n),e=e.sibling;null!==e;)Ql(e,t,n),e=e.sibling}function Xl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&27!==r&&null!==(e=e.child))for(Xl(e,t,n),e=e.sibling;null!==e;)Xl(e,t,n),e=e.sibling}var Yl=!1,Jl=!1,Zl=!1,es="function"==typeof WeakSet?WeakSet:Set,ts=null,ns=!1;function rs(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:gs(e,n),4&r&&$l(5,n);break;case 1:if(gs(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){nc(n,n.return,e)}else{var o=Ma(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(o,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){nc(n,n.return,e)}}64&r&&Fl(n),512&r&&Hl(n,n.return);break;case 3:if(gs(e,n),64&r&&null!==(r=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:e=n.child.stateNode}try{jl(r,e)}catch(e){nc(n,n.return,e)}}break;case 26:gs(e,n),512&r&&Hl(n,n.return);break;case 27:case 5:gs(e,n),null===t&&4&r&&Vl(n),512&r&&Hl(n,n.return);break;case 12:default:gs(e,n);break;case 13:gs(e,n),4&r&&us(e,n);break;case 22:if(!(o=null!==n.memoizedState||Yl)){t=null!==t&&null!==t.memoizedState||Jl;var i=Yl,a=Jl;Yl=o,(Jl=t)&&!a?vs(e,n,!!(8772&n.subtreeFlags)):gs(e,n),Yl=i,Jl=a}512&r&&("manual"===n.memoizedProps.mode?Hl(n,n.return):Ul(n,n.return))}}function os(e){var t=e.alternate;null!==t&&(e.alternate=null,os(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&Ve(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var is=null,as=!1;function ls(e,t,n){for(n=n.child;null!==n;)ss(e,t,n),n=n.sibling}function ss(e,t,n){if(ye&&"function"==typeof ye.onCommitFiberUnmount)try{ye.onCommitFiberUnmount(ge,n)}catch(e){}switch(n.tag){case 26:Jl||Ul(n,t),ls(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:Jl||Ul(n,t);var r=is,o=as;for(is=n.stateNode,ls(e,t,n),t=(n=n.stateNode).attributes;t.length;)n.removeAttributeNode(t[0]);Ve(n),is=r,as=o;break;case 5:Jl||Ul(n,t);case 6:o=is;var i=as;if(is=null,ls(e,t,n),as=i,null!==(is=o))if(as)try{e=is,r=n.stateNode,8===e.nodeType?e.parentNode.removeChild(r):e.removeChild(r)}catch(e){nc(n,t,e)}else try{is.removeChild(n.stateNode)}catch(e){nc(n,t,e)}break;case 18:null!==is&&(as?(t=is,n=n.stateNode,8===t.nodeType?od(t.parentNode,n):1===t.nodeType&&od(t,n),pf(t)):od(is,n.stateNode));break;case 4:r=is,o=as,is=n.stateNode.containerInfo,as=!0,ls(e,t,n),is=r,as=o;break;case 0:case 11:case 14:case 15:Jl||Bl(2,n,t),Jl||Bl(4,n,t),ls(e,t,n);break;case 1:Jl||(Ul(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&Wl(n,t,r)),ls(e,t,n);break;case 21:ls(e,t,n);break;case 22:Jl||Ul(n,t),Jl=(r=Jl)||null!==n.memoizedState,ls(e,t,n),Jl=r;break;default:ls(e,t,n)}}function us(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{pf(e)}catch(e){nc(t,t.return,e)}}function cs(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new es),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new es),t;default:throw Error(a(435,e.tag))}}(e);t.forEach((function(t){var r=lc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function ds(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r],i=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 27:case 5:is=s.stateNode,as=!1;break e;case 3:case 4:is=s.stateNode.containerInfo,as=!0;break e}s=s.return}if(null===is)throw Error(a(160));ss(i,l,o),is=null,as=!1,null!==(i=o.alternate)&&(i.return=null),o.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)ps(t,e),t=t.sibling}var fs=null;function ps(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:ds(t,e),hs(e),4&r&&(Bl(3,e,e.return),$l(3,e),Bl(5,e,e.return));break;case 1:ds(t,e),hs(e),512&r&&(Jl||null===n||Ul(n,n.return)),64&r&&Yl&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var o=fs;if(ds(t,e),hs(e),512&r&&(Jl||null===n||Ul(n,n.return)),4&r){var i=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,o=o.ownerDocument||o;t:switch(r){case"title":(!(i=o.getElementsByTagName("title")[0])||i[Ue]||i[Ie]||"http://www.w3.org/2000/svg"===i.namespaceURI||i.hasAttribute("itemprop"))&&(i=o.createElement(r),o.head.insertBefore(i,o.querySelector("head > title"))),Vc(i,r,n),i[Ie]=e,Xe(i),r=i;break e;case"link":var l=Ed("link","href",o).get(r+(n.href||""));if(l)for(var s=0;s<l.length;s++)if((i=l[s]).getAttribute("href")===(null==n.href?null:n.href)&&i.getAttribute("rel")===(null==n.rel?null:n.rel)&&i.getAttribute("title")===(null==n.title?null:n.title)&&i.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){l.splice(s,1);break t}Vc(i=o.createElement(r),r,n),o.head.appendChild(i);break;case"meta":if(l=Ed("meta","content",o).get(r+(n.content||"")))for(s=0;s<l.length;s++)if((i=l[s]).getAttribute("content")===(null==n.content?null:""+n.content)&&i.getAttribute("name")===(null==n.name?null:n.name)&&i.getAttribute("property")===(null==n.property?null:n.property)&&i.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&i.getAttribute("charset")===(null==n.charSet?null:n.charSet)){l.splice(s,1);break t}Vc(i=o.createElement(r),r,n),o.head.appendChild(i);break;default:throw Error(a(468,r))}i[Ie]=e,Xe(i),r=i}e.stateNode=r}else Pd(o,e.type,e.stateNode);else e.stateNode=Sd(o,r,e.memoizedProps);else i!==r?(null===i?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):i.count--,null===r?Pd(o,e.type,e.stateNode):Sd(o,r,e.memoizedProps)):null===r&&null!==e.stateNode&&Gl(e,e.memoizedProps,n.memoizedProps)}break;case 27:if(4&r&&null===e.alternate){o=e.stateNode,i=e.memoizedProps;try{for(var u=o.firstChild;u;){var c=u.nextSibling,d=u.nodeName;u[Ue]||"HEAD"===d||"BODY"===d||"SCRIPT"===d||"STYLE"===d||"LINK"===d&&"stylesheet"===u.rel.toLowerCase()||o.removeChild(u),u=c}for(var f=e.type,p=o.attributes;p.length;)o.removeAttributeNode(p[0]);Vc(o,f,i),o[Ie]=e,o[je]=i}catch(t){nc(e,e.return,t)}}case 5:if(ds(t,e),hs(e),512&r&&(Jl||null===n||Ul(n,n.return)),32&e.flags){o=e.stateNode;try{St(o,"")}catch(t){nc(e,e.return,t)}}4&r&&null!=e.stateNode&&Gl(e,o=e.memoizedProps,null!==n?n.memoizedProps:o),1024&r&&(Zl=!0);break;case 6:if(ds(t,e),hs(e),4&r){if(null===e.stateNode)throw Error(a(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){nc(e,e.return,t)}}break;case 3:if(xd=null,o=fs,fs=dd(t.containerInfo),ds(t,e),fs=o,hs(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{pf(t.containerInfo)}catch(t){nc(e,e.return,t)}Zl&&(Zl=!1,ms(e));break;case 4:r=fs,fs=dd(e.stateNode.containerInfo),ds(t,e),hs(e),fs=r;break;case 12:ds(t,e),hs(e);break;case 13:ds(t,e),hs(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(vu=le()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,cs(e,r));break;case 22:if(512&r&&(Jl||null===n||Ul(n,n.return)),u=null!==e.memoizedState,c=null!==n&&null!==n.memoizedState,Yl=(d=Yl)||u,Jl=(f=Jl)||c,ds(t,e),Jl=f,Yl=d,hs(e),(t=e.stateNode)._current=e,t._visibility&=-3,t._visibility|=2&t._pendingVisibility,8192&r&&(t._visibility=u?-2&t._visibility:1|t._visibility,u&&(t=Yl||Jl,null===n||c||t||ys(e)),null===e.memoizedProps||"manual"!==e.memoizedProps.mode))e:for(n=null,t=e;;){if(5===t.tag||26===t.tag||27===t.tag){if(null===n){c=n=t;try{if(o=c.stateNode,u)"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none";else{l=c.stateNode;var h=null!=(s=c.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null;l.style.display=null==h||"boolean"==typeof h?"":(""+h).trim()}}catch(e){nc(c,c.return,e)}}}else if(6===t.tag){if(null===n){c=t;try{c.stateNode.nodeValue=u?"":c.memoizedProps}catch(e){nc(c,c.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,cs(e,n));break;case 19:ds(t,e),hs(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,cs(e,r));break;case 21:break;default:ds(t,e),hs(e)}}function hs(e){var t=e.flags;if(2&t){try{if(27!==e.tag){e:{for(var n=e.return;null!==n;){if(ql(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 27:var o=r.stateNode;Xl(e,Kl(e),o);break;case 5:var i=r.stateNode;32&r.flags&&(St(i,""),r.flags&=-33),Xl(e,Kl(e),i);break;case 3:case 4:var l=r.stateNode.containerInfo;Ql(e,Kl(e),l);break;default:throw Error(a(161))}}}catch(t){nc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function ms(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;ms(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function gs(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)rs(e,t.alternate,t),t=t.sibling}function ys(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:Bl(4,t,t.return),ys(t);break;case 1:Ul(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&Wl(t,t.return,n),ys(t);break;case 26:case 27:case 5:Ul(t,t.return),ys(t);break;case 22:Ul(t,t.return),null===t.memoizedState&&ys(t);break;default:ys(t)}e=e.sibling}}function vs(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,o=e,i=t,a=i.flags;switch(i.tag){case 0:case 11:case 15:vs(o,i,n),$l(4,i);break;case 1:if(vs(o,i,n),"function"==typeof(o=(r=i).stateNode).componentDidMount)try{o.componentDidMount()}catch(e){nc(r,r.return,e)}if(null!==(o=(r=i).updateQueue)){var l=r.stateNode;try{var s=o.shared.hiddenCallbacks;if(null!==s)for(o.shared.hiddenCallbacks=null,o=0;o<s.length;o++)Il(s[o],l)}catch(e){nc(r,r.return,e)}}n&&64&a&&Fl(i),Hl(i,i.return);break;case 26:case 27:case 5:vs(o,i,n),n&&null===r&&4&a&&Vl(i),Hl(i,i.return);break;case 12:default:vs(o,i,n);break;case 13:vs(o,i,n),n&&4&a&&us(o,i);break;case 22:null===i.memoizedState&&vs(o,i,n),Hl(i,i.return)}t=t.sibling}}function bs(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&Fo(n))}function ws(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Fo(e))}function Ss(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)ks(e,t,n,r),t=t.sibling}function ks(e,t,n,r){var o=t.flags;switch(t.tag){case 0:case 11:case 15:Ss(e,t,n,r),2048&o&&$l(9,t);break;case 3:Ss(e,t,n,r),2048&o&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Fo(e)));break;case 12:if(2048&o){Ss(e,t,n,r),e=t.stateNode;try{var i=t.memoizedProps,a=i.id,l=i.onPostCommit;"function"==typeof l&&l(a,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){nc(t,t.return,e)}}else Ss(e,t,n,r);break;case 23:break;case 22:i=t.stateNode,null!==t.memoizedState?4&i._visibility?Ss(e,t,n,r):Cs(e,t):4&i._visibility?Ss(e,t,n,r):(i._visibility|=4,As(e,t,n,r,!!(10256&t.subtreeFlags))),2048&o&&bs(t.alternate,t);break;case 24:Ss(e,t,n,r),2048&o&&ws(t.alternate,t);break;default:Ss(e,t,n,r)}}function As(e,t,n,r,o){for(o=o&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var i=e,a=t,l=n,s=r,u=a.flags;switch(a.tag){case 0:case 11:case 15:As(i,a,l,s,o),$l(8,a);break;case 23:break;case 22:var c=a.stateNode;null!==a.memoizedState?4&c._visibility?As(i,a,l,s,o):Cs(i,a):(c._visibility|=4,As(i,a,l,s,o)),o&&2048&u&&bs(a.alternate,a);break;case 24:As(i,a,l,s,o),o&&2048&u&&ws(a.alternate,a);break;default:As(i,a,l,s,o)}t=t.sibling}}function Cs(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,o=r.flags;switch(r.tag){case 22:Cs(n,r),2048&o&&bs(r.alternate,r);break;case 24:Cs(n,r),2048&o&&ws(r.alternate,r);break;default:Cs(n,r)}t=t.sibling}}var xs=8192;function Es(e){if(e.subtreeFlags&xs)for(e=e.child;null!==e;)Ps(e),e=e.sibling}function Ps(e){switch(e.tag){case 26:Es(e),e.flags&xs&&null!==e.memoizedState&&function(e,t,n){if(null===Td)throw Error(a(475));var r=Td;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var o=gd(n.href),i=e.querySelector(yd(o));if(i)return null!==(e=i._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=_d.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=i,void Xe(i);i=e.ownerDocument||e,n=vd(n),(o=ud.get(o))&&Ad(n,o),Xe(i=i.createElement("link"));var l=i;l._p=new Promise((function(e,t){l.onload=e,l.onerror=t})),Vc(i,"link",n),t.instance=i}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=_d.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(fs,e.memoizedState,e.memoizedProps);break;case 5:default:Es(e);break;case 3:case 4:var t=fs;fs=dd(e.stateNode.containerInfo),Es(e),fs=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=xs,xs=16777216,Es(e),xs=t):Es(e))}}function Os(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Ts(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ts=r,Ms(r,e)}Os(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Ls(e),e=e.sibling}function Ls(e){switch(e.tag){case 0:case 11:case 15:Ts(e),2048&e.flags&&Bl(9,e,e.return);break;case 3:case 12:default:Ts(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&4&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-5,_s(e)):Ts(e)}}function _s(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];ts=r,Ms(r,e)}Os(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:Bl(8,t,t.return),_s(t);break;case 22:4&(n=t.stateNode)._visibility&&(n._visibility&=-5,_s(t));break;default:_s(t)}e=e.sibling}}function Ms(e,t){for(;null!==ts;){var n=ts;switch(n.tag){case 0:case 11:case 15:Bl(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Fo(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,ts=r;else e:for(n=e;null!==ts;){var o=(r=ts).sibling,i=r.return;if(os(r),r===n){ts=null;break e}if(null!==o){o.return=i,ts=o;break e}ts=i}}}function Rs(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ns(e,t,n,r){return new Rs(e,t,n,r)}function Ds(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zs(e,t){var n=e.alternate;return null===n?((n=Ns(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=31457280&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Is(e,t){e.flags&=31457282;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function js(e,t,n,r,o,i){var l=0;if(r=e,"function"==typeof e)Ds(e)&&(l=1);else if("string"==typeof e)l=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,K.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case c:return $s(n.children,o,i,t);case d:l=8,o|=24;break;case f:return(e=Ns(12,n,t,2|o)).elementType=f,e.lanes=i,e;case y:return(e=Ns(13,n,t,o)).elementType=y,e.lanes=i,e;case v:return(e=Ns(19,n,t,o)).elementType=v,e.lanes=i,e;case S:return Bs(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case p:case m:l=10;break e;case h:l=9;break e;case g:l=11;break e;case b:l=14;break e;case w:l=16,r=null;break e}l=29,n=Error(a(130,null===e?"null":typeof e,"")),r=null}return(t=Ns(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function $s(e,t,n,r){return(e=Ns(7,e,r,t)).lanes=n,e}function Bs(e,t,n,r){(e=Ns(22,e,r,t)).elementType=S,e.lanes=n;var o={_visibility:1,_pendingVisibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null,_current:null,detach:function(){var e=o._current;if(null===e)throw Error(a(456));if(!(2&o._pendingVisibility)){var t=Or(e,2);null!==t&&(o._pendingVisibility|=2,_u(t,0,2))}},attach:function(){var e=o._current;if(null===e)throw Error(a(456));if(2&o._pendingVisibility){var t=Or(e,2);null!==t&&(o._pendingVisibility&=-3,_u(t,0,2))}}};return e.stateNode=o,e}function Fs(e,t,n){return(e=Ns(6,e,null,t)).lanes=n,e}function Ws(e,t,n){return(t=Ns(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Hs(e){e.flags|=4}function Us(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!Od(t)){if(null!==(t=Oo.current)&&((4194176&nu)===nu?null!==To:(62914560&nu)!==nu&&!(536870912&nu)||t!==To))throw fo=lo,ao;e.flags|=8192}}function Vs(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?Te():536870912,e.lanes|=t,hu|=t)}function Gs(e,t){if(!Qr)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function qs(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=31457280&o.subtreeFlags,r|=31457280&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ks(e,t,n){var r=t.pendingProps;switch(Gr(t),t.tag){case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return qs(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),vl($o),Z(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(no(t)?Hs(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==Xr&&(Ru(Xr),Xr=null))),qs(t),null;case 26:return n=t.memoizedState,null===e?(Hs(t),null!==n?(qs(t),Us(t,n)):(qs(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Hs(t),qs(t),Us(t,n)):(qs(t),t.flags&=-16777217):(e.memoizedProps!==r&&Hs(t),qs(t),t.flags&=-16777217),null;case 27:te(t),n=X.current;var o=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Hs(t);else{if(!r){if(null===t.stateNode)throw Error(a(166));return qs(t),null}e=K.current,no(t)?eo(t):(e=sd(o,r,n),t.stateNode=e,Hs(t))}return qs(t),null;case 5:if(te(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Hs(t);else{if(!r){if(null===t.stateNode)throw Error(a(166));return qs(t),null}if(e=K.current,no(t))eo(t);else{switch(o=Kc(X.current),e){case 1:e=o.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=o.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=o.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=o.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=o.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?o.createElement("select",{is:r.is}):o.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?o.createElement(n,{is:r.is}):o.createElement(n)}}e[Ie]=t,e[je]=r;e:for(o=t.child;null!==o;){if(5===o.tag||6===o.tag)e.appendChild(o.stateNode);else if(4!==o.tag&&27!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break e;for(;null===o.sibling;){if(null===o.return||o.return===t)break e;o=o.return}o.sibling.return=o.return,o=o.sibling}t.stateNode=e;e:switch(Vc(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Hs(t)}}return qs(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Hs(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(e=X.current,no(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(o=qr))switch(o.tag){case 27:case 5:r=o.memoizedProps}e[Ie]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Fc(e.nodeValue,n)))||Zr(t)}else(e=Kc(e).createTextNode(r))[Ie]=t,t.stateNode=e}return qs(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(o=no(t),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error(a(318));if(!(o=null!==(o=t.memoizedState)?o.dehydrated:null))throw Error(a(317));o[Ie]=t}else ro(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;qs(t),o=!1}else null!==Xr&&(Ru(Xr),Xr=null),o=!0;if(!o)return 256&t.flags?(Ro(t),t):(Ro(t),null)}if(Ro(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){o=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(o=r.alternate.memoizedState.cachePool.pool);var i=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(i=r.memoizedState.cachePool.pool),i!==o&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),Vs(t,t.updateQueue),qs(t),null;case 4:return Z(),null===e&&_c(t.stateNode.containerInfo),qs(t),null;case 10:return vl(t.type),qs(t),null;case 19:if(G(No),null===(o=t.memoizedState))return qs(t),null;if(r=!!(128&t.flags),null===(i=o.rendering))if(r)Gs(o,!1);else{if(0!==uu||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(i=Do(e))){for(t.flags|=128,Gs(o,!1),e=i.updateQueue,t.updateQueue=e,Vs(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Is(n,e),n=n.sibling;return q(No,1&No.current|2),t.child}e=e.sibling}null!==o.tail&&le()>bu&&(t.flags|=128,r=!0,Gs(o,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=Do(i))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,Vs(t,e),Gs(o,!0),null===o.tail&&"hidden"===o.tailMode&&!i.alternate&&!Qr)return qs(t),null}else 2*le()-o.renderingStartTime>bu&&536870912!==n&&(t.flags|=128,r=!0,Gs(o,!1),t.lanes=4194304);o.isBackwards?(i.sibling=t.child,t.child=i):(null!==(e=o.last)?e.sibling=i:t.child=i,o.last=i)}return null!==o.tail?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=le(),t.sibling=null,e=No.current,q(No,r?1&e|2:1&e),t):(qs(t),null);case 22:case 23:return Ro(t),Po(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(qs(t),6&t.subtreeFlags&&(t.flags|=8192)):qs(t),null!==(n=t.updateQueue)&&Vs(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&G(Ko),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),vl($o),qs(t),null;case 25:return null}throw Error(a(156,t.tag))}function Qs(e,t){switch(Gr(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return vl($o),Z(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return te(t),null;case 13:if(Ro(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ro()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return G(No),null;case 4:return Z(),null;case 10:return vl(t.type),null;case 22:case 23:return Ro(t),Po(),null!==e&&G(Ko),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return vl($o),null;default:return null}}function Xs(e,t){switch(Gr(t),t.tag){case 3:vl($o),Z();break;case 26:case 27:case 5:te(t);break;case 4:Z();break;case 13:Ro(t);break;case 19:G(No);break;case 10:vl(t.type);break;case 22:case 23:Ro(t),Po(),null!==e&&G(Ko);break;case 24:vl($o)}}var Ys={getCacheForType:function(e){var t=Cl($o),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},Js="function"==typeof WeakMap?WeakMap:Map,Zs=0,eu=null,tu=null,nu=0,ru=0,ou=null,iu=!1,au=!1,lu=!1,su=0,uu=0,cu=0,du=0,fu=0,pu=0,hu=0,mu=null,gu=null,yu=!1,vu=0,bu=1/0,wu=null,Su=null,ku=!1,Au=null,Cu=0,xu=0,Eu=null,Pu=0,Ou=null;function Tu(){return 2&Zs&&0!==nu?nu&-nu:null!==T.T?0!==Uo?Uo:wc():De()}function Lu(){0===pu&&(pu=536870912&nu&&!Qr?536870912:Oe());var e=Oo.current;return null!==e&&(e.flags|=32),pu}function _u(e,t,n){(e===eu&&2===ru||null!==e.cancelPendingCommit)&&($u(e,0),zu(e,nu,pu,!1)),_e(e,n),2&Zs&&e===eu||(e===eu&&(!(2&Zs)&&(du|=n),4===uu&&zu(e,nu,pu,!1)),hc(e))}function Mu(e,t,n){if(6&Zs)throw Error(a(327));for(var r=!n&&!(60&t)&&!(t&e.expiredLanes)||Ee(e,t),o=r?function(e,t){var n=Zs;Zs|=2;var r=Fu(),o=Wu();eu!==e||nu!==t?(wu=null,bu=le()+500,$u(e,t)):au=Ee(e,t);e:for(;;)try{if(0!==ru&&null!==tu){t=tu;var i=ou;t:switch(ru){case 1:ru=0,ou=null,Qu(e,t,i,1);break;case 2:if(so(i)){ru=0,ou=null,Ku(t);break}t=function(){2===ru&&eu===e&&(ru=7),hc(e)},i.then(t,t);break e;case 3:ru=7;break e;case 4:ru=5;break e;case 7:so(i)?(ru=0,ou=null,Ku(t)):(ru=0,ou=null,Qu(e,t,i,7));break;case 5:var l=null;switch(tu.tag){case 26:l=tu.memoizedState;case 5:case 27:var s=tu;if(!l||Od(l)){ru=0,ou=null;var u=s.sibling;if(null!==u)tu=u;else{var c=s.return;null!==c?(tu=c,Xu(c)):tu=null}break t}}ru=0,ou=null,Qu(e,t,i,5);break;case 6:ru=0,ou=null,Qu(e,t,i,6);break;case 8:ju(),uu=6;break e;default:throw Error(a(462))}}Gu();break}catch(t){Bu(e,t)}return gl=ml=null,T.H=r,T.A=o,Zs=n,null!==tu?0:(eu=null,nu=0,xr(),uu)}(e,t):Uu(e,t,!0),i=r;;){if(0===o){au&&!r&&zu(e,t,0,!1);break}if(6===o)zu(e,t,0,!iu);else{if(n=e.current.alternate,i&&!Du(n)){o=Uu(e,t,!1),i=!1;continue}if(2===o){if(i=t,e.errorRecoveryDisabledLanes&i)var l=0;else l=0!=(l=-536870913&e.pendingLanes)?l:536870912&l?536870912:0;if(0!==l){t=l;e:{var s=e;o=mu;var u=s.current.memoizedState.isDehydrated;if(u&&($u(s,l).flags|=256),2!==(l=Uu(s,l,!1))){if(lu&&!u){s.errorRecoveryDisabledLanes|=i,du|=i,o=4;break e}i=gu,gu=o,null!==i&&Ru(i)}o=l}if(i=!1,2!==o)continue}}if(1===o){$u(e,0),zu(e,t,0,!0);break}e:{switch(r=e,o){case 0:case 1:throw Error(a(345));case 4:if((4194176&t)===t){zu(r,t,pu,!iu);break e}break;case 2:gu=null;break;case 3:case 5:break;default:throw Error(a(329))}if(r.finishedWork=n,r.finishedLanes=t,(62914560&t)===t&&10<(i=vu+300-le())){if(zu(r,t,pu,!iu),0!==xe(r,0))break e;r.timeoutHandle=Zc(Nu.bind(null,r,n,gu,wu,yu,t,pu,du,hu,iu,2,-0,0),i)}else Nu(r,n,gu,wu,yu,t,pu,du,hu,iu,0,-0,0)}}break}hc(e)}function Ru(e){null===gu?gu=e:gu.push.apply(gu,e)}function Nu(e,t,n,r,o,i,l,s,u,c,d,f,p){var h=t.subtreeFlags;if((8192&h||!(16785408&~h))&&(Td={stylesheets:null,count:0,unsuspend:Ld},Ps(t),null!==(t=function(){if(null===Td)throw Error(a(475));var e=Td;return e.stylesheets&&0===e.count&&Rd(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&Rd(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=t(Ju.bind(null,e,n,r,o,l,s,u,1,f,p)),void zu(e,i,l,!c);Ju(e,n,r,o,l,s,u)}function Du(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!qn(i(),o))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function zu(e,t,n,r){t&=~fu,t&=~du,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var o=t;0<o;){var i=31-be(o),a=1<<i;r[i]=-1,o&=~a}0!==n&&Me(e,n,t)}function Iu(){return!!(6&Zs)||(mc(0,!1),!1)}function ju(){if(null!==tu){if(0===ru)var e=tu.return;else gl=ml=null,yi(e=tu),ho=null,mo=0,e=tu;for(;null!==e;)Xs(e.alternate,e),e=e.return;tu=null}}function $u(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,ed(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),ju(),eu=e,tu=n=zs(e.current,null),nu=t,ru=0,ou=null,iu=!1,au=Ee(e,t),lu=!1,hu=pu=fu=du=cu=uu=0,gu=mu=null,yu=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var o=31-be(r),i=1<<o;t|=e[o],r&=~i}return su=t,xr(),n}function Bu(e,t){Zo=null,T.H=Ca,t===io?(t=po(),ru=3):t===ao?(t=po(),ru=4):ru=t===Wa?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,ou=t,null===tu&&(uu=1,Ia(e,Rr(t,e.current)))}function Fu(){var e=T.H;return T.H=Ca,null===e?Ca:e}function Wu(){var e=T.A;return T.A=Ys,e}function Hu(){uu=4,iu||(4194176&nu)!==nu&&null!==Oo.current||(au=!0),!(134217727&cu)&&!(134217727&du)||null===eu||zu(eu,nu,pu,!1)}function Uu(e,t,n){var r=Zs;Zs|=2;var o=Fu(),i=Wu();eu===e&&nu===t||(wu=null,$u(e,t)),t=!1;var a=uu;e:for(;;)try{if(0!==ru&&null!==tu){var l=tu,s=ou;switch(ru){case 8:ju(),a=6;break e;case 3:case 2:case 6:null===Oo.current&&(t=!0);var u=ru;if(ru=0,ou=null,Qu(e,l,s,u),n&&au){a=0;break e}break;default:u=ru,ru=0,ou=null,Qu(e,l,s,u)}}Vu(),a=uu;break}catch(t){Bu(e,t)}return t&&e.shellSuspendCounter++,gl=ml=null,Zs=r,T.H=o,T.A=i,null===tu&&(eu=null,nu=0,xr()),a}function Vu(){for(;null!==tu;)qu(tu)}function Gu(){for(;null!==tu&&!ie();)qu(tu)}function qu(e){var t=pl(e.alternate,e,su);e.memoizedProps=e.pendingProps,null===t?Xu(e):tu=t}function Ku(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Ja(n,t,t.pendingProps,t.type,void 0,nu);break;case 11:t=Ja(n,t,t.pendingProps,t.type.render,t.ref,nu);break;case 5:yi(t);default:Xs(n,t),t=pl(n,t=tu=Is(t,su),su)}e.memoizedProps=e.pendingProps,null===t?Xu(e):tu=t}function Qu(e,t,n,r){gl=ml=null,yi(t),ho=null,mo=0;var o=t.return;try{if(function(e,t,n,r,o){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&Sl(t,n,o,!0),null!==(n=Oo.current)){switch(n.tag){case 13:return null===To?Hu():null===n.alternate&&0===uu&&(uu=3),n.flags&=-257,n.flags|=65536,n.lanes=o,r===lo?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),rc(e,r,o)),!1;case 22:return n.flags|=65536,r===lo?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),rc(e,r,o)),!1}throw Error(a(435,n.tag))}return rc(e,r,o),Hu(),!1}if(Qr)return null!==(t=Oo.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=o,r!==Jr&&oo(Rr(e=Error(a(422),{cause:r}),n))):(r!==Jr&&oo(Rr(t=Error(a(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,o&=-o,e.lanes|=o,r=Rr(r,n),Rl(e,o=$a(e.stateNode,r,o)),4!==uu&&(uu=2)),!1;var i=Error(a(520),{cause:r});if(i=Rr(i,n),null===mu?mu=[i]:mu.push(i),4!==uu&&(uu=2),null===t)return!0;r=Rr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=o&-o,n.lanes|=e,Rl(n,e=$a(n.stateNode,r,e)),!1;case 1:if(t=n.type,i=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===i||"function"!=typeof i.componentDidCatch||null!==Su&&Su.has(i))))return n.flags|=65536,o&=-o,n.lanes|=o,Fa(o=Ba(o),e,n,r),Rl(n,o),!1}n=n.return}while(null!==n);return!1}(e,o,t,n,nu))return uu=1,Ia(e,Rr(n,e.current)),void(tu=null)}catch(t){if(null!==o)throw tu=o,t;return uu=1,Ia(e,Rr(n,e.current)),void(tu=null)}32768&t.flags?(Qr||1===r?e=!0:au||536870912&nu?e=!1:(iu=e=!0,(2===r||3===r||6===r)&&null!==(r=Oo.current)&&13===r.tag&&(r.flags|=16384)),Yu(t,e)):Xu(t)}function Xu(e){var t=e;do{if(32768&t.flags)return void Yu(t,iu);e=t.return;var n=Ks(t.alternate,t,su);if(null!==n)return void(tu=n);if(null!==(t=t.sibling))return void(tu=t);tu=t=e}while(null!==t);0===uu&&(uu=5)}function Yu(e,t){do{var n=Qs(e.alternate,e);if(null!==n)return n.flags&=32767,void(tu=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(tu=e);tu=e=n}while(null!==e);uu=6,tu=null}function Ju(e,t,n,r,o,i,l,s,u,c){var d=T.T,f=F.p;try{F.p=2,T.T=null,function(e,t,n,r,o,i,l,s){do{ec()}while(null!==Au);if(6&Zs)throw Error(a(327));var u=e.finishedWork;if(r=e.finishedLanes,null===u)return null;if(e.finishedWork=null,e.finishedLanes=0,u===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0,e.cancelPendingCommit=null;var c=u.lanes|u.childLanes;if(function(e,t,n,r,o,i){var a=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var l=e.entanglements,s=e.expirationTimes,u=e.hiddenUpdates;for(n=a&~n;0<n;){var c=31-be(n),d=1<<c;l[c]=0,s[c]=-1;var f=u[c];if(null!==f)for(u[c]=null,c=0;c<f.length;c++){var p=f[c];null!==p&&(p.lane&=-536870913)}n&=~d}0!==r&&Me(e,r,0),0!==i&&0===o&&0!==e.tag&&(e.suspendedLanes|=i&~(a&~t))}(e,r,c|=Cr,i,l,s),e===eu&&(tu=eu=null,nu=0),!(10256&u.subtreeFlags)&&!(10256&u.flags)||ku||(ku=!0,xu=c,Eu=n,re(de,(function(){return ec(),null}))),n=!!(15990&u.flags),15990&u.subtreeFlags||n?(n=T.T,T.T=null,i=F.p,F.p=2,l=Zs,Zs|=4,function(e,t){if(e=e.containerInfo,Gc=Fd,Zn(e=Jn(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,s=-1,u=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==o&&3!==f.nodeType||(s=l+o),f!==i||0!==r&&3!==f.nodeType||(u=l+r),3===f.nodeType&&(l+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++c===o&&(s=l),p===i&&++d===r&&(u=l),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===s||-1===u?null:{start:s,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(qc={focusedElem:e,selectionRange:n},Fd=!1,ts=t;null!==ts;)if(e=(t=ts).child,1028&t.subtreeFlags&&null!==e)e.return=t,ts=e;else for(;null!==ts;){switch(i=(t=ts).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==i){e=void 0,n=t,o=i.memoizedProps,i=i.memoizedState,r=n.stateNode;try{var m=Ma(n.type,o,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(m,i),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){nc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))id(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":id(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(a(163))}if(null!==(e=t.sibling)){e.return=t.return,ts=e;break}ts=t.return}m=ns,ns=!1}(e,u),ps(u,e),er(qc,e.containerInfo),Fd=!!Gc,qc=Gc=null,e.current=u,rs(e,u.alternate,u),ae(),Zs=l,F.p=i,T.T=n):e.current=u,ku?(ku=!1,Au=e,Cu=r):Zu(e,c),0===(c=e.pendingLanes)&&(Su=null),function(e){if(ye&&"function"==typeof ye.onCommitFiberRoot)try{ye.onCommitFiberRoot(ge,e,void 0,!(128&~e.current.flags))}catch(e){}}(u.stateNode),hc(e),null!==t)for(o=e.onRecoverableError,u=0;u<t.length;u++)o((c=t[u]).value,{componentStack:c.stack});!!(3&Cu)&&ec(),c=e.pendingLanes,4194218&r&&42&c?e===Ou?Pu++:(Pu=0,Ou=e):Pu=0,mc(0,!1)}(e,t,n,r,f,o,i,l)}finally{T.T=d,F.p=f}}function Zu(e,t){0==(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,Fo(t))}function ec(){if(null!==Au){var e=Au,t=xu;xu=0;var n=Ne(Cu),r=T.T,o=F.p;try{if(F.p=32>n?32:n,T.T=null,null===Au)var i=!1;else{n=Eu,Eu=null;var l=Au,s=Cu;if(Au=null,Cu=0,6&Zs)throw Error(a(331));var u=Zs;if(Zs|=4,Ls(l.current),ks(l,l.current,s,n),Zs=u,mc(0,!1),ye&&"function"==typeof ye.onPostCommitFiberRoot)try{ye.onPostCommitFiberRoot(ge,l)}catch(e){}i=!0}return i}finally{F.p=o,T.T=r,Zu(e,t)}}return!1}function tc(e,t,n){t=Rr(n,t),null!==(e=_l(e,t=$a(e.stateNode,t,2),2))&&(_e(e,2),hc(e))}function nc(e,t,n){if(3===e.tag)tc(e,e,n);else for(;null!==t;){if(3===t.tag){tc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Su||!Su.has(r))){e=Rr(n,e),null!==(r=_l(t,n=Ba(2),2))&&(Fa(n,r,t,e),_e(r,2),hc(r));break}}t=t.return}}function rc(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new Js;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(lu=!0,o.add(n),e=oc.bind(null,e,t,n),t.then(e,e))}function oc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,eu===e&&(nu&n)===n&&(4===uu||3===uu&&(62914560&nu)===nu&&300>le()-vu?!(2&Zs)&&$u(e,0):fu|=n,hu===nu&&(hu=0)),hc(e)}function ic(e,t){0===t&&(t=Te()),null!==(e=Or(e,t))&&(_e(e,t),hc(e))}function ac(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),ic(e,n)}function lc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(a(314))}null!==r&&r.delete(t),ic(e,n)}var sc=null,uc=null,cc=!1,dc=!1,fc=!1,pc=0;function hc(e){var t;e!==uc&&null===e.next&&(null===uc?sc=uc=e:uc=uc.next=e),dc=!0,cc||(cc=!0,t=gc,nd((function(){6&Zs?re(ue,t):t()})))}function mc(e,t){if(!fc&&dc){fc=!0;do{for(var n=!1,r=sc;null!==r;){if(!t)if(0!==e){var o=r.pendingLanes;if(0===o)var i=0;else{var a=r.suspendedLanes,l=r.pingedLanes;i=(1<<31-be(42|e)+1)-1,i=201326677&(i&=o&~(a&~l))?201326677&i|1:i?2|i:0}0!==i&&(n=!0,bc(r,i))}else i=nu,!(3&(i=xe(r,r===eu?i:0)))||Ee(r,i)||(n=!0,bc(r,i));r=r.next}}while(n);fc=!1}}function gc(){dc=cc=!1;var e,t=0;0!==pc&&(((e=window.event)&&"popstate"===e.type?e!==Jc&&(Jc=e,!0):(Jc=null,!1))&&(t=pc),pc=0);for(var n=le(),r=null,o=sc;null!==o;){var i=o.next,a=yc(o,n);0===a?(o.next=null,null===r?sc=i:r.next=i,null===i&&(uc=r)):(r=o,(0!==t||3&a)&&(dc=!0)),o=i}mc(t,!1)}function yc(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=-62914561&e.pendingLanes;0<i;){var a=31-be(i),l=1<<a,s=o[a];-1===s?l&n&&!(l&r)||(o[a]=Pe(l,t)):s<=t&&(e.expiredLanes|=l),i&=~l}if(n=nu,n=xe(e,e===(t=eu)?n:0),r=e.callbackNode,0===n||e===t&&2===ru||null!==e.cancelPendingCommit)return null!==r&&null!==r&&oe(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||Ee(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&oe(r),Ne(n)){case 2:case 8:n=ce;break;case 32:default:n=de;break;case 268435456:n=pe}return r=vc.bind(null,e),n=re(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&oe(r),e.callbackPriority=2,e.callbackNode=null,2}function vc(e,t){var n=e.callbackNode;if(ec()&&e.callbackNode!==n)return null;var r=nu;return 0===(r=xe(e,e===eu?r:0))?null:(Mu(e,r,t),yc(e,le()),null!=e.callbackNode&&e.callbackNode===n?vc.bind(null,e):null)}function bc(e,t){if(ec())return null;Mu(e,t,!0)}function wc(){return 0===pc&&(pc=Oe()),pc}function Sc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Ot(""+e)}function kc(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var Ac=0;Ac<wr.length;Ac++){var Cc=wr[Ac];Sr(Cc.toLowerCase(),"on"+(Cc[0].toUpperCase()+Cc.slice(1)))}Sr(fr,"onAnimationEnd"),Sr(pr,"onAnimationIteration"),Sr(hr,"onAnimationStart"),Sr("dblclick","onDoubleClick"),Sr("focusin","onFocus"),Sr("focusout","onBlur"),Sr(mr,"onTransitionRun"),Sr(gr,"onTransitionStart"),Sr(yr,"onTransitionCancel"),Sr(vr,"onTransitionEnd"),et("onMouseEnter",["mouseout","mouseover"]),et("onMouseLeave",["mouseout","mouseover"]),et("onPointerEnter",["pointerout","pointerover"]),et("onPointerLeave",["pointerout","pointerover"]),Ze("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Ze("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Ze("onBeforeInput",["compositionend","keypress","textInput","paste"]),Ze("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Ze("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Ze("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var xc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ec=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(xc));function Pc(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==i&&o.isPropagationStopped())break e;i=l,o.currentTarget=u;try{i(o)}catch(e){Ra(e)}o.currentTarget=null,i=s}else for(a=0;a<r.length;a++){if(s=(l=r[a]).instance,u=l.currentTarget,l=l.listener,s!==i&&o.isPropagationStopped())break e;i=l,o.currentTarget=u;try{i(o)}catch(e){Ra(e)}o.currentTarget=null,i=s}}}}function Oc(e,t){var n=t[Be];void 0===n&&(n=t[Be]=new Set);var r=e+"__bubble";n.has(r)||(Mc(t,e,2,!1),n.add(r))}function Tc(e,t,n){var r=0;t&&(r|=4),Mc(n,e,r,t)}var Lc="_reactListening"+Math.random().toString(36).slice(2);function _c(e){if(!e[Lc]){e[Lc]=!0,Ye.forEach((function(t){"selectionchange"!==t&&(Ec.has(t)||Tc(t,!1,e),Tc(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Lc]||(t[Lc]=!0,Tc("selectionchange",!1,t))}}function Mc(e,t,n,r){switch(Kd(t)){case 2:var o=Wd;break;case 8:o=Hd;break;default:o=Ud}n=o.bind(null,t,n,e),o=void 0,!It||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Rc(e,t,n,r,o){var i=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var s=a.tag;if((3===s||4===s)&&((s=a.stateNode.containerInfo)===o||8===s.nodeType&&s.parentNode===o))return;a=a.return}for(;null!==l;){if(null===(a=Ge(l)))return;if(5===(s=a.tag)||6===s||26===s||27===s){r=i=a;continue e}l=l.parentNode}}r=r.return}Dt((function(){var r=i,o=Lt(n),a=[];e:{var l=br.get(e);if(void 0!==l){var s=Yt,u=e;switch(e){case"keypress":if(0===Ht(n))break e;case"keydown":case"keyup":s=pn;break;case"focusin":u="focus",s=rn;break;case"focusout":u="blur",s=rn;break;case"beforeblur":case"afterblur":s=rn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=nn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=mn;break;case fr:case pr:case hr:s=on;break;case vr:s=gn;break;case"scroll":case"scrollend":s=Zt;break;case"wheel":s=yn;break;case"copy":case"cut":case"paste":s=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=hn;break;case"toggle":case"beforetoggle":s=vn}var c=!!(4&t),d=!c&&("scroll"===e||"scrollend"===e),f=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=h;if(p=m.stateNode,5!==(m=m.tag)&&26!==m&&27!==m||null===p||null===f||null!=(m=zt(h,f))&&c.push(Nc(h,m,p)),d)break;h=h.return}0<c.length&&(l=new s(l,u,null,n,o),a.push({event:l,listeners:c}))}}if(!(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===Tt||!(u=n.relatedTarget||n.fromElement)||!Ge(u)&&!u[$e])&&(s||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?Ge(u):null)&&(d=z(u),c=u.tag,u!==d||5!==c&&27!==c&&6!==c)&&(u=null)):(s=null,u=r),s!==u)){if(c=tn,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=hn,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==s?l:Ke(s),p=null==u?l:Ke(u),(l=new c(m,h+"leave",s,n,o)).target=d,l.relatedTarget=p,m=null,Ge(o)===r&&((c=new c(f,h+"enter",u,n,o)).target=p,c.relatedTarget=d,m=c),d=m,s&&u)e:{for(f=u,h=0,p=c=s;p;p=zc(p))h++;for(p=0,m=f;m;m=zc(m))p++;for(;0<h-p;)c=zc(c),h--;for(;0<p-h;)f=zc(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=zc(c),f=zc(f)}c=null}else c=null;null!==s&&Ic(a,l,s,c,!1),null!==u&&null!==d&&Ic(a,d,u,c,!0)}if("select"===(s=(l=r?Ke(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var g=zn;else if(Ln(l))if(In)g=Gn;else{g=Un;var y=Hn}else!(s=l.nodeName)||"input"!==s.toLowerCase()||"checkbox"!==l.type&&"radio"!==l.type?r&&xt(r.elementType)&&(g=zn):g=Vn;switch(g&&(g=g(e,r))?_n(a,g,n,o):(y&&y(e,l,r),"focusout"===e&&r&&"number"===l.type&&null!=r.memoizedProps.value&&yt(l,"number",l.value)),y=r?Ke(r):window,e){case"focusin":(Ln(y)||"true"===y.contentEditable)&&(nr=y,rr=r,or=null);break;case"focusout":or=rr=nr=null;break;case"mousedown":ir=!0;break;case"contextmenu":case"mouseup":case"dragend":ir=!1,ar(a,n,o);break;case"selectionchange":if(tr)break;case"keydown":case"keyup":ar(a,n,o)}var v;if(wn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else On?En(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(An&&"ko"!==n.locale&&(On||"onCompositionStart"!==b?"onCompositionEnd"===b&&On&&(v=Wt()):(Bt="value"in($t=o)?$t.value:$t.textContent,On=!0)),0<(y=Dc(r,b)).length&&(b=new ln(b,e,null,n,o),a.push({event:b,listeners:y}),(v||null!==(v=Pn(n)))&&(b.data=v))),(v=kn?function(e,t){switch(e){case"compositionend":return Pn(t);case"keypress":return 32!==t.which?null:(xn=!0,Cn);case"textInput":return(e=t.data)===Cn&&xn?null:e;default:return null}}(e,n):function(e,t){if(On)return"compositionend"===e||!wn&&En(e,t)?(e=Wt(),Ft=Bt=$t=null,On=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return An&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(b=Dc(r,"onBeforeInput")).length&&(y=new ln("onBeforeInput","beforeinput",null,n,o),a.push({event:y,listeners:b}),y.data=v),function(e,t,n,r,o){if("submit"===t&&n&&n.stateNode===o){var i=Sc((o[je]||null).action),a=r.submitter;a&&null!==(t=(t=a[je]||null)?Sc(t.formAction):a.getAttribute("formAction"))&&(i=t,a=null);var l=new Yt("action","action",null,r,o);e.push({event:l,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==pc){var e=a?kc(o,a):new FormData(o);ca(n,{pending:!0,data:e,method:o.method,action:i},null,e)}}else"function"==typeof i&&(l.preventDefault(),e=a?kc(o,a):new FormData(o),ca(n,{pending:!0,data:e,method:o.method,action:i},i,e))},currentTarget:o}]})}}(a,e,r,n,o)}Pc(a,t)}))}function Nc(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Dc(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5!==(o=o.tag)&&26!==o&&27!==o||null===i||(null!=(o=zt(e,n))&&r.unshift(Nc(e,o,i)),null!=(o=zt(e,t))&&r.push(Nc(e,o,i))),e=e.return}return r}function zc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Ic(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(l=l.tag,null!==s&&s===r)break;5!==l&&26!==l&&27!==l||null===u||(s=u,o?null!=(u=zt(n,i))&&a.unshift(Nc(n,u,s)):o||null!=(u=zt(n,i))&&a.push(Nc(n,u,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var jc=/\r\n?/g,$c=/\u0000|\uFFFD/g;function Bc(e){return("string"==typeof e?e:""+e).replace(jc,"\n").replace($c,"")}function Fc(e,t){return t=Bc(t),Bc(e)===t}function Wc(){}function Hc(e,t,n,r,o,i){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||St(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&St(e,""+r);break;case"className":at(e,"class",r);break;case"tabIndex":at(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":at(e,n,r);break;case"style":Ct(e,r,i);break;case"data":if("object"!==t){at(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Ot(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof i&&("formAction"===n?("input"!==t&&Hc(e,t,"name",o.name,o,null),Hc(e,t,"formEncType",o.formEncType,o,null),Hc(e,t,"formMethod",o.formMethod,o,null),Hc(e,t,"formTarget",o.formTarget,o,null)):(Hc(e,t,"encType",o.encType,o,null),Hc(e,t,"method",o.method,o,null),Hc(e,t,"target",o.target,o,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Ot(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Wc);break;case"onScroll":null!=r&&Oc("scroll",e);break;case"onScrollEnd":null!=r&&Oc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(a(61));if(null!=(n=r.__html)){if(null!=o.children)throw Error(a(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=Ot(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Oc("beforetoggle",e),Oc("toggle",e),it(e,"popover",r);break;case"xlinkActuate":lt(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":lt(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":lt(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":lt(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":lt(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":lt(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":lt(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":lt(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":lt(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":it(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&it(e,n=Et.get(n)||n,r)}}function Uc(e,t,n,r,o,i){switch(n){case"style":Ct(e,r,i);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(a(61));if(null!=(n=r.__html)){if(null!=o.children)throw Error(a(60));e.innerHTML=n}}break;case"children":"string"==typeof r?St(e,r):("number"==typeof r||"bigint"==typeof r)&&St(e,""+r);break;case"onScroll":null!=r&&Oc("scroll",e);break;case"onScrollEnd":null!=r&&Oc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Wc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:Je.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(o=n.endsWith("Capture"),t=n.slice(2,o?n.length-7:void 0),"function"==typeof(i=null!=(i=e[je]||null)?i[n]:null)&&e.removeEventListener(t,i,o),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):it(e,n,r):("function"!=typeof i&&null!==i&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,o)))}}function Vc(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Oc("error",e),Oc("load",e);var r,o=!1,i=!1;for(r in n)if(n.hasOwnProperty(r)){var l=n[r];if(null!=l)switch(r){case"src":o=!0;break;case"srcSet":i=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(a(137,t));default:Hc(e,t,r,l,n,null)}}return i&&Hc(e,t,"srcSet",n.srcSet,n,null),void(o&&Hc(e,t,"src",n.src,n,null));case"input":Oc("invalid",e);var s=r=l=i=null,u=null,c=null;for(o in n)if(n.hasOwnProperty(o)){var d=n[o];if(null!=d)switch(o){case"name":i=d;break;case"type":l=d;break;case"checked":u=d;break;case"defaultChecked":c=d;break;case"value":r=d;break;case"defaultValue":s=d;break;case"children":case"dangerouslySetInnerHTML":if(null!=d)throw Error(a(137,t));break;default:Hc(e,t,o,d,n,null)}}return gt(e,r,s,u,c,l,i,!1),void ct(e);case"select":for(i in Oc("invalid",e),o=l=r=null,n)if(n.hasOwnProperty(i)&&null!=(s=n[i]))switch(i){case"value":r=s;break;case"defaultValue":l=s;break;case"multiple":o=s;default:Hc(e,t,i,s,n,null)}return t=r,n=l,e.multiple=!!o,void(null!=t?vt(e,!!o,t,!1):null!=n&&vt(e,!!o,n,!0));case"textarea":for(l in Oc("invalid",e),r=i=o=null,n)if(n.hasOwnProperty(l)&&null!=(s=n[l]))switch(l){case"value":o=s;break;case"defaultValue":i=s;break;case"children":r=s;break;case"dangerouslySetInnerHTML":if(null!=s)throw Error(a(91));break;default:Hc(e,t,l,s,n,null)}return wt(e,o,i,r),void ct(e);case"option":for(u in n)n.hasOwnProperty(u)&&null!=(o=n[u])&&("selected"===u?e.selected=o&&"function"!=typeof o&&"symbol"!=typeof o:Hc(e,t,u,o,n,null));return;case"dialog":Oc("cancel",e),Oc("close",e);break;case"iframe":case"object":Oc("load",e);break;case"video":case"audio":for(o=0;o<xc.length;o++)Oc(xc[o],e);break;case"image":Oc("error",e),Oc("load",e);break;case"details":Oc("toggle",e);break;case"embed":case"source":case"link":Oc("error",e),Oc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(o=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(a(137,t));default:Hc(e,t,c,o,n,null)}return;default:if(xt(t)){for(d in n)n.hasOwnProperty(d)&&void 0!==(o=n[d])&&Uc(e,t,d,o,n,void 0);return}}for(s in n)n.hasOwnProperty(s)&&null!=(o=n[s])&&Hc(e,t,s,o,n,null)}var Gc=null,qc=null;function Kc(e){return 9===e.nodeType?e:e.ownerDocument}function Qc(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function Xc(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function Yc(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Jc=null,Zc="function"==typeof setTimeout?setTimeout:void 0,ed="function"==typeof clearTimeout?clearTimeout:void 0,td="function"==typeof Promise?Promise:void 0,nd="function"==typeof queueMicrotask?queueMicrotask:void 0!==td?function(e){return td.resolve(null).then(e).catch(rd)}:Zc;function rd(e){setTimeout((function(){throw e}))}function od(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void pf(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);pf(t)}function id(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":id(n),Ve(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function ad(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}function ld(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function sd(e,t,n){switch(t=Kc(n),e){case"html":if(!(e=t.documentElement))throw Error(a(452));return e;case"head":if(!(e=t.head))throw Error(a(453));return e;case"body":if(!(e=t.body))throw Error(a(454));return e;default:throw Error(a(451))}}var ud=new Map,cd=new Set;function dd(e){return"function"==typeof e.getRootNode?e.getRootNode():e.ownerDocument}var fd=F.d;F.d={f:function(){var e=fd.f(),t=Iu();return e||t},r:function(e){var t=qe(e);null!==t&&5===t.tag&&"form"===t.type?fa(t):fd.r(e)},D:function(e){fd.D(e),hd("dns-prefetch",e,null)},C:function(e,t){fd.C(e,t),hd("preconnect",e,t)},L:function(e,t,n){fd.L(e,t,n);var r=pd;if(r&&e&&t){var o='link[rel="preload"][as="'+ht(t)+'"]';"image"===t&&n&&n.imageSrcSet?(o+='[imagesrcset="'+ht(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(o+='[imagesizes="'+ht(n.imageSizes)+'"]')):o+='[href="'+ht(e)+'"]';var i=o;switch(t){case"style":i=gd(e);break;case"script":i=bd(e)}ud.has(i)||(e=L({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),ud.set(i,e),null!==r.querySelector(o)||"style"===t&&r.querySelector(yd(i))||"script"===t&&r.querySelector(wd(i))||(Vc(t=r.createElement("link"),"link",e),Xe(t),r.head.appendChild(t)))}},m:function(e,t){fd.m(e,t);var n=pd;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",o='link[rel="modulepreload"][as="'+ht(r)+'"][href="'+ht(e)+'"]',i=o;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":i=bd(e)}if(!ud.has(i)&&(e=L({rel:"modulepreload",href:e},t),ud.set(i,e),null===n.querySelector(o))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(wd(i)))return}Vc(r=n.createElement("link"),"link",e),Xe(r),n.head.appendChild(r)}}},X:function(e,t){fd.X(e,t);var n=pd;if(n&&e){var r=Qe(n).hoistableScripts,o=bd(e),i=r.get(o);i||((i=n.querySelector(wd(o)))||(e=L({src:e,async:!0},t),(t=ud.get(o))&&Cd(e,t),Xe(i=n.createElement("script")),Vc(i,"link",e),n.head.appendChild(i)),i={type:"script",instance:i,count:1,state:null},r.set(o,i))}},S:function(e,t,n){fd.S(e,t,n);var r=pd;if(r&&e){var o=Qe(r).hoistableStyles,i=gd(e);t=t||"default";var a=o.get(i);if(!a){var l={loading:0,preload:null};if(a=r.querySelector(yd(i)))l.loading=5;else{e=L({rel:"stylesheet",href:e,"data-precedence":t},n),(n=ud.get(i))&&Ad(e,n);var s=a=r.createElement("link");Xe(s),Vc(s,"link",e),s._p=new Promise((function(e,t){s.onload=e,s.onerror=t})),s.addEventListener("load",(function(){l.loading|=1})),s.addEventListener("error",(function(){l.loading|=2})),l.loading|=4,kd(a,t,r)}a={type:"stylesheet",instance:a,count:1,state:l},o.set(i,a)}}},M:function(e,t){fd.M(e,t);var n=pd;if(n&&e){var r=Qe(n).hoistableScripts,o=bd(e),i=r.get(o);i||((i=n.querySelector(wd(o)))||(e=L({src:e,async:!0,type:"module"},t),(t=ud.get(o))&&Cd(e,t),Xe(i=n.createElement("script")),Vc(i,"link",e),n.head.appendChild(i)),i={type:"script",instance:i,count:1,state:null},r.set(o,i))}}};var pd="undefined"==typeof document?null:document;function hd(e,t,n){var r=pd;if(r&&"string"==typeof t&&t){var o=ht(t);o='link[rel="'+e+'"][href="'+o+'"]',"string"==typeof n&&(o+='[crossorigin="'+n+'"]'),cd.has(o)||(cd.add(o),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(o)&&(Vc(t=r.createElement("link"),"link",e),Xe(t),r.head.appendChild(t)))}}function md(e,t,n,r){var o,i,l,s,u=(u=X.current)?dd(u):null;if(!u)throw Error(a(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=gd(n.href),(r=(n=Qe(u).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=gd(n.href);var c=Qe(u).hoistableStyles,d=c.get(e);if(d||(u=u.ownerDocument||u,d={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,d),(c=u.querySelector(yd(e)))&&!c._p&&(d.instance=c,d.state.loading=5),ud.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},ud.set(e,n),c||(o=u,i=e,l=n,s=d.state,o.querySelector('link[rel="preload"][as="style"]['+i+"]")?s.loading=1:(i=o.createElement("link"),s.preload=i,i.addEventListener("load",(function(){return s.loading|=1})),i.addEventListener("error",(function(){return s.loading|=2})),Vc(i,"link",l),Xe(i),o.head.appendChild(i))))),t&&null===r)throw Error(a(528,""));return d}if(t&&null!==r)throw Error(a(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=bd(n),(r=(n=Qe(u).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(a(444,e))}}function gd(e){return'href="'+ht(e)+'"'}function yd(e){return'link[rel="stylesheet"]['+e+"]"}function vd(e){return L({},e,{"data-precedence":e.precedence,precedence:null})}function bd(e){return'[src="'+ht(e)+'"]'}function wd(e){return"script[async]"+e}function Sd(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+ht(n.href)+'"]');if(r)return t.instance=r,Xe(r),r;var o=L({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return Xe(r=(e.ownerDocument||e).createElement("style")),Vc(r,"style",o),kd(r,n.precedence,e),t.instance=r;case"stylesheet":o=gd(n.href);var i=e.querySelector(yd(o));if(i)return t.state.loading|=4,t.instance=i,Xe(i),i;r=vd(n),(o=ud.get(o))&&Ad(r,o),Xe(i=(e.ownerDocument||e).createElement("link"));var l=i;return l._p=new Promise((function(e,t){l.onload=e,l.onerror=t})),Vc(i,"link",r),t.state.loading|=4,kd(i,n.precedence,e),t.instance=i;case"script":return i=bd(n.src),(o=e.querySelector(wd(i)))?(t.instance=o,Xe(o),o):(r=n,(o=ud.get(i))&&Cd(r=L({},n),o),Xe(o=(e=e.ownerDocument||e).createElement("script")),Vc(o,"link",r),e.head.appendChild(o),t.instance=o);case"void":return null;default:throw Error(a(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,kd(r,n.precedence,e));return t.instance}function kd(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),o=r.length?r[r.length-1]:null,i=o,a=0;a<r.length;a++){var l=r[a];if(l.dataset.precedence===t)i=l;else if(i!==o)break}i?i.parentNode.insertBefore(e,i.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Ad(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function Cd(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var xd=null;function Ed(e,t,n){if(null===xd){var r=new Map,o=xd=new Map;o.set(n,r)}else(r=(o=xd).get(n))||(r=new Map,o.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),o=0;o<n.length;o++){var i=n[o];if(!(i[Ue]||i[Ie]||"link"===e&&"stylesheet"===i.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==i.namespaceURI){var a=i.getAttribute(t)||"";a=e+a;var l=r.get(a);l?l.push(i):r.set(a,[i])}}return r}function Pd(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function Od(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var Td=null;function Ld(){}function _d(){if(this.count--,0===this.count)if(this.stylesheets)Rd(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Md=null;function Rd(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Md=new Map,t.forEach(Nd,e),Md=null,_d.call(e))}function Nd(e,t){if(!(4&t.state.loading)){var n=Md.get(e);if(n)var r=n.get(null);else{n=new Map,Md.set(e,n);for(var o=e.querySelectorAll("link[data-precedence],style[data-precedence]"),i=0;i<o.length;i++){var a=o[i];"LINK"!==a.nodeName&&"not all"===a.getAttribute("media")||(n.set(a.dataset.precedence,a),r=a)}r&&n.set(null,r)}a=(o=t.instance).getAttribute("data-precedence"),(i=n.get(a)||r)===r&&n.set(null,o),n.set(a,o),this.count++,r=_d.bind(this),o.addEventListener("load",r),o.addEventListener("error",r),i?i.parentNode.insertBefore(o,i.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(o,e.firstChild),t.state.loading|=4}}var Dd={$$typeof:m,Provider:null,Consumer:null,_currentValue:W,_currentValue2:W,_threadCount:0};function zd(e,t,n,r,o,i,a,l){this.tag=1,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Le(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.finishedLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Le(0),this.hiddenUpdates=Le(null),this.identifierPrefix=r,this.onUncaughtError=o,this.onCaughtError=i,this.onRecoverableError=a,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=l,this.incompleteTransitions=new Map}function Id(e,t,n,r,o,i){o=function(e){return e?e=_r:_r}(o),null===r.context?r.context=o:r.pendingContext=o,(r=Ll(t)).payload={element:n},null!==(i=void 0===i?null:i)&&(r.callback=i),null!==(n=_l(e,r,t))&&(_u(n,0,t),Ml(n,e,t))}function jd(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function $d(e,t){jd(e,t),(e=e.alternate)&&jd(e,t)}function Bd(e){if(13===e.tag){var t=Or(e,67108864);null!==t&&_u(t,0,67108864),$d(e,67108864)}}var Fd=!0;function Wd(e,t,n,r){var o=T.T;T.T=null;var i=F.p;try{F.p=2,Ud(e,t,n,r)}finally{F.p=i,T.T=o}}function Hd(e,t,n,r){var o=T.T;T.T=null;var i=F.p;try{F.p=8,Ud(e,t,n,r)}finally{F.p=i,T.T=o}}function Ud(e,t,n,r){if(Fd){var o=Vd(r);if(null===o)Rc(e,t,r,Gd,n),rf(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Xd=of(Xd,e,t,n,r,o),!0;case"dragenter":return Yd=of(Yd,e,t,n,r,o),!0;case"mouseover":return Jd=of(Jd,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return Zd.set(i,of(Zd.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ef.set(i,of(ef.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(rf(e,r),4&t&&-1<nf.indexOf(e)){for(;null!==o;){var i=qe(o);if(null!==i)switch(i.tag){case 3:if((i=i.stateNode).current.memoizedState.isDehydrated){var a=Ce(i.pendingLanes);if(0!==a){var l=i;for(l.pendingLanes|=2,l.entangledLanes|=2;a;){var s=1<<31-be(a);l.entanglements[1]|=s,a&=~s}hc(i),!(6&Zs)&&(bu=le()+500,mc(0,!1))}}break;case 13:null!==(l=Or(i,2))&&_u(l,0,2),Iu(),$d(i,2)}if(null===(i=Vd(r))&&Rc(e,t,r,Gd,n),i===o)break;o=i}null!==o&&r.stopPropagation()}else Rc(e,t,r,null,n)}}function Vd(e){return qd(e=Lt(e))}var Gd=null;function qd(e){if(Gd=null,null!==(e=Ge(e))){var t=z(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=I(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return Gd=e,null}function Kd(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(se()){case ue:return 2;case ce:return 8;case de:case fe:return 32;case pe:return 268435456;default:return 32}default:return 32}}var Qd=!1,Xd=null,Yd=null,Jd=null,Zd=new Map,ef=new Map,tf=[],nf="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function rf(e,t){switch(e){case"focusin":case"focusout":Xd=null;break;case"dragenter":case"dragleave":Yd=null;break;case"mouseover":case"mouseout":Jd=null;break;case"pointerover":case"pointerout":Zd.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ef.delete(t.pointerId)}}function of(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},null!==t&&null!==(t=qe(t))&&Bd(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function af(e){var t=Ge(e.target);if(null!==t){var n=z(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=I(n)))return e.blockedOn=t,void function(e){var t=F.p;try{return F.p=e,function(){if(13===n.tag){var e=Tu(),t=Or(n,e);null!==t&&_u(t,0,e),$d(n,e)}}()}finally{F.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function lf(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Vd(e.nativeEvent);if(null!==n)return null!==(t=qe(n))&&Bd(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Tt=r,n.target.dispatchEvent(r),Tt=null,t.shift()}return!0}function sf(e,t,n){lf(e)&&n.delete(t)}function uf(){Qd=!1,null!==Xd&&lf(Xd)&&(Xd=null),null!==Yd&&lf(Yd)&&(Yd=null),null!==Jd&&lf(Jd)&&(Jd=null),Zd.forEach(sf),ef.forEach(sf)}function cf(e,t){e.blockedOn===t&&(e.blockedOn=null,Qd||(Qd=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,uf)))}var df=null;function ff(e){df!==e&&(df=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){df===e&&(df=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],o=e[t+2];if("function"!=typeof r){if(null===qd(r||n))continue;break}var i=qe(n);null!==i&&(e.splice(t,3),t-=3,ca(i,{pending:!0,data:o,method:n.method,action:r},r,o))}})))}function pf(e){function t(t){return cf(t,e)}null!==Xd&&cf(Xd,e),null!==Yd&&cf(Yd,e),null!==Jd&&cf(Jd,e),Zd.forEach(t),ef.forEach(t);for(var n=0;n<tf.length;n++){var r=tf[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<tf.length&&null===(n=tf[0]).blockedOn;)af(n),null===n.blockedOn&&tf.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var o=n[r],i=n[r+1],a=o[je]||null;if("function"==typeof i)a||ff(n);else if(a){var l=null;if(i&&i.hasAttribute("formAction")){if(o=i,a=i[je]||null)l=a.formAction;else if(null!==qd(o))continue}else l=a.action;"function"==typeof l?n[r+1]=l:(n.splice(r,3),r-=3),ff(n)}}}function hf(e){this._internalRoot=e}function mf(e){this._internalRoot=e}mf.prototype.render=hf.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Id(t.current,Tu(),e,t,null,null)},mf.prototype.unmount=hf.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;0===e.tag&&ec(),Id(e.current,2,null,e,null,null),Iu(),t[$e]=null}},mf.prototype.unstable_scheduleHydration=function(e){if(e){var t=De();e={blockedOn:null,target:e,priority:t};for(var n=0;n<tf.length&&0!==t&&t<tf[n].priority;n++);tf.splice(n,0,e),0===n&&af(e)}};var gf=o.version;if("19.0.0"!==gf)throw Error(a(527,gf,"19.0.0"));F.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=z(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return j(o),e;if(i===r)return j(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,s=o.child;s;){if(s===n){l=!0,n=o,r=i;break}if(s===r){l=!0,r=o,n=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===n){l=!0,n=i,r=o;break}if(s===r){l=!0,r=i,n=o;break}s=s.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?$(e):null)?null:e.stateNode};var yf={bundleType:0,version:"19.0.0",rendererPackageName:"react-dom",currentDispatcherRef:T,findFiberByHostInstance:Ge,reconcilerVersion:"19.0.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var vf=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!vf.isDisabled&&vf.supportsFiber)try{ge=vf.inject(yf),ye=vf}catch(e){}}t.createRoot=function(e,t){if(!(n=e)||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType)throw Error(a(299));var n,r=!1,o="",i=Na,l=Da,s=za;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(o=t.identifierPrefix),void 0!==t.onUncaughtError&&(i=t.onUncaughtError),void 0!==t.onCaughtError&&(l=t.onCaughtError),void 0!==t.onRecoverableError&&(s=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=function(e,t,n,r,o,i,a,l,s,u,c,d){return e=new zd(e,t,n,a,l,s,u,d),t=1,!0===i&&(t|=24),i=Ns(3,null,null,t),e.current=i,i.stateNode=e,(t=Bo()).refCount++,e.pooledCache=t,t.refCount++,i.memoizedState={element:r,isDehydrated:n,cache:t},Ol(i),e}(e,1,!1,null,0,r,o,i,l,s,0,null),e[$e]=t.current,_c(8===e.nodeType?e.parentNode:e),new hf(t)}},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},338:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},376:(e,t,n)=>{var r=n(72),o=n.n(r),i=n(825),a=n.n(i),l=n(659),s=n.n(l),u=n(56),c=n.n(u),d=n(159),f=n.n(d),p=n(113),h=n.n(p),m=n(11),g={};g.styleTagTransform=h(),g.setAttributes=c(),g.insert=s().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=f();var y=o()(m.default,g);if(!m.default.locals||e.hot.invalidate){var v=!m.default.locals,b=v?m:m.default.locals;e.hot.accept(11,(t=>{m=n(11),function(e,t,n){if(!e&&t||e&&!t)return!1;var r;for(r in e)if((!n||"default"!==r)&&e[r]!==t[r])return!1;for(r in t)if(!(n&&"default"===r||e[r]))return!1;return!0}(b,v?m:m.default.locals,v)?(b=v?m:m.default.locals,y(m.default)):e.hot.invalidate()}))}e.hot.dispose((function(){y()})),m.default&&m.default.locals&&m.default.locals},404:(e,t,n)=>{e.exports=n(691)},405:(e,t)=>{Symbol.for("react.transitional.element"),Symbol.for("react.portal");var n=Symbol.for("react.fragment"),r=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler");Symbol.for("react.provider");var i=Symbol.for("react.consumer"),a=Symbol.for("react.context"),l=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),u=Symbol.for("react.suspense_list"),c=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),f=(Symbol.for("react.view_transition"),Symbol.for("react.client.reference"));t.Hy=function(e){return"string"==typeof e||"function"==typeof e||e===n||e===o||e===r||e===s||e===u||"object"==typeof e&&null!==e&&(e.$$typeof===d||e.$$typeof===c||e.$$typeof===a||e.$$typeof===i||e.$$typeof===l||e.$$typeof===f||void 0!==e.getModuleId)}},477:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<i(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>i(s,n))u<o&&0>i(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[l]=n,r=l);else{if(!(u<o&&0>i(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var u=[],c=[],d=1,f=null,p=3,h=!1,m=!1,g=!1,y="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function S(e){if(g=!1,w(e),!m)if(null!==r(u))m=!0,_();else{var t=r(c);null!==t&&M(S,t.startTime-e)}}var k,A=!1,C=-1,x=5,E=-1;function P(){return!(t.unstable_now()-E<x)}function O(){if(A){var e=t.unstable_now();E=e;var n=!0;try{e:{m=!1,g&&(g=!1,v(C),C=-1),h=!0;var i=p;try{t:{for(w(e),f=r(u);null!==f&&!(f.expirationTime>e&&P());){var a=f.callback;if("function"==typeof a){f.callback=null,p=f.priorityLevel;var l=a(f.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof l){f.callback=l,w(e),n=!0;break t}f===r(u)&&o(u),w(e)}else o(u);f=r(u)}if(null!==f)n=!0;else{var s=r(c);null!==s&&M(S,s.startTime-e),n=!1}}break e}finally{f=null,p=i,h=!1}n=void 0}}finally{n?k():A=!1}}}if("function"==typeof b)k=function(){b(O)};else if("undefined"!=typeof MessageChannel){var T=new MessageChannel,L=T.port2;T.port1.onmessage=O,k=function(){L.postMessage(null)}}else k=function(){y(O,0)};function _(){A||(A=!0,k())}function M(e,n){C=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,_())},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):x=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,i){var a=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?a+i:a,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:i,expirationTime:l=i+l,sortIndex:-1},i>a?(e.sortIndex=i,n(c,e),null===r(u)&&e===r(c)&&(g?(v(C),C=-1):g=!0,M(S,i-a))):(e.sortIndex=l,n(u,e),m||h||(m=!0,_())),e},t.unstable_shouldYield=P,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},540:(e,t,n)=>{e.exports=n(869)},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},691:(e,t)=>{var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case i:case l:case a:case p:return e;default:switch(e=e&&e.$$typeof){case u:case f:case g:case m:case s:return e;default:return t}}case o:return t}}}function k(e){return S(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=s,t.Element=r,t.ForwardRef=f,t.Fragment=i,t.Lazy=g,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return k(e)||S(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return S(e)===u},t.isContextProvider=function(e){return S(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return S(e)===f},t.isFragment=function(e){return S(e)===i},t.isLazy=function(e){return S(e)===g},t.isMemo=function(e){return S(e)===m},t.isPortal=function(e){return S(e)===o},t.isProfiler=function(e){return S(e)===l},t.isStrictMode=function(e){return S(e)===a},t.isSuspense=function(e){return S(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===d||e===l||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===s||e.$$typeof===u||e.$$typeof===f||e.$$typeof===v||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=S},698:(e,t)=>{var n=Symbol.for("react.transitional.element");function r(e,t,r){var o=null;if(void 0!==r&&(o=""+r),void 0!==t.key&&(o=""+t.key),"key"in t)for(var i in r={},t)"key"!==i&&(r[i]=t[i]);else r=t;return t=r.ref,{$$typeof:n,type:e,key:o,ref:void 0!==t?t:null,props:r}}Symbol.for("react.fragment"),t.jsx=r,t.jsxs=r},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},848:(e,t,n)=>{e.exports=n(698)},869:(e,t)=>{var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),l=Symbol.for("react.consumer"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var w=b.prototype=new v;w.constructor=b,m(w,y.prototype),w.isPureReactComponent=!0;var S=Array.isArray,k={H:null,A:null,T:null,S:null},A=Object.prototype.hasOwnProperty;function C(e,t,r,o,i,a){return r=a.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:a}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var E=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function O(){}function T(e,t,o,i,a){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s,u,c=!1;if(null===e)c=!0;else switch(l){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case f:return T((c=e._init)(e._payload),t,o,i,a)}}if(c)return a=a(e),c=""===i?"."+P(e,0):i,S(a)?(o="",null!=c&&(o=c.replace(E,"$&/")+"/"),T(a,t,o,"",(function(e){return e}))):null!=a&&(x(a)&&(s=a,u=o+(null==a.key||e&&e.key===a.key?"":(""+a.key).replace(E,"$&/")+"/")+c,a=C(s.type,u,void 0,0,0,s.props)),t.push(a)),1;c=0;var d,h=""===i?".":i+":";if(S(e))for(var m=0;m<e.length;m++)c+=T(i=e[m],t,o,l=h+P(i,m),a);else if("function"==typeof(m=null===(d=e)||"object"!=typeof d?null:"function"==typeof(d=p&&d[p]||d["@@iterator"])?d:null))for(e=m.call(e),m=0;!(i=e.next()).done;)c+=T(i=i.value,t,o,l=h+P(i,m++),a);else if("object"===l){if("function"==typeof e.then)return T(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(O,O):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,o,i,a);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function L(e,t,n){if(null==e)return e;var r=[],o=0;return T(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function _(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var M="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function R(){}t.Children={map:L,forEach:function(e,t,n){L(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return L(e,(function(){t++})),t},toArray:function(e){return L(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=o,t.Profiler=a,t.PureComponent=b,t.StrictMode=i,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=k,t.act=function(){throw Error("act(...) is not supported in production builds of React.")},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=m({},e.props),o=e.key;if(null!=t)for(i in t.ref,void 0!==t.key&&(o=""+t.key),t)!A.call(t,i)||"key"===i||"__self"===i||"__source"===i||"ref"===i&&void 0===t.ref||(r[i]=t[i]);var i=arguments.length-2;if(1===i)r.children=n;else if(1<i){for(var a=Array(i),l=0;l<i;l++)a[l]=arguments[l+2];r.children=a}return C(e.type,o,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:l,_context:e},e},t.createElement=function(e,t,n){var r,o={},i=null;if(null!=t)for(r in void 0!==t.key&&(i=""+t.key),t)A.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(o[r]=t[r]);var a=arguments.length-2;if(1===a)o.children=n;else if(1<a){for(var l=Array(a),s=0;s<a;s++)l[s]=arguments[s+2];o.children=l}if(e&&e.defaultProps)for(r in a=e.defaultProps)void 0===o[r]&&(o[r]=a[r]);return C(e,i,void 0,0,0,o)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:_}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=k.T,n={};k.T=n;try{var r=e(),o=k.S;null!==o&&o(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(R,M)}catch(e){M(e)}finally{k.T=t}},t.unstable_useCacheRefresh=function(){return k.H.useCacheRefresh()},t.use=function(e){return k.H.use(e)},t.useActionState=function(e,t,n){return k.H.useActionState(e,t,n)},t.useCallback=function(e,t){return k.H.useCallback(e,t)},t.useContext=function(e){return k.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return k.H.useDeferredValue(e,t)},t.useEffect=function(e,t){return k.H.useEffect(e,t)},t.useId=function(){return k.H.useId()},t.useImperativeHandle=function(e,t,n){return k.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return k.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return k.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return k.H.useMemo(e,t)},t.useOptimistic=function(e,t){return k.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return k.H.useReducer(e,t,n)},t.useRef=function(e){return k.H.useRef(e)},t.useState=function(e){return k.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return k.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return k.H.useTransition()},t.version="19.0.0"},961:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},982:(e,t,n)=>{e.exports=n(477)}},i={};function a(e){var t=i[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var n=i[e]={id:e,exports:{}};try{var r={id:e,module:n,factory:o[e],require:a};a.i.forEach((function(e){e(r)})),n=r.module,r.factory.call(n.exports,n,n.exports,r.require)}catch(e){throw n.error=e,e}return n.exports}a.m=o,a.c=i,a.i=[],a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);a.r(o);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,a.d(o,i),o},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.hu=e=>e+"."+a.h()+".hot-update.js",a.hmrF=()=>"client-bundle."+a.h()+".hot-update.json",a.h=()=>"1a43c645ad489ab3d44d",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},r="soundsync:",a.l=(e,t,o,i)=>{if(n[e])n[e].push(t);else{var l,s;if(void 0!==o)for(var u=document.getElementsByTagName("script"),c=0;c<u.length;c++){var d=u[c];if(d.getAttribute("src")==e||d.getAttribute("data-webpack")==r+o){l=d;break}}l||(s=!0,(l=document.createElement("script")).charset="utf-8",l.timeout=120,a.nc&&l.setAttribute("nonce",a.nc),l.setAttribute("data-webpack",r+o),l.src=e),n[e]=[t];var f=(t,r)=>{l.onerror=l.onload=null,clearTimeout(p);var o=n[e];if(delete n[e],l.parentNode&&l.parentNode.removeChild(l),o&&o.forEach((e=>e(r))),t)return t(r)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=f.bind(null,l.onerror),l.onload=f.bind(null,l.onload),s&&document.head.appendChild(l)}},a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e,t,n,r={},o=a.c,i=[],l=[],s="idle",u=0,c=[];function d(e){s=e;for(var t=[],n=0;n<l.length;n++)t[n]=l[n].call(null,e);return Promise.all(t).then((function(){}))}function f(){0==--u&&d("ready").then((function(){if(0===u){var e=c;c=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==s)throw new Error("check() is only allowed in idle status");return d("check").then(a.hmrM).then((function(n){return n?d("prepare").then((function(){var r=[];return t=[],Promise.all(Object.keys(a.hmrC).reduce((function(e,o){return a.hmrC[o](n.c,n.r,n.m,e,t,r),e}),[])).then((function(){return t=function(){return e?m(e):d("ready").then((function(){return r}))},0===u?t():new Promise((function(e){c.push((function(){e(t())}))}));var t}))})):d(g()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==s?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+s+")")})):m(e)}function m(e){e=e||{},g();var r=t.map((function(t){return t(e)}));t=void 0;var o=r.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return d("abort").then((function(){throw o[0]}));var i=d("dispose");r.forEach((function(e){e.dispose&&e.dispose()}));var a,l=d("apply"),s=function(e){a||(a=e)},u=[];return r.forEach((function(e){if(e.apply){var t=e.apply(s);if(t)for(var n=0;n<t.length;n++)u.push(t[n])}})),Promise.all([i,l]).then((function(){return a?d("fail").then((function(){throw a})):n?m(e).then((function(e){return u.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):d("idle").then((function(){return u}))}))}function g(){if(n)return t||(t=[]),Object.keys(a.hmrI).forEach((function(e){n.forEach((function(n){a.hmrI[e](n,t)}))})),n=void 0,!0}a.hmrD=r,a.i.push((function(c){var m,g,y,v,b=c.module,w=function(t,n){var r=o[n];if(!r)return t;var a=function(a){if(r.hot.active){if(o[a]){var l=o[a].parents;-1===l.indexOf(n)&&l.push(n)}else i=[n],e=a;-1===r.children.indexOf(a)&&r.children.push(a)}else console.warn("[HMR] unexpected require("+a+") from disposed module "+n),i=[];return t(a)},l=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(n){t[e]=n}}};for(var c in t)Object.prototype.hasOwnProperty.call(t,c)&&"e"!==c&&Object.defineProperty(a,c,l(c));return a.e=function(e,n){return function(e){switch(s){case"ready":d("prepare");case"prepare":return u++,e.then(f,f),e;default:return e}}(t.e(e,n))},a}(c.require,c.id);b.hot=(m=c.id,g=b,v={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==m,_requireSelf:function(){i=g.parents.slice(),e=y?void 0:m,a(m)},active:!0,accept:function(e,t,n){if(void 0===e)v._selfAccepted=!0;else if("function"==typeof e)v._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)v._acceptedDependencies[e[r]]=t||function(){},v._acceptedErrorHandlers[e[r]]=n;else v._acceptedDependencies[e]=t||function(){},v._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)v._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)v._declinedDependencies[e[t]]=!0;else v._declinedDependencies[e]=!0},dispose:function(e){v._disposeHandlers.push(e)},addDisposeHandler:function(e){v._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=v._disposeHandlers.indexOf(e);t>=0&&v._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,s){case"idle":t=[],Object.keys(a.hmrI).forEach((function(e){a.hmrI[e](m,t)})),d("ready");break;case"ready":Object.keys(a.hmrI).forEach((function(e){a.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(m)}},check:p,apply:h,status:function(e){if(!e)return s;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:r[m]},e=void 0,v),b.parents=i,b.children=[],i=[],c.require=w})),a.hmrC={},a.hmrI={}})(),(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),(()=>{var e,t,n,r,o,i=a.hmrS_jsonp=a.hmrS_jsonp||{275:0},l={};function s(t,n){return e=n,new Promise(((e,n)=>{l[t]=e;var r=a.p+a.hu(t),o=new Error;a.l(r,(e=>{if(l[t]){l[t]=void 0;var r=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;o.message="Loading hot update chunk "+t+" failed.\n("+r+": "+i+")",o.name="ChunkLoadError",o.type=r,o.request=i,n(o)}}))}))}function u(e){function l(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),i=o.id,l=o.chain,u=a.c[i];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:l,moduleId:i};if(u.hot._main)return{type:"unaccepted",chain:l,moduleId:i};for(var c=0;c<u.parents.length;c++){var d=u.parents[c],f=a.c[d];if(f){if(f.hot._declinedDependencies[i])return{type:"declined",chain:l.concat([d]),moduleId:i,parentId:d};-1===t.indexOf(d)&&(f.hot._acceptedDependencies[i]?(n[d]||(n[d]=[]),s(n[d],[i])):(delete n[d],t.push(d),r.push({chain:l.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}a.f&&delete a.f.jsonpHmr,t=void 0;var u={},c=[],d={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in n)if(a.o(n,p)){var h=n[p],m=h?l(p):{type:"disposed",moduleId:p},g=!1,y=!1,v=!1,b="";switch(m.chain&&(b="\nUpdate propagation: "+m.chain.join(" -> ")),m.type){case"self-declined":e.onDeclined&&e.onDeclined(m),e.ignoreDeclined||(g=new Error("Aborted because of self decline: "+m.moduleId+b));break;case"declined":e.onDeclined&&e.onDeclined(m),e.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+m.moduleId+" in "+m.parentId+b));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(m),e.ignoreUnaccepted||(g=new Error("Aborted because "+p+" is not accepted"+b));break;case"accepted":e.onAccepted&&e.onAccepted(m),y=!0;break;case"disposed":e.onDisposed&&e.onDisposed(m),v=!0;break;default:throw new Error("Unexception type "+m.type)}if(g)return{error:g};if(y)for(p in d[p]=h,s(c,m.outdatedModules),m.outdatedDependencies)a.o(m.outdatedDependencies,p)&&(u[p]||(u[p]=[]),s(u[p],m.outdatedDependencies[p]));v&&(s(c,[m.moduleId]),d[p]=f)}n=void 0;for(var w,S=[],k=0;k<c.length;k++){var A=c[k],C=a.c[A];C&&(C.hot._selfAccepted||C.hot._main)&&d[A]!==f&&!C.hot._selfInvalidated&&S.push({module:A,require:C.hot._requireSelf,errorHandler:C.hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete i[e]})),r=void 0;for(var t,n=c.slice();n.length>0;){var o=n.pop(),l=a.c[o];if(l){var s={},d=l.hot._disposeHandlers;for(k=0;k<d.length;k++)d[k].call(null,s);for(a.hmrD[o]=s,l.hot.active=!1,delete a.c[o],delete u[o],k=0;k<l.children.length;k++){var f=a.c[l.children[k]];f&&(e=f.parents.indexOf(o))>=0&&f.parents.splice(e,1)}}}for(var p in u)if(a.o(u,p)&&(l=a.c[p]))for(w=u[p],k=0;k<w.length;k++)t=w[k],(e=l.children.indexOf(t))>=0&&l.children.splice(e,1)},apply:function(t){for(var n in d)a.o(d,n)&&(a.m[n]=d[n]);for(var r=0;r<o.length;r++)o[r](a);for(var i in u)if(a.o(u,i)){var l=a.c[i];if(l){w=u[i];for(var s=[],f=[],p=[],h=0;h<w.length;h++){var m=w[h],g=l.hot._acceptedDependencies[m],y=l.hot._acceptedErrorHandlers[m];if(g){if(-1!==s.indexOf(g))continue;s.push(g),f.push(y),p.push(m)}}for(var v=0;v<s.length;v++)try{s[v].call(null,w)}catch(n){if("function"==typeof f[v])try{f[v](n,{moduleId:i,dependencyId:p[v]})}catch(r){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:p[v],error:r,originalError:n}),e.ignoreErrored||(t(r),t(n))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:p[v],error:n}),e.ignoreErrored||t(n)}}}for(var b=0;b<S.length;b++){var k=S[b],A=k.module;try{k.require(A)}catch(n){if("function"==typeof k.errorHandler)try{k.errorHandler(n,{moduleId:A,module:a.c[A]})}catch(r){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:A,error:r,originalError:n}),e.ignoreErrored||(t(r),t(n))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:A,error:n}),e.ignoreErrored||t(n)}}return c}}}self.webpackHotUpdatesoundsync=(t,r,i)=>{for(var s in r)a.o(r,s)&&(n[s]=r[s],e&&e.push(s));i&&o.push(i),l[t]&&(l[t](),l[t]=void 0)},a.hmrI.jsonp=function(e,t){n||(n={},o=[],r=[],t.push(u)),a.o(n,e)||(n[e]=a.m[e])},a.hmrC.jsonp=function(e,l,c,d,f,p){f.push(u),t={},r=l,n=c.reduce((function(e,t){return e[t]=!1,e}),{}),o=[],e.forEach((function(e){a.o(i,e)&&void 0!==i[e]?(d.push(s(e,p)),t[e]=!0):t[e]=!1})),a.f&&(a.f.jsonpHmr=function(e,n){t&&a.o(t,e)&&!t[e]&&(n.push(s(e)),t[e]=!0)})},a.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(a.p+a.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),a.nc=void 0,a(39)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,